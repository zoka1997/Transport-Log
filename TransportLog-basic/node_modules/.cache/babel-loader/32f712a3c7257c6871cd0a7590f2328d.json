{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/data_grid/ui.data_grid.grouping.expanded.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { toComparable } from \"../../core/utils/data\";\nimport { keysEqual } from \"../../data/utils\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport storeHelper from \"../../data/store_helper\";\nimport dataGridCore from \"./ui.data_grid.core\";\nimport { GroupingHelper as GroupingHelperCore, createOffsetFilter } from \"./ui.data_grid.grouping.core\";\nimport { createGroupFilter } from \"./ui.data_grid.utils\";\nimport dataQuery from \"../../data/query\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\n\nvar loadTotalCount = function (dataSource, options) {\n  var d = new Deferred();\n  var loadOptions = extend({\n    skip: 0,\n    take: 1,\n    requireTotalCount: true\n  }, options);\n  dataSource.load(loadOptions).done(function (data, extra) {\n    d.resolve(extra && extra.totalCount);\n  }).fail(d.reject.bind(d));\n  return d;\n};\n\nexport var GroupingHelper = GroupingHelperCore.inherit(function () {\n  var foreachCollapsedGroups = function (that, callback, updateOffsets) {\n    return that.foreachGroups(function (groupInfo) {\n      if (!groupInfo.isExpanded) {\n        return callback(groupInfo);\n      }\n    }, false, false, updateOffsets, true);\n  };\n\n  var correctSkipLoadOption = function (that, skip) {\n    var skipCorrection = 0;\n    var resultSkip = skip || 0;\n\n    if (skip) {\n      foreachCollapsedGroups(that, function (groupInfo) {\n        if (groupInfo.offset - skipCorrection >= skip) {\n          return false;\n        }\n\n        skipCorrection += groupInfo.count - 1;\n      });\n      resultSkip += skipCorrection;\n    }\n\n    return resultSkip;\n  };\n\n  var pathEquals = function (path1, path2) {\n    if (path1.length !== path2.length) {\n      return false;\n    }\n\n    for (var i = 0; i < path1.length; i++) {\n      if (!keysEqual(null, path1[i], path2[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  var updateGroupOffsets = function updateGroupOffsets(that, items, path, offset, additionalGroupInfo) {\n    if (!items) {\n      return;\n    }\n\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n\n      if (\"key\" in item && void 0 !== item.items) {\n        path.push(item.key);\n\n        if (additionalGroupInfo && pathEquals(additionalGroupInfo.path, path) && !item.isContinuation) {\n          additionalGroupInfo.offset = offset;\n        }\n\n        var groupInfo = that.findGroupInfo(path);\n\n        if (groupInfo && !item.isContinuation) {\n          groupInfo.offset = offset;\n        }\n\n        if (groupInfo && !groupInfo.isExpanded) {\n          offset += groupInfo.count;\n        } else {\n          offset = updateGroupOffsets(that, item.items, path, offset, additionalGroupInfo);\n        }\n\n        path.pop();\n      } else {\n        offset++;\n      }\n    }\n\n    return offset;\n  };\n\n  var getGroupCount = function getGroupCount(item, groupCount) {\n    var count = item.count || item.items.length;\n\n    if (!item.count && groupCount > 1) {\n      count = 0;\n\n      for (var i = 0; i < item.items.length; i++) {\n        count += getGroupCount(item.items[i], groupCount - 1);\n      }\n    }\n\n    return count;\n  };\n\n  return {\n    handleDataLoading: function (options) {\n      var storeLoadOptions = options.storeLoadOptions;\n      var collapsedGroups = [];\n      var collapsedItemsCount = 0;\n      var skipFirstItem = false;\n      var take;\n      var group = options.loadOptions.group;\n      var skipCorrection = 0;\n      !function (storeLoadOptions, loadOptions) {\n        if (loadOptions.group) {\n          var groups = dataGridCore.normalizeSortingInfo(loadOptions.group);\n          var sorts = dataGridCore.normalizeSortingInfo(storeLoadOptions.sort);\n          storeLoadOptions.sort = storeHelper.arrangeSortingInfo(groups, sorts);\n          delete loadOptions.group;\n        }\n      }(storeLoadOptions, options.loadOptions);\n      options.group = options.group || group;\n\n      if (options.isCustomLoading) {\n        return;\n      }\n\n      var loadOptions = extend({}, storeLoadOptions);\n      loadOptions.skip = correctSkipLoadOption(this, storeLoadOptions.skip);\n\n      if (loadOptions.skip && loadOptions.take && group) {\n        loadOptions.skip--;\n        loadOptions.take++;\n        skipFirstItem = true;\n      }\n\n      if (loadOptions.take && group) {\n        take = loadOptions.take;\n        loadOptions.take++;\n      }\n\n      foreachCollapsedGroups(this, function (groupInfo) {\n        if (groupInfo.offset >= loadOptions.skip + loadOptions.take + skipCorrection) {\n          return false;\n        } else if (groupInfo.offset >= loadOptions.skip + skipCorrection && groupInfo.count) {\n          skipCorrection += groupInfo.count - 1;\n          collapsedGroups.push(groupInfo);\n          collapsedItemsCount += groupInfo.count;\n        }\n      });\n      each(collapsedGroups, function () {\n        loadOptions.filter = function (path, storeLoadOptions, group) {\n          var groups = dataGridCore.normalizeSortingInfo(group || storeLoadOptions.group);\n          var filter = [];\n\n          for (var i = 0; i < path.length; i++) {\n            var filterElement = [];\n\n            for (var j = 0; j <= i; j++) {\n              filterElement.push([groups[j].selector, i === j ? \"<>\" : \"=\", path[j]]);\n            }\n\n            filter.push(dataGridCore.combineFilters(filterElement));\n          }\n\n          filter = dataGridCore.combineFilters(filter, \"or\");\n          return dataGridCore.combineFilters([filter, storeLoadOptions.filter]);\n        }(this.path, loadOptions, group);\n      });\n      options.storeLoadOptions = loadOptions;\n      options.collapsedGroups = collapsedGroups;\n      options.collapsedItemsCount = collapsedItemsCount;\n      options.skip = loadOptions.skip || 0;\n      options.skipFirstItem = skipFirstItem;\n      options.take = take;\n    },\n    handleDataLoaded: function (options, callBase) {\n      var collapsedGroups = options.collapsedGroups;\n      var groups = dataGridCore.normalizeSortingInfo(options.group);\n      var groupCount = groups.length;\n\n      function appendCollapsedPath(data, path, groups, collapsedGroup, offset) {\n        if (!data || !path.length || !groups.length) {\n          return;\n        }\n\n        var keyValue;\n        var i;\n        var pathValue = toComparable(path[0], true);\n\n        for (i = 0; i < data.length; i++) {\n          keyValue = toComparable(data[i].key, true);\n\n          if (offset >= collapsedGroup.offset || pathValue === keyValue) {\n            break;\n          } else {\n            offset += getGroupCount(data[i], groups.length);\n          }\n        }\n\n        if (!data.length || pathValue !== keyValue) {\n          data.splice(i, 0, {\n            key: path[0],\n            items: [],\n            count: 1 === path.length ? collapsedGroup.count : void 0\n          });\n        }\n\n        appendCollapsedPath(data[i].items, path.slice(1), groups.slice(1), collapsedGroup, offset);\n      }\n\n      if (options.collapsedItemsCount && options.extra && options.extra.totalCount >= 0) {\n        if (!options.extra._totalCountWasIncreasedByCollapsedItems) {\n          options.extra.totalCount += options.collapsedItemsCount;\n          options.extra._totalCountWasIncreasedByCollapsedItems = true;\n        }\n      }\n\n      callBase(options);\n\n      if (groupCount) {\n        var data = options.data;\n        var query = dataQuery(data);\n        storeHelper.multiLevelGroup(query, groups).enumerate().done(function (groupedData) {\n          data = groupedData;\n        });\n\n        if (collapsedGroups) {\n          for (var pathIndex = 0; pathIndex < collapsedGroups.length; pathIndex++) {\n            appendCollapsedPath(data, collapsedGroups[pathIndex].path, groups, collapsedGroups[pathIndex], options.skip);\n          }\n        }\n\n        if (!options.isCustomLoading) {\n          !function processGroupItems(that, items, path, offset, skipFirstItem, take) {\n            var removeLastItemsCount = 0;\n            var needRemoveFirstItem = false;\n\n            for (var i = 0; i < items.length; i++) {\n              var item = items[i];\n\n              if (void 0 !== item.items) {\n                path.push(item.key);\n                var groupInfo = that.findGroupInfo(path);\n\n                if (groupInfo && !groupInfo.isExpanded) {\n                  item.collapsedItems = item.items;\n                  item.items = null;\n                  offset += groupInfo.count;\n                  take--;\n\n                  if (take < 0) {\n                    removeLastItemsCount++;\n                  }\n\n                  if (skipFirstItem) {\n                    needRemoveFirstItem = true;\n                  }\n                } else if (item.items) {\n                  var offsetInfo = processGroupItems(that, item.items, path, offset, skipFirstItem, take);\n\n                  if (skipFirstItem) {\n                    if (offsetInfo.offset - offset > 1) {\n                      item.isContinuation = true;\n                    } else {\n                      needRemoveFirstItem = true;\n                    }\n                  }\n\n                  offset = offsetInfo.offset;\n                  take = offsetInfo.take;\n\n                  if (take < 0) {\n                    if (item.items.length) {\n                      item.isContinuationOnNextPage = true;\n                    } else {\n                      removeLastItemsCount++;\n                    }\n                  }\n                }\n\n                path.pop();\n              } else {\n                if (skipFirstItem) {\n                  needRemoveFirstItem = true;\n                }\n\n                offset++;\n                take--;\n\n                if (take < 0) {\n                  removeLastItemsCount++;\n                }\n              }\n\n              skipFirstItem = false;\n            }\n\n            if (needRemoveFirstItem) {\n              items.splice(0, 1);\n            }\n\n            if (removeLastItemsCount) {\n              items.splice(-removeLastItemsCount, removeLastItemsCount);\n            }\n\n            return {\n              offset: offset,\n              take: take\n            };\n          }(this, data, [], options.skip, options.skipFirstItem, options.take);\n        }\n\n        options.data = data;\n      }\n    },\n    isGroupItemCountable: function (item) {\n      return null === item.items;\n    },\n    updateTotalItemsCount: function () {\n      var itemsCountCorrection = 0;\n      foreachCollapsedGroups(this, function (groupInfo) {\n        if (groupInfo.count) {\n          itemsCountCorrection -= groupInfo.count - 1;\n        }\n      });\n      this.callBase(itemsCountCorrection);\n    },\n    changeRowExpand: function (path) {\n      var that = this;\n      var dataSource = that._dataSource;\n      var beginPageIndex = dataSource.beginPageIndex ? dataSource.beginPageIndex() : dataSource.pageIndex();\n      var dataSourceItems = dataSource.items();\n      var offset = correctSkipLoadOption(that, beginPageIndex * dataSource.pageSize());\n      var groupInfo = that.findGroupInfo(path);\n      var groupCountQuery;\n\n      if (groupInfo && !groupInfo.isExpanded) {\n        groupCountQuery = new Deferred().resolve(groupInfo.count);\n      } else {\n        groupCountQuery = loadTotalCount(dataSource, {\n          filter: createGroupFilter(path, {\n            filter: dataSource.filter(),\n            group: dataSource.group()\n          })\n        });\n      }\n\n      return when(groupCountQuery).done(function (count) {\n        count = parseInt(count.length ? count[0] : count);\n\n        if (groupInfo) {\n          updateGroupOffsets(that, dataSourceItems, [], offset);\n          groupInfo.isExpanded = !groupInfo.isExpanded;\n          groupInfo.count = count;\n        } else {\n          groupInfo = {\n            offset: -1,\n            count: count,\n            path: path,\n            isExpanded: false\n          };\n          updateGroupOffsets(that, dataSourceItems, [], offset, groupInfo);\n\n          if (groupInfo.offset >= 0) {\n            that.addGroupInfo(groupInfo);\n          }\n        }\n\n        that.updateTotalItemsCount();\n      }).fail(function () {\n        dataSource._eventsStrategy.fireEvent(\"loadError\", arguments);\n      });\n    },\n    allowCollapseAll: function () {\n      return false;\n    },\n    refresh: function (options, operationTypes) {\n      var that = this;\n      var storeLoadOptions = options.storeLoadOptions;\n      var dataSource = that._dataSource;\n      this.callBase.apply(this, arguments);\n\n      if (operationTypes.reload) {\n        return foreachCollapsedGroups(that, function (groupInfo) {\n          var groupCountQuery = loadTotalCount(dataSource, {\n            filter: createGroupFilter(groupInfo.path, storeLoadOptions)\n          });\n          var groupOffsetQuery = loadTotalCount(dataSource, {\n            filter: createOffsetFilter(groupInfo.path, storeLoadOptions)\n          });\n          return when(groupOffsetQuery, groupCountQuery).done(function (offset, count) {\n            offset = parseInt(offset.length ? offset[0] : offset);\n            count = parseInt(count.length ? count[0] : count);\n            groupInfo.offset = offset;\n\n            if (groupInfo.count !== count) {\n              groupInfo.count = count;\n              that.updateTotalItemsCount();\n            }\n          });\n        }, true);\n      }\n    }\n  };\n}());","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.expanded.js"],"names":["toComparable","keysEqual","each","extend","storeHelper","dataGridCore","GroupingHelper","GroupingHelperCore","createOffsetFilter","createGroupFilter","dataQuery","when","Deferred","loadTotalCount","dataSource","options","d","loadOptions","skip","take","requireTotalCount","load","done","data","extra","resolve","totalCount","fail","reject","bind","inherit","foreachCollapsedGroups","that","callback","updateOffsets","foreachGroups","groupInfo","isExpanded","correctSkipLoadOption","skipCorrection","resultSkip","offset","count","pathEquals","path1","path2","length","i","updateGroupOffsets","items","path","additionalGroupInfo","item","push","key","isContinuation","findGroupInfo","pop","getGroupCount","groupCount","handleDataLoading","storeLoadOptions","collapsedGroups","collapsedItemsCount","skipFirstItem","group","groups","normalizeSortingInfo","sorts","sort","arrangeSortingInfo","isCustomLoading","filter","filterElement","j","selector","combineFilters","handleDataLoaded","callBase","appendCollapsedPath","collapsedGroup","keyValue","pathValue","splice","slice","_totalCountWasIncreasedByCollapsedItems","query","multiLevelGroup","enumerate","groupedData","pathIndex","processGroupItems","removeLastItemsCount","needRemoveFirstItem","collapsedItems","offsetInfo","isContinuationOnNextPage","isGroupItemCountable","updateTotalItemsCount","itemsCountCorrection","changeRowExpand","_dataSource","beginPageIndex","pageIndex","dataSourceItems","pageSize","groupCountQuery","parseInt","addGroupInfo","_eventsStrategy","fireEvent","arguments","allowCollapseAll","refresh","operationTypes","apply","reload","groupOffsetQuery"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/data_grid/ui.data_grid.grouping.expanded.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    toComparable\r\n} from \"../../core/utils/data\";\r\nimport {\r\n    keysEqual\r\n} from \"../../data/utils\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport storeHelper from \"../../data/store_helper\";\r\nimport dataGridCore from \"./ui.data_grid.core\";\r\nimport {\r\n    GroupingHelper as GroupingHelperCore,\r\n    createOffsetFilter\r\n} from \"./ui.data_grid.grouping.core\";\r\nimport {\r\n    createGroupFilter\r\n} from \"./ui.data_grid.utils\";\r\nimport dataQuery from \"../../data/query\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nvar loadTotalCount = function(dataSource, options) {\r\n    var d = new Deferred;\r\n    var loadOptions = extend({\r\n        skip: 0,\r\n        take: 1,\r\n        requireTotalCount: true\r\n    }, options);\r\n    dataSource.load(loadOptions).done((function(data, extra) {\r\n        d.resolve(extra && extra.totalCount)\r\n    })).fail(d.reject.bind(d));\r\n    return d\r\n};\r\nexport var GroupingHelper = GroupingHelperCore.inherit(function() {\r\n    var foreachCollapsedGroups = function(that, callback, updateOffsets) {\r\n        return that.foreachGroups((function(groupInfo) {\r\n            if (!groupInfo.isExpanded) {\r\n                return callback(groupInfo)\r\n            }\r\n        }), false, false, updateOffsets, true)\r\n    };\r\n    var correctSkipLoadOption = function(that, skip) {\r\n        var skipCorrection = 0;\r\n        var resultSkip = skip || 0;\r\n        if (skip) {\r\n            foreachCollapsedGroups(that, (function(groupInfo) {\r\n                if (groupInfo.offset - skipCorrection >= skip) {\r\n                    return false\r\n                }\r\n                skipCorrection += groupInfo.count - 1\r\n            }));\r\n            resultSkip += skipCorrection\r\n        }\r\n        return resultSkip\r\n    };\r\n    var pathEquals = function(path1, path2) {\r\n        if (path1.length !== path2.length) {\r\n            return false\r\n        }\r\n        for (var i = 0; i < path1.length; i++) {\r\n            if (!keysEqual(null, path1[i], path2[i])) {\r\n                return false\r\n            }\r\n        }\r\n        return true\r\n    };\r\n    var updateGroupOffsets = function updateGroupOffsets(that, items, path, offset, additionalGroupInfo) {\r\n        if (!items) {\r\n            return\r\n        }\r\n        for (var i = 0; i < items.length; i++) {\r\n            var item = items[i];\r\n            if (\"key\" in item && void 0 !== item.items) {\r\n                path.push(item.key);\r\n                if (additionalGroupInfo && pathEquals(additionalGroupInfo.path, path) && !item.isContinuation) {\r\n                    additionalGroupInfo.offset = offset\r\n                }\r\n                var groupInfo = that.findGroupInfo(path);\r\n                if (groupInfo && !item.isContinuation) {\r\n                    groupInfo.offset = offset\r\n                }\r\n                if (groupInfo && !groupInfo.isExpanded) {\r\n                    offset += groupInfo.count\r\n                } else {\r\n                    offset = updateGroupOffsets(that, item.items, path, offset, additionalGroupInfo)\r\n                }\r\n                path.pop()\r\n            } else {\r\n                offset++\r\n            }\r\n        }\r\n        return offset\r\n    };\r\n    var getGroupCount = function getGroupCount(item, groupCount) {\r\n        var count = item.count || item.items.length;\r\n        if (!item.count && groupCount > 1) {\r\n            count = 0;\r\n            for (var i = 0; i < item.items.length; i++) {\r\n                count += getGroupCount(item.items[i], groupCount - 1)\r\n            }\r\n        }\r\n        return count\r\n    };\r\n    return {\r\n        handleDataLoading: function(options) {\r\n            var storeLoadOptions = options.storeLoadOptions;\r\n            var collapsedGroups = [];\r\n            var collapsedItemsCount = 0;\r\n            var skipFirstItem = false;\r\n            var take;\r\n            var group = options.loadOptions.group;\r\n            var skipCorrection = 0;\r\n            ! function(storeLoadOptions, loadOptions) {\r\n                if (loadOptions.group) {\r\n                    var groups = dataGridCore.normalizeSortingInfo(loadOptions.group);\r\n                    var sorts = dataGridCore.normalizeSortingInfo(storeLoadOptions.sort);\r\n                    storeLoadOptions.sort = storeHelper.arrangeSortingInfo(groups, sorts);\r\n                    delete loadOptions.group\r\n                }\r\n            }(storeLoadOptions, options.loadOptions);\r\n            options.group = options.group || group;\r\n            if (options.isCustomLoading) {\r\n                return\r\n            }\r\n            var loadOptions = extend({}, storeLoadOptions);\r\n            loadOptions.skip = correctSkipLoadOption(this, storeLoadOptions.skip);\r\n            if (loadOptions.skip && loadOptions.take && group) {\r\n                loadOptions.skip--;\r\n                loadOptions.take++;\r\n                skipFirstItem = true\r\n            }\r\n            if (loadOptions.take && group) {\r\n                take = loadOptions.take;\r\n                loadOptions.take++\r\n            }\r\n            foreachCollapsedGroups(this, (function(groupInfo) {\r\n                if (groupInfo.offset >= loadOptions.skip + loadOptions.take + skipCorrection) {\r\n                    return false\r\n                } else if (groupInfo.offset >= loadOptions.skip + skipCorrection && groupInfo.count) {\r\n                    skipCorrection += groupInfo.count - 1;\r\n                    collapsedGroups.push(groupInfo);\r\n                    collapsedItemsCount += groupInfo.count\r\n                }\r\n            }));\r\n            each(collapsedGroups, (function() {\r\n                loadOptions.filter = function(path, storeLoadOptions, group) {\r\n                    var groups = dataGridCore.normalizeSortingInfo(group || storeLoadOptions.group);\r\n                    var filter = [];\r\n                    for (var i = 0; i < path.length; i++) {\r\n                        var filterElement = [];\r\n                        for (var j = 0; j <= i; j++) {\r\n                            filterElement.push([groups[j].selector, i === j ? \"<>\" : \"=\", path[j]])\r\n                        }\r\n                        filter.push(dataGridCore.combineFilters(filterElement))\r\n                    }\r\n                    filter = dataGridCore.combineFilters(filter, \"or\");\r\n                    return dataGridCore.combineFilters([filter, storeLoadOptions.filter])\r\n                }(this.path, loadOptions, group)\r\n            }));\r\n            options.storeLoadOptions = loadOptions;\r\n            options.collapsedGroups = collapsedGroups;\r\n            options.collapsedItemsCount = collapsedItemsCount;\r\n            options.skip = loadOptions.skip || 0;\r\n            options.skipFirstItem = skipFirstItem;\r\n            options.take = take\r\n        },\r\n        handleDataLoaded: function(options, callBase) {\r\n            var collapsedGroups = options.collapsedGroups;\r\n            var groups = dataGridCore.normalizeSortingInfo(options.group);\r\n            var groupCount = groups.length;\r\n\r\n            function appendCollapsedPath(data, path, groups, collapsedGroup, offset) {\r\n                if (!data || !path.length || !groups.length) {\r\n                    return\r\n                }\r\n                var keyValue;\r\n                var i;\r\n                var pathValue = toComparable(path[0], true);\r\n                for (i = 0; i < data.length; i++) {\r\n                    keyValue = toComparable(data[i].key, true);\r\n                    if (offset >= collapsedGroup.offset || pathValue === keyValue) {\r\n                        break\r\n                    } else {\r\n                        offset += getGroupCount(data[i], groups.length)\r\n                    }\r\n                }\r\n                if (!data.length || pathValue !== keyValue) {\r\n                    data.splice(i, 0, {\r\n                        key: path[0],\r\n                        items: [],\r\n                        count: 1 === path.length ? collapsedGroup.count : void 0\r\n                    })\r\n                }\r\n                appendCollapsedPath(data[i].items, path.slice(1), groups.slice(1), collapsedGroup, offset)\r\n            }\r\n            if (options.collapsedItemsCount && options.extra && options.extra.totalCount >= 0) {\r\n                if (!options.extra._totalCountWasIncreasedByCollapsedItems) {\r\n                    options.extra.totalCount += options.collapsedItemsCount;\r\n                    options.extra._totalCountWasIncreasedByCollapsedItems = true\r\n                }\r\n            }\r\n            callBase(options);\r\n            if (groupCount) {\r\n                var data = options.data;\r\n                var query = dataQuery(data);\r\n                storeHelper.multiLevelGroup(query, groups).enumerate().done((function(groupedData) {\r\n                    data = groupedData\r\n                }));\r\n                if (collapsedGroups) {\r\n                    for (var pathIndex = 0; pathIndex < collapsedGroups.length; pathIndex++) {\r\n                        appendCollapsedPath(data, collapsedGroups[pathIndex].path, groups, collapsedGroups[pathIndex], options.skip)\r\n                    }\r\n                }\r\n                if (!options.isCustomLoading) {\r\n                    ! function processGroupItems(that, items, path, offset, skipFirstItem, take) {\r\n                        var removeLastItemsCount = 0;\r\n                        var needRemoveFirstItem = false;\r\n                        for (var i = 0; i < items.length; i++) {\r\n                            var item = items[i];\r\n                            if (void 0 !== item.items) {\r\n                                path.push(item.key);\r\n                                var groupInfo = that.findGroupInfo(path);\r\n                                if (groupInfo && !groupInfo.isExpanded) {\r\n                                    item.collapsedItems = item.items;\r\n                                    item.items = null;\r\n                                    offset += groupInfo.count;\r\n                                    take--;\r\n                                    if (take < 0) {\r\n                                        removeLastItemsCount++\r\n                                    }\r\n                                    if (skipFirstItem) {\r\n                                        needRemoveFirstItem = true\r\n                                    }\r\n                                } else if (item.items) {\r\n                                    var offsetInfo = processGroupItems(that, item.items, path, offset, skipFirstItem, take);\r\n                                    if (skipFirstItem) {\r\n                                        if (offsetInfo.offset - offset > 1) {\r\n                                            item.isContinuation = true\r\n                                        } else {\r\n                                            needRemoveFirstItem = true\r\n                                        }\r\n                                    }\r\n                                    offset = offsetInfo.offset;\r\n                                    take = offsetInfo.take;\r\n                                    if (take < 0) {\r\n                                        if (item.items.length) {\r\n                                            item.isContinuationOnNextPage = true\r\n                                        } else {\r\n                                            removeLastItemsCount++\r\n                                        }\r\n                                    }\r\n                                }\r\n                                path.pop()\r\n                            } else {\r\n                                if (skipFirstItem) {\r\n                                    needRemoveFirstItem = true\r\n                                }\r\n                                offset++;\r\n                                take--;\r\n                                if (take < 0) {\r\n                                    removeLastItemsCount++\r\n                                }\r\n                            }\r\n                            skipFirstItem = false\r\n                        }\r\n                        if (needRemoveFirstItem) {\r\n                            items.splice(0, 1)\r\n                        }\r\n                        if (removeLastItemsCount) {\r\n                            items.splice(-removeLastItemsCount, removeLastItemsCount)\r\n                        }\r\n                        return {\r\n                            offset: offset,\r\n                            take: take\r\n                        }\r\n                    }(this, data, [], options.skip, options.skipFirstItem, options.take)\r\n                }\r\n                options.data = data\r\n            }\r\n        },\r\n        isGroupItemCountable: function(item) {\r\n            return null === item.items\r\n        },\r\n        updateTotalItemsCount: function() {\r\n            var itemsCountCorrection = 0;\r\n            foreachCollapsedGroups(this, (function(groupInfo) {\r\n                if (groupInfo.count) {\r\n                    itemsCountCorrection -= groupInfo.count - 1\r\n                }\r\n            }));\r\n            this.callBase(itemsCountCorrection)\r\n        },\r\n        changeRowExpand: function(path) {\r\n            var that = this;\r\n            var dataSource = that._dataSource;\r\n            var beginPageIndex = dataSource.beginPageIndex ? dataSource.beginPageIndex() : dataSource.pageIndex();\r\n            var dataSourceItems = dataSource.items();\r\n            var offset = correctSkipLoadOption(that, beginPageIndex * dataSource.pageSize());\r\n            var groupInfo = that.findGroupInfo(path);\r\n            var groupCountQuery;\r\n            if (groupInfo && !groupInfo.isExpanded) {\r\n                groupCountQuery = (new Deferred).resolve(groupInfo.count)\r\n            } else {\r\n                groupCountQuery = loadTotalCount(dataSource, {\r\n                    filter: createGroupFilter(path, {\r\n                        filter: dataSource.filter(),\r\n                        group: dataSource.group()\r\n                    })\r\n                })\r\n            }\r\n            return when(groupCountQuery).done((function(count) {\r\n                count = parseInt(count.length ? count[0] : count);\r\n                if (groupInfo) {\r\n                    updateGroupOffsets(that, dataSourceItems, [], offset);\r\n                    groupInfo.isExpanded = !groupInfo.isExpanded;\r\n                    groupInfo.count = count\r\n                } else {\r\n                    groupInfo = {\r\n                        offset: -1,\r\n                        count: count,\r\n                        path: path,\r\n                        isExpanded: false\r\n                    };\r\n                    updateGroupOffsets(that, dataSourceItems, [], offset, groupInfo);\r\n                    if (groupInfo.offset >= 0) {\r\n                        that.addGroupInfo(groupInfo)\r\n                    }\r\n                }\r\n                that.updateTotalItemsCount()\r\n            })).fail((function() {\r\n                dataSource._eventsStrategy.fireEvent(\"loadError\", arguments)\r\n            }))\r\n        },\r\n        allowCollapseAll: function() {\r\n            return false\r\n        },\r\n        refresh: function(options, operationTypes) {\r\n            var that = this;\r\n            var storeLoadOptions = options.storeLoadOptions;\r\n            var dataSource = that._dataSource;\r\n            this.callBase.apply(this, arguments);\r\n            if (operationTypes.reload) {\r\n                return foreachCollapsedGroups(that, (function(groupInfo) {\r\n                    var groupCountQuery = loadTotalCount(dataSource, {\r\n                        filter: createGroupFilter(groupInfo.path, storeLoadOptions)\r\n                    });\r\n                    var groupOffsetQuery = loadTotalCount(dataSource, {\r\n                        filter: createOffsetFilter(groupInfo.path, storeLoadOptions)\r\n                    });\r\n                    return when(groupOffsetQuery, groupCountQuery).done((function(offset, count) {\r\n                        offset = parseInt(offset.length ? offset[0] : offset);\r\n                        count = parseInt(count.length ? count[0] : count);\r\n                        groupInfo.offset = offset;\r\n                        if (groupInfo.count !== count) {\r\n                            groupInfo.count = count;\r\n                            that.updateTotalItemsCount()\r\n                        }\r\n                    }))\r\n                }), true)\r\n            }\r\n        }\r\n    }\r\n}());\r\n"]},"metadata":{},"sourceType":"module"}