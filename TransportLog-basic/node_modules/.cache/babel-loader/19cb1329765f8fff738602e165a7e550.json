{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/number_box/number_box.base.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { applyServerDecimalSeparator, ensureDefined } from \"../../core/utils/common\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { fitIntoRange, inRange } from \"../../core/utils/math\";\nimport { extend } from \"../../core/utils/extend\";\nimport devices from \"../../core/devices\";\nimport browser from \"../../core/utils/browser\";\nimport TextEditor from \"../text_box/ui.text_editor\";\nimport { addNamespace, getChar, isCommandKeyPressed, normalizeKeyName } from \"../../events/utils/index\";\nimport SpinButtons from \"./number_box.spins\";\nimport messageLocalization from \"../../localization/message\";\nimport { Deferred } from \"../../core/utils/deferred\";\nvar math = Math;\nvar WIDGET_CLASS = \"dx-numberbox\";\nvar FIREFOX_CONTROL_KEYS = [\"tab\", \"del\", \"backspace\", \"leftArrow\", \"rightArrow\", \"home\", \"end\", \"enter\"];\nvar FORCE_VALUECHANGE_EVENT_NAMESPACE = \"NumberBoxForceValueChange\";\nvar NumberBoxBase = TextEditor.inherit({\n  _supportedKeys: function () {\n    return extend(this.callBase(), {\n      upArrow: function (e) {\n        if (!isCommandKeyPressed(e)) {\n          e.preventDefault();\n          e.stopPropagation();\n\n          this._spinUpChangeHandler(e);\n        }\n      },\n      downArrow: function (e) {\n        if (!isCommandKeyPressed(e)) {\n          e.preventDefault();\n          e.stopPropagation();\n\n          this._spinDownChangeHandler(e);\n        }\n      },\n      enter: function () {}\n    });\n  },\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      value: 0,\n      min: void 0,\n      max: void 0,\n      step: 1,\n      showSpinButtons: false,\n      useLargeSpinButtons: true,\n      mode: \"text\",\n      invalidValueMessage: messageLocalization.format(\"dxNumberBox-invalidValueMessage\"),\n      buttons: void 0\n    });\n  },\n  _useTemplates: function () {\n    return false;\n  },\n  _getDefaultButtons: function () {\n    return this.callBase().concat([{\n      name: \"spins\",\n      Ctor: SpinButtons\n    }]);\n  },\n  _isSupportInputMode: function () {\n    var version = parseFloat(browser.version);\n    return browser.chrome && version >= 66 || browser.safari && version >= 12;\n  },\n  _defaultOptionsRules: function () {\n    return this.callBase().concat([{\n      device: function () {\n        return devices.real().generic && !devices.isSimulator();\n      },\n      options: {\n        useLargeSpinButtons: false\n      }\n    }, {\n      device: function () {\n        return \"desktop\" !== devices.real().deviceType && !this._isSupportInputMode();\n      }.bind(this),\n      options: {\n        mode: \"number\"\n      }\n    }]);\n  },\n  _initMarkup: function () {\n    this._renderSubmitElement();\n\n    this.$element().addClass(WIDGET_CLASS);\n    this.callBase();\n  },\n  _getDefaultAttributes: function () {\n    var attributes = this.callBase();\n    attributes.inputmode = \"decimal\";\n    return attributes;\n  },\n  _renderContentImpl: function () {\n    this.option(\"isValid\") && this._validateValue(this.option(\"value\"));\n    this.setAria(\"role\", \"spinbutton\");\n  },\n  _renderSubmitElement: function () {\n    this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\n\n    this._setSubmitValue(this.option(\"value\"));\n  },\n  _setSubmitValue: function (value) {\n    this._getSubmitElement().val(applyServerDecimalSeparator(value));\n  },\n  _getSubmitElement: function () {\n    return this._$submitElement;\n  },\n  _keyPressHandler: function (e) {\n    this.callBase(e);\n    var char = getChar(e);\n    var isInputCharValid = /[\\d.,eE\\-+]/.test(char);\n\n    if (!isInputCharValid) {\n      var keyName = normalizeKeyName(e);\n\n      if (isCommandKeyPressed(e) || keyName && FIREFOX_CONTROL_KEYS.includes(keyName)) {\n        return;\n      }\n\n      e.preventDefault();\n      return false;\n    }\n\n    this._keyPressed = true;\n  },\n  _onMouseWheel: function (dxEvent) {\n    dxEvent.delta > 0 ? this._spinValueChange(1, dxEvent) : this._spinValueChange(-1, dxEvent);\n  },\n  _renderValue: function () {\n    var inputValue = this._input().val();\n\n    var value = this.option(\"value\");\n\n    if (!inputValue.length || Number(inputValue) !== value) {\n      this._forceValueRender();\n\n      this._toggleEmptinessEventHandler();\n    }\n\n    var valueText = isDefined(value) ? null : messageLocalization.format(\"dxNumberBox-noDataText\");\n    this.setAria({\n      valuenow: ensureDefined(value, \"\"),\n      valuetext: valueText\n    });\n    this.option(\"text\", this._input().val());\n\n    this._updateButtons();\n\n    return new Deferred().resolve();\n  },\n  _forceValueRender: function () {\n    var value = this.option(\"value\");\n    var number = Number(value);\n    var formattedValue = isNaN(number) ? \"\" : this._applyDisplayValueFormatter(value);\n\n    this._renderDisplayText(formattedValue);\n  },\n  _applyDisplayValueFormatter: function (value) {\n    return this.option(\"displayValueFormatter\")(value);\n  },\n  _renderProps: function () {\n    this._input().prop({\n      min: this.option(\"min\"),\n      max: this.option(\"max\"),\n      step: this.option(\"step\")\n    });\n\n    this.setAria({\n      valuemin: ensureDefined(this.option(\"min\"), \"\"),\n      valuemax: ensureDefined(this.option(\"max\"), \"\")\n    });\n  },\n  _spinButtonsPointerDownHandler: function () {\n    var $input = this._input();\n\n    if (!this.option(\"useLargeSpinButtons\") && domAdapter.getActiveElement() !== $input[0]) {\n      eventsEngine.trigger($input, \"focus\");\n    }\n  },\n  _spinUpChangeHandler: function (e) {\n    if (!this.option(\"readOnly\")) {\n      this._spinValueChange(1, e.event || e);\n    }\n  },\n  _spinDownChangeHandler: function (e) {\n    if (!this.option(\"readOnly\")) {\n      this._spinValueChange(-1, e.event || e);\n    }\n  },\n  _spinValueChange: function (sign, dxEvent) {\n    var step = parseFloat(this.option(\"step\"));\n\n    if (0 === step) {\n      return;\n    }\n\n    var value = parseFloat(this._normalizeInputValue()) || 0;\n    value = this._correctRounding(value, step * sign);\n    var min = this.option(\"min\");\n    var max = this.option(\"max\");\n\n    if (isDefined(min)) {\n      value = Math.max(min, value);\n    }\n\n    if (isDefined(max)) {\n      value = Math.min(max, value);\n    }\n\n    this._saveValueChangeEvent(dxEvent);\n\n    this.option(\"value\", value);\n  },\n  _correctRounding: function (value, step) {\n    var regex = /[,.](.*)/;\n    var isFloatValue = regex.test(value);\n    var isFloatStep = regex.test(step);\n\n    if (isFloatValue || isFloatStep) {\n      var valueAccuracy = isFloatValue ? regex.exec(value)[0].length : 0;\n      var stepAccuracy = isFloatStep ? regex.exec(step)[0].length : 0;\n      var accuracy = math.max(valueAccuracy, stepAccuracy);\n      value = this._round(value + step, accuracy);\n      return value;\n    }\n\n    return value + step;\n  },\n  _round: function (value, precision) {\n    precision = precision || 0;\n    var multiplier = Math.pow(10, precision);\n    value *= multiplier;\n    value = Math.round(value) / multiplier;\n    return value;\n  },\n  _renderValueChangeEvent: function () {\n    this.callBase();\n    var forceValueChangeEvent = addNamespace(\"focusout\", FORCE_VALUECHANGE_EVENT_NAMESPACE);\n    eventsEngine.off(this.element(), forceValueChangeEvent);\n    eventsEngine.on(this.element(), forceValueChangeEvent, this._forceRefreshInputValue.bind(this));\n  },\n  _forceRefreshInputValue: function () {\n    if (\"number\" === this.option(\"mode\")) {\n      return;\n    }\n\n    var $input = this._input();\n\n    var formattedValue = this._applyDisplayValueFormatter(this.option(\"value\"));\n\n    $input.val(null);\n    $input.val(formattedValue);\n  },\n  _valueChangeEventHandler: function (e) {\n    var $input = this._input();\n\n    var inputValue = this._normalizeText();\n\n    var value = this._parseValue(inputValue);\n\n    var valueHasDigits = \".\" !== inputValue && \"-\" !== inputValue;\n\n    if (this._isValueValid() && !this._validateValue(value)) {\n      $input.val(this._applyDisplayValueFormatter(value));\n      return;\n    }\n\n    if (valueHasDigits) {\n      this.callBase(e, isNaN(value) ? null : value);\n    }\n\n    this._applyValueBoundaries(inputValue, value);\n\n    this.validationRequest.fire({\n      value: value,\n      editor: this\n    });\n  },\n  _applyValueBoundaries: function (inputValue, parsedValue) {\n    var isValueIncomplete = this._isValueIncomplete(inputValue);\n\n    var isValueCorrect = this._isValueInRange(inputValue);\n\n    if (!isValueIncomplete && !isValueCorrect && null !== parsedValue) {\n      if (Number(inputValue) !== parsedValue) {\n        this._input().val(this._applyDisplayValueFormatter(parsedValue));\n      }\n    }\n  },\n  _replaceCommaWithPoint: function (value) {\n    return value.replace(\",\", \".\");\n  },\n  _inputIsInvalid: function () {\n    var isNumberMode = \"number\" === this.option(\"mode\");\n\n    var validityState = this._input().get(0).validity;\n\n    return isNumberMode && validityState && validityState.badInput;\n  },\n  _renderDisplayText: function (text) {\n    if (this._inputIsInvalid()) {\n      return;\n    }\n\n    this.callBase(text);\n  },\n  _isValueIncomplete: function (value) {\n    return /(^-$)|(^-?\\d*\\.$)|(\\d+e-?$)/i.test(value);\n  },\n  _isValueInRange: function (value) {\n    return inRange(value, this.option(\"min\"), this.option(\"max\"));\n  },\n  _isNumber: function (value) {\n    return null !== this._parseValue(value);\n  },\n  _validateValue: function (value) {\n    var inputValue = this._normalizeText();\n\n    var isValueValid = this._isValueValid();\n\n    var isValid = true;\n\n    var isNumber = this._isNumber(inputValue);\n\n    if (isNaN(Number(value))) {\n      isValid = false;\n    }\n\n    if (!value && isValueValid) {\n      isValid = true;\n    } else if (!isNumber && !isValueValid) {\n      isValid = false;\n    }\n\n    this.option({\n      isValid: isValid,\n      validationError: isValid ? null : {\n        editorSpecific: true,\n        message: this.option(\"invalidValueMessage\")\n      }\n    });\n    return isValid;\n  },\n  _normalizeInputValue: function () {\n    return this._parseValue(this._normalizeText());\n  },\n  _normalizeText: function () {\n    var value = this._input().val().trim();\n\n    return this._replaceCommaWithPoint(value);\n  },\n  _parseValue: function (value) {\n    var number = parseFloat(value);\n\n    if (isNaN(number)) {\n      return null;\n    }\n\n    return fitIntoRange(number, this.option(\"min\"), this.option(\"max\"));\n  },\n  _clearValue: function () {\n    if (this._inputIsInvalid()) {\n      this._input().val(\"\");\n\n      this._validateValue();\n    }\n\n    this.callBase();\n  },\n  reset: function () {\n    if (null === this.option(\"value\")) {\n      this.option(\"text\", \"\");\n\n      this._renderValue();\n    } else {\n      this.option(\"value\", null);\n    }\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"value\":\n        this._validateValue(args.value);\n\n        this._setSubmitValue(args.value);\n\n        this.callBase(args);\n\n        this._resumeValueChangeAction();\n\n        break;\n\n      case \"step\":\n        this._renderProps();\n\n        break;\n\n      case \"min\":\n      case \"max\":\n        this._renderProps();\n\n        this.option(\"value\", this._parseValue(this.option(\"value\")));\n        break;\n\n      case \"showSpinButtons\":\n      case \"useLargeSpinButtons\":\n        this._updateButtons([\"spins\"]);\n\n        break;\n\n      case \"invalidValueMessage\":\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nexport default NumberBoxBase;","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/number_box/number_box.base.js"],"names":["$","domAdapter","eventsEngine","applyServerDecimalSeparator","ensureDefined","isDefined","fitIntoRange","inRange","extend","devices","browser","TextEditor","addNamespace","getChar","isCommandKeyPressed","normalizeKeyName","SpinButtons","messageLocalization","Deferred","math","Math","WIDGET_CLASS","FIREFOX_CONTROL_KEYS","FORCE_VALUECHANGE_EVENT_NAMESPACE","NumberBoxBase","inherit","_supportedKeys","callBase","upArrow","e","preventDefault","stopPropagation","_spinUpChangeHandler","downArrow","_spinDownChangeHandler","enter","_getDefaultOptions","value","min","max","step","showSpinButtons","useLargeSpinButtons","mode","invalidValueMessage","format","buttons","_useTemplates","_getDefaultButtons","concat","name","Ctor","_isSupportInputMode","version","parseFloat","chrome","safari","_defaultOptionsRules","device","real","generic","isSimulator","options","deviceType","bind","_initMarkup","_renderSubmitElement","$element","addClass","_getDefaultAttributes","attributes","inputmode","_renderContentImpl","option","_validateValue","setAria","_$submitElement","attr","appendTo","_setSubmitValue","_getSubmitElement","val","_keyPressHandler","char","isInputCharValid","test","keyName","includes","_keyPressed","_onMouseWheel","dxEvent","delta","_spinValueChange","_renderValue","inputValue","_input","length","Number","_forceValueRender","_toggleEmptinessEventHandler","valueText","valuenow","valuetext","_updateButtons","resolve","number","formattedValue","isNaN","_applyDisplayValueFormatter","_renderDisplayText","_renderProps","prop","valuemin","valuemax","_spinButtonsPointerDownHandler","$input","getActiveElement","trigger","event","sign","_normalizeInputValue","_correctRounding","_saveValueChangeEvent","regex","isFloatValue","isFloatStep","valueAccuracy","exec","stepAccuracy","accuracy","_round","precision","multiplier","pow","round","_renderValueChangeEvent","forceValueChangeEvent","off","element","on","_forceRefreshInputValue","_valueChangeEventHandler","_normalizeText","_parseValue","valueHasDigits","_isValueValid","_applyValueBoundaries","validationRequest","fire","editor","parsedValue","isValueIncomplete","_isValueIncomplete","isValueCorrect","_isValueInRange","_replaceCommaWithPoint","replace","_inputIsInvalid","isNumberMode","validityState","get","validity","badInput","text","_isNumber","isValueValid","isValid","isNumber","validationError","editorSpecific","message","trim","_clearValue","reset","_optionChanged","args","_resumeValueChangeAction"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/number_box/number_box.base.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport domAdapter from \"../../core/dom_adapter\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    applyServerDecimalSeparator,\r\n    ensureDefined\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    fitIntoRange,\r\n    inRange\r\n} from \"../../core/utils/math\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport devices from \"../../core/devices\";\r\nimport browser from \"../../core/utils/browser\";\r\nimport TextEditor from \"../text_box/ui.text_editor\";\r\nimport {\r\n    addNamespace,\r\n    getChar,\r\n    isCommandKeyPressed,\r\n    normalizeKeyName\r\n} from \"../../events/utils/index\";\r\nimport SpinButtons from \"./number_box.spins\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nvar math = Math;\r\nvar WIDGET_CLASS = \"dx-numberbox\";\r\nvar FIREFOX_CONTROL_KEYS = [\"tab\", \"del\", \"backspace\", \"leftArrow\", \"rightArrow\", \"home\", \"end\", \"enter\"];\r\nvar FORCE_VALUECHANGE_EVENT_NAMESPACE = \"NumberBoxForceValueChange\";\r\nvar NumberBoxBase = TextEditor.inherit({\r\n    _supportedKeys: function() {\r\n        return extend(this.callBase(), {\r\n            upArrow: function(e) {\r\n                if (!isCommandKeyPressed(e)) {\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    this._spinUpChangeHandler(e)\r\n                }\r\n            },\r\n            downArrow: function(e) {\r\n                if (!isCommandKeyPressed(e)) {\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    this._spinDownChangeHandler(e)\r\n                }\r\n            },\r\n            enter: function() {}\r\n        })\r\n    },\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            value: 0,\r\n            min: void 0,\r\n            max: void 0,\r\n            step: 1,\r\n            showSpinButtons: false,\r\n            useLargeSpinButtons: true,\r\n            mode: \"text\",\r\n            invalidValueMessage: messageLocalization.format(\"dxNumberBox-invalidValueMessage\"),\r\n            buttons: void 0\r\n        })\r\n    },\r\n    _useTemplates: function() {\r\n        return false\r\n    },\r\n    _getDefaultButtons: function() {\r\n        return this.callBase().concat([{\r\n            name: \"spins\",\r\n            Ctor: SpinButtons\r\n        }])\r\n    },\r\n    _isSupportInputMode: function() {\r\n        var version = parseFloat(browser.version);\r\n        return browser.chrome && version >= 66 || browser.safari && version >= 12\r\n    },\r\n    _defaultOptionsRules: function() {\r\n        return this.callBase().concat([{\r\n            device: function() {\r\n                return devices.real().generic && !devices.isSimulator()\r\n            },\r\n            options: {\r\n                useLargeSpinButtons: false\r\n            }\r\n        }, {\r\n            device: function() {\r\n                return \"desktop\" !== devices.real().deviceType && !this._isSupportInputMode()\r\n            }.bind(this),\r\n            options: {\r\n                mode: \"number\"\r\n            }\r\n        }])\r\n    },\r\n    _initMarkup: function() {\r\n        this._renderSubmitElement();\r\n        this.$element().addClass(WIDGET_CLASS);\r\n        this.callBase()\r\n    },\r\n    _getDefaultAttributes: function() {\r\n        var attributes = this.callBase();\r\n        attributes.inputmode = \"decimal\";\r\n        return attributes\r\n    },\r\n    _renderContentImpl: function() {\r\n        this.option(\"isValid\") && this._validateValue(this.option(\"value\"));\r\n        this.setAria(\"role\", \"spinbutton\")\r\n    },\r\n    _renderSubmitElement: function() {\r\n        this._$submitElement = $(\"<input>\").attr(\"type\", \"hidden\").appendTo(this.$element());\r\n        this._setSubmitValue(this.option(\"value\"))\r\n    },\r\n    _setSubmitValue: function(value) {\r\n        this._getSubmitElement().val(applyServerDecimalSeparator(value))\r\n    },\r\n    _getSubmitElement: function() {\r\n        return this._$submitElement\r\n    },\r\n    _keyPressHandler: function(e) {\r\n        this.callBase(e);\r\n        var char = getChar(e);\r\n        var isInputCharValid = /[\\d.,eE\\-+]/.test(char);\r\n        if (!isInputCharValid) {\r\n            var keyName = normalizeKeyName(e);\r\n            if (isCommandKeyPressed(e) || keyName && FIREFOX_CONTROL_KEYS.includes(keyName)) {\r\n                return\r\n            }\r\n            e.preventDefault();\r\n            return false\r\n        }\r\n        this._keyPressed = true\r\n    },\r\n    _onMouseWheel: function(dxEvent) {\r\n        dxEvent.delta > 0 ? this._spinValueChange(1, dxEvent) : this._spinValueChange(-1, dxEvent)\r\n    },\r\n    _renderValue: function() {\r\n        var inputValue = this._input().val();\r\n        var value = this.option(\"value\");\r\n        if (!inputValue.length || Number(inputValue) !== value) {\r\n            this._forceValueRender();\r\n            this._toggleEmptinessEventHandler()\r\n        }\r\n        var valueText = isDefined(value) ? null : messageLocalization.format(\"dxNumberBox-noDataText\");\r\n        this.setAria({\r\n            valuenow: ensureDefined(value, \"\"),\r\n            valuetext: valueText\r\n        });\r\n        this.option(\"text\", this._input().val());\r\n        this._updateButtons();\r\n        return (new Deferred).resolve()\r\n    },\r\n    _forceValueRender: function() {\r\n        var value = this.option(\"value\");\r\n        var number = Number(value);\r\n        var formattedValue = isNaN(number) ? \"\" : this._applyDisplayValueFormatter(value);\r\n        this._renderDisplayText(formattedValue)\r\n    },\r\n    _applyDisplayValueFormatter: function(value) {\r\n        return this.option(\"displayValueFormatter\")(value)\r\n    },\r\n    _renderProps: function() {\r\n        this._input().prop({\r\n            min: this.option(\"min\"),\r\n            max: this.option(\"max\"),\r\n            step: this.option(\"step\")\r\n        });\r\n        this.setAria({\r\n            valuemin: ensureDefined(this.option(\"min\"), \"\"),\r\n            valuemax: ensureDefined(this.option(\"max\"), \"\")\r\n        })\r\n    },\r\n    _spinButtonsPointerDownHandler: function() {\r\n        var $input = this._input();\r\n        if (!this.option(\"useLargeSpinButtons\") && domAdapter.getActiveElement() !== $input[0]) {\r\n            eventsEngine.trigger($input, \"focus\")\r\n        }\r\n    },\r\n    _spinUpChangeHandler: function(e) {\r\n        if (!this.option(\"readOnly\")) {\r\n            this._spinValueChange(1, e.event || e)\r\n        }\r\n    },\r\n    _spinDownChangeHandler: function(e) {\r\n        if (!this.option(\"readOnly\")) {\r\n            this._spinValueChange(-1, e.event || e)\r\n        }\r\n    },\r\n    _spinValueChange: function(sign, dxEvent) {\r\n        var step = parseFloat(this.option(\"step\"));\r\n        if (0 === step) {\r\n            return\r\n        }\r\n        var value = parseFloat(this._normalizeInputValue()) || 0;\r\n        value = this._correctRounding(value, step * sign);\r\n        var min = this.option(\"min\");\r\n        var max = this.option(\"max\");\r\n        if (isDefined(min)) {\r\n            value = Math.max(min, value)\r\n        }\r\n        if (isDefined(max)) {\r\n            value = Math.min(max, value)\r\n        }\r\n        this._saveValueChangeEvent(dxEvent);\r\n        this.option(\"value\", value)\r\n    },\r\n    _correctRounding: function(value, step) {\r\n        var regex = /[,.](.*)/;\r\n        var isFloatValue = regex.test(value);\r\n        var isFloatStep = regex.test(step);\r\n        if (isFloatValue || isFloatStep) {\r\n            var valueAccuracy = isFloatValue ? regex.exec(value)[0].length : 0;\r\n            var stepAccuracy = isFloatStep ? regex.exec(step)[0].length : 0;\r\n            var accuracy = math.max(valueAccuracy, stepAccuracy);\r\n            value = this._round(value + step, accuracy);\r\n            return value\r\n        }\r\n        return value + step\r\n    },\r\n    _round: function(value, precision) {\r\n        precision = precision || 0;\r\n        var multiplier = Math.pow(10, precision);\r\n        value *= multiplier;\r\n        value = Math.round(value) / multiplier;\r\n        return value\r\n    },\r\n    _renderValueChangeEvent: function() {\r\n        this.callBase();\r\n        var forceValueChangeEvent = addNamespace(\"focusout\", FORCE_VALUECHANGE_EVENT_NAMESPACE);\r\n        eventsEngine.off(this.element(), forceValueChangeEvent);\r\n        eventsEngine.on(this.element(), forceValueChangeEvent, this._forceRefreshInputValue.bind(this))\r\n    },\r\n    _forceRefreshInputValue: function() {\r\n        if (\"number\" === this.option(\"mode\")) {\r\n            return\r\n        }\r\n        var $input = this._input();\r\n        var formattedValue = this._applyDisplayValueFormatter(this.option(\"value\"));\r\n        $input.val(null);\r\n        $input.val(formattedValue)\r\n    },\r\n    _valueChangeEventHandler: function(e) {\r\n        var $input = this._input();\r\n        var inputValue = this._normalizeText();\r\n        var value = this._parseValue(inputValue);\r\n        var valueHasDigits = \".\" !== inputValue && \"-\" !== inputValue;\r\n        if (this._isValueValid() && !this._validateValue(value)) {\r\n            $input.val(this._applyDisplayValueFormatter(value));\r\n            return\r\n        }\r\n        if (valueHasDigits) {\r\n            this.callBase(e, isNaN(value) ? null : value)\r\n        }\r\n        this._applyValueBoundaries(inputValue, value);\r\n        this.validationRequest.fire({\r\n            value: value,\r\n            editor: this\r\n        })\r\n    },\r\n    _applyValueBoundaries: function(inputValue, parsedValue) {\r\n        var isValueIncomplete = this._isValueIncomplete(inputValue);\r\n        var isValueCorrect = this._isValueInRange(inputValue);\r\n        if (!isValueIncomplete && !isValueCorrect && null !== parsedValue) {\r\n            if (Number(inputValue) !== parsedValue) {\r\n                this._input().val(this._applyDisplayValueFormatter(parsedValue))\r\n            }\r\n        }\r\n    },\r\n    _replaceCommaWithPoint: function(value) {\r\n        return value.replace(\",\", \".\")\r\n    },\r\n    _inputIsInvalid: function() {\r\n        var isNumberMode = \"number\" === this.option(\"mode\");\r\n        var validityState = this._input().get(0).validity;\r\n        return isNumberMode && validityState && validityState.badInput\r\n    },\r\n    _renderDisplayText: function(text) {\r\n        if (this._inputIsInvalid()) {\r\n            return\r\n        }\r\n        this.callBase(text)\r\n    },\r\n    _isValueIncomplete: function(value) {\r\n        return /(^-$)|(^-?\\d*\\.$)|(\\d+e-?$)/i.test(value)\r\n    },\r\n    _isValueInRange: function(value) {\r\n        return inRange(value, this.option(\"min\"), this.option(\"max\"))\r\n    },\r\n    _isNumber: function(value) {\r\n        return null !== this._parseValue(value)\r\n    },\r\n    _validateValue: function(value) {\r\n        var inputValue = this._normalizeText();\r\n        var isValueValid = this._isValueValid();\r\n        var isValid = true;\r\n        var isNumber = this._isNumber(inputValue);\r\n        if (isNaN(Number(value))) {\r\n            isValid = false\r\n        }\r\n        if (!value && isValueValid) {\r\n            isValid = true\r\n        } else if (!isNumber && !isValueValid) {\r\n            isValid = false\r\n        }\r\n        this.option({\r\n            isValid: isValid,\r\n            validationError: isValid ? null : {\r\n                editorSpecific: true,\r\n                message: this.option(\"invalidValueMessage\")\r\n            }\r\n        });\r\n        return isValid\r\n    },\r\n    _normalizeInputValue: function() {\r\n        return this._parseValue(this._normalizeText())\r\n    },\r\n    _normalizeText: function() {\r\n        var value = this._input().val().trim();\r\n        return this._replaceCommaWithPoint(value)\r\n    },\r\n    _parseValue: function(value) {\r\n        var number = parseFloat(value);\r\n        if (isNaN(number)) {\r\n            return null\r\n        }\r\n        return fitIntoRange(number, this.option(\"min\"), this.option(\"max\"))\r\n    },\r\n    _clearValue: function() {\r\n        if (this._inputIsInvalid()) {\r\n            this._input().val(\"\");\r\n            this._validateValue()\r\n        }\r\n        this.callBase()\r\n    },\r\n    reset: function() {\r\n        if (null === this.option(\"value\")) {\r\n            this.option(\"text\", \"\");\r\n            this._renderValue()\r\n        } else {\r\n            this.option(\"value\", null)\r\n        }\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"value\":\r\n                this._validateValue(args.value);\r\n                this._setSubmitValue(args.value);\r\n                this.callBase(args);\r\n                this._resumeValueChangeAction();\r\n                break;\r\n            case \"step\":\r\n                this._renderProps();\r\n                break;\r\n            case \"min\":\r\n            case \"max\":\r\n                this._renderProps();\r\n                this.option(\"value\", this._parseValue(this.option(\"value\")));\r\n                break;\r\n            case \"showSpinButtons\":\r\n            case \"useLargeSpinButtons\":\r\n                this._updateButtons([\"spins\"]);\r\n                break;\r\n            case \"invalidValueMessage\":\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nexport default NumberBoxBase;\r\n"]},"metadata":{},"sourceType":"module"}