{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.column_headers.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { ColumnsView } from \"./ui.grid_core.columns_view\";\nimport messageLocalization from \"../../localization/message\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { registerKeyboardAction } from \"./ui.grid_core.accessibility\";\nvar CELL_CONTENT_CLASS = \"text-content\";\nvar HEADERS_CLASS = \"headers\";\nvar NOWRAP_CLASS = \"nowrap\";\nvar ROW_CLASS_SELECTOR = \".dx-row\";\nvar HEADER_ROW_CLASS = \"dx-header-row\";\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\nvar CONTEXT_MENU_SORT_ASC_ICON = \"context-menu-sort-asc\";\nvar CONTEXT_MENU_SORT_DESC_ICON = \"context-menu-sort-desc\";\nvar CONTEXT_MENU_SORT_NONE_ICON = \"context-menu-sort-none\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar VISIBILITY_HIDDEN_CLASS = \"dx-visibility-hidden\";\nvar TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX = \"dx-text-content-alignment-\";\nvar SORT_INDICATOR_CLASS = \"dx-sort-indicator\";\nvar SORT_INDEX_INDICATOR_CLASS = \"dx-sort-index-indicator\";\nvar HEADER_FILTER_CLASS_SELECTOR = \".dx-header-filter\";\nvar HEADER_FILTER_INDICATOR_CLASS = \"dx-header-filter-indicator\";\nvar MULTI_ROW_HEADER_CLASS = \"dx-header-multi-row\";\nexport var columnHeadersModule = {\n  defaultOptions: function () {\n    return {\n      showColumnHeaders: true,\n      cellHintEnabled: true\n    };\n  },\n  views: {\n    columnHeadersView: ColumnsView.inherit(function () {\n      var createCellContent = function (that, $cell, options) {\n        var $cellContent = $(\"<div>\").addClass(that.addWidgetPrefix(CELL_CONTENT_CLASS));\n        that.setAria(\"role\", \"presentation\", $cellContent);\n        addCssClassesToCellContent(that, $cell, options.column, $cellContent);\n        var showColumnLines = that.option(\"showColumnLines\");\n        var contentAlignment = that.getController(\"columns\").getHeaderContentAlignment(options.column.alignment);\n        return $cellContent[showColumnLines || \"right\" === contentAlignment ? \"appendTo\" : \"prependTo\"]($cell);\n      };\n\n      function addCssClassesToCellContent(that, $cell, column, $cellContent) {\n        var $indicatorElements = that._getIndicatorElements($cell, true);\n\n        var $visibleIndicatorElements = that._getIndicatorElements($cell);\n\n        var indicatorCount = $indicatorElements && $indicatorElements.length;\n\n        var columnAlignment = that._getColumnAlignment(column.alignment);\n\n        var sortIndicatorClassName = \".\".concat(that._getIndicatorClassName(\"sort\"));\n        var sortIndexIndicatorClassName = \".\".concat(that._getIndicatorClassName(\"sortIndex\"));\n        var $sortIndicator = $visibleIndicatorElements.filter(sortIndicatorClassName);\n        var $sortIndexIndicator = $visibleIndicatorElements.children().filter(sortIndexIndicatorClassName);\n        $cellContent = $cellContent || $cell.children(\".\" + that.addWidgetPrefix(CELL_CONTENT_CLASS));\n        $cellContent.toggleClass(TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX + columnAlignment, indicatorCount > 0).toggleClass(TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX + (\"left\" === columnAlignment ? \"right\" : \"left\"), indicatorCount > 0 && \"center\" === column.alignment).toggleClass(SORT_INDICATOR_CLASS, !!$sortIndicator.length).toggleClass(SORT_INDEX_INDICATOR_CLASS, !!$sortIndexIndicator.length).toggleClass(HEADER_FILTER_INDICATOR_CLASS, !!$visibleIndicatorElements.filter(\".\" + that._getIndicatorClassName(\"headerFilter\")).length);\n      }\n\n      return {\n        _createTable: function () {\n          var $table = this.callBase.apply(this, arguments);\n          eventsEngine.on($table, \"mousedown selectstart\", this.createAction(function (e) {\n            var event = e.event;\n\n            if (event.shiftKey) {\n              event.preventDefault();\n            }\n          }));\n          return $table;\n        },\n\n        _isLegacyKeyboardNavigation() {\n          return this.option(\"useLegacyKeyboardNavigation\");\n        },\n\n        _getDefaultTemplate: function (column) {\n          var that = this;\n          return function ($container, options) {\n            var $content = column.command ? $container : createCellContent(that, $container, options);\n            var caption = \"expand\" !== column.command && column.caption;\n\n            if (caption) {\n              $content.text(caption);\n            } else if (column.command) {\n              $container.html(\"&nbsp;\");\n            }\n          };\n        },\n        _getHeaderTemplate: function (column) {\n          return column.headerCellTemplate || {\n            allowRenderToDetachedContainer: true,\n            render: this._getDefaultTemplate(column)\n          };\n        },\n        _processTemplate: function (template, options) {\n          var that = this;\n          var resultTemplate;\n          var column = options.column;\n          var renderingTemplate = that.callBase(template);\n\n          if (\"header\" === options.rowType && renderingTemplate && column.headerCellTemplate && !column.command) {\n            resultTemplate = {\n              render: function (options) {\n                var $content = createCellContent(that, options.container, options.model);\n                renderingTemplate.render(extend({}, options, {\n                  container: $content\n                }));\n              }\n            };\n          } else {\n            resultTemplate = renderingTemplate;\n          }\n\n          return resultTemplate;\n        },\n        _handleDataChanged: function (e) {\n          if (\"refresh\" !== e.changeType) {\n            return;\n          }\n\n          if (this._isGroupingChanged || this._requireReady) {\n            this._isGroupingChanged = false;\n            this.render();\n          }\n        },\n        _renderCell: function ($row, options) {\n          var $cell = this.callBase($row, options);\n\n          if (\"header\" === options.row.rowType) {\n            $cell.addClass(CELL_FOCUS_DISABLED_CLASS);\n\n            if (!this._isLegacyKeyboardNavigation()) {\n              if (options.column && !options.column.type) {\n                $cell.attr(\"tabindex\", this.option(\"tabindex\") || 0);\n              }\n            }\n          }\n\n          return $cell;\n        },\n        _setCellAriaAttributes: function ($cell, cellOptions) {\n          this.callBase($cell, cellOptions);\n\n          if (\"header\" === cellOptions.rowType) {\n            this.setAria(\"role\", \"columnheader\", $cell);\n\n            if (cellOptions.column && !cellOptions.column.command && !cellOptions.column.isBand) {\n              $cell.attr(\"id\", cellOptions.column.headerId);\n              this.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaColumn\") + \" \" + cellOptions.column.caption, $cell);\n            }\n          }\n        },\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n          $row.toggleClass(COLUMN_LINES_CLASS, this.option(\"showColumnLines\"));\n\n          if (\"header\" === row.rowType) {\n            $row.addClass(HEADER_ROW_CLASS);\n\n            if (!this._isLegacyKeyboardNavigation()) {\n              registerKeyboardAction(\"columnHeaders\", this, $row, \"td\", this._handleActionKeyDown.bind(this));\n            }\n          }\n\n          return $row;\n        },\n        _handleActionKeyDown: function (args) {\n          var event = args.event;\n          var $target = $(event.target);\n          this._lastActionElement = event.target;\n\n          if ($target.is(HEADER_FILTER_CLASS_SELECTOR)) {\n            var headerFilterController = this.getController(\"headerFilter\");\n            var $column = $target.closest(\"td\");\n            var columnIndex = this.getColumnIndexByElement($column);\n\n            if (columnIndex >= 0) {\n              headerFilterController.showHeaderFilterMenu(columnIndex, false);\n            }\n          } else {\n            var $row = $target.closest(ROW_CLASS_SELECTOR);\n\n            this._processHeaderAction(event, $row);\n          }\n\n          event.preventDefault();\n        },\n        _renderCore: function () {\n          var that = this;\n          var $container = that.element();\n\n          if (that._tableElement && !that._dataController.isLoaded() && !that._hasRowElements) {\n            return;\n          }\n\n          $container.addClass(that.addWidgetPrefix(HEADERS_CLASS)).toggleClass(that.addWidgetPrefix(NOWRAP_CLASS), !that.option(\"wordWrapEnabled\")).empty();\n          that.setAria(\"role\", \"presentation\", $container);\n\n          that._updateContent(that._renderTable());\n\n          if (that.getRowCount() > 1) {\n            $container.addClass(MULTI_ROW_HEADER_CLASS);\n          }\n\n          that.callBase.apply(that, arguments);\n        },\n        _renderRows: function () {\n          var that = this;\n\n          if (that._dataController.isLoaded() || that._hasRowElements) {\n            that.callBase.apply(that, arguments);\n            that._hasRowElements = true;\n          }\n        },\n        _getRowVisibleColumns: function (rowIndex) {\n          return this._columnsController.getVisibleColumns(rowIndex);\n        },\n        _renderRow: function ($table, options) {\n          options.columns = this._getRowVisibleColumns(options.row.rowIndex);\n          this.callBase($table, options);\n        },\n        _createCell: function (options) {\n          var column = options.column;\n          var $cellElement = this.callBase.apply(this, arguments);\n          column.rowspan > 1 && \"header\" === options.rowType && $cellElement.attr(\"rowSpan\", column.rowspan);\n          return $cellElement;\n        },\n        _getRows: function () {\n          var result = [];\n          var rowCount = this.getRowCount();\n\n          if (this.option(\"showColumnHeaders\")) {\n            for (var i = 0; i < rowCount; i++) {\n              result.push({\n                rowType: \"header\",\n                rowIndex: i\n              });\n            }\n          }\n\n          return result;\n        },\n        _getCellTemplate: function (options) {\n          if (\"header\" === options.rowType) {\n            return this._getHeaderTemplate(options.column);\n          }\n        },\n        _columnOptionChanged: function (e) {\n          var changeTypes = e.changeTypes;\n          var optionNames = e.optionNames;\n\n          if (changeTypes.grouping || changeTypes.groupExpanding) {\n            if (changeTypes.grouping) {\n              this._isGroupingChanged = true;\n            }\n\n            return;\n          }\n\n          this.callBase(e);\n\n          if (optionNames.width || optionNames.visible) {\n            this.resizeCompleted.fire();\n          }\n        },\n        _isElementVisible: function (elementOptions) {\n          return elementOptions && elementOptions.visible;\n        },\n        _alignCaptionByCenter: function ($cell) {\n          var $indicatorsContainer = this._getIndicatorContainer($cell, true);\n\n          if ($indicatorsContainer && $indicatorsContainer.length) {\n            $indicatorsContainer.filter(\".\" + VISIBILITY_HIDDEN_CLASS).remove();\n            $indicatorsContainer = this._getIndicatorContainer($cell);\n            $indicatorsContainer.clone().addClass(VISIBILITY_HIDDEN_CLASS).css(\"float\", \"\").insertBefore($cell.children(\".\" + this.addWidgetPrefix(CELL_CONTENT_CLASS)));\n          }\n        },\n        _updateCell: function ($cell, options) {\n          if (\"header\" === options.rowType && \"center\" === options.column.alignment) {\n            this._alignCaptionByCenter($cell);\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _updateIndicator: function ($cell, column, indicatorName) {\n          var $indicatorElement = this.callBase.apply(this, arguments);\n\n          if (\"center\" === column.alignment) {\n            this._alignCaptionByCenter($cell);\n          }\n\n          addCssClassesToCellContent(this, $cell, column);\n          return $indicatorElement;\n        },\n        _getIndicatorContainer: function ($cell, returnAll) {\n          var $indicatorsContainer = this.callBase($cell);\n          return returnAll ? $indicatorsContainer : $indicatorsContainer.filter(\":not(.\" + VISIBILITY_HIDDEN_CLASS + \")\");\n        },\n        _isSortableElement: function () {\n          return true;\n        },\n        getHeadersRowHeight: function () {\n          var $tableElement = this.getTableElement();\n          var $headerRows = $tableElement && $tableElement.find(\".\" + HEADER_ROW_CLASS);\n          return $headerRows && $headerRows.toArray().reduce(function (sum, headerRow) {\n            return sum + getHeight(headerRow);\n          }, 0) || 0;\n        },\n        getHeaderElement: function (index) {\n          var columnElements = this.getColumnElements();\n          return columnElements && columnElements.eq(index);\n        },\n        getColumnElements: function (index, bandColumnIndex) {\n          var that = this;\n          var $cellElement;\n          var columnsController = that._columnsController;\n          var rowCount = that.getRowCount();\n\n          if (that.option(\"showColumnHeaders\")) {\n            if (rowCount > 1 && (!isDefined(index) || isDefined(bandColumnIndex))) {\n              var result = [];\n              var visibleColumns = isDefined(bandColumnIndex) ? columnsController.getChildrenByBandColumn(bandColumnIndex, true) : columnsController.getVisibleColumns();\n              each(visibleColumns, function (_, column) {\n                var rowIndex = isDefined(index) ? index : columnsController.getRowIndex(column.index);\n                $cellElement = that._getCellElement(rowIndex, columnsController.getVisibleIndex(column.index, rowIndex));\n                $cellElement && result.push($cellElement.get(0));\n              });\n              return $(result);\n            } else if (!index || index < rowCount) {\n              return that.getCellElements(index || 0);\n            }\n          }\n        },\n        getColumnIndexByElement: function ($cell) {\n          var cellIndex = this.getCellIndex($cell);\n          var $row = $cell.closest(\".dx-row\");\n          var rowIndex = $row[0].rowIndex;\n          var column = this.getColumns(rowIndex)[cellIndex];\n          return column ? column.index : -1;\n        },\n        getVisibleColumnIndex: function (columnIndex, rowIndex) {\n          var column = this.getColumns()[columnIndex];\n          return column ? this._columnsController.getVisibleIndex(column.index, rowIndex) : -1;\n        },\n        getColumnWidths: function () {\n          var $columnElements = this.getColumnElements();\n\n          if ($columnElements && $columnElements.length) {\n            return this._getWidths($columnElements);\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        allowDragging: function (column, sourceLocation, draggingPanels) {\n          var i;\n          var draggableColumnCount = 0;\n\n          var rowIndex = column && this._columnsController.getRowIndex(column.index);\n\n          var columns = this.getColumns(0 === rowIndex ? 0 : null);\n          var canHideColumn = (null === column || void 0 === column ? void 0 : column.allowHiding) && columns.length > 1;\n\n          var allowDrag = function (column) {\n            return column.allowReordering || column.allowGrouping || column.allowHiding;\n          };\n\n          for (i = 0; i < columns.length; i++) {\n            if (allowDrag(columns[i])) {\n              draggableColumnCount++;\n            }\n          }\n\n          if (draggableColumnCount <= 1 && !canHideColumn) {\n            return false;\n          } else if (!draggingPanels) {\n            return (this.option(\"allowColumnReordering\") || this._columnsController.isColumnOptionUsed(\"allowReordering\")) && column && column.allowReordering;\n          }\n\n          for (i = 0; i < draggingPanels.length; i++) {\n            var draggingPanel = draggingPanels[i];\n\n            if (draggingPanel && draggingPanel.allowDragging(column, sourceLocation)) {\n              return true;\n            }\n          }\n\n          return false;\n        },\n        getBoundingRect: function () {\n          var $columnElements = this.getColumnElements();\n\n          if ($columnElements && $columnElements.length) {\n            var offset = this.getTableElement().offset();\n            return {\n              top: offset.top\n            };\n          }\n\n          return null;\n        },\n        getName: function () {\n          return \"headers\";\n        },\n        getColumnCount: function () {\n          var $columnElements = this.getColumnElements();\n          return $columnElements ? $columnElements.length : 0;\n        },\n        isVisible: function () {\n          return this.option(\"showColumnHeaders\");\n        },\n        optionChanged: function (args) {\n          switch (args.name) {\n            case \"showColumnHeaders\":\n            case \"wordWrapEnabled\":\n            case \"showColumnLines\":\n              this._invalidate(true, true);\n\n              args.handled = true;\n              break;\n\n            default:\n              this.callBase(args);\n          }\n        },\n        getHeight: function () {\n          return this.getElementHeight();\n        },\n        getContextMenuItems: function (options) {\n          var that = this;\n          var column = options.column;\n\n          if (options.row && (\"header\" === options.row.rowType || \"detailAdaptive\" === options.row.rowType)) {\n            var sortingOptions = that.option(\"sorting\");\n\n            if (sortingOptions && \"none\" !== sortingOptions.mode && column && column.allowSorting) {\n              var onItemClick = function (params) {\n                setTimeout(function () {\n                  that._columnsController.changeSortOrder(column.index, params.itemData.value);\n                });\n              };\n\n              return [{\n                text: sortingOptions.ascendingText,\n                value: \"asc\",\n                disabled: \"asc\" === column.sortOrder,\n                icon: CONTEXT_MENU_SORT_ASC_ICON,\n                onItemClick: onItemClick\n              }, {\n                text: sortingOptions.descendingText,\n                value: \"desc\",\n                disabled: \"desc\" === column.sortOrder,\n                icon: CONTEXT_MENU_SORT_DESC_ICON,\n                onItemClick: onItemClick\n              }, {\n                text: sortingOptions.clearText,\n                value: \"none\",\n                disabled: !column.sortOrder,\n                icon: CONTEXT_MENU_SORT_NONE_ICON,\n                onItemClick: onItemClick\n              }];\n            }\n          }\n        },\n        getRowCount: function () {\n          return this._columnsController && this._columnsController.getRowCount();\n        },\n        setRowsOpacity: function (columnIndex, value, rowIndex) {\n          var that = this;\n          var i;\n          var columnElements;\n          var rowCount = that.getRowCount();\n\n          var columns = that._columnsController.getColumns();\n\n          var column = columns && columns[columnIndex];\n          var columnID = column && column.isBand && column.index;\n\n          var setColumnOpacity = function (index, column) {\n            if (column.ownerBand === columnID) {\n              columnElements.eq(index).css({\n                opacity: value\n              });\n\n              if (column.isBand) {\n                that.setRowsOpacity(column.index, value, i + 1);\n              }\n            }\n          };\n\n          if (isDefined(columnID)) {\n            rowIndex = rowIndex || 0;\n\n            for (i = rowIndex; i < rowCount; i++) {\n              columnElements = that.getCellElements(i);\n              each(that.getColumns(i), setColumnOpacity);\n            }\n          }\n        }\n      };\n    }())\n  }\n};","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.column_headers.js"],"names":["getHeight","$","eventsEngine","ColumnsView","messageLocalization","isDefined","each","extend","registerKeyboardAction","CELL_CONTENT_CLASS","HEADERS_CLASS","NOWRAP_CLASS","ROW_CLASS_SELECTOR","HEADER_ROW_CLASS","COLUMN_LINES_CLASS","CONTEXT_MENU_SORT_ASC_ICON","CONTEXT_MENU_SORT_DESC_ICON","CONTEXT_MENU_SORT_NONE_ICON","CELL_FOCUS_DISABLED_CLASS","VISIBILITY_HIDDEN_CLASS","TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX","SORT_INDICATOR_CLASS","SORT_INDEX_INDICATOR_CLASS","HEADER_FILTER_CLASS_SELECTOR","HEADER_FILTER_INDICATOR_CLASS","MULTI_ROW_HEADER_CLASS","columnHeadersModule","defaultOptions","showColumnHeaders","cellHintEnabled","views","columnHeadersView","inherit","createCellContent","that","$cell","options","$cellContent","addClass","addWidgetPrefix","setAria","addCssClassesToCellContent","column","showColumnLines","option","contentAlignment","getController","getHeaderContentAlignment","alignment","$indicatorElements","_getIndicatorElements","$visibleIndicatorElements","indicatorCount","length","columnAlignment","_getColumnAlignment","sortIndicatorClassName","concat","_getIndicatorClassName","sortIndexIndicatorClassName","$sortIndicator","filter","$sortIndexIndicator","children","toggleClass","_createTable","$table","callBase","apply","arguments","on","createAction","e","event","shiftKey","preventDefault","_isLegacyKeyboardNavigation","_getDefaultTemplate","$container","$content","command","caption","text","html","_getHeaderTemplate","headerCellTemplate","allowRenderToDetachedContainer","render","_processTemplate","template","resultTemplate","renderingTemplate","rowType","container","model","_handleDataChanged","changeType","_isGroupingChanged","_requireReady","_renderCell","$row","row","type","attr","_setCellAriaAttributes","cellOptions","isBand","headerId","format","_createRow","_handleActionKeyDown","bind","args","$target","target","_lastActionElement","is","headerFilterController","$column","closest","columnIndex","getColumnIndexByElement","showHeaderFilterMenu","_processHeaderAction","_renderCore","element","_tableElement","_dataController","isLoaded","_hasRowElements","empty","_updateContent","_renderTable","getRowCount","_renderRows","_getRowVisibleColumns","rowIndex","_columnsController","getVisibleColumns","_renderRow","columns","_createCell","$cellElement","rowspan","_getRows","result","rowCount","i","push","_getCellTemplate","_columnOptionChanged","changeTypes","optionNames","grouping","groupExpanding","width","visible","resizeCompleted","fire","_isElementVisible","elementOptions","_alignCaptionByCenter","$indicatorsContainer","_getIndicatorContainer","remove","clone","css","insertBefore","_updateCell","_updateIndicator","indicatorName","$indicatorElement","returnAll","_isSortableElement","getHeadersRowHeight","$tableElement","getTableElement","$headerRows","find","toArray","reduce","sum","headerRow","getHeaderElement","index","columnElements","getColumnElements","eq","bandColumnIndex","columnsController","visibleColumns","getChildrenByBandColumn","_","getRowIndex","_getCellElement","getVisibleIndex","get","getCellElements","cellIndex","getCellIndex","getColumns","getVisibleColumnIndex","getColumnWidths","$columnElements","_getWidths","allowDragging","sourceLocation","draggingPanels","draggableColumnCount","canHideColumn","allowHiding","allowDrag","allowReordering","allowGrouping","isColumnOptionUsed","draggingPanel","getBoundingRect","offset","top","getName","getColumnCount","isVisible","optionChanged","name","_invalidate","handled","getElementHeight","getContextMenuItems","sortingOptions","mode","allowSorting","onItemClick","params","setTimeout","changeSortOrder","itemData","value","ascendingText","disabled","sortOrder","icon","descendingText","clearText","setRowsOpacity","columnID","setColumnOpacity","ownerBand","opacity"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.column_headers.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getHeight\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    ColumnsView\r\n} from \"./ui.grid_core.columns_view\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    registerKeyboardAction\r\n} from \"./ui.grid_core.accessibility\";\r\nvar CELL_CONTENT_CLASS = \"text-content\";\r\nvar HEADERS_CLASS = \"headers\";\r\nvar NOWRAP_CLASS = \"nowrap\";\r\nvar ROW_CLASS_SELECTOR = \".dx-row\";\r\nvar HEADER_ROW_CLASS = \"dx-header-row\";\r\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\r\nvar CONTEXT_MENU_SORT_ASC_ICON = \"context-menu-sort-asc\";\r\nvar CONTEXT_MENU_SORT_DESC_ICON = \"context-menu-sort-desc\";\r\nvar CONTEXT_MENU_SORT_NONE_ICON = \"context-menu-sort-none\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar VISIBILITY_HIDDEN_CLASS = \"dx-visibility-hidden\";\r\nvar TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX = \"dx-text-content-alignment-\";\r\nvar SORT_INDICATOR_CLASS = \"dx-sort-indicator\";\r\nvar SORT_INDEX_INDICATOR_CLASS = \"dx-sort-index-indicator\";\r\nvar HEADER_FILTER_CLASS_SELECTOR = \".dx-header-filter\";\r\nvar HEADER_FILTER_INDICATOR_CLASS = \"dx-header-filter-indicator\";\r\nvar MULTI_ROW_HEADER_CLASS = \"dx-header-multi-row\";\r\nexport var columnHeadersModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            showColumnHeaders: true,\r\n            cellHintEnabled: true\r\n        }\r\n    },\r\n    views: {\r\n        columnHeadersView: ColumnsView.inherit(function() {\r\n            var createCellContent = function(that, $cell, options) {\r\n                var $cellContent = $(\"<div>\").addClass(that.addWidgetPrefix(CELL_CONTENT_CLASS));\r\n                that.setAria(\"role\", \"presentation\", $cellContent);\r\n                addCssClassesToCellContent(that, $cell, options.column, $cellContent);\r\n                var showColumnLines = that.option(\"showColumnLines\");\r\n                var contentAlignment = that.getController(\"columns\").getHeaderContentAlignment(options.column.alignment);\r\n                return $cellContent[showColumnLines || \"right\" === contentAlignment ? \"appendTo\" : \"prependTo\"]($cell)\r\n            };\r\n\r\n            function addCssClassesToCellContent(that, $cell, column, $cellContent) {\r\n                var $indicatorElements = that._getIndicatorElements($cell, true);\r\n                var $visibleIndicatorElements = that._getIndicatorElements($cell);\r\n                var indicatorCount = $indicatorElements && $indicatorElements.length;\r\n                var columnAlignment = that._getColumnAlignment(column.alignment);\r\n                var sortIndicatorClassName = \".\".concat(that._getIndicatorClassName(\"sort\"));\r\n                var sortIndexIndicatorClassName = \".\".concat(that._getIndicatorClassName(\"sortIndex\"));\r\n                var $sortIndicator = $visibleIndicatorElements.filter(sortIndicatorClassName);\r\n                var $sortIndexIndicator = $visibleIndicatorElements.children().filter(sortIndexIndicatorClassName);\r\n                $cellContent = $cellContent || $cell.children(\".\" + that.addWidgetPrefix(CELL_CONTENT_CLASS));\r\n                $cellContent.toggleClass(TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX + columnAlignment, indicatorCount > 0).toggleClass(TEXT_CONTENT_ALIGNMENT_CLASS_PREFIX + (\"left\" === columnAlignment ? \"right\" : \"left\"), indicatorCount > 0 && \"center\" === column.alignment).toggleClass(SORT_INDICATOR_CLASS, !!$sortIndicator.length).toggleClass(SORT_INDEX_INDICATOR_CLASS, !!$sortIndexIndicator.length).toggleClass(HEADER_FILTER_INDICATOR_CLASS, !!$visibleIndicatorElements.filter(\".\" + that._getIndicatorClassName(\"headerFilter\")).length)\r\n            }\r\n            return {\r\n                _createTable: function() {\r\n                    var $table = this.callBase.apply(this, arguments);\r\n                    eventsEngine.on($table, \"mousedown selectstart\", this.createAction((function(e) {\r\n                        var event = e.event;\r\n                        if (event.shiftKey) {\r\n                            event.preventDefault()\r\n                        }\r\n                    })));\r\n                    return $table\r\n                },\r\n                _isLegacyKeyboardNavigation() {\r\n                    return this.option(\"useLegacyKeyboardNavigation\")\r\n                },\r\n                _getDefaultTemplate: function(column) {\r\n                    var that = this;\r\n                    return function($container, options) {\r\n                        var $content = column.command ? $container : createCellContent(that, $container, options);\r\n                        var caption = \"expand\" !== column.command && column.caption;\r\n                        if (caption) {\r\n                            $content.text(caption)\r\n                        } else if (column.command) {\r\n                            $container.html(\"&nbsp;\")\r\n                        }\r\n                    }\r\n                },\r\n                _getHeaderTemplate: function(column) {\r\n                    return column.headerCellTemplate || {\r\n                        allowRenderToDetachedContainer: true,\r\n                        render: this._getDefaultTemplate(column)\r\n                    }\r\n                },\r\n                _processTemplate: function(template, options) {\r\n                    var that = this;\r\n                    var resultTemplate;\r\n                    var column = options.column;\r\n                    var renderingTemplate = that.callBase(template);\r\n                    if (\"header\" === options.rowType && renderingTemplate && column.headerCellTemplate && !column.command) {\r\n                        resultTemplate = {\r\n                            render: function(options) {\r\n                                var $content = createCellContent(that, options.container, options.model);\r\n                                renderingTemplate.render(extend({}, options, {\r\n                                    container: $content\r\n                                }))\r\n                            }\r\n                        }\r\n                    } else {\r\n                        resultTemplate = renderingTemplate\r\n                    }\r\n                    return resultTemplate\r\n                },\r\n                _handleDataChanged: function(e) {\r\n                    if (\"refresh\" !== e.changeType) {\r\n                        return\r\n                    }\r\n                    if (this._isGroupingChanged || this._requireReady) {\r\n                        this._isGroupingChanged = false;\r\n                        this.render()\r\n                    }\r\n                },\r\n                _renderCell: function($row, options) {\r\n                    var $cell = this.callBase($row, options);\r\n                    if (\"header\" === options.row.rowType) {\r\n                        $cell.addClass(CELL_FOCUS_DISABLED_CLASS);\r\n                        if (!this._isLegacyKeyboardNavigation()) {\r\n                            if (options.column && !options.column.type) {\r\n                                $cell.attr(\"tabindex\", this.option(\"tabindex\") || 0)\r\n                            }\r\n                        }\r\n                    }\r\n                    return $cell\r\n                },\r\n                _setCellAriaAttributes: function($cell, cellOptions) {\r\n                    this.callBase($cell, cellOptions);\r\n                    if (\"header\" === cellOptions.rowType) {\r\n                        this.setAria(\"role\", \"columnheader\", $cell);\r\n                        if (cellOptions.column && !cellOptions.column.command && !cellOptions.column.isBand) {\r\n                            $cell.attr(\"id\", cellOptions.column.headerId);\r\n                            this.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaColumn\") + \" \" + cellOptions.column.caption, $cell)\r\n                        }\r\n                    }\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    $row.toggleClass(COLUMN_LINES_CLASS, this.option(\"showColumnLines\"));\r\n                    if (\"header\" === row.rowType) {\r\n                        $row.addClass(HEADER_ROW_CLASS);\r\n                        if (!this._isLegacyKeyboardNavigation()) {\r\n                            registerKeyboardAction(\"columnHeaders\", this, $row, \"td\", this._handleActionKeyDown.bind(this))\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _handleActionKeyDown: function(args) {\r\n                    var event = args.event;\r\n                    var $target = $(event.target);\r\n                    this._lastActionElement = event.target;\r\n                    if ($target.is(HEADER_FILTER_CLASS_SELECTOR)) {\r\n                        var headerFilterController = this.getController(\"headerFilter\");\r\n                        var $column = $target.closest(\"td\");\r\n                        var columnIndex = this.getColumnIndexByElement($column);\r\n                        if (columnIndex >= 0) {\r\n                            headerFilterController.showHeaderFilterMenu(columnIndex, false)\r\n                        }\r\n                    } else {\r\n                        var $row = $target.closest(ROW_CLASS_SELECTOR);\r\n                        this._processHeaderAction(event, $row)\r\n                    }\r\n                    event.preventDefault()\r\n                },\r\n                _renderCore: function() {\r\n                    var that = this;\r\n                    var $container = that.element();\r\n                    if (that._tableElement && !that._dataController.isLoaded() && !that._hasRowElements) {\r\n                        return\r\n                    }\r\n                    $container.addClass(that.addWidgetPrefix(HEADERS_CLASS)).toggleClass(that.addWidgetPrefix(NOWRAP_CLASS), !that.option(\"wordWrapEnabled\")).empty();\r\n                    that.setAria(\"role\", \"presentation\", $container);\r\n                    that._updateContent(that._renderTable());\r\n                    if (that.getRowCount() > 1) {\r\n                        $container.addClass(MULTI_ROW_HEADER_CLASS)\r\n                    }\r\n                    that.callBase.apply(that, arguments)\r\n                },\r\n                _renderRows: function() {\r\n                    var that = this;\r\n                    if (that._dataController.isLoaded() || that._hasRowElements) {\r\n                        that.callBase.apply(that, arguments);\r\n                        that._hasRowElements = true\r\n                    }\r\n                },\r\n                _getRowVisibleColumns: function(rowIndex) {\r\n                    return this._columnsController.getVisibleColumns(rowIndex)\r\n                },\r\n                _renderRow: function($table, options) {\r\n                    options.columns = this._getRowVisibleColumns(options.row.rowIndex);\r\n                    this.callBase($table, options)\r\n                },\r\n                _createCell: function(options) {\r\n                    var column = options.column;\r\n                    var $cellElement = this.callBase.apply(this, arguments);\r\n                    column.rowspan > 1 && \"header\" === options.rowType && $cellElement.attr(\"rowSpan\", column.rowspan);\r\n                    return $cellElement\r\n                },\r\n                _getRows: function() {\r\n                    var result = [];\r\n                    var rowCount = this.getRowCount();\r\n                    if (this.option(\"showColumnHeaders\")) {\r\n                        for (var i = 0; i < rowCount; i++) {\r\n                            result.push({\r\n                                rowType: \"header\",\r\n                                rowIndex: i\r\n                            })\r\n                        }\r\n                    }\r\n                    return result\r\n                },\r\n                _getCellTemplate: function(options) {\r\n                    if (\"header\" === options.rowType) {\r\n                        return this._getHeaderTemplate(options.column)\r\n                    }\r\n                },\r\n                _columnOptionChanged: function(e) {\r\n                    var changeTypes = e.changeTypes;\r\n                    var optionNames = e.optionNames;\r\n                    if (changeTypes.grouping || changeTypes.groupExpanding) {\r\n                        if (changeTypes.grouping) {\r\n                            this._isGroupingChanged = true\r\n                        }\r\n                        return\r\n                    }\r\n                    this.callBase(e);\r\n                    if (optionNames.width || optionNames.visible) {\r\n                        this.resizeCompleted.fire()\r\n                    }\r\n                },\r\n                _isElementVisible: function(elementOptions) {\r\n                    return elementOptions && elementOptions.visible\r\n                },\r\n                _alignCaptionByCenter: function($cell) {\r\n                    var $indicatorsContainer = this._getIndicatorContainer($cell, true);\r\n                    if ($indicatorsContainer && $indicatorsContainer.length) {\r\n                        $indicatorsContainer.filter(\".\" + VISIBILITY_HIDDEN_CLASS).remove();\r\n                        $indicatorsContainer = this._getIndicatorContainer($cell);\r\n                        $indicatorsContainer.clone().addClass(VISIBILITY_HIDDEN_CLASS).css(\"float\", \"\").insertBefore($cell.children(\".\" + this.addWidgetPrefix(CELL_CONTENT_CLASS)))\r\n                    }\r\n                },\r\n                _updateCell: function($cell, options) {\r\n                    if (\"header\" === options.rowType && \"center\" === options.column.alignment) {\r\n                        this._alignCaptionByCenter($cell)\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _updateIndicator: function($cell, column, indicatorName) {\r\n                    var $indicatorElement = this.callBase.apply(this, arguments);\r\n                    if (\"center\" === column.alignment) {\r\n                        this._alignCaptionByCenter($cell)\r\n                    }\r\n                    addCssClassesToCellContent(this, $cell, column);\r\n                    return $indicatorElement\r\n                },\r\n                _getIndicatorContainer: function($cell, returnAll) {\r\n                    var $indicatorsContainer = this.callBase($cell);\r\n                    return returnAll ? $indicatorsContainer : $indicatorsContainer.filter(\":not(.\" + VISIBILITY_HIDDEN_CLASS + \")\")\r\n                },\r\n                _isSortableElement: function() {\r\n                    return true\r\n                },\r\n                getHeadersRowHeight: function() {\r\n                    var $tableElement = this.getTableElement();\r\n                    var $headerRows = $tableElement && $tableElement.find(\".\" + HEADER_ROW_CLASS);\r\n                    return $headerRows && $headerRows.toArray().reduce((function(sum, headerRow) {\r\n                        return sum + getHeight(headerRow)\r\n                    }), 0) || 0\r\n                },\r\n                getHeaderElement: function(index) {\r\n                    var columnElements = this.getColumnElements();\r\n                    return columnElements && columnElements.eq(index)\r\n                },\r\n                getColumnElements: function(index, bandColumnIndex) {\r\n                    var that = this;\r\n                    var $cellElement;\r\n                    var columnsController = that._columnsController;\r\n                    var rowCount = that.getRowCount();\r\n                    if (that.option(\"showColumnHeaders\")) {\r\n                        if (rowCount > 1 && (!isDefined(index) || isDefined(bandColumnIndex))) {\r\n                            var result = [];\r\n                            var visibleColumns = isDefined(bandColumnIndex) ? columnsController.getChildrenByBandColumn(bandColumnIndex, true) : columnsController.getVisibleColumns();\r\n                            each(visibleColumns, (function(_, column) {\r\n                                var rowIndex = isDefined(index) ? index : columnsController.getRowIndex(column.index);\r\n                                $cellElement = that._getCellElement(rowIndex, columnsController.getVisibleIndex(column.index, rowIndex));\r\n                                $cellElement && result.push($cellElement.get(0))\r\n                            }));\r\n                            return $(result)\r\n                        } else if (!index || index < rowCount) {\r\n                            return that.getCellElements(index || 0)\r\n                        }\r\n                    }\r\n                },\r\n                getColumnIndexByElement: function($cell) {\r\n                    var cellIndex = this.getCellIndex($cell);\r\n                    var $row = $cell.closest(\".dx-row\");\r\n                    var rowIndex = $row[0].rowIndex;\r\n                    var column = this.getColumns(rowIndex)[cellIndex];\r\n                    return column ? column.index : -1\r\n                },\r\n                getVisibleColumnIndex: function(columnIndex, rowIndex) {\r\n                    var column = this.getColumns()[columnIndex];\r\n                    return column ? this._columnsController.getVisibleIndex(column.index, rowIndex) : -1\r\n                },\r\n                getColumnWidths: function() {\r\n                    var $columnElements = this.getColumnElements();\r\n                    if ($columnElements && $columnElements.length) {\r\n                        return this._getWidths($columnElements)\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                allowDragging: function(column, sourceLocation, draggingPanels) {\r\n                    var i;\r\n                    var draggableColumnCount = 0;\r\n                    var rowIndex = column && this._columnsController.getRowIndex(column.index);\r\n                    var columns = this.getColumns(0 === rowIndex ? 0 : null);\r\n                    var canHideColumn = (null === column || void 0 === column ? void 0 : column.allowHiding) && columns.length > 1;\r\n                    var allowDrag = function(column) {\r\n                        return column.allowReordering || column.allowGrouping || column.allowHiding\r\n                    };\r\n                    for (i = 0; i < columns.length; i++) {\r\n                        if (allowDrag(columns[i])) {\r\n                            draggableColumnCount++\r\n                        }\r\n                    }\r\n                    if (draggableColumnCount <= 1 && !canHideColumn) {\r\n                        return false\r\n                    } else if (!draggingPanels) {\r\n                        return (this.option(\"allowColumnReordering\") || this._columnsController.isColumnOptionUsed(\"allowReordering\")) && column && column.allowReordering\r\n                    }\r\n                    for (i = 0; i < draggingPanels.length; i++) {\r\n                        var draggingPanel = draggingPanels[i];\r\n                        if (draggingPanel && draggingPanel.allowDragging(column, sourceLocation)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                    return false\r\n                },\r\n                getBoundingRect: function() {\r\n                    var $columnElements = this.getColumnElements();\r\n                    if ($columnElements && $columnElements.length) {\r\n                        var offset = this.getTableElement().offset();\r\n                        return {\r\n                            top: offset.top\r\n                        }\r\n                    }\r\n                    return null\r\n                },\r\n                getName: function() {\r\n                    return \"headers\"\r\n                },\r\n                getColumnCount: function() {\r\n                    var $columnElements = this.getColumnElements();\r\n                    return $columnElements ? $columnElements.length : 0\r\n                },\r\n                isVisible: function() {\r\n                    return this.option(\"showColumnHeaders\")\r\n                },\r\n                optionChanged: function(args) {\r\n                    switch (args.name) {\r\n                        case \"showColumnHeaders\":\r\n                        case \"wordWrapEnabled\":\r\n                        case \"showColumnLines\":\r\n                            this._invalidate(true, true);\r\n                            args.handled = true;\r\n                            break;\r\n                        default:\r\n                            this.callBase(args)\r\n                    }\r\n                },\r\n                getHeight: function() {\r\n                    return this.getElementHeight()\r\n                },\r\n                getContextMenuItems: function(options) {\r\n                    var that = this;\r\n                    var column = options.column;\r\n                    if (options.row && (\"header\" === options.row.rowType || \"detailAdaptive\" === options.row.rowType)) {\r\n                        var sortingOptions = that.option(\"sorting\");\r\n                        if (sortingOptions && \"none\" !== sortingOptions.mode && column && column.allowSorting) {\r\n                            var onItemClick = function(params) {\r\n                                setTimeout((function() {\r\n                                    that._columnsController.changeSortOrder(column.index, params.itemData.value)\r\n                                }))\r\n                            };\r\n                            return [{\r\n                                text: sortingOptions.ascendingText,\r\n                                value: \"asc\",\r\n                                disabled: \"asc\" === column.sortOrder,\r\n                                icon: CONTEXT_MENU_SORT_ASC_ICON,\r\n                                onItemClick: onItemClick\r\n                            }, {\r\n                                text: sortingOptions.descendingText,\r\n                                value: \"desc\",\r\n                                disabled: \"desc\" === column.sortOrder,\r\n                                icon: CONTEXT_MENU_SORT_DESC_ICON,\r\n                                onItemClick: onItemClick\r\n                            }, {\r\n                                text: sortingOptions.clearText,\r\n                                value: \"none\",\r\n                                disabled: !column.sortOrder,\r\n                                icon: CONTEXT_MENU_SORT_NONE_ICON,\r\n                                onItemClick: onItemClick\r\n                            }]\r\n                        }\r\n                    }\r\n                },\r\n                getRowCount: function() {\r\n                    return this._columnsController && this._columnsController.getRowCount()\r\n                },\r\n                setRowsOpacity: function(columnIndex, value, rowIndex) {\r\n                    var that = this;\r\n                    var i;\r\n                    var columnElements;\r\n                    var rowCount = that.getRowCount();\r\n                    var columns = that._columnsController.getColumns();\r\n                    var column = columns && columns[columnIndex];\r\n                    var columnID = column && column.isBand && column.index;\r\n                    var setColumnOpacity = function(index, column) {\r\n                        if (column.ownerBand === columnID) {\r\n                            columnElements.eq(index).css({\r\n                                opacity: value\r\n                            });\r\n                            if (column.isBand) {\r\n                                that.setRowsOpacity(column.index, value, i + 1)\r\n                            }\r\n                        }\r\n                    };\r\n                    if (isDefined(columnID)) {\r\n                        rowIndex = rowIndex || 0;\r\n                        for (i = rowIndex; i < rowCount; i++) {\r\n                            columnElements = that.getCellElements(i);\r\n                            each(that.getColumns(i), setColumnOpacity)\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }())\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}