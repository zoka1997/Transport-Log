{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/data_grid/ui.data_grid.summary.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { noop } from \"../../core/utils/common\";\nimport { isDefined, isPlainObject, isEmptyObject, isString, isFunction } from \"../../core/utils/type\";\nimport { each, map } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { compileGetter } from \"../../core/utils/data\";\nimport errors from \"../widget/ui.errors\";\nimport gridCore from \"./ui.data_grid.core\";\nimport messageLocalization from \"../../localization/message\";\nimport dataSourceAdapter from \"./ui.data_grid.data_source_adapter\";\nimport { ColumnsView } from \"../grid_core/ui.grid_core.columns_view\";\nimport AggregateCalculator from \"./aggregate_calculator\";\nimport dataQuery from \"../../data/query\";\nimport storeHelper from \"../../data/store_helper\";\nimport { normalizeSortingInfo } from \"../../data/utils\";\nvar DATAGRID_TOTAL_FOOTER_CLASS = \"dx-datagrid-total-footer\";\nvar DATAGRID_SUMMARY_ITEM_CLASS = \"dx-datagrid-summary-item\";\nvar DATAGRID_TEXT_CONTENT_CLASS = \"dx-datagrid-text-content\";\nvar DATAGRID_GROUP_FOOTER_CLASS = \"dx-datagrid-group-footer\";\nvar DATAGRID_GROUP_TEXT_CONTENT_CLASS = \"dx-datagrid-group-text-content\";\nvar DATAGRID_NOWRAP_CLASS = \"dx-datagrid-nowrap\";\nvar DATAGRID_FOOTER_ROW_CLASS = \"dx-footer-row\";\nvar DATAGRID_GROUP_FOOTER_ROW_TYPE = \"groupFooter\";\nvar DATAGRID_TOTAL_FOOTER_ROW_TYPE = \"totalFooter\";\nexport var renderSummaryCell = function (cell, options) {\n  var $cell = $(cell);\n  var column = options.column;\n  var summaryItems = options.summaryItems;\n  var $summaryItems = [];\n\n  if (!column.command && summaryItems) {\n    for (var i = 0; i < summaryItems.length; i++) {\n      var summaryItem = summaryItems[i];\n      $summaryItems.push($(\"<div>\").css(\"textAlign\", summaryItem.alignment || column.alignment).addClass(DATAGRID_SUMMARY_ITEM_CLASS).addClass(DATAGRID_TEXT_CONTENT_CLASS).addClass(summaryItem.cssClass).toggleClass(DATAGRID_GROUP_TEXT_CONTENT_CLASS, \"group\" === options.rowType).text(gridCore.getSummaryText(summaryItem, options.summaryTexts)));\n    }\n\n    $cell.append($summaryItems);\n  }\n};\n\nvar getSummaryCellOptions = function (that, options) {\n  var summaryTexts = that.option(\"summary.texts\") || {};\n  return {\n    totalItem: options.row,\n    summaryItems: options.row.summaryCells[options.columnIndex],\n    summaryTexts: summaryTexts\n  };\n};\n\nvar getGroupAggregates = function (data) {\n  return data.summary || data.aggregates || [];\n};\n\nvar recalculateWhileEditing = function (that) {\n  return that.option(\"summary.recalculateWhileEditing\");\n};\n\nexport var FooterView = ColumnsView.inherit({\n  _getRows: function () {\n    return this._dataController.footerItems();\n  },\n  _getCellOptions: function (options) {\n    return extend(this.callBase(options), getSummaryCellOptions(this, options));\n  },\n  _renderCellContent: function ($cell, options) {\n    renderSummaryCell($cell, options);\n    this.callBase.apply(this, arguments);\n  },\n  _renderCore: function (change) {\n    var needUpdateScrollLeft = false;\n\n    var totalItem = this._dataController.footerItems()[0];\n\n    if (!change || !change.columnIndices) {\n      this.element().empty().addClass(DATAGRID_TOTAL_FOOTER_CLASS).toggleClass(DATAGRID_NOWRAP_CLASS, !this.option(\"wordWrapEnabled\"));\n      needUpdateScrollLeft = true;\n    }\n\n    if (totalItem && totalItem.summaryCells && totalItem.summaryCells.length) {\n      this._updateContent(this._renderTable({\n        change: change\n      }), change);\n\n      needUpdateScrollLeft && this._updateScrollLeftPosition();\n    }\n  },\n  _updateContent: function ($newTable, change) {\n    if (change && \"update\" === change.changeType && change.columnIndices) {\n      var $row = this.getTableElement().find(\".dx-row\");\n      var $newRow = $newTable.find(\".dx-row\");\n\n      this._updateCells($row, $newRow, change.columnIndices[0]);\n    } else {\n      return this.callBase.apply(this, arguments);\n    }\n  },\n  _rowClick: function (e) {\n    var item = this._dataController.footerItems()[e.rowIndex] || {};\n    this.executeAction(\"onRowClick\", extend({}, e, item));\n  },\n  _columnOptionChanged: function (e) {\n    var optionNames = e.optionNames;\n\n    if (e.changeTypes.grouping) {\n      return;\n    }\n\n    if (optionNames.width || optionNames.visibleWidth) {\n      this.callBase(e);\n    }\n  },\n  _handleDataChanged: function (e) {\n    var changeType = e.changeType;\n\n    if (\"update\" === e.changeType && e.repaintChangesOnly) {\n      if (!e.totalColumnIndices) {\n        this.render();\n      } else if (e.totalColumnIndices.length) {\n        this.render(null, {\n          changeType: \"update\",\n          columnIndices: [e.totalColumnIndices]\n        });\n      }\n    } else if (\"refresh\" === changeType || \"append\" === changeType || \"prepend\" === changeType) {\n      this.render();\n    }\n  },\n  _createRow: function (row) {\n    var $row = this.callBase.apply(this, arguments);\n\n    if (row.rowType === DATAGRID_TOTAL_FOOTER_ROW_TYPE) {\n      $row.addClass(DATAGRID_FOOTER_ROW_CLASS);\n    }\n\n    return $row;\n  },\n  getHeight: function () {\n    return this.getElementHeight();\n  },\n  isVisible: function () {\n    return !!this._dataController.footerItems().length;\n  }\n});\nvar SummaryDataSourceAdapterExtender = {\n  init: function () {\n    this.callBase.apply(this, arguments);\n    this._totalAggregates = [];\n    this._summaryGetter = noop;\n  },\n  summaryGetter: function (_summaryGetter) {\n    if (!arguments.length) {\n      return this._summaryGetter;\n    }\n\n    if (isFunction(_summaryGetter)) {\n      this._summaryGetter = _summaryGetter;\n    }\n  },\n  summary: function (_summary) {\n    if (!arguments.length) {\n      return this._summaryGetter();\n    }\n\n    this._summaryGetter = function () {\n      return _summary;\n    };\n  },\n  totalAggregates: function () {\n    return this._totalAggregates;\n  },\n  isLastLevelGroupItemsPagingLocal: function () {\n    var summary = this.summary();\n    var sortByGroupsInfo = summary && summary.sortByGroups();\n    return sortByGroupsInfo && sortByGroupsInfo.length;\n  },\n  sortLastLevelGroupItems: function (items, groups, paths) {\n    var groupedItems = storeHelper.multiLevelGroup(dataQuery(items), groups).toArray();\n    var result = [];\n    paths.forEach(function (path) {\n      !function forEachGroup(groups, groupCount, callback, path) {\n        path = path || [];\n\n        for (var i = 0; i < groups.length; i++) {\n          path.push(groups[i].key);\n\n          if (1 === groupCount) {\n            callback(path, groups[i].items);\n          } else {\n            forEachGroup(groups[i].items, groupCount - 1, callback, path);\n          }\n\n          path.pop();\n        }\n      }(groupedItems, groups.length, function (itemsPath, items) {\n        if (path.toString() === itemsPath.toString()) {\n          result = result.concat(items);\n        }\n      });\n    });\n    return result;\n  }\n};\n\nvar SummaryDataSourceAdapterClientExtender = function () {\n  var calculateAggregates = function (that, summary, data, groupLevel) {\n    var calculator;\n\n    if (recalculateWhileEditing(that)) {\n      var editingController = that.getController(\"editing\");\n\n      if (editingController) {\n        var insertedData = editingController.getInsertedData();\n\n        if (insertedData.length) {\n          data = function applyAddedData(data, insertedData, groupLevel) {\n            if (groupLevel) {\n              return applyAddedData(data, insertedData.map(item => ({\n                items: [item]\n              }), groupLevel - 1));\n            }\n\n            return data.concat(insertedData);\n          }(data, insertedData, groupLevel);\n        }\n\n        var removedData = editingController.getRemovedData();\n\n        if (removedData.length) {\n          data = function applyRemovedData(data, removedData, groupLevel) {\n            if (groupLevel) {\n              return data.map(data => {\n                var updatedData = {};\n                var updatedItems = applyRemovedData(data.items || [], removedData, groupLevel - 1);\n                Object.defineProperty(updatedData, \"aggregates\", {\n                  get: () => data.aggregates,\n                  set: value => {\n                    data.aggregates = value;\n                  }\n                });\n                return extend(updatedData, data, {\n                  items: updatedItems\n                });\n              });\n            }\n\n            return data.filter(data => removedData.indexOf(data) < 0);\n          }(data, removedData, groupLevel);\n        }\n      }\n    }\n\n    if (summary) {\n      calculator = new AggregateCalculator({\n        totalAggregates: summary.totalAggregates,\n        groupAggregates: summary.groupAggregates,\n        data: data,\n        groupLevel: groupLevel\n      });\n      calculator.calculate();\n    }\n\n    return calculator ? calculator.totalAggregates() : [];\n  };\n\n  var sortGroupsBySummary = function (data, group, summary) {\n    var sortByGroups = summary && summary.sortByGroups && summary.sortByGroups();\n\n    if (sortByGroups && sortByGroups.length) {\n      return function sortGroupsBySummaryCore(items, groups, sortByGroups) {\n        if (!items || !groups.length) {\n          return items;\n        }\n\n        var group = groups[0];\n        var sorts = sortByGroups[0];\n        var query;\n\n        if (group && sorts && sorts.length) {\n          query = dataQuery(items);\n          each(sorts, function (index) {\n            if (0 === index) {\n              query = query.sortBy(this.selector, this.desc);\n            } else {\n              query = query.thenBy(this.selector, this.desc);\n            }\n          });\n          query.enumerate().done(function (sortedItems) {\n            items = sortedItems;\n          });\n        }\n\n        groups = groups.slice(1);\n        sortByGroups = sortByGroups.slice(1);\n\n        if (groups.length && sortByGroups.length) {\n          each(items, function () {\n            this.items = sortGroupsBySummaryCore(this.items, groups, sortByGroups);\n          });\n        }\n\n        return items;\n      }(data, group, sortByGroups);\n    }\n\n    return data;\n  };\n\n  return {\n    _customizeRemoteOperations: function (options) {\n      var summary = this.summary();\n\n      if (summary) {\n        if (options.remoteOperations.summary) {\n          if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\n            if (options.storeLoadOptions.group) {\n              if (options.remoteOperations.grouping) {\n                options.storeLoadOptions.groupSummary = summary.groupAggregates;\n              } else if (summary.groupAggregates.length) {\n                options.remoteOperations.paging = false;\n              }\n            }\n\n            options.storeLoadOptions.totalSummary = summary.totalAggregates;\n          }\n        } else if (summary.totalAggregates.length || summary.groupAggregates.length && options.storeLoadOptions.group) {\n          options.remoteOperations.paging = false;\n        }\n      }\n\n      this.callBase.apply(this, arguments);\n      var cachedExtra = options.cachedData.extra;\n\n      if (cachedExtra && cachedExtra.summary && !options.isCustomLoading) {\n        options.storeLoadOptions.totalSummary = void 0;\n      }\n    },\n    _handleDataLoadedCore: function (options) {\n      var groups = normalizeSortingInfo(options.storeLoadOptions.group || options.loadOptions.group || []);\n      var remoteOperations = options.remoteOperations || {};\n      var summary = this.summaryGetter()(remoteOperations);\n\n      if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\n        if (remoteOperations.summary) {\n          if (!remoteOperations.paging && groups.length && summary) {\n            if (!remoteOperations.grouping) {\n              calculateAggregates(this, {\n                groupAggregates: summary.groupAggregates\n              }, options.data, groups.length);\n            }\n\n            options.data = sortGroupsBySummary(options.data, groups, summary);\n          }\n        } else if (!remoteOperations.paging && summary) {\n          var _options$cachedData, _options$cachedData$e;\n\n          var operationTypes = options.operationTypes || {};\n          var hasOperations = Object.keys(operationTypes).some(type => operationTypes[type]);\n\n          if (!hasOperations || !(null !== (_options$cachedData = options.cachedData) && void 0 !== _options$cachedData && null !== (_options$cachedData$e = _options$cachedData.extra) && void 0 !== _options$cachedData$e && _options$cachedData$e.summary) || groups.length && summary.groupAggregates.length) {\n            var totalAggregates = calculateAggregates(this, summary, options.data, groups.length);\n            options.extra = isPlainObject(options.extra) ? options.extra : {};\n            options.extra.summary = totalAggregates;\n\n            if (options.cachedData) {\n              options.cachedData.extra = options.extra;\n            }\n          }\n\n          options.data = sortGroupsBySummary(options.data, groups, summary);\n        }\n      }\n\n      if (!options.isCustomLoading) {\n        this._totalAggregates = options.extra && options.extra.summary || this._totalAggregates;\n      }\n\n      this.callBase(options);\n    }\n  };\n}();\n\ndataSourceAdapter.extend(SummaryDataSourceAdapterExtender);\ndataSourceAdapter.extend(SummaryDataSourceAdapterClientExtender);\ngridCore.registerModule(\"summary\", {\n  defaultOptions: function () {\n    return {\n      summary: {\n        groupItems: void 0,\n        totalItems: void 0,\n        calculateCustomSummary: void 0,\n        skipEmptyValues: true,\n        recalculateWhileEditing: false,\n        texts: {\n          sum: messageLocalization.format(\"dxDataGrid-summarySum\"),\n          sumOtherColumn: messageLocalization.format(\"dxDataGrid-summarySumOtherColumn\"),\n          min: messageLocalization.format(\"dxDataGrid-summaryMin\"),\n          minOtherColumn: messageLocalization.format(\"dxDataGrid-summaryMinOtherColumn\"),\n          max: messageLocalization.format(\"dxDataGrid-summaryMax\"),\n          maxOtherColumn: messageLocalization.format(\"dxDataGrid-summaryMaxOtherColumn\"),\n          avg: messageLocalization.format(\"dxDataGrid-summaryAvg\"),\n          avgOtherColumn: messageLocalization.format(\"dxDataGrid-summaryAvgOtherColumn\"),\n          count: messageLocalization.format(\"dxDataGrid-summaryCount\")\n        }\n      },\n      sortByGroupSummaryInfo: void 0\n    };\n  },\n  views: {\n    footerView: FooterView\n  },\n  extenders: {\n    controllers: {\n      data: {\n        _isDataColumn: function (column) {\n          return column && (!isDefined(column.groupIndex) || column.showWhenGrouped);\n        },\n        _isGroupFooterVisible: function () {\n          var groupItems = this.option(\"summary.groupItems\") || [];\n\n          for (var i = 0; i < groupItems.length; i++) {\n            var groupItem = groupItems[i];\n\n            var column = this._columnsController.columnOption(groupItem.showInColumn || groupItem.column);\n\n            if (groupItem.showInGroupFooter && this._isDataColumn(column)) {\n              return true;\n            }\n          }\n\n          return false;\n        },\n        _processGroupItems: function (items, groupCount, options) {\n          var data = options && options.data;\n          var result = this.callBase.apply(this, arguments);\n\n          if (options) {\n            if (void 0 === options.isGroupFooterVisible) {\n              options.isGroupFooterVisible = this._isGroupFooterVisible();\n            }\n\n            if (data && data.items && options.isGroupFooterVisible && (options.collectContinuationItems || !data.isContinuationOnNextPage)) {\n              result.push({\n                rowType: DATAGRID_GROUP_FOOTER_ROW_TYPE,\n                key: options.path.slice(),\n                data: data,\n                groupIndex: options.path.length - 1,\n                values: []\n              });\n            }\n          }\n\n          return result;\n        },\n        _processGroupItem: function (groupItem, options) {\n          var that = this;\n\n          if (!options.summaryGroupItems) {\n            options.summaryGroupItems = that.option(\"summary.groupItems\") || [];\n          }\n\n          if (\"group\" === groupItem.rowType) {\n            var groupColumnIndex = -1;\n            var afterGroupColumnIndex = -1;\n            each(options.visibleColumns, function (visibleIndex) {\n              var prevColumn = options.visibleColumns[visibleIndex - 1];\n\n              if (groupItem.groupIndex === this.groupIndex) {\n                groupColumnIndex = this.index;\n              }\n\n              if (visibleIndex > 0 && \"expand\" === prevColumn.command && \"expand\" !== this.command) {\n                afterGroupColumnIndex = this.index;\n              }\n            });\n            groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, function (summaryItem, column) {\n              if (summaryItem.showInGroupFooter) {\n                return -1;\n              }\n\n              if (summaryItem.alignByColumn && column && !isDefined(column.groupIndex) && column.index !== afterGroupColumnIndex) {\n                return column.index;\n              } else {\n                return groupColumnIndex;\n              }\n            }, true);\n          }\n\n          if (groupItem.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE) {\n            groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, function (summaryItem, column) {\n              return summaryItem.showInGroupFooter && that._isDataColumn(column) ? column.index : -1;\n            });\n          }\n\n          return groupItem;\n        },\n        _calculateSummaryCells: function (summaryItems, aggregates, visibleColumns, calculateTargetColumnIndex, isGroupRow) {\n          var that = this;\n          var summaryCells = [];\n          var summaryCellsByColumns = {};\n          each(summaryItems, function (summaryIndex, summaryItem) {\n            var column = that._columnsController.columnOption(summaryItem.column);\n\n            var showInColumn = summaryItem.showInColumn && that._columnsController.columnOption(summaryItem.showInColumn) || column;\n            var columnIndex = calculateTargetColumnIndex(summaryItem, showInColumn);\n\n            if (columnIndex >= 0) {\n              if (!summaryCellsByColumns[columnIndex]) {\n                summaryCellsByColumns[columnIndex] = [];\n              }\n\n              var aggregate = aggregates[summaryIndex];\n\n              if (aggregate === aggregate) {\n                var valueFormat;\n\n                if (isDefined(summaryItem.valueFormat)) {\n                  valueFormat = summaryItem.valueFormat;\n                } else if (\"count\" !== summaryItem.summaryType) {\n                  valueFormat = gridCore.getFormatByDataType(column && column.dataType);\n                }\n\n                summaryCellsByColumns[columnIndex].push(extend({}, summaryItem, {\n                  value: isString(aggregate) && column && column.deserializeValue ? column.deserializeValue(aggregate) : aggregate,\n                  valueFormat: valueFormat,\n                  columnCaption: column && column.index !== columnIndex ? column.caption : void 0\n                }));\n              }\n            }\n          });\n\n          if (!isEmptyObject(summaryCellsByColumns)) {\n            visibleColumns.forEach((column, visibleIndex) => {\n              var prevColumn = visibleColumns[visibleIndex - 1];\n              var columnIndex = isGroupRow && (\"expand\" === (null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.command) || \"expand\" === column.command) ? null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.index : column.index;\n              summaryCells.push(summaryCellsByColumns[columnIndex] || []);\n            });\n          }\n\n          return summaryCells;\n        },\n        _getSummaryCells: function (summaryTotalItems, totalAggregates) {\n          var that = this;\n          var columnsController = that._columnsController;\n          return that._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(), function (summaryItem, column) {\n            return that._isDataColumn(column) ? column.index : -1;\n          });\n        },\n        _updateItemsCore: function (change) {\n          var summaryCells;\n          var dataSource = this._dataSource;\n          var footerItems = this._footerItems;\n          var oldSummaryCells = footerItems && footerItems[0] && footerItems[0].summaryCells;\n          var summaryTotalItems = this.option(\"summary.totalItems\");\n          this._footerItems = [];\n\n          if (dataSource && summaryTotalItems && summaryTotalItems.length) {\n            var totalAggregates = dataSource.totalAggregates();\n            summaryCells = this._getSummaryCells(summaryTotalItems, totalAggregates);\n\n            if (change && change.repaintChangesOnly && oldSummaryCells) {\n              change.totalColumnIndices = summaryCells.map(function (summaryCell, index) {\n                if (JSON.stringify(summaryCell) !== JSON.stringify(oldSummaryCells[index])) {\n                  return index;\n                }\n\n                return -1;\n              }).filter(index => index >= 0);\n            }\n\n            if (summaryCells.length) {\n              this._footerItems.push({\n                rowType: DATAGRID_TOTAL_FOOTER_ROW_TYPE,\n                summaryCells: summaryCells\n              });\n            }\n          }\n\n          this.callBase(change);\n        },\n        _prepareUnsavedDataSelector: function (selector) {\n          if (recalculateWhileEditing(this)) {\n            var editingController = this.getController(\"editing\");\n\n            if (editingController) {\n              return function (data) {\n                data = editingController.getUpdatedData(data);\n                return selector(data);\n              };\n            }\n          }\n\n          return selector;\n        },\n        _prepareAggregateSelector: function (selector, aggregator) {\n          selector = this._prepareUnsavedDataSelector(selector);\n\n          if (\"avg\" === aggregator || \"sum\" === aggregator) {\n            return function (data) {\n              var value = selector(data);\n              return isDefined(value) ? Number(value) : value;\n            };\n          }\n\n          return selector;\n        },\n        _getAggregates: function (summaryItems, remoteOperations) {\n          var that = this;\n          var columnsController = that.getController(\"columns\");\n          var calculateCustomSummary = that.option(\"summary.calculateCustomSummary\");\n          var commonSkipEmptyValues = that.option(\"summary.skipEmptyValues\");\n          return map(summaryItems || [], function (summaryItem) {\n            var column = columnsController.columnOption(summaryItem.column);\n            var calculateCellValue = column && column.calculateCellValue ? column.calculateCellValue.bind(column) : compileGetter(column ? column.dataField : summaryItem.column);\n            var aggregator = summaryItem.summaryType || \"count\";\n            var skipEmptyValues = isDefined(summaryItem.skipEmptyValues) ? summaryItem.skipEmptyValues : commonSkipEmptyValues;\n\n            if (remoteOperations) {\n              return {\n                selector: summaryItem.column,\n                summaryType: aggregator\n              };\n            } else {\n              var selector = that._prepareAggregateSelector(calculateCellValue, aggregator);\n\n              if (\"custom\" === aggregator) {\n                if (!calculateCustomSummary) {\n                  errors.log(\"E1026\");\n\n                  calculateCustomSummary = function () {};\n                }\n\n                var options = {\n                  component: that.component,\n                  name: summaryItem.name\n                };\n                calculateCustomSummary(options);\n                options.summaryProcess = \"calculate\";\n                aggregator = {\n                  seed: function (groupIndex) {\n                    options.summaryProcess = \"start\";\n                    options.totalValue = void 0;\n                    options.groupIndex = groupIndex;\n                    delete options.value;\n                    calculateCustomSummary(options);\n                    return options.totalValue;\n                  },\n                  step: function (totalValue, value) {\n                    options.summaryProcess = \"calculate\";\n                    options.totalValue = totalValue;\n                    options.value = value;\n                    calculateCustomSummary(options);\n                    return options.totalValue;\n                  },\n                  finalize: function (totalValue) {\n                    options.summaryProcess = \"finalize\";\n                    options.totalValue = totalValue;\n                    delete options.value;\n                    calculateCustomSummary(options);\n                    return options.totalValue;\n                  }\n                };\n              }\n\n              return {\n                selector: selector,\n                aggregator: aggregator,\n                skipEmptyValues: skipEmptyValues\n              };\n            }\n          });\n        },\n        _addSortInfo: function (sortByGroups, groupColumn, selector, sortOrder) {\n          if (groupColumn) {\n            var groupIndex = groupColumn.groupIndex;\n            sortOrder = sortOrder || groupColumn.sortOrder;\n\n            if (isDefined(groupIndex)) {\n              sortByGroups[groupIndex] = sortByGroups[groupIndex] || [];\n              sortByGroups[groupIndex].push({\n                selector: selector,\n                desc: \"desc\" === sortOrder\n              });\n            }\n          }\n        },\n        _findSummaryItem: function (summaryItems, name) {\n          var summaryItemIndex = -1;\n\n          if (isDefined(name)) {\n            each(summaryItems || [], function (index) {\n              if (this.name === name || index === name || this.summaryType === name || this.column === name || (summaryItem = this, summaryType = summaryItem.summaryType, column = summaryItem.column, summaryType && column && summaryType + \"_\" + column) === name) {\n                summaryItemIndex = index;\n                return false;\n              }\n\n              var summaryItem, summaryType, column;\n            });\n          }\n\n          return summaryItemIndex;\n        },\n        _getSummarySortByGroups: function (sortByGroupSummaryInfo, groupSummaryItems) {\n          var that = this;\n          var columnsController = that._columnsController;\n          var groupColumns = columnsController.getGroupColumns();\n          var sortByGroups = [];\n\n          if (!groupSummaryItems || !groupSummaryItems.length) {\n            return;\n          }\n\n          each(sortByGroupSummaryInfo || [], function () {\n            var sortOrder = this.sortOrder;\n            var groupColumn = this.groupColumn;\n\n            var summaryItemIndex = that._findSummaryItem(groupSummaryItems, this.summaryItem);\n\n            if (summaryItemIndex < 0) {\n              return;\n            }\n\n            var selector = function (data) {\n              return getGroupAggregates(data)[summaryItemIndex];\n            };\n\n            if (isDefined(groupColumn)) {\n              groupColumn = columnsController.columnOption(groupColumn);\n\n              that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder);\n            } else {\n              each(groupColumns, function (groupIndex, groupColumn) {\n                that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder);\n              });\n            }\n          });\n          return sortByGroups;\n        },\n        _createDataSourceAdapterCore: function (dataSource, remoteOperations) {\n          var that = this;\n          var dataSourceAdapter = this.callBase(dataSource, remoteOperations);\n          dataSourceAdapter.summaryGetter(function (currentRemoteOperations) {\n            return that._getSummaryOptions(currentRemoteOperations || remoteOperations);\n          });\n          return dataSourceAdapter;\n        },\n        _getSummaryOptions: function (remoteOperations) {\n          var that = this;\n          var groupSummaryItems = that.option(\"summary.groupItems\");\n          var totalSummaryItems = that.option(\"summary.totalItems\");\n          var sortByGroupSummaryInfo = that.option(\"sortByGroupSummaryInfo\");\n\n          var groupAggregates = that._getAggregates(groupSummaryItems, remoteOperations && remoteOperations.grouping && remoteOperations.summary);\n\n          var totalAggregates = that._getAggregates(totalSummaryItems, remoteOperations && remoteOperations.summary);\n\n          if (groupAggregates.length || totalAggregates.length) {\n            return {\n              groupAggregates: groupAggregates,\n              totalAggregates: totalAggregates,\n              sortByGroups: function () {\n                return that._getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems);\n              }\n            };\n          }\n        },\n        publicMethods: function () {\n          var methods = this.callBase();\n          methods.push(\"getTotalSummaryValue\");\n          return methods;\n        },\n        getTotalSummaryValue: function (summaryItemName) {\n          var summaryItemIndex = this._findSummaryItem(this.option(\"summary.totalItems\"), summaryItemName);\n\n          var aggregates = this._dataSource.totalAggregates();\n\n          if (aggregates.length && summaryItemIndex > -1) {\n            return aggregates[summaryItemIndex];\n          }\n        },\n        optionChanged: function (args) {\n          if (\"summary\" === args.name || \"sortByGroupSummaryInfo\" === args.name) {\n            args.name = \"dataSource\";\n          }\n\n          this.callBase(args);\n        },\n        init: function () {\n          this._footerItems = [];\n          this.callBase();\n        },\n        footerItems: function () {\n          return this._footerItems;\n        }\n      },\n      editing: {\n        _refreshSummary: function () {\n          if (recalculateWhileEditing(this) && !this.isSaving()) {\n            this._dataController.refresh({\n              load: true,\n              changesOnly: true\n            });\n          }\n        },\n        _addChange: function (params) {\n          var result = this.callBase.apply(this, arguments);\n\n          if (params.type) {\n            this._refreshSummary();\n          }\n\n          return result;\n        },\n        _removeChange: function () {\n          var result = this.callBase.apply(this, arguments);\n\n          this._refreshSummary();\n\n          return result;\n        },\n        cancelEditData: function () {\n          var result = this.callBase.apply(this, arguments);\n\n          this._refreshSummary();\n\n          return result;\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n          row && $row.addClass(row.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE ? DATAGRID_GROUP_FOOTER_CLASS : \"\");\n          return $row;\n        },\n        _renderCells: function ($row, options) {\n          this.callBase.apply(this, arguments);\n\n          if (\"group\" === options.row.rowType && options.row.summaryCells && options.row.summaryCells.length) {\n            this._renderGroupSummaryCells($row, options);\n          }\n        },\n        _hasAlignByColumnSummaryItems: function (columnIndex, options) {\n          return !isDefined(options.columns[columnIndex].groupIndex) && options.row.summaryCells[columnIndex].length;\n        },\n        _getAlignByColumnCellCount: function (groupCellColSpan, options) {\n          var alignByColumnCellCount = 0;\n\n          for (var i = 1; i < groupCellColSpan; i++) {\n            var columnIndex = options.row.summaryCells.length - i;\n            alignByColumnCellCount = this._hasAlignByColumnSummaryItems(columnIndex, options) ? i : alignByColumnCellCount;\n          }\n\n          return alignByColumnCellCount;\n        },\n        _renderGroupSummaryCells: function ($row, options) {\n          var $groupCell = $row.children().last();\n          var groupCellColSpan = Number($groupCell.attr(\"colSpan\")) || 1;\n\n          var alignByColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options);\n\n          this._renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount);\n        },\n        _renderGroupSummaryCellsCore: function ($groupCell, options, groupCellColSpan, alignByColumnCellCount) {\n          if (alignByColumnCellCount > 0) {\n            $groupCell.attr(\"colSpan\", groupCellColSpan - alignByColumnCellCount);\n\n            for (var i = 0; i < alignByColumnCellCount; i++) {\n              var columnIndex = options.columns.length - alignByColumnCellCount + i;\n\n              this._renderCell($groupCell.parent(), extend({\n                column: options.columns[columnIndex],\n                columnIndex: this._getSummaryCellIndex(columnIndex, options.columns)\n              }, options));\n            }\n          }\n        },\n        _getSummaryCellIndex: function (columnIndex) {\n          return columnIndex;\n        },\n        _getCellTemplate: function (options) {\n          if (!options.column.command && !isDefined(options.column.groupIndex) && options.summaryItems && options.summaryItems.length) {\n            return renderSummaryCell;\n          } else {\n            return this.callBase(options);\n          }\n        },\n        _getCellOptions: function (options) {\n          var parameters = this.callBase(options);\n\n          if (options.row.summaryCells) {\n            return extend(parameters, getSummaryCellOptions(this, options));\n          } else {\n            return parameters;\n          }\n        }\n      }\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/data_grid/ui.data_grid.summary.js"],"names":["$","noop","isDefined","isPlainObject","isEmptyObject","isString","isFunction","each","map","extend","compileGetter","errors","gridCore","messageLocalization","dataSourceAdapter","ColumnsView","AggregateCalculator","dataQuery","storeHelper","normalizeSortingInfo","DATAGRID_TOTAL_FOOTER_CLASS","DATAGRID_SUMMARY_ITEM_CLASS","DATAGRID_TEXT_CONTENT_CLASS","DATAGRID_GROUP_FOOTER_CLASS","DATAGRID_GROUP_TEXT_CONTENT_CLASS","DATAGRID_NOWRAP_CLASS","DATAGRID_FOOTER_ROW_CLASS","DATAGRID_GROUP_FOOTER_ROW_TYPE","DATAGRID_TOTAL_FOOTER_ROW_TYPE","renderSummaryCell","cell","options","$cell","column","summaryItems","$summaryItems","command","i","length","summaryItem","push","css","alignment","addClass","cssClass","toggleClass","rowType","text","getSummaryText","summaryTexts","append","getSummaryCellOptions","that","option","totalItem","row","summaryCells","columnIndex","getGroupAggregates","data","summary","aggregates","recalculateWhileEditing","FooterView","inherit","_getRows","_dataController","footerItems","_getCellOptions","callBase","_renderCellContent","apply","arguments","_renderCore","change","needUpdateScrollLeft","columnIndices","element","empty","_updateContent","_renderTable","_updateScrollLeftPosition","$newTable","changeType","$row","getTableElement","find","$newRow","_updateCells","_rowClick","e","item","rowIndex","executeAction","_columnOptionChanged","optionNames","changeTypes","grouping","width","visibleWidth","_handleDataChanged","repaintChangesOnly","totalColumnIndices","render","_createRow","getHeight","getElementHeight","isVisible","SummaryDataSourceAdapterExtender","init","_totalAggregates","_summaryGetter","summaryGetter","_summary","totalAggregates","isLastLevelGroupItemsPagingLocal","sortByGroupsInfo","sortByGroups","sortLastLevelGroupItems","items","groups","paths","groupedItems","multiLevelGroup","toArray","result","forEach","path","forEachGroup","groupCount","callback","key","pop","itemsPath","toString","concat","SummaryDataSourceAdapterClientExtender","calculateAggregates","groupLevel","calculator","editingController","getController","insertedData","getInsertedData","applyAddedData","removedData","getRemovedData","applyRemovedData","updatedData","updatedItems","Object","defineProperty","get","set","value","filter","indexOf","groupAggregates","calculate","sortGroupsBySummary","group","sortGroupsBySummaryCore","sorts","query","index","sortBy","selector","desc","thenBy","enumerate","done","sortedItems","slice","_customizeRemoteOperations","remoteOperations","isCustomLoading","storeLoadOptions","isLoadingAll","groupSummary","paging","totalSummary","cachedExtra","cachedData","extra","_handleDataLoadedCore","loadOptions","_options$cachedData","_options$cachedData$e","operationTypes","hasOperations","keys","some","type","registerModule","defaultOptions","groupItems","totalItems","calculateCustomSummary","skipEmptyValues","texts","sum","format","sumOtherColumn","min","minOtherColumn","max","maxOtherColumn","avg","avgOtherColumn","count","sortByGroupSummaryInfo","views","footerView","extenders","controllers","_isDataColumn","groupIndex","showWhenGrouped","_isGroupFooterVisible","groupItem","_columnsController","columnOption","showInColumn","showInGroupFooter","_processGroupItems","isGroupFooterVisible","collectContinuationItems","isContinuationOnNextPage","values","_processGroupItem","summaryGroupItems","groupColumnIndex","afterGroupColumnIndex","visibleColumns","visibleIndex","prevColumn","_calculateSummaryCells","alignByColumn","calculateTargetColumnIndex","isGroupRow","summaryCellsByColumns","summaryIndex","aggregate","valueFormat","summaryType","getFormatByDataType","dataType","deserializeValue","columnCaption","caption","_getSummaryCells","summaryTotalItems","columnsController","getVisibleColumns","_updateItemsCore","dataSource","_dataSource","_footerItems","oldSummaryCells","summaryCell","JSON","stringify","_prepareUnsavedDataSelector","getUpdatedData","_prepareAggregateSelector","aggregator","Number","_getAggregates","commonSkipEmptyValues","calculateCellValue","bind","dataField","log","component","name","summaryProcess","seed","totalValue","step","finalize","_addSortInfo","groupColumn","sortOrder","_findSummaryItem","summaryItemIndex","_getSummarySortByGroups","groupSummaryItems","groupColumns","getGroupColumns","_createDataSourceAdapterCore","currentRemoteOperations","_getSummaryOptions","totalSummaryItems","publicMethods","methods","getTotalSummaryValue","summaryItemName","optionChanged","args","editing","_refreshSummary","isSaving","refresh","load","changesOnly","_addChange","params","_removeChange","cancelEditData","rowsView","_renderCells","_renderGroupSummaryCells","_hasAlignByColumnSummaryItems","columns","_getAlignByColumnCellCount","groupCellColSpan","alignByColumnCellCount","$groupCell","children","last","attr","_renderGroupSummaryCellsCore","_renderCell","parent","_getSummaryCellIndex","_getCellTemplate","parameters"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/data_grid/ui.data_grid.summary.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    noop\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    isDefined,\r\n    isPlainObject,\r\n    isEmptyObject,\r\n    isString,\r\n    isFunction\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each,\r\n    map\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    compileGetter\r\n} from \"../../core/utils/data\";\r\nimport errors from \"../widget/ui.errors\";\r\nimport gridCore from \"./ui.data_grid.core\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport dataSourceAdapter from \"./ui.data_grid.data_source_adapter\";\r\nimport {\r\n    ColumnsView\r\n} from \"../grid_core/ui.grid_core.columns_view\";\r\nimport AggregateCalculator from \"./aggregate_calculator\";\r\nimport dataQuery from \"../../data/query\";\r\nimport storeHelper from \"../../data/store_helper\";\r\nimport {\r\n    normalizeSortingInfo\r\n} from \"../../data/utils\";\r\nvar DATAGRID_TOTAL_FOOTER_CLASS = \"dx-datagrid-total-footer\";\r\nvar DATAGRID_SUMMARY_ITEM_CLASS = \"dx-datagrid-summary-item\";\r\nvar DATAGRID_TEXT_CONTENT_CLASS = \"dx-datagrid-text-content\";\r\nvar DATAGRID_GROUP_FOOTER_CLASS = \"dx-datagrid-group-footer\";\r\nvar DATAGRID_GROUP_TEXT_CONTENT_CLASS = \"dx-datagrid-group-text-content\";\r\nvar DATAGRID_NOWRAP_CLASS = \"dx-datagrid-nowrap\";\r\nvar DATAGRID_FOOTER_ROW_CLASS = \"dx-footer-row\";\r\nvar DATAGRID_GROUP_FOOTER_ROW_TYPE = \"groupFooter\";\r\nvar DATAGRID_TOTAL_FOOTER_ROW_TYPE = \"totalFooter\";\r\nexport var renderSummaryCell = function(cell, options) {\r\n    var $cell = $(cell);\r\n    var column = options.column;\r\n    var summaryItems = options.summaryItems;\r\n    var $summaryItems = [];\r\n    if (!column.command && summaryItems) {\r\n        for (var i = 0; i < summaryItems.length; i++) {\r\n            var summaryItem = summaryItems[i];\r\n            $summaryItems.push($(\"<div>\").css(\"textAlign\", summaryItem.alignment || column.alignment).addClass(DATAGRID_SUMMARY_ITEM_CLASS).addClass(DATAGRID_TEXT_CONTENT_CLASS).addClass(summaryItem.cssClass).toggleClass(DATAGRID_GROUP_TEXT_CONTENT_CLASS, \"group\" === options.rowType).text(gridCore.getSummaryText(summaryItem, options.summaryTexts)))\r\n        }\r\n        $cell.append($summaryItems)\r\n    }\r\n};\r\nvar getSummaryCellOptions = function(that, options) {\r\n    var summaryTexts = that.option(\"summary.texts\") || {};\r\n    return {\r\n        totalItem: options.row,\r\n        summaryItems: options.row.summaryCells[options.columnIndex],\r\n        summaryTexts: summaryTexts\r\n    }\r\n};\r\nvar getGroupAggregates = function(data) {\r\n    return data.summary || data.aggregates || []\r\n};\r\nvar recalculateWhileEditing = function(that) {\r\n    return that.option(\"summary.recalculateWhileEditing\")\r\n};\r\nexport var FooterView = ColumnsView.inherit({\r\n    _getRows: function() {\r\n        return this._dataController.footerItems()\r\n    },\r\n    _getCellOptions: function(options) {\r\n        return extend(this.callBase(options), getSummaryCellOptions(this, options))\r\n    },\r\n    _renderCellContent: function($cell, options) {\r\n        renderSummaryCell($cell, options);\r\n        this.callBase.apply(this, arguments)\r\n    },\r\n    _renderCore: function(change) {\r\n        var needUpdateScrollLeft = false;\r\n        var totalItem = this._dataController.footerItems()[0];\r\n        if (!change || !change.columnIndices) {\r\n            this.element().empty().addClass(DATAGRID_TOTAL_FOOTER_CLASS).toggleClass(DATAGRID_NOWRAP_CLASS, !this.option(\"wordWrapEnabled\"));\r\n            needUpdateScrollLeft = true\r\n        }\r\n        if (totalItem && totalItem.summaryCells && totalItem.summaryCells.length) {\r\n            this._updateContent(this._renderTable({\r\n                change: change\r\n            }), change);\r\n            needUpdateScrollLeft && this._updateScrollLeftPosition()\r\n        }\r\n    },\r\n    _updateContent: function($newTable, change) {\r\n        if (change && \"update\" === change.changeType && change.columnIndices) {\r\n            var $row = this.getTableElement().find(\".dx-row\");\r\n            var $newRow = $newTable.find(\".dx-row\");\r\n            this._updateCells($row, $newRow, change.columnIndices[0])\r\n        } else {\r\n            return this.callBase.apply(this, arguments)\r\n        }\r\n    },\r\n    _rowClick: function(e) {\r\n        var item = this._dataController.footerItems()[e.rowIndex] || {};\r\n        this.executeAction(\"onRowClick\", extend({}, e, item))\r\n    },\r\n    _columnOptionChanged: function(e) {\r\n        var optionNames = e.optionNames;\r\n        if (e.changeTypes.grouping) {\r\n            return\r\n        }\r\n        if (optionNames.width || optionNames.visibleWidth) {\r\n            this.callBase(e)\r\n        }\r\n    },\r\n    _handleDataChanged: function(e) {\r\n        var changeType = e.changeType;\r\n        if (\"update\" === e.changeType && e.repaintChangesOnly) {\r\n            if (!e.totalColumnIndices) {\r\n                this.render()\r\n            } else if (e.totalColumnIndices.length) {\r\n                this.render(null, {\r\n                    changeType: \"update\",\r\n                    columnIndices: [e.totalColumnIndices]\r\n                })\r\n            }\r\n        } else if (\"refresh\" === changeType || \"append\" === changeType || \"prepend\" === changeType) {\r\n            this.render()\r\n        }\r\n    },\r\n    _createRow: function(row) {\r\n        var $row = this.callBase.apply(this, arguments);\r\n        if (row.rowType === DATAGRID_TOTAL_FOOTER_ROW_TYPE) {\r\n            $row.addClass(DATAGRID_FOOTER_ROW_CLASS)\r\n        }\r\n        return $row\r\n    },\r\n    getHeight: function() {\r\n        return this.getElementHeight()\r\n    },\r\n    isVisible: function() {\r\n        return !!this._dataController.footerItems().length\r\n    }\r\n});\r\nvar SummaryDataSourceAdapterExtender = {\r\n    init: function() {\r\n        this.callBase.apply(this, arguments);\r\n        this._totalAggregates = [];\r\n        this._summaryGetter = noop\r\n    },\r\n    summaryGetter: function(_summaryGetter) {\r\n        if (!arguments.length) {\r\n            return this._summaryGetter\r\n        }\r\n        if (isFunction(_summaryGetter)) {\r\n            this._summaryGetter = _summaryGetter\r\n        }\r\n    },\r\n    summary: function(_summary) {\r\n        if (!arguments.length) {\r\n            return this._summaryGetter()\r\n        }\r\n        this._summaryGetter = function() {\r\n            return _summary\r\n        }\r\n    },\r\n    totalAggregates: function() {\r\n        return this._totalAggregates\r\n    },\r\n    isLastLevelGroupItemsPagingLocal: function() {\r\n        var summary = this.summary();\r\n        var sortByGroupsInfo = summary && summary.sortByGroups();\r\n        return sortByGroupsInfo && sortByGroupsInfo.length\r\n    },\r\n    sortLastLevelGroupItems: function(items, groups, paths) {\r\n        var groupedItems = storeHelper.multiLevelGroup(dataQuery(items), groups).toArray();\r\n        var result = [];\r\n        paths.forEach((function(path) {\r\n            ! function forEachGroup(groups, groupCount, callback, path) {\r\n                path = path || [];\r\n                for (var i = 0; i < groups.length; i++) {\r\n                    path.push(groups[i].key);\r\n                    if (1 === groupCount) {\r\n                        callback(path, groups[i].items)\r\n                    } else {\r\n                        forEachGroup(groups[i].items, groupCount - 1, callback, path)\r\n                    }\r\n                    path.pop()\r\n                }\r\n            }(groupedItems, groups.length, (function(itemsPath, items) {\r\n                if (path.toString() === itemsPath.toString()) {\r\n                    result = result.concat(items)\r\n                }\r\n            }))\r\n        }));\r\n        return result\r\n    }\r\n};\r\nvar SummaryDataSourceAdapterClientExtender = function() {\r\n    var calculateAggregates = function(that, summary, data, groupLevel) {\r\n        var calculator;\r\n        if (recalculateWhileEditing(that)) {\r\n            var editingController = that.getController(\"editing\");\r\n            if (editingController) {\r\n                var insertedData = editingController.getInsertedData();\r\n                if (insertedData.length) {\r\n                    data = function applyAddedData(data, insertedData, groupLevel) {\r\n                        if (groupLevel) {\r\n                            return applyAddedData(data, insertedData.map(item => ({\r\n                                items: [item]\r\n                            }), groupLevel - 1))\r\n                        }\r\n                        return data.concat(insertedData)\r\n                    }(data, insertedData, groupLevel)\r\n                }\r\n                var removedData = editingController.getRemovedData();\r\n                if (removedData.length) {\r\n                    data = function applyRemovedData(data, removedData, groupLevel) {\r\n                        if (groupLevel) {\r\n                            return data.map(data => {\r\n                                var updatedData = {};\r\n                                var updatedItems = applyRemovedData(data.items || [], removedData, groupLevel - 1);\r\n                                Object.defineProperty(updatedData, \"aggregates\", {\r\n                                    get: () => data.aggregates,\r\n                                    set: value => {\r\n                                        data.aggregates = value\r\n                                    }\r\n                                });\r\n                                return extend(updatedData, data, {\r\n                                    items: updatedItems\r\n                                })\r\n                            })\r\n                        }\r\n                        return data.filter(data => removedData.indexOf(data) < 0)\r\n                    }(data, removedData, groupLevel)\r\n                }\r\n            }\r\n        }\r\n        if (summary) {\r\n            calculator = new AggregateCalculator({\r\n                totalAggregates: summary.totalAggregates,\r\n                groupAggregates: summary.groupAggregates,\r\n                data: data,\r\n                groupLevel: groupLevel\r\n            });\r\n            calculator.calculate()\r\n        }\r\n        return calculator ? calculator.totalAggregates() : []\r\n    };\r\n    var sortGroupsBySummary = function(data, group, summary) {\r\n        var sortByGroups = summary && summary.sortByGroups && summary.sortByGroups();\r\n        if (sortByGroups && sortByGroups.length) {\r\n            return function sortGroupsBySummaryCore(items, groups, sortByGroups) {\r\n                if (!items || !groups.length) {\r\n                    return items\r\n                }\r\n                var group = groups[0];\r\n                var sorts = sortByGroups[0];\r\n                var query;\r\n                if (group && sorts && sorts.length) {\r\n                    query = dataQuery(items);\r\n                    each(sorts, (function(index) {\r\n                        if (0 === index) {\r\n                            query = query.sortBy(this.selector, this.desc)\r\n                        } else {\r\n                            query = query.thenBy(this.selector, this.desc)\r\n                        }\r\n                    }));\r\n                    query.enumerate().done((function(sortedItems) {\r\n                        items = sortedItems\r\n                    }))\r\n                }\r\n                groups = groups.slice(1);\r\n                sortByGroups = sortByGroups.slice(1);\r\n                if (groups.length && sortByGroups.length) {\r\n                    each(items, (function() {\r\n                        this.items = sortGroupsBySummaryCore(this.items, groups, sortByGroups)\r\n                    }))\r\n                }\r\n                return items\r\n            }(data, group, sortByGroups)\r\n        }\r\n        return data\r\n    };\r\n    return {\r\n        _customizeRemoteOperations: function(options) {\r\n            var summary = this.summary();\r\n            if (summary) {\r\n                if (options.remoteOperations.summary) {\r\n                    if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\r\n                        if (options.storeLoadOptions.group) {\r\n                            if (options.remoteOperations.grouping) {\r\n                                options.storeLoadOptions.groupSummary = summary.groupAggregates\r\n                            } else if (summary.groupAggregates.length) {\r\n                                options.remoteOperations.paging = false\r\n                            }\r\n                        }\r\n                        options.storeLoadOptions.totalSummary = summary.totalAggregates\r\n                    }\r\n                } else if (summary.totalAggregates.length || summary.groupAggregates.length && options.storeLoadOptions.group) {\r\n                    options.remoteOperations.paging = false\r\n                }\r\n            }\r\n            this.callBase.apply(this, arguments);\r\n            var cachedExtra = options.cachedData.extra;\r\n            if (cachedExtra && cachedExtra.summary && !options.isCustomLoading) {\r\n                options.storeLoadOptions.totalSummary = void 0\r\n            }\r\n        },\r\n        _handleDataLoadedCore: function(options) {\r\n            var groups = normalizeSortingInfo(options.storeLoadOptions.group || options.loadOptions.group || []);\r\n            var remoteOperations = options.remoteOperations || {};\r\n            var summary = this.summaryGetter()(remoteOperations);\r\n            if (!options.isCustomLoading || options.storeLoadOptions.isLoadingAll) {\r\n                if (remoteOperations.summary) {\r\n                    if (!remoteOperations.paging && groups.length && summary) {\r\n                        if (!remoteOperations.grouping) {\r\n                            calculateAggregates(this, {\r\n                                groupAggregates: summary.groupAggregates\r\n                            }, options.data, groups.length)\r\n                        }\r\n                        options.data = sortGroupsBySummary(options.data, groups, summary)\r\n                    }\r\n                } else if (!remoteOperations.paging && summary) {\r\n                    var _options$cachedData, _options$cachedData$e;\r\n                    var operationTypes = options.operationTypes || {};\r\n                    var hasOperations = Object.keys(operationTypes).some(type => operationTypes[type]);\r\n                    if (!hasOperations || !(null !== (_options$cachedData = options.cachedData) && void 0 !== _options$cachedData && null !== (_options$cachedData$e = _options$cachedData.extra) && void 0 !== _options$cachedData$e && _options$cachedData$e.summary) || groups.length && summary.groupAggregates.length) {\r\n                        var totalAggregates = calculateAggregates(this, summary, options.data, groups.length);\r\n                        options.extra = isPlainObject(options.extra) ? options.extra : {};\r\n                        options.extra.summary = totalAggregates;\r\n                        if (options.cachedData) {\r\n                            options.cachedData.extra = options.extra\r\n                        }\r\n                    }\r\n                    options.data = sortGroupsBySummary(options.data, groups, summary)\r\n                }\r\n            }\r\n            if (!options.isCustomLoading) {\r\n                this._totalAggregates = options.extra && options.extra.summary || this._totalAggregates\r\n            }\r\n            this.callBase(options)\r\n        }\r\n    }\r\n}();\r\ndataSourceAdapter.extend(SummaryDataSourceAdapterExtender);\r\ndataSourceAdapter.extend(SummaryDataSourceAdapterClientExtender);\r\ngridCore.registerModule(\"summary\", {\r\n    defaultOptions: function() {\r\n        return {\r\n            summary: {\r\n                groupItems: void 0,\r\n                totalItems: void 0,\r\n                calculateCustomSummary: void 0,\r\n                skipEmptyValues: true,\r\n                recalculateWhileEditing: false,\r\n                texts: {\r\n                    sum: messageLocalization.format(\"dxDataGrid-summarySum\"),\r\n                    sumOtherColumn: messageLocalization.format(\"dxDataGrid-summarySumOtherColumn\"),\r\n                    min: messageLocalization.format(\"dxDataGrid-summaryMin\"),\r\n                    minOtherColumn: messageLocalization.format(\"dxDataGrid-summaryMinOtherColumn\"),\r\n                    max: messageLocalization.format(\"dxDataGrid-summaryMax\"),\r\n                    maxOtherColumn: messageLocalization.format(\"dxDataGrid-summaryMaxOtherColumn\"),\r\n                    avg: messageLocalization.format(\"dxDataGrid-summaryAvg\"),\r\n                    avgOtherColumn: messageLocalization.format(\"dxDataGrid-summaryAvgOtherColumn\"),\r\n                    count: messageLocalization.format(\"dxDataGrid-summaryCount\")\r\n                }\r\n            },\r\n            sortByGroupSummaryInfo: void 0\r\n        }\r\n    },\r\n    views: {\r\n        footerView: FooterView\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: {\r\n                _isDataColumn: function(column) {\r\n                    return column && (!isDefined(column.groupIndex) || column.showWhenGrouped)\r\n                },\r\n                _isGroupFooterVisible: function() {\r\n                    var groupItems = this.option(\"summary.groupItems\") || [];\r\n                    for (var i = 0; i < groupItems.length; i++) {\r\n                        var groupItem = groupItems[i];\r\n                        var column = this._columnsController.columnOption(groupItem.showInColumn || groupItem.column);\r\n                        if (groupItem.showInGroupFooter && this._isDataColumn(column)) {\r\n                            return true\r\n                        }\r\n                    }\r\n                    return false\r\n                },\r\n                _processGroupItems: function(items, groupCount, options) {\r\n                    var data = options && options.data;\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    if (options) {\r\n                        if (void 0 === options.isGroupFooterVisible) {\r\n                            options.isGroupFooterVisible = this._isGroupFooterVisible()\r\n                        }\r\n                        if (data && data.items && options.isGroupFooterVisible && (options.collectContinuationItems || !data.isContinuationOnNextPage)) {\r\n                            result.push({\r\n                                rowType: DATAGRID_GROUP_FOOTER_ROW_TYPE,\r\n                                key: options.path.slice(),\r\n                                data: data,\r\n                                groupIndex: options.path.length - 1,\r\n                                values: []\r\n                            })\r\n                        }\r\n                    }\r\n                    return result\r\n                },\r\n                _processGroupItem: function(groupItem, options) {\r\n                    var that = this;\r\n                    if (!options.summaryGroupItems) {\r\n                        options.summaryGroupItems = that.option(\"summary.groupItems\") || []\r\n                    }\r\n                    if (\"group\" === groupItem.rowType) {\r\n                        var groupColumnIndex = -1;\r\n                        var afterGroupColumnIndex = -1;\r\n                        each(options.visibleColumns, (function(visibleIndex) {\r\n                            var prevColumn = options.visibleColumns[visibleIndex - 1];\r\n                            if (groupItem.groupIndex === this.groupIndex) {\r\n                                groupColumnIndex = this.index\r\n                            }\r\n                            if (visibleIndex > 0 && \"expand\" === prevColumn.command && \"expand\" !== this.command) {\r\n                                afterGroupColumnIndex = this.index\r\n                            }\r\n                        }));\r\n                        groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, (function(summaryItem, column) {\r\n                            if (summaryItem.showInGroupFooter) {\r\n                                return -1\r\n                            }\r\n                            if (summaryItem.alignByColumn && column && !isDefined(column.groupIndex) && column.index !== afterGroupColumnIndex) {\r\n                                return column.index\r\n                            } else {\r\n                                return groupColumnIndex\r\n                            }\r\n                        }), true)\r\n                    }\r\n                    if (groupItem.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE) {\r\n                        groupItem.summaryCells = this._calculateSummaryCells(options.summaryGroupItems, getGroupAggregates(groupItem.data), options.visibleColumns, (function(summaryItem, column) {\r\n                            return summaryItem.showInGroupFooter && that._isDataColumn(column) ? column.index : -1\r\n                        }))\r\n                    }\r\n                    return groupItem\r\n                },\r\n                _calculateSummaryCells: function(summaryItems, aggregates, visibleColumns, calculateTargetColumnIndex, isGroupRow) {\r\n                    var that = this;\r\n                    var summaryCells = [];\r\n                    var summaryCellsByColumns = {};\r\n                    each(summaryItems, (function(summaryIndex, summaryItem) {\r\n                        var column = that._columnsController.columnOption(summaryItem.column);\r\n                        var showInColumn = summaryItem.showInColumn && that._columnsController.columnOption(summaryItem.showInColumn) || column;\r\n                        var columnIndex = calculateTargetColumnIndex(summaryItem, showInColumn);\r\n                        if (columnIndex >= 0) {\r\n                            if (!summaryCellsByColumns[columnIndex]) {\r\n                                summaryCellsByColumns[columnIndex] = []\r\n                            }\r\n                            var aggregate = aggregates[summaryIndex];\r\n                            if (aggregate === aggregate) {\r\n                                var valueFormat;\r\n                                if (isDefined(summaryItem.valueFormat)) {\r\n                                    valueFormat = summaryItem.valueFormat\r\n                                } else if (\"count\" !== summaryItem.summaryType) {\r\n                                    valueFormat = gridCore.getFormatByDataType(column && column.dataType)\r\n                                }\r\n                                summaryCellsByColumns[columnIndex].push(extend({}, summaryItem, {\r\n                                    value: isString(aggregate) && column && column.deserializeValue ? column.deserializeValue(aggregate) : aggregate,\r\n                                    valueFormat: valueFormat,\r\n                                    columnCaption: column && column.index !== columnIndex ? column.caption : void 0\r\n                                }))\r\n                            }\r\n                        }\r\n                    }));\r\n                    if (!isEmptyObject(summaryCellsByColumns)) {\r\n                        visibleColumns.forEach((column, visibleIndex) => {\r\n                            var prevColumn = visibleColumns[visibleIndex - 1];\r\n                            var columnIndex = isGroupRow && (\"expand\" === (null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.command) || \"expand\" === column.command) ? null === prevColumn || void 0 === prevColumn ? void 0 : prevColumn.index : column.index;\r\n                            summaryCells.push(summaryCellsByColumns[columnIndex] || [])\r\n                        })\r\n                    }\r\n                    return summaryCells\r\n                },\r\n                _getSummaryCells: function(summaryTotalItems, totalAggregates) {\r\n                    var that = this;\r\n                    var columnsController = that._columnsController;\r\n                    return that._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(), (function(summaryItem, column) {\r\n                        return that._isDataColumn(column) ? column.index : -1\r\n                    }))\r\n                },\r\n                _updateItemsCore: function(change) {\r\n                    var summaryCells;\r\n                    var dataSource = this._dataSource;\r\n                    var footerItems = this._footerItems;\r\n                    var oldSummaryCells = footerItems && footerItems[0] && footerItems[0].summaryCells;\r\n                    var summaryTotalItems = this.option(\"summary.totalItems\");\r\n                    this._footerItems = [];\r\n                    if (dataSource && summaryTotalItems && summaryTotalItems.length) {\r\n                        var totalAggregates = dataSource.totalAggregates();\r\n                        summaryCells = this._getSummaryCells(summaryTotalItems, totalAggregates);\r\n                        if (change && change.repaintChangesOnly && oldSummaryCells) {\r\n                            change.totalColumnIndices = summaryCells.map((function(summaryCell, index) {\r\n                                if (JSON.stringify(summaryCell) !== JSON.stringify(oldSummaryCells[index])) {\r\n                                    return index\r\n                                }\r\n                                return -1\r\n                            })).filter(index => index >= 0)\r\n                        }\r\n                        if (summaryCells.length) {\r\n                            this._footerItems.push({\r\n                                rowType: DATAGRID_TOTAL_FOOTER_ROW_TYPE,\r\n                                summaryCells: summaryCells\r\n                            })\r\n                        }\r\n                    }\r\n                    this.callBase(change)\r\n                },\r\n                _prepareUnsavedDataSelector: function(selector) {\r\n                    if (recalculateWhileEditing(this)) {\r\n                        var editingController = this.getController(\"editing\");\r\n                        if (editingController) {\r\n                            return function(data) {\r\n                                data = editingController.getUpdatedData(data);\r\n                                return selector(data)\r\n                            }\r\n                        }\r\n                    }\r\n                    return selector\r\n                },\r\n                _prepareAggregateSelector: function(selector, aggregator) {\r\n                    selector = this._prepareUnsavedDataSelector(selector);\r\n                    if (\"avg\" === aggregator || \"sum\" === aggregator) {\r\n                        return function(data) {\r\n                            var value = selector(data);\r\n                            return isDefined(value) ? Number(value) : value\r\n                        }\r\n                    }\r\n                    return selector\r\n                },\r\n                _getAggregates: function(summaryItems, remoteOperations) {\r\n                    var that = this;\r\n                    var columnsController = that.getController(\"columns\");\r\n                    var calculateCustomSummary = that.option(\"summary.calculateCustomSummary\");\r\n                    var commonSkipEmptyValues = that.option(\"summary.skipEmptyValues\");\r\n                    return map(summaryItems || [], (function(summaryItem) {\r\n                        var column = columnsController.columnOption(summaryItem.column);\r\n                        var calculateCellValue = column && column.calculateCellValue ? column.calculateCellValue.bind(column) : compileGetter(column ? column.dataField : summaryItem.column);\r\n                        var aggregator = summaryItem.summaryType || \"count\";\r\n                        var skipEmptyValues = isDefined(summaryItem.skipEmptyValues) ? summaryItem.skipEmptyValues : commonSkipEmptyValues;\r\n                        if (remoteOperations) {\r\n                            return {\r\n                                selector: summaryItem.column,\r\n                                summaryType: aggregator\r\n                            }\r\n                        } else {\r\n                            var selector = that._prepareAggregateSelector(calculateCellValue, aggregator);\r\n                            if (\"custom\" === aggregator) {\r\n                                if (!calculateCustomSummary) {\r\n                                    errors.log(\"E1026\");\r\n                                    calculateCustomSummary = function() {}\r\n                                }\r\n                                var options = {\r\n                                    component: that.component,\r\n                                    name: summaryItem.name\r\n                                };\r\n                                calculateCustomSummary(options);\r\n                                options.summaryProcess = \"calculate\";\r\n                                aggregator = {\r\n                                    seed: function(groupIndex) {\r\n                                        options.summaryProcess = \"start\";\r\n                                        options.totalValue = void 0;\r\n                                        options.groupIndex = groupIndex;\r\n                                        delete options.value;\r\n                                        calculateCustomSummary(options);\r\n                                        return options.totalValue\r\n                                    },\r\n                                    step: function(totalValue, value) {\r\n                                        options.summaryProcess = \"calculate\";\r\n                                        options.totalValue = totalValue;\r\n                                        options.value = value;\r\n                                        calculateCustomSummary(options);\r\n                                        return options.totalValue\r\n                                    },\r\n                                    finalize: function(totalValue) {\r\n                                        options.summaryProcess = \"finalize\";\r\n                                        options.totalValue = totalValue;\r\n                                        delete options.value;\r\n                                        calculateCustomSummary(options);\r\n                                        return options.totalValue\r\n                                    }\r\n                                }\r\n                            }\r\n                            return {\r\n                                selector: selector,\r\n                                aggregator: aggregator,\r\n                                skipEmptyValues: skipEmptyValues\r\n                            }\r\n                        }\r\n                    }))\r\n                },\r\n                _addSortInfo: function(sortByGroups, groupColumn, selector, sortOrder) {\r\n                    if (groupColumn) {\r\n                        var groupIndex = groupColumn.groupIndex;\r\n                        sortOrder = sortOrder || groupColumn.sortOrder;\r\n                        if (isDefined(groupIndex)) {\r\n                            sortByGroups[groupIndex] = sortByGroups[groupIndex] || [];\r\n                            sortByGroups[groupIndex].push({\r\n                                selector: selector,\r\n                                desc: \"desc\" === sortOrder\r\n                            })\r\n                        }\r\n                    }\r\n                },\r\n                _findSummaryItem: function(summaryItems, name) {\r\n                    var summaryItemIndex = -1;\r\n                    if (isDefined(name)) {\r\n                        each(summaryItems || [], (function(index) {\r\n                            if (this.name === name || index === name || this.summaryType === name || this.column === name || (summaryItem = this, summaryType = summaryItem.summaryType, column = summaryItem.column, summaryType && column && summaryType + \"_\" + column) === name) {\r\n                                summaryItemIndex = index;\r\n                                return false\r\n                            }\r\n                            var summaryItem, summaryType, column\r\n                        }))\r\n                    }\r\n                    return summaryItemIndex\r\n                },\r\n                _getSummarySortByGroups: function(sortByGroupSummaryInfo, groupSummaryItems) {\r\n                    var that = this;\r\n                    var columnsController = that._columnsController;\r\n                    var groupColumns = columnsController.getGroupColumns();\r\n                    var sortByGroups = [];\r\n                    if (!groupSummaryItems || !groupSummaryItems.length) {\r\n                        return\r\n                    }\r\n                    each(sortByGroupSummaryInfo || [], (function() {\r\n                        var sortOrder = this.sortOrder;\r\n                        var groupColumn = this.groupColumn;\r\n                        var summaryItemIndex = that._findSummaryItem(groupSummaryItems, this.summaryItem);\r\n                        if (summaryItemIndex < 0) {\r\n                            return\r\n                        }\r\n                        var selector = function(data) {\r\n                            return getGroupAggregates(data)[summaryItemIndex]\r\n                        };\r\n                        if (isDefined(groupColumn)) {\r\n                            groupColumn = columnsController.columnOption(groupColumn);\r\n                            that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder)\r\n                        } else {\r\n                            each(groupColumns, (function(groupIndex, groupColumn) {\r\n                                that._addSortInfo(sortByGroups, groupColumn, selector, sortOrder)\r\n                            }))\r\n                        }\r\n                    }));\r\n                    return sortByGroups\r\n                },\r\n                _createDataSourceAdapterCore: function(dataSource, remoteOperations) {\r\n                    var that = this;\r\n                    var dataSourceAdapter = this.callBase(dataSource, remoteOperations);\r\n                    dataSourceAdapter.summaryGetter((function(currentRemoteOperations) {\r\n                        return that._getSummaryOptions(currentRemoteOperations || remoteOperations)\r\n                    }));\r\n                    return dataSourceAdapter\r\n                },\r\n                _getSummaryOptions: function(remoteOperations) {\r\n                    var that = this;\r\n                    var groupSummaryItems = that.option(\"summary.groupItems\");\r\n                    var totalSummaryItems = that.option(\"summary.totalItems\");\r\n                    var sortByGroupSummaryInfo = that.option(\"sortByGroupSummaryInfo\");\r\n                    var groupAggregates = that._getAggregates(groupSummaryItems, remoteOperations && remoteOperations.grouping && remoteOperations.summary);\r\n                    var totalAggregates = that._getAggregates(totalSummaryItems, remoteOperations && remoteOperations.summary);\r\n                    if (groupAggregates.length || totalAggregates.length) {\r\n                        return {\r\n                            groupAggregates: groupAggregates,\r\n                            totalAggregates: totalAggregates,\r\n                            sortByGroups: function() {\r\n                                return that._getSummarySortByGroups(sortByGroupSummaryInfo, groupSummaryItems)\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                publicMethods: function() {\r\n                    var methods = this.callBase();\r\n                    methods.push(\"getTotalSummaryValue\");\r\n                    return methods\r\n                },\r\n                getTotalSummaryValue: function(summaryItemName) {\r\n                    var summaryItemIndex = this._findSummaryItem(this.option(\"summary.totalItems\"), summaryItemName);\r\n                    var aggregates = this._dataSource.totalAggregates();\r\n                    if (aggregates.length && summaryItemIndex > -1) {\r\n                        return aggregates[summaryItemIndex]\r\n                    }\r\n                },\r\n                optionChanged: function(args) {\r\n                    if (\"summary\" === args.name || \"sortByGroupSummaryInfo\" === args.name) {\r\n                        args.name = \"dataSource\"\r\n                    }\r\n                    this.callBase(args)\r\n                },\r\n                init: function() {\r\n                    this._footerItems = [];\r\n                    this.callBase()\r\n                },\r\n                footerItems: function() {\r\n                    return this._footerItems\r\n                }\r\n            },\r\n            editing: {\r\n                _refreshSummary: function() {\r\n                    if (recalculateWhileEditing(this) && !this.isSaving()) {\r\n                        this._dataController.refresh({\r\n                            load: true,\r\n                            changesOnly: true\r\n                        })\r\n                    }\r\n                },\r\n                _addChange: function(params) {\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    if (params.type) {\r\n                        this._refreshSummary()\r\n                    }\r\n                    return result\r\n                },\r\n                _removeChange: function() {\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    this._refreshSummary();\r\n                    return result\r\n                },\r\n                cancelEditData: function() {\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    this._refreshSummary();\r\n                    return result\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    row && $row.addClass(row.rowType === DATAGRID_GROUP_FOOTER_ROW_TYPE ? DATAGRID_GROUP_FOOTER_CLASS : \"\");\r\n                    return $row\r\n                },\r\n                _renderCells: function($row, options) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (\"group\" === options.row.rowType && options.row.summaryCells && options.row.summaryCells.length) {\r\n                        this._renderGroupSummaryCells($row, options)\r\n                    }\r\n                },\r\n                _hasAlignByColumnSummaryItems: function(columnIndex, options) {\r\n                    return !isDefined(options.columns[columnIndex].groupIndex) && options.row.summaryCells[columnIndex].length\r\n                },\r\n                _getAlignByColumnCellCount: function(groupCellColSpan, options) {\r\n                    var alignByColumnCellCount = 0;\r\n                    for (var i = 1; i < groupCellColSpan; i++) {\r\n                        var columnIndex = options.row.summaryCells.length - i;\r\n                        alignByColumnCellCount = this._hasAlignByColumnSummaryItems(columnIndex, options) ? i : alignByColumnCellCount\r\n                    }\r\n                    return alignByColumnCellCount\r\n                },\r\n                _renderGroupSummaryCells: function($row, options) {\r\n                    var $groupCell = $row.children().last();\r\n                    var groupCellColSpan = Number($groupCell.attr(\"colSpan\")) || 1;\r\n                    var alignByColumnCellCount = this._getAlignByColumnCellCount(groupCellColSpan, options);\r\n                    this._renderGroupSummaryCellsCore($groupCell, options, groupCellColSpan, alignByColumnCellCount)\r\n                },\r\n                _renderGroupSummaryCellsCore: function($groupCell, options, groupCellColSpan, alignByColumnCellCount) {\r\n                    if (alignByColumnCellCount > 0) {\r\n                        $groupCell.attr(\"colSpan\", groupCellColSpan - alignByColumnCellCount);\r\n                        for (var i = 0; i < alignByColumnCellCount; i++) {\r\n                            var columnIndex = options.columns.length - alignByColumnCellCount + i;\r\n                            this._renderCell($groupCell.parent(), extend({\r\n                                column: options.columns[columnIndex],\r\n                                columnIndex: this._getSummaryCellIndex(columnIndex, options.columns)\r\n                            }, options))\r\n                        }\r\n                    }\r\n                },\r\n                _getSummaryCellIndex: function(columnIndex) {\r\n                    return columnIndex\r\n                },\r\n                _getCellTemplate: function(options) {\r\n                    if (!options.column.command && !isDefined(options.column.groupIndex) && options.summaryItems && options.summaryItems.length) {\r\n                        return renderSummaryCell\r\n                    } else {\r\n                        return this.callBase(options)\r\n                    }\r\n                },\r\n                _getCellOptions: function(options) {\r\n                    var parameters = this.callBase(options);\r\n                    if (options.row.summaryCells) {\r\n                        return extend(parameters, getSummaryCellOptions(this, options))\r\n                    } else {\r\n                        return parameters\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}