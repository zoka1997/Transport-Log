{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing_row_based.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { EDIT_MODE_ROW, MODES_WITH_DELAYED_FOCUS, ROW_SELECTED_CLASS, EDIT_FORM_CLASS } from \"./ui.grid_core.editing_constants\";\nvar EDIT_ROW = \"dx-edit-row\";\nexport var editingRowBasedModule = {\n  extenders: {\n    controllers: {\n      editing: {\n        isRowEditMode: function () {\n          return this.getEditMode() === EDIT_MODE_ROW;\n        },\n        _afterCancelEditData: function (rowIndex) {\n          var dataController = this._dataController;\n\n          if (this.isRowBasedEditMode() && rowIndex >= 0) {\n            dataController.updateItems({\n              changeType: \"update\",\n              rowIndices: [rowIndex, rowIndex + 1]\n            });\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _isDefaultButtonVisible: function (button, options) {\n          var isRowMode = this.isRowBasedEditMode();\n\n          var isEditRow = options.row && options.row.rowIndex === this._getVisibleEditRowIndex();\n\n          if (isRowMode) {\n            switch (button.name) {\n              case \"edit\":\n                return !isEditRow && this.allowUpdating(options);\n\n              case \"delete\":\n                return this.callBase.apply(this, arguments) && !isEditRow;\n\n              case \"save\":\n              case \"cancel\":\n                return isEditRow;\n\n              default:\n                return this.callBase.apply(this, arguments);\n            }\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        isEditRow: function (rowIndex) {\n          return this.isRowBasedEditMode() && this.isEditRowByIndex(rowIndex);\n        },\n        _cancelSaving: function () {\n          if (this.isRowBasedEditMode()) {\n            if (!this.hasChanges()) {\n              this._cancelEditDataCore();\n            }\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _refreshCore: function (params) {\n          var {\n            allowCancelEditing: allowCancelEditing\n          } = null !== params && void 0 !== params ? params : {};\n\n          if (this.isRowBasedEditMode()) {\n            var hasUpdateChanges = this.getChanges().filter(it => \"update\" === it.type).length > 0;\n            this.init();\n            allowCancelEditing && hasUpdateChanges && this._cancelEditDataCore();\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _isEditColumnVisible: function () {\n          var result = this.callBase.apply(this, arguments);\n          var editingOptions = this.option(\"editing\");\n          var isRowEditMode = this.isRowEditMode();\n          var isVisibleInRowEditMode = editingOptions.allowUpdating || editingOptions.allowAdding;\n          return result || isRowEditMode && isVisibleInRowEditMode;\n        },\n        _focusEditorIfNeed: function () {\n          var editMode = this.getEditMode();\n\n          if (this._needFocusEditor) {\n            if (-1 !== MODES_WITH_DELAYED_FOCUS.indexOf(editMode)) {\n              var $editingCell = this.getFocusedCellInRow(this._getVisibleEditRowIndex());\n\n              this._delayedInputFocus($editingCell, () => {\n                $editingCell && this.component.focus($editingCell);\n              });\n            }\n\n            this._needFocusEditor = false;\n          }\n        }\n      },\n      data: {\n        _getChangedColumnIndices: function (oldItem, newItem, rowIndex, isLiveUpdate) {\n          var editingController = this.getController(\"editing\");\n\n          if (editingController.isRowBasedEditMode() && oldItem.isEditing !== newItem.isEditing) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n\n          if (row) {\n            var editingController = this._editingController;\n            var isEditRow = editingController.isEditRow(row.rowIndex);\n\n            if (isEditRow) {\n              $row.addClass(EDIT_ROW);\n              $row.removeClass(ROW_SELECTED_CLASS);\n\n              if (\"detail\" === row.rowType) {\n                $row.addClass(this.addWidgetPrefix(EDIT_FORM_CLASS));\n              }\n            }\n          }\n\n          return $row;\n        },\n        _update: function (change) {\n          this.callBase(change);\n\n          if (\"updateSelection\" === change.changeType) {\n            this.getTableElements().children(\"tbody\").children(\".\" + EDIT_ROW).removeClass(ROW_SELECTED_CLASS);\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_row_based.js"],"names":["EDIT_MODE_ROW","MODES_WITH_DELAYED_FOCUS","ROW_SELECTED_CLASS","EDIT_FORM_CLASS","EDIT_ROW","editingRowBasedModule","extenders","controllers","editing","isRowEditMode","getEditMode","_afterCancelEditData","rowIndex","dataController","_dataController","isRowBasedEditMode","updateItems","changeType","rowIndices","callBase","apply","arguments","_isDefaultButtonVisible","button","options","isRowMode","isEditRow","row","_getVisibleEditRowIndex","name","allowUpdating","isEditRowByIndex","_cancelSaving","hasChanges","_cancelEditDataCore","_refreshCore","params","allowCancelEditing","hasUpdateChanges","getChanges","filter","it","type","length","init","_isEditColumnVisible","result","editingOptions","option","isVisibleInRowEditMode","allowAdding","_focusEditorIfNeed","editMode","_needFocusEditor","indexOf","$editingCell","getFocusedCellInRow","_delayedInputFocus","component","focus","data","_getChangedColumnIndices","oldItem","newItem","isLiveUpdate","editingController","getController","isEditing","views","rowsView","_createRow","$row","_editingController","addClass","removeClass","rowType","addWidgetPrefix","_update","change","getTableElements","children"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing_row_based.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    EDIT_MODE_ROW,\r\n    MODES_WITH_DELAYED_FOCUS,\r\n    ROW_SELECTED_CLASS,\r\n    EDIT_FORM_CLASS\r\n} from \"./ui.grid_core.editing_constants\";\r\nvar EDIT_ROW = \"dx-edit-row\";\r\nexport var editingRowBasedModule = {\r\n    extenders: {\r\n        controllers: {\r\n            editing: {\r\n                isRowEditMode: function() {\r\n                    return this.getEditMode() === EDIT_MODE_ROW\r\n                },\r\n                _afterCancelEditData: function(rowIndex) {\r\n                    var dataController = this._dataController;\r\n                    if (this.isRowBasedEditMode() && rowIndex >= 0) {\r\n                        dataController.updateItems({\r\n                            changeType: \"update\",\r\n                            rowIndices: [rowIndex, rowIndex + 1]\r\n                        })\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _isDefaultButtonVisible: function(button, options) {\r\n                    var isRowMode = this.isRowBasedEditMode();\r\n                    var isEditRow = options.row && options.row.rowIndex === this._getVisibleEditRowIndex();\r\n                    if (isRowMode) {\r\n                        switch (button.name) {\r\n                            case \"edit\":\r\n                                return !isEditRow && this.allowUpdating(options);\r\n                            case \"delete\":\r\n                                return this.callBase.apply(this, arguments) && !isEditRow;\r\n                            case \"save\":\r\n                            case \"cancel\":\r\n                                return isEditRow;\r\n                            default:\r\n                                return this.callBase.apply(this, arguments)\r\n                        }\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                isEditRow: function(rowIndex) {\r\n                    return this.isRowBasedEditMode() && this.isEditRowByIndex(rowIndex)\r\n                },\r\n                _cancelSaving: function() {\r\n                    if (this.isRowBasedEditMode()) {\r\n                        if (!this.hasChanges()) {\r\n                            this._cancelEditDataCore()\r\n                        }\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _refreshCore: function(params) {\r\n                    var {\r\n                        allowCancelEditing: allowCancelEditing\r\n                    } = null !== params && void 0 !== params ? params : {};\r\n                    if (this.isRowBasedEditMode()) {\r\n                        var hasUpdateChanges = this.getChanges().filter(it => \"update\" === it.type).length > 0;\r\n                        this.init();\r\n                        allowCancelEditing && hasUpdateChanges && this._cancelEditDataCore()\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _isEditColumnVisible: function() {\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    var editingOptions = this.option(\"editing\");\r\n                    var isRowEditMode = this.isRowEditMode();\r\n                    var isVisibleInRowEditMode = editingOptions.allowUpdating || editingOptions.allowAdding;\r\n                    return result || isRowEditMode && isVisibleInRowEditMode\r\n                },\r\n                _focusEditorIfNeed: function() {\r\n                    var editMode = this.getEditMode();\r\n                    if (this._needFocusEditor) {\r\n                        if (-1 !== MODES_WITH_DELAYED_FOCUS.indexOf(editMode)) {\r\n                            var $editingCell = this.getFocusedCellInRow(this._getVisibleEditRowIndex());\r\n                            this._delayedInputFocus($editingCell, () => {\r\n                                $editingCell && this.component.focus($editingCell)\r\n                            })\r\n                        }\r\n                        this._needFocusEditor = false\r\n                    }\r\n                }\r\n            },\r\n            data: {\r\n                _getChangedColumnIndices: function(oldItem, newItem, rowIndex, isLiveUpdate) {\r\n                    var editingController = this.getController(\"editing\");\r\n                    if (editingController.isRowBasedEditMode() && oldItem.isEditing !== newItem.isEditing) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    if (row) {\r\n                        var editingController = this._editingController;\r\n                        var isEditRow = editingController.isEditRow(row.rowIndex);\r\n                        if (isEditRow) {\r\n                            $row.addClass(EDIT_ROW);\r\n                            $row.removeClass(ROW_SELECTED_CLASS);\r\n                            if (\"detail\" === row.rowType) {\r\n                                $row.addClass(this.addWidgetPrefix(EDIT_FORM_CLASS))\r\n                            }\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _update: function(change) {\r\n                    this.callBase(change);\r\n                    if (\"updateSelection\" === change.changeType) {\r\n                        this.getTableElements().children(\"tbody\").children(\".\" + EDIT_ROW).removeClass(ROW_SELECTED_CLASS)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}