{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/utils.timeZone.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../core/utils/date\";\nimport timeZoneDataUtils from \"./timezones/utils.timezones_data\";\nimport DateAdapter from \"./dateAdapter\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar MINUTES_IN_HOUR = 60;\nvar MS_IN_MINUTE = 6e4;\n\nvar createUTCDateWithLocalOffset = date => {\n  if (!date) {\n    return null;\n  }\n\n  return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()));\n};\n\nvar createDateFromUTCWithLocalOffset = date => {\n  var result = DateAdapter(date);\n  var timezoneOffsetBeforeInMin = result.getTimezoneOffset();\n  result.addTime(result.getTimezoneOffset(\"minute\"));\n  result.subtractMinutes(timezoneOffsetBeforeInMin - result.getTimezoneOffset());\n  return result.source;\n};\n\nvar getTimeZones = function () {\n  var date = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Date();\n  var dateInUTC = createUTCDate(date);\n  return timeZoneDataUtils.getDisplayedTimeZones(dateInUTC.getTime());\n};\n\nvar createUTCDate = date => new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes()));\n\nvar getTimezoneOffsetChangeInMinutes = (startDate, endDate, updatedStartDate, updatedEndDate) => getDaylightOffset(updatedStartDate, updatedEndDate) - getDaylightOffset(startDate, endDate);\n\nvar getTimezoneOffsetChangeInMs = (startDate, endDate, updatedStartDate, updatedEndDate) => getTimezoneOffsetChangeInMinutes(startDate, endDate, updatedStartDate, updatedEndDate) * toMs(\"minute\");\n\nvar getDaylightOffset = (startDate, endDate) => new Date(startDate).getTimezoneOffset() - new Date(endDate).getTimezoneOffset();\n\nvar getDaylightOffsetInMs = (startDate, endDate) => getDaylightOffset(startDate, endDate) * toMs(\"minute\");\n\nvar calculateTimezoneByValue = function (timezone) {\n  var date = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new Date();\n\n  if (\"string\" === typeof timezone) {\n    var dateUtc = createUTCDate(date);\n    return timeZoneDataUtils.getTimeZoneOffsetById(timezone, dateUtc.getTime());\n  }\n\n  return timezone;\n};\n\nvar _getDaylightOffsetByTimezone = (startDate, endDate, timeZone) => calculateTimezoneByValue(timeZone, startDate) - calculateTimezoneByValue(timeZone, endDate);\n\nvar getCorrectedDateByDaylightOffsets = (convertedOriginalStartDate, convertedDate, date, timeZone, startDateTimezone) => {\n  var daylightOffsetByCommonTimezone = _getDaylightOffsetByTimezone(convertedOriginalStartDate, convertedDate, timeZone);\n\n  var daylightOffsetByAppointmentTimezone = _getDaylightOffsetByTimezone(convertedOriginalStartDate, convertedDate, startDateTimezone);\n\n  var diff = daylightOffsetByCommonTimezone - daylightOffsetByAppointmentTimezone;\n  return new Date(date.getTime() - diff * toMs(\"hour\"));\n};\n\nvar correctRecurrenceExceptionByTimezone = function (exception, exceptionByStartDate, timeZone, startDateTimeZone) {\n  var isBackConversion = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;\n  var timezoneOffset = (exception.getTimezoneOffset() - exceptionByStartDate.getTimezoneOffset()) / MINUTES_IN_HOUR;\n\n  if (startDateTimeZone) {\n    timezoneOffset = _getDaylightOffsetByTimezone(exceptionByStartDate, exception, startDateTimeZone);\n  } else if (timeZone) {\n    timezoneOffset = _getDaylightOffsetByTimezone(exceptionByStartDate, exception, timeZone);\n  }\n\n  return new Date(exception.getTime() + (isBackConversion ? -1 : 1) * timezoneOffset * toMs(\"hour\"));\n};\n\nvar isTimezoneChangeInDate = date => {\n  var startDayDate = new Date(new Date(date).setHours(0, 0, 0, 0));\n  var endDayDate = new Date(new Date(date).setHours(23, 59, 59, 0));\n  return startDayDate.getTimezoneOffset() - endDayDate.getTimezoneOffset() !== 0;\n};\n\nvar getDateWithoutTimezoneChange = date => {\n  var clonedDate = new Date(date);\n\n  if (isTimezoneChangeInDate(clonedDate)) {\n    var result = new Date(clonedDate);\n    return new Date(result.setDate(result.getDate() + 1));\n  }\n\n  return clonedDate;\n};\n\nvar isSameAppointmentDates = (startDate, endDate) => {\n  endDate = new Date(endDate.getTime() - 1);\n  return dateUtils.sameDate(startDate, endDate);\n};\n\nvar getClientTimezoneOffset = function () {\n  var date = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Date();\n  return date.getTimezoneOffset() * MS_IN_MINUTE;\n};\n\nvar getDiffBetweenClientTimezoneOffsets = function () {\n  var firstDate = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Date();\n  var secondDate = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new Date();\n  return getClientTimezoneOffset(firstDate) - getClientTimezoneOffset(secondDate);\n};\n\nvar isEqualLocalTimeZone = function (timeZoneName) {\n  var date = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new Date();\n\n  if (Intl) {\n    var localTimeZoneName = Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n    if (localTimeZoneName === timeZoneName) {\n      return true;\n    }\n  }\n\n  return isEqualLocalTimeZoneByDeclaration(timeZoneName, date);\n};\n\nvar hasDSTInLocalTimeZone = () => {\n  var [startDate, endDate] = getExtremeDates();\n  return startDate.getTimezoneOffset() !== endDate.getTimezoneOffset();\n};\n\nvar isEqualLocalTimeZoneByDeclaration = (timeZoneName, date) => {\n  var year = date.getFullYear();\n\n  var getOffset = date => -date.getTimezoneOffset() / 60;\n\n  var getDateAndMoveHourBack = dateStamp => new Date(dateStamp - 36e5);\n\n  var configTuple = timeZoneDataUtils.getTimeZoneDeclarationTuple(timeZoneName, year);\n  var [summerTime, winterTime] = configTuple;\n  var noDSTInTargetTimeZone = configTuple.length < 2;\n\n  if (noDSTInTargetTimeZone) {\n    var targetTimeZoneOffset = timeZoneDataUtils.getTimeZoneOffsetById(timeZoneName, date);\n    var localTimeZoneOffset = getOffset(date);\n\n    if (targetTimeZoneOffset !== localTimeZoneOffset) {\n      return false;\n    }\n\n    return hasDSTInLocalTimeZone() ? false : true;\n  }\n\n  var localSummerOffset = getOffset(new Date(summerTime.date));\n  var localWinterOffset = getOffset(new Date(winterTime.date));\n\n  if (localSummerOffset !== summerTime.offset) {\n    return false;\n  }\n\n  if (localSummerOffset === getOffset(getDateAndMoveHourBack(summerTime.date))) {\n    return false;\n  }\n\n  if (localWinterOffset !== winterTime.offset) {\n    return false;\n  }\n\n  if (localWinterOffset === getOffset(getDateAndMoveHourBack(winterTime.date))) {\n    return false;\n  }\n\n  return true;\n};\n\nvar getExtremeDates = () => {\n  var nowDate = new Date(Date.now());\n  var startDate = new Date();\n  var endDate = new Date();\n  startDate.setFullYear(nowDate.getFullYear(), 0, 1);\n  endDate.setFullYear(nowDate.getFullYear(), 6, 1);\n  return [startDate, endDate];\n};\n\nvar setOffsetsToDate = (targetDate, offsetsArray) => {\n  var newDateMs = offsetsArray.reduce((result, offset) => result + offset, targetDate.getTime());\n  return new Date(newDateMs);\n};\n\nvar utils = {\n  getDaylightOffset: getDaylightOffset,\n  getDaylightOffsetInMs: getDaylightOffsetInMs,\n  getTimezoneOffsetChangeInMinutes: getTimezoneOffsetChangeInMinutes,\n  getTimezoneOffsetChangeInMs: getTimezoneOffsetChangeInMs,\n  calculateTimezoneByValue: calculateTimezoneByValue,\n  getCorrectedDateByDaylightOffsets: getCorrectedDateByDaylightOffsets,\n  isSameAppointmentDates: isSameAppointmentDates,\n  correctRecurrenceExceptionByTimezone: correctRecurrenceExceptionByTimezone,\n  getClientTimezoneOffset: getClientTimezoneOffset,\n  getDiffBetweenClientTimezoneOffsets: getDiffBetweenClientTimezoneOffsets,\n  createUTCDateWithLocalOffset: createUTCDateWithLocalOffset,\n  createDateFromUTCWithLocalOffset: createDateFromUTCWithLocalOffset,\n  createUTCDate: createUTCDate,\n  isTimezoneChangeInDate: isTimezoneChangeInDate,\n  getDateWithoutTimezoneChange: getDateWithoutTimezoneChange,\n  hasDSTInLocalTimeZone: hasDSTInLocalTimeZone,\n  isEqualLocalTimeZone: isEqualLocalTimeZone,\n  isEqualLocalTimeZoneByDeclaration: isEqualLocalTimeZoneByDeclaration,\n  getTimeZones: getTimeZones,\n  setOffsetsToDate: setOffsetsToDate\n};\nexport default utils;","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/scheduler/utils.timeZone.js"],"names":["dateUtils","timeZoneDataUtils","DateAdapter","toMs","dateToMilliseconds","MINUTES_IN_HOUR","MS_IN_MINUTE","createUTCDateWithLocalOffset","date","Date","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","createDateFromUTCWithLocalOffset","result","timezoneOffsetBeforeInMin","getTimezoneOffset","addTime","subtractMinutes","source","getTimeZones","arguments","length","dateInUTC","createUTCDate","getDisplayedTimeZones","getTime","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getTimezoneOffsetChangeInMinutes","startDate","endDate","updatedStartDate","updatedEndDate","getDaylightOffset","getTimezoneOffsetChangeInMs","getDaylightOffsetInMs","calculateTimezoneByValue","timezone","dateUtc","getTimeZoneOffsetById","_getDaylightOffsetByTimezone","timeZone","getCorrectedDateByDaylightOffsets","convertedOriginalStartDate","convertedDate","startDateTimezone","daylightOffsetByCommonTimezone","daylightOffsetByAppointmentTimezone","diff","correctRecurrenceExceptionByTimezone","exception","exceptionByStartDate","startDateTimeZone","isBackConversion","timezoneOffset","isTimezoneChangeInDate","startDayDate","setHours","endDayDate","getDateWithoutTimezoneChange","clonedDate","setDate","isSameAppointmentDates","sameDate","getClientTimezoneOffset","getDiffBetweenClientTimezoneOffsets","firstDate","secondDate","isEqualLocalTimeZone","timeZoneName","Intl","localTimeZoneName","DateTimeFormat","resolvedOptions","isEqualLocalTimeZoneByDeclaration","hasDSTInLocalTimeZone","getExtremeDates","year","getOffset","getDateAndMoveHourBack","dateStamp","configTuple","getTimeZoneDeclarationTuple","summerTime","winterTime","noDSTInTargetTimeZone","targetTimeZoneOffset","localTimeZoneOffset","localSummerOffset","localWinterOffset","offset","nowDate","now","setFullYear","setOffsetsToDate","targetDate","offsetsArray","newDateMs","reduce","utils"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/utils.timeZone.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dateUtils from \"../../core/utils/date\";\r\nimport timeZoneDataUtils from \"./timezones/utils.timezones_data\";\r\nimport DateAdapter from \"./dateAdapter\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar MINUTES_IN_HOUR = 60;\r\nvar MS_IN_MINUTE = 6e4;\r\nvar createUTCDateWithLocalOffset = date => {\r\n    if (!date) {\r\n        return null\r\n    }\r\n    return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()))\r\n};\r\nvar createDateFromUTCWithLocalOffset = date => {\r\n    var result = DateAdapter(date);\r\n    var timezoneOffsetBeforeInMin = result.getTimezoneOffset();\r\n    result.addTime(result.getTimezoneOffset(\"minute\"));\r\n    result.subtractMinutes(timezoneOffsetBeforeInMin - result.getTimezoneOffset());\r\n    return result.source\r\n};\r\nvar getTimeZones = function() {\r\n    var date = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Date;\r\n    var dateInUTC = createUTCDate(date);\r\n    return timeZoneDataUtils.getDisplayedTimeZones(dateInUTC.getTime())\r\n};\r\nvar createUTCDate = date => new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes()));\r\nvar getTimezoneOffsetChangeInMinutes = (startDate, endDate, updatedStartDate, updatedEndDate) => getDaylightOffset(updatedStartDate, updatedEndDate) - getDaylightOffset(startDate, endDate);\r\nvar getTimezoneOffsetChangeInMs = (startDate, endDate, updatedStartDate, updatedEndDate) => getTimezoneOffsetChangeInMinutes(startDate, endDate, updatedStartDate, updatedEndDate) * toMs(\"minute\");\r\nvar getDaylightOffset = (startDate, endDate) => new Date(startDate).getTimezoneOffset() - new Date(endDate).getTimezoneOffset();\r\nvar getDaylightOffsetInMs = (startDate, endDate) => getDaylightOffset(startDate, endDate) * toMs(\"minute\");\r\nvar calculateTimezoneByValue = function(timezone) {\r\n    var date = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new Date;\r\n    if (\"string\" === typeof timezone) {\r\n        var dateUtc = createUTCDate(date);\r\n        return timeZoneDataUtils.getTimeZoneOffsetById(timezone, dateUtc.getTime())\r\n    }\r\n    return timezone\r\n};\r\nvar _getDaylightOffsetByTimezone = (startDate, endDate, timeZone) => calculateTimezoneByValue(timeZone, startDate) - calculateTimezoneByValue(timeZone, endDate);\r\nvar getCorrectedDateByDaylightOffsets = (convertedOriginalStartDate, convertedDate, date, timeZone, startDateTimezone) => {\r\n    var daylightOffsetByCommonTimezone = _getDaylightOffsetByTimezone(convertedOriginalStartDate, convertedDate, timeZone);\r\n    var daylightOffsetByAppointmentTimezone = _getDaylightOffsetByTimezone(convertedOriginalStartDate, convertedDate, startDateTimezone);\r\n    var diff = daylightOffsetByCommonTimezone - daylightOffsetByAppointmentTimezone;\r\n    return new Date(date.getTime() - diff * toMs(\"hour\"))\r\n};\r\nvar correctRecurrenceExceptionByTimezone = function(exception, exceptionByStartDate, timeZone, startDateTimeZone) {\r\n    var isBackConversion = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : false;\r\n    var timezoneOffset = (exception.getTimezoneOffset() - exceptionByStartDate.getTimezoneOffset()) / MINUTES_IN_HOUR;\r\n    if (startDateTimeZone) {\r\n        timezoneOffset = _getDaylightOffsetByTimezone(exceptionByStartDate, exception, startDateTimeZone)\r\n    } else if (timeZone) {\r\n        timezoneOffset = _getDaylightOffsetByTimezone(exceptionByStartDate, exception, timeZone)\r\n    }\r\n    return new Date(exception.getTime() + (isBackConversion ? -1 : 1) * timezoneOffset * toMs(\"hour\"))\r\n};\r\nvar isTimezoneChangeInDate = date => {\r\n    var startDayDate = new Date(new Date(date).setHours(0, 0, 0, 0));\r\n    var endDayDate = new Date(new Date(date).setHours(23, 59, 59, 0));\r\n    return startDayDate.getTimezoneOffset() - endDayDate.getTimezoneOffset() !== 0\r\n};\r\nvar getDateWithoutTimezoneChange = date => {\r\n    var clonedDate = new Date(date);\r\n    if (isTimezoneChangeInDate(clonedDate)) {\r\n        var result = new Date(clonedDate);\r\n        return new Date(result.setDate(result.getDate() + 1))\r\n    }\r\n    return clonedDate\r\n};\r\nvar isSameAppointmentDates = (startDate, endDate) => {\r\n    endDate = new Date(endDate.getTime() - 1);\r\n    return dateUtils.sameDate(startDate, endDate)\r\n};\r\nvar getClientTimezoneOffset = function() {\r\n    var date = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Date;\r\n    return date.getTimezoneOffset() * MS_IN_MINUTE\r\n};\r\nvar getDiffBetweenClientTimezoneOffsets = function() {\r\n    var firstDate = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : new Date;\r\n    var secondDate = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new Date;\r\n    return getClientTimezoneOffset(firstDate) - getClientTimezoneOffset(secondDate)\r\n};\r\nvar isEqualLocalTimeZone = function(timeZoneName) {\r\n    var date = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : new Date;\r\n    if (Intl) {\r\n        var localTimeZoneName = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n        if (localTimeZoneName === timeZoneName) {\r\n            return true\r\n        }\r\n    }\r\n    return isEqualLocalTimeZoneByDeclaration(timeZoneName, date)\r\n};\r\nvar hasDSTInLocalTimeZone = () => {\r\n    var [startDate, endDate] = getExtremeDates();\r\n    return startDate.getTimezoneOffset() !== endDate.getTimezoneOffset()\r\n};\r\nvar isEqualLocalTimeZoneByDeclaration = (timeZoneName, date) => {\r\n    var year = date.getFullYear();\r\n    var getOffset = date => -date.getTimezoneOffset() / 60;\r\n    var getDateAndMoveHourBack = dateStamp => new Date(dateStamp - 36e5);\r\n    var configTuple = timeZoneDataUtils.getTimeZoneDeclarationTuple(timeZoneName, year);\r\n    var [summerTime, winterTime] = configTuple;\r\n    var noDSTInTargetTimeZone = configTuple.length < 2;\r\n    if (noDSTInTargetTimeZone) {\r\n        var targetTimeZoneOffset = timeZoneDataUtils.getTimeZoneOffsetById(timeZoneName, date);\r\n        var localTimeZoneOffset = getOffset(date);\r\n        if (targetTimeZoneOffset !== localTimeZoneOffset) {\r\n            return false\r\n        }\r\n        return hasDSTInLocalTimeZone() ? false : true\r\n    }\r\n    var localSummerOffset = getOffset(new Date(summerTime.date));\r\n    var localWinterOffset = getOffset(new Date(winterTime.date));\r\n    if (localSummerOffset !== summerTime.offset) {\r\n        return false\r\n    }\r\n    if (localSummerOffset === getOffset(getDateAndMoveHourBack(summerTime.date))) {\r\n        return false\r\n    }\r\n    if (localWinterOffset !== winterTime.offset) {\r\n        return false\r\n    }\r\n    if (localWinterOffset === getOffset(getDateAndMoveHourBack(winterTime.date))) {\r\n        return false\r\n    }\r\n    return true\r\n};\r\nvar getExtremeDates = () => {\r\n    var nowDate = new Date(Date.now());\r\n    var startDate = new Date;\r\n    var endDate = new Date;\r\n    startDate.setFullYear(nowDate.getFullYear(), 0, 1);\r\n    endDate.setFullYear(nowDate.getFullYear(), 6, 1);\r\n    return [startDate, endDate]\r\n};\r\nvar setOffsetsToDate = (targetDate, offsetsArray) => {\r\n    var newDateMs = offsetsArray.reduce((result, offset) => result + offset, targetDate.getTime());\r\n    return new Date(newDateMs)\r\n};\r\nvar utils = {\r\n    getDaylightOffset: getDaylightOffset,\r\n    getDaylightOffsetInMs: getDaylightOffsetInMs,\r\n    getTimezoneOffsetChangeInMinutes: getTimezoneOffsetChangeInMinutes,\r\n    getTimezoneOffsetChangeInMs: getTimezoneOffsetChangeInMs,\r\n    calculateTimezoneByValue: calculateTimezoneByValue,\r\n    getCorrectedDateByDaylightOffsets: getCorrectedDateByDaylightOffsets,\r\n    isSameAppointmentDates: isSameAppointmentDates,\r\n    correctRecurrenceExceptionByTimezone: correctRecurrenceExceptionByTimezone,\r\n    getClientTimezoneOffset: getClientTimezoneOffset,\r\n    getDiffBetweenClientTimezoneOffsets: getDiffBetweenClientTimezoneOffsets,\r\n    createUTCDateWithLocalOffset: createUTCDateWithLocalOffset,\r\n    createDateFromUTCWithLocalOffset: createDateFromUTCWithLocalOffset,\r\n    createUTCDate: createUTCDate,\r\n    isTimezoneChangeInDate: isTimezoneChangeInDate,\r\n    getDateWithoutTimezoneChange: getDateWithoutTimezoneChange,\r\n    hasDSTInLocalTimeZone: hasDSTInLocalTimeZone,\r\n    isEqualLocalTimeZone: isEqualLocalTimeZone,\r\n    isEqualLocalTimeZoneByDeclaration: isEqualLocalTimeZoneByDeclaration,\r\n    getTimeZones: getTimeZones,\r\n    setOffsetsToDate: setOffsetsToDate\r\n};\r\nexport default utils;\r\n"]},"metadata":{},"sourceType":"module"}