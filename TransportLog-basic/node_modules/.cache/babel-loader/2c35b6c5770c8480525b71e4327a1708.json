{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/view_model/to_test/views/utils/month.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../../../../../../core/utils/date\";\nimport dateLocalization from \"../../../../../../../localization/date\";\nimport { getCalculatedFirstDayOfWeek, isDateInRange, setOptionHour } from \"./base\";\nexport var getViewStartByOptions = (startDate, currentDate, intervalCount, startViewDate) => {\n  if (!startDate) {\n    return new Date(currentDate);\n  }\n\n  var currentStartDate = new Date(startViewDate);\n  var validStartViewDate = new Date(startViewDate);\n  var diff = currentStartDate.getTime() <= currentDate.getTime() ? 1 : -1;\n  var endDate = new Date(new Date(validStartViewDate.setMonth(validStartViewDate.getMonth() + diff * intervalCount)));\n\n  while (!isDateInRange(currentDate, currentStartDate, endDate, diff)) {\n    currentStartDate = new Date(endDate);\n\n    if (diff > 0) {\n      currentStartDate.setDate(1);\n    }\n\n    endDate = new Date(new Date(endDate.setMonth(endDate.getMonth() + diff * intervalCount)));\n  }\n\n  return diff > 0 ? currentStartDate : endDate;\n};\nexport var calculateStartViewDate = (currentDate, startDayHour, startDate, intervalCount, firstDayOfWeekOption) => {\n  var viewStart = getViewStartByOptions(startDate, currentDate, intervalCount, dateUtils.getFirstMonthDate(startDate));\n  var firstMonthDate = dateUtils.getFirstMonthDate(viewStart);\n  var firstDayOfWeek = getCalculatedFirstDayOfWeek(firstDayOfWeekOption);\n  var firstViewDate = dateUtils.getFirstWeekDate(firstMonthDate, firstDayOfWeek);\n  return setOptionHour(firstViewDate, startDayHour);\n};\nexport var calculateCellIndex = (rowIndex, columnIndex, _, columnCount) => rowIndex * columnCount + columnIndex;\nexport var isFirstCellInMonthWithIntervalCount = (cellDate, intervalCount) => 1 === cellDate.getDate() && intervalCount > 1;\nexport var getCellText = (date, intervalCount) => {\n  if (isFirstCellInMonthWithIntervalCount(date, intervalCount)) {\n    var monthName = dateLocalization.getMonthNames(\"abbreviated\")[date.getMonth()];\n    return [monthName, dateLocalization.format(date, \"day\")].join(\" \");\n  }\n\n  return dateLocalization.format(date, \"dd\");\n};","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/renovation/ui/scheduler/view_model/to_test/views/utils/month.js"],"names":["dateUtils","dateLocalization","getCalculatedFirstDayOfWeek","isDateInRange","setOptionHour","getViewStartByOptions","startDate","currentDate","intervalCount","startViewDate","Date","currentStartDate","validStartViewDate","diff","getTime","endDate","setMonth","getMonth","setDate","calculateStartViewDate","startDayHour","firstDayOfWeekOption","viewStart","getFirstMonthDate","firstMonthDate","firstDayOfWeek","firstViewDate","getFirstWeekDate","calculateCellIndex","rowIndex","columnIndex","_","columnCount","isFirstCellInMonthWithIntervalCount","cellDate","getDate","getCellText","date","monthName","getMonthNames","format","join"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/renovation/ui/scheduler/view_model/to_test/views/utils/month.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dateUtils from \"../../../../../../../core/utils/date\";\r\nimport dateLocalization from \"../../../../../../../localization/date\";\r\nimport {\r\n    getCalculatedFirstDayOfWeek,\r\n    isDateInRange,\r\n    setOptionHour\r\n} from \"./base\";\r\nexport var getViewStartByOptions = (startDate, currentDate, intervalCount, startViewDate) => {\r\n    if (!startDate) {\r\n        return new Date(currentDate)\r\n    }\r\n    var currentStartDate = new Date(startViewDate);\r\n    var validStartViewDate = new Date(startViewDate);\r\n    var diff = currentStartDate.getTime() <= currentDate.getTime() ? 1 : -1;\r\n    var endDate = new Date(new Date(validStartViewDate.setMonth(validStartViewDate.getMonth() + diff * intervalCount)));\r\n    while (!isDateInRange(currentDate, currentStartDate, endDate, diff)) {\r\n        currentStartDate = new Date(endDate);\r\n        if (diff > 0) {\r\n            currentStartDate.setDate(1)\r\n        }\r\n        endDate = new Date(new Date(endDate.setMonth(endDate.getMonth() + diff * intervalCount)))\r\n    }\r\n    return diff > 0 ? currentStartDate : endDate\r\n};\r\nexport var calculateStartViewDate = (currentDate, startDayHour, startDate, intervalCount, firstDayOfWeekOption) => {\r\n    var viewStart = getViewStartByOptions(startDate, currentDate, intervalCount, dateUtils.getFirstMonthDate(startDate));\r\n    var firstMonthDate = dateUtils.getFirstMonthDate(viewStart);\r\n    var firstDayOfWeek = getCalculatedFirstDayOfWeek(firstDayOfWeekOption);\r\n    var firstViewDate = dateUtils.getFirstWeekDate(firstMonthDate, firstDayOfWeek);\r\n    return setOptionHour(firstViewDate, startDayHour)\r\n};\r\nexport var calculateCellIndex = (rowIndex, columnIndex, _, columnCount) => rowIndex * columnCount + columnIndex;\r\nexport var isFirstCellInMonthWithIntervalCount = (cellDate, intervalCount) => 1 === cellDate.getDate() && intervalCount > 1;\r\nexport var getCellText = (date, intervalCount) => {\r\n    if (isFirstCellInMonthWithIntervalCount(date, intervalCount)) {\r\n        var monthName = dateLocalization.getMonthNames(\"abbreviated\")[date.getMonth()];\r\n        return [monthName, dateLocalization.format(date, \"day\")].join(\" \")\r\n    }\r\n    return dateLocalization.format(date, \"dd\")\r\n};\r\n"]},"metadata":{},"sourceType":"module"}