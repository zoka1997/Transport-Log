{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space_month.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { noop } from \"../../../core/utils/common\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space.indicator\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport { utils } from \"../utils\";\nimport { hasWindow } from \"../../../core/utils/window\";\nimport dxrMonthDateTableLayout from \"../../../renovation/ui/scheduler/workspaces/month/date_table/layout.j\";\nimport { getViewStartByOptions, getCellText } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/month\";\nimport { formatWeekday } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport { VIEWS } from \"../constants\";\nvar MONTH_CLASS = \"dx-scheduler-work-space-month\";\nvar DATE_TABLE_CURRENT_DATE_CLASS = \"dx-scheduler-date-table-current-date\";\nvar DATE_TABLE_CELL_TEXT_CLASS = \"dx-scheduler-date-table-cell-text\";\nvar DATE_TABLE_FIRST_OF_MONTH_CLASS = \"dx-scheduler-date-table-first-of-month\";\nvar DATE_TABLE_OTHER_MONTH_DATE_CLASS = \"dx-scheduler-date-table-other-month\";\nvar toMs = dateUtils.dateToMilliseconds;\n\nclass SchedulerWorkSpaceMonth extends SchedulerWorkSpace {\n  get type() {\n    return VIEWS.MONTH;\n  }\n\n  _getElementClass() {\n    return MONTH_CLASS;\n  }\n\n  _getFormat() {\n    return formatWeekday;\n  }\n\n  _getIntervalBetween(currentDate) {\n    var firstViewDate = this.getStartViewDate();\n    var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\n    return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset;\n  }\n\n  _getDateGenerationOptions() {\n    return _extends({}, super._getDateGenerationOptions(), {\n      cellCountInDay: 1\n    });\n  }\n\n  getCellWidth() {\n    return this.cache.get(\"cellWidth\", () => {\n      var averageWidth = 0;\n\n      var cells = this._getCells().slice(0, 7);\n\n      cells.each((index, element) => {\n        averageWidth += hasWindow() ? getBoundingRect(element).width : 0;\n      });\n      return 0 === cells.length ? void 0 : averageWidth / 7;\n    });\n  }\n\n  _insertAllDayRowsIntoDateTable() {\n    return false;\n  }\n\n  _getCellCoordinatesByIndex(index) {\n    var rowIndex = Math.floor(index / this._getCellCount());\n    var columnIndex = index - this._getCellCount() * rowIndex;\n    return {\n      rowIndex: rowIndex,\n      columnIndex: columnIndex\n    };\n  }\n\n  _needCreateCrossScrolling() {\n    return this.option(\"crossScrollingEnabled\") || this._isVerticalGroupedWorkSpace();\n  }\n\n  _getViewStartByOptions() {\n    return getViewStartByOptions(this.option(\"startDate\"), this.option(\"currentDate\"), this.option(\"intervalCount\"), dateUtils.getFirstMonthDate(this.option(\"startDate\")));\n  }\n\n  _updateIndex(index) {\n    return index;\n  }\n\n  isIndicationAvailable() {\n    return false;\n  }\n\n  getIntervalDuration() {\n    return toMs(\"day\");\n  }\n\n  getTimePanelWidth() {\n    return 0;\n  }\n\n  supportAllDayRow() {\n    return false;\n  }\n\n  keepOriginalHours() {\n    return true;\n  }\n\n  getWorkSpaceLeftOffset() {\n    return 0;\n  }\n\n  needApplyCollectorOffset() {\n    return true;\n  }\n\n  _getHeaderDate() {\n    return this._getViewStartByOptions();\n  }\n\n  scrollToTime() {\n    return noop();\n  }\n\n  renderRAllDayPanel() {}\n\n  renderRTimeTable() {}\n\n  renderRDateTable() {\n    utils.renovation.renderComponent(this, this._$dateTable, dxrMonthDateTableLayout, \"renovatedDateTable\", this._getRDateTableProps());\n  }\n\n  _createWorkSpaceElements() {\n    if (this._isVerticalGroupedWorkSpace()) {\n      this._createWorkSpaceScrollableElements();\n    } else {\n      super._createWorkSpaceElements();\n    }\n  }\n\n  _toggleAllDayVisibility() {\n    return noop();\n  }\n\n  _changeAllDayVisibility() {\n    return noop();\n  }\n\n  _renderTimePanel() {\n    return noop();\n  }\n\n  _renderAllDayPanel() {\n    return noop();\n  }\n\n  _setMonthClassesToCell($cell, data) {\n    $cell.toggleClass(DATE_TABLE_CURRENT_DATE_CLASS, data.isCurrentDate).toggleClass(DATE_TABLE_FIRST_OF_MONTH_CLASS, data.firstDayOfMonth).toggleClass(DATE_TABLE_OTHER_MONTH_DATE_CLASS, data.otherMonth);\n  }\n\n  _createAllDayPanelElements() {}\n\n  _renderTableBody(options) {\n    options.getCellText = (rowIndex, columnIndex) => {\n      var date = this.viewDataProvider.completeViewDataMap[rowIndex][columnIndex].startDate;\n      return getCellText(date, this.option(\"intervalCount\"));\n    };\n\n    options.getCellTextClass = DATE_TABLE_CELL_TEXT_CLASS;\n    options.setAdditionalClasses = this._setMonthClassesToCell.bind(this), super._renderTableBody(options);\n  }\n\n}\n\nregisterComponent(\"dxSchedulerWorkSpaceMonth\", SchedulerWorkSpaceMonth);\nexport default SchedulerWorkSpaceMonth;","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.work_space_month.js"],"names":["_extends","noop","registerComponent","SchedulerWorkSpace","dateUtils","getBoundingRect","utils","hasWindow","dxrMonthDateTableLayout","getViewStartByOptions","getCellText","formatWeekday","VIEWS","MONTH_CLASS","DATE_TABLE_CURRENT_DATE_CLASS","DATE_TABLE_CELL_TEXT_CLASS","DATE_TABLE_FIRST_OF_MONTH_CLASS","DATE_TABLE_OTHER_MONTH_DATE_CLASS","toMs","dateToMilliseconds","SchedulerWorkSpaceMonth","type","MONTH","_getElementClass","_getFormat","_getIntervalBetween","currentDate","firstViewDate","getStartViewDate","timeZoneOffset","getTimezonesDifference","getTime","option","_getDateGenerationOptions","cellCountInDay","getCellWidth","cache","get","averageWidth","cells","_getCells","slice","each","index","element","width","length","_insertAllDayRowsIntoDateTable","_getCellCoordinatesByIndex","rowIndex","Math","floor","_getCellCount","columnIndex","_needCreateCrossScrolling","_isVerticalGroupedWorkSpace","_getViewStartByOptions","getFirstMonthDate","_updateIndex","isIndicationAvailable","getIntervalDuration","getTimePanelWidth","supportAllDayRow","keepOriginalHours","getWorkSpaceLeftOffset","needApplyCollectorOffset","_getHeaderDate","scrollToTime","renderRAllDayPanel","renderRTimeTable","renderRDateTable","renovation","renderComponent","_$dateTable","_getRDateTableProps","_createWorkSpaceElements","_createWorkSpaceScrollableElements","_toggleAllDayVisibility","_changeAllDayVisibility","_renderTimePanel","_renderAllDayPanel","_setMonthClassesToCell","$cell","data","toggleClass","isCurrentDate","firstDayOfMonth","otherMonth","_createAllDayPanelElements","_renderTableBody","options","date","viewDataProvider","completeViewDataMap","startDate","getCellTextClass","setAdditionalClasses","bind"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space_month.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    noop\r\n} from \"../../../core/utils/common\";\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space.indicator\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport {\r\n    utils\r\n} from \"../utils\";\r\nimport {\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nimport dxrMonthDateTableLayout from \"../../../renovation/ui/scheduler/workspaces/month/date_table/layout.j\";\r\nimport {\r\n    getViewStartByOptions,\r\n    getCellText\r\n} from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/month\";\r\nimport {\r\n    formatWeekday\r\n} from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport {\r\n    VIEWS\r\n} from \"../constants\";\r\nvar MONTH_CLASS = \"dx-scheduler-work-space-month\";\r\nvar DATE_TABLE_CURRENT_DATE_CLASS = \"dx-scheduler-date-table-current-date\";\r\nvar DATE_TABLE_CELL_TEXT_CLASS = \"dx-scheduler-date-table-cell-text\";\r\nvar DATE_TABLE_FIRST_OF_MONTH_CLASS = \"dx-scheduler-date-table-first-of-month\";\r\nvar DATE_TABLE_OTHER_MONTH_DATE_CLASS = \"dx-scheduler-date-table-other-month\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nclass SchedulerWorkSpaceMonth extends SchedulerWorkSpace {\r\n    get type() {\r\n        return VIEWS.MONTH\r\n    }\r\n    _getElementClass() {\r\n        return MONTH_CLASS\r\n    }\r\n    _getFormat() {\r\n        return formatWeekday\r\n    }\r\n    _getIntervalBetween(currentDate) {\r\n        var firstViewDate = this.getStartViewDate();\r\n        var timeZoneOffset = dateUtils.getTimezonesDifference(firstViewDate, currentDate);\r\n        return currentDate.getTime() - (firstViewDate.getTime() - 36e5 * this.option(\"startDayHour\")) - timeZoneOffset\r\n    }\r\n    _getDateGenerationOptions() {\r\n        return _extends({}, super._getDateGenerationOptions(), {\r\n            cellCountInDay: 1\r\n        })\r\n    }\r\n    getCellWidth() {\r\n        return this.cache.get(\"cellWidth\", () => {\r\n            var averageWidth = 0;\r\n            var cells = this._getCells().slice(0, 7);\r\n            cells.each((index, element) => {\r\n                averageWidth += hasWindow() ? getBoundingRect(element).width : 0\r\n            });\r\n            return 0 === cells.length ? void 0 : averageWidth / 7\r\n        })\r\n    }\r\n    _insertAllDayRowsIntoDateTable() {\r\n        return false\r\n    }\r\n    _getCellCoordinatesByIndex(index) {\r\n        var rowIndex = Math.floor(index / this._getCellCount());\r\n        var columnIndex = index - this._getCellCount() * rowIndex;\r\n        return {\r\n            rowIndex: rowIndex,\r\n            columnIndex: columnIndex\r\n        }\r\n    }\r\n    _needCreateCrossScrolling() {\r\n        return this.option(\"crossScrollingEnabled\") || this._isVerticalGroupedWorkSpace()\r\n    }\r\n    _getViewStartByOptions() {\r\n        return getViewStartByOptions(this.option(\"startDate\"), this.option(\"currentDate\"), this.option(\"intervalCount\"), dateUtils.getFirstMonthDate(this.option(\"startDate\")))\r\n    }\r\n    _updateIndex(index) {\r\n        return index\r\n    }\r\n    isIndicationAvailable() {\r\n        return false\r\n    }\r\n    getIntervalDuration() {\r\n        return toMs(\"day\")\r\n    }\r\n    getTimePanelWidth() {\r\n        return 0\r\n    }\r\n    supportAllDayRow() {\r\n        return false\r\n    }\r\n    keepOriginalHours() {\r\n        return true\r\n    }\r\n    getWorkSpaceLeftOffset() {\r\n        return 0\r\n    }\r\n    needApplyCollectorOffset() {\r\n        return true\r\n    }\r\n    _getHeaderDate() {\r\n        return this._getViewStartByOptions()\r\n    }\r\n    scrollToTime() {\r\n        return noop()\r\n    }\r\n    renderRAllDayPanel() {}\r\n    renderRTimeTable() {}\r\n    renderRDateTable() {\r\n        utils.renovation.renderComponent(this, this._$dateTable, dxrMonthDateTableLayout, \"renovatedDateTable\", this._getRDateTableProps())\r\n    }\r\n    _createWorkSpaceElements() {\r\n        if (this._isVerticalGroupedWorkSpace()) {\r\n            this._createWorkSpaceScrollableElements()\r\n        } else {\r\n            super._createWorkSpaceElements()\r\n        }\r\n    }\r\n    _toggleAllDayVisibility() {\r\n        return noop()\r\n    }\r\n    _changeAllDayVisibility() {\r\n        return noop()\r\n    }\r\n    _renderTimePanel() {\r\n        return noop()\r\n    }\r\n    _renderAllDayPanel() {\r\n        return noop()\r\n    }\r\n    _setMonthClassesToCell($cell, data) {\r\n        $cell.toggleClass(DATE_TABLE_CURRENT_DATE_CLASS, data.isCurrentDate).toggleClass(DATE_TABLE_FIRST_OF_MONTH_CLASS, data.firstDayOfMonth).toggleClass(DATE_TABLE_OTHER_MONTH_DATE_CLASS, data.otherMonth)\r\n    }\r\n    _createAllDayPanelElements() {}\r\n    _renderTableBody(options) {\r\n        options.getCellText = (rowIndex, columnIndex) => {\r\n            var date = this.viewDataProvider.completeViewDataMap[rowIndex][columnIndex].startDate;\r\n            return getCellText(date, this.option(\"intervalCount\"))\r\n        };\r\n        options.getCellTextClass = DATE_TABLE_CELL_TEXT_CLASS;\r\n        options.setAdditionalClasses = this._setMonthClassesToCell.bind(this), super._renderTableBody(options)\r\n    }\r\n}\r\nregisterComponent(\"dxSchedulerWorkSpaceMonth\", SchedulerWorkSpaceMonth);\r\nexport default SchedulerWorkSpaceMonth;\r\n"]},"metadata":{},"sourceType":"module"}