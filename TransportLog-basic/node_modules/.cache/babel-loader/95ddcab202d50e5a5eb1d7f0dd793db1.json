{"ast":null,"code":"/**\r\n * DevExtreme (esm/core/utils/math.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isExponential } from \"./type\";\n\nvar sign = function (value) {\n  if (0 === value) {\n    return 0;\n  }\n\n  return value / Math.abs(value);\n};\n\nvar fitIntoRange = function (value, minValue, maxValue) {\n  var isMinValueUndefined = !minValue && 0 !== minValue;\n  var isMaxValueUndefined = !maxValue && 0 !== maxValue;\n  isMinValueUndefined && (minValue = !isMaxValueUndefined ? Math.min(value, maxValue) : value);\n  isMaxValueUndefined && (maxValue = !isMinValueUndefined ? Math.max(value, minValue) : value);\n  return Math.min(Math.max(value, minValue), maxValue);\n};\n\nvar inRange = function (value, minValue, maxValue) {\n  return value >= minValue && value <= maxValue;\n};\n\nfunction getExponent(value) {\n  return Math.abs(parseInt(value.toExponential().split(\"e\")[1]));\n}\n\nfunction getExponentialNotation(value) {\n  var parts = value.toExponential().split(\"e\");\n  var mantissa = parseFloat(parts[0]);\n  var exponent = parseInt(parts[1]);\n  return {\n    exponent: exponent,\n    mantissa: mantissa\n  };\n}\n\nfunction multiplyInExponentialForm(value, exponentShift) {\n  var exponentialNotation = getExponentialNotation(value);\n  return parseFloat(\"\".concat(exponentialNotation.mantissa, \"e\").concat(exponentialNotation.exponent + exponentShift));\n}\n\nfunction _isEdgeBug() {\n  return \"0.000300\" !== 3e-4.toPrecision(3);\n}\n\nfunction adjust(value, interval) {\n  var precision = getPrecision(interval || 0) + 2;\n  var separatedValue = value.toString().split(\".\");\n  var sourceValue = value;\n  var absValue = Math.abs(value);\n  var separatedAdjustedValue;\n  var isExponentValue = isExponential(value);\n  var integerPart = absValue > 1 ? 10 : 0;\n\n  if (1 === separatedValue.length) {\n    return value;\n  }\n\n  if (!isExponentValue) {\n    if (isExponential(interval)) {\n      precision = separatedValue[0].length + getExponent(interval);\n    }\n\n    value = absValue;\n    value = value - Math.floor(value) + integerPart;\n  }\n\n  precision = _isEdgeBug() && getExponent(value) > 6 || precision > 7 ? 15 : 7;\n\n  if (!isExponentValue) {\n    separatedAdjustedValue = parseFloat(value.toPrecision(precision)).toString().split(\".\");\n\n    if (separatedAdjustedValue[0] === integerPart.toString()) {\n      return parseFloat(separatedValue[0] + \".\" + separatedAdjustedValue[1]);\n    }\n  }\n\n  return parseFloat(sourceValue.toPrecision(precision));\n}\n\nfunction getPrecision(value) {\n  var str = value.toString();\n\n  if (str.indexOf(\".\") < 0) {\n    return 0;\n  }\n\n  var mantissa = str.split(\".\");\n  var positionOfDelimiter = mantissa[1].indexOf(\"e\");\n  return positionOfDelimiter >= 0 ? positionOfDelimiter : mantissa[1].length;\n}\n\nfunction getRoot(x, n) {\n  if (x < 0 && n % 2 !== 1) {\n    return NaN;\n  }\n\n  var y = Math.pow(Math.abs(x), 1 / n);\n  return n % 2 === 1 && x < 0 ? -y : y;\n}\n\nfunction solveCubicEquation(a, b, c, d) {\n  if (Math.abs(a) < 1e-8) {\n    a = b;\n    b = c;\n    c = d;\n\n    if (Math.abs(a) < 1e-8) {\n      a = b;\n      b = c;\n\n      if (Math.abs(a) < 1e-8) {\n        return [];\n      }\n\n      return [-b / a];\n    }\n\n    var D2 = b * b - 4 * a * c;\n\n    if (Math.abs(D2) < 1e-8) {\n      return [-b / (2 * a)];\n    } else if (D2 > 0) {\n      return [(-b + Math.sqrt(D2)) / (2 * a), (-b - Math.sqrt(D2)) / (2 * a)];\n    }\n\n    return [];\n  }\n\n  var p = (3 * a * c - b * b) / (3 * a * a);\n  var q = (2 * b * b * b - 9 * a * b * c + 27 * a * a * d) / (27 * a * a * a);\n  var roots;\n  var u;\n\n  if (Math.abs(p) < 1e-8) {\n    roots = [getRoot(-q, 3)];\n  } else if (Math.abs(q) < 1e-8) {\n    roots = [0].concat(p < 0 ? [Math.sqrt(-p), -Math.sqrt(-p)] : []);\n  } else {\n    var D3 = q * q / 4 + p * p * p / 27;\n\n    if (Math.abs(D3) < 1e-8) {\n      roots = [-1.5 * q / p, 3 * q / p];\n    } else if (D3 > 0) {\n      u = getRoot(-q / 2 - Math.sqrt(D3), 3);\n      roots = [u - p / (3 * u)];\n    } else {\n      u = 2 * Math.sqrt(-p / 3);\n      var t = Math.acos(3 * q / p / u) / 3;\n      var k = 2 * Math.PI / 3;\n      roots = [u * Math.cos(t), u * Math.cos(t - k), u * Math.cos(t - 2 * k)];\n    }\n  }\n\n  for (var i = 0; i < roots.length; i++) {\n    roots[i] -= b / (3 * a);\n  }\n\n  return roots;\n}\n\nfunction trunc(value) {\n  return Math.trunc ? Math.trunc(value) : value > 0 ? Math.floor(value) : Math.ceil(value);\n}\n\nfunction getRemainderByDivision(dividend, divider, digitsCount) {\n  if (divider === parseInt(divider)) {\n    return dividend % divider;\n  }\n\n  var quotient = roundFloatPart(dividend / divider, digitsCount);\n  return (quotient - parseInt(quotient)) * divider;\n}\n\nfunction getExponentLength(value) {\n  var _valueString$split$;\n\n  var valueString = value.toString();\n  return (null === (_valueString$split$ = valueString.split(\".\")[1]) || void 0 === _valueString$split$ ? void 0 : _valueString$split$.length) || parseInt(valueString.split(\"e-\")[1]) || 0;\n}\n\nfunction roundFloatPart(value) {\n  var digitsCount = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\n  return parseFloat(value.toFixed(digitsCount));\n}\n\nexport { sign, fitIntoRange, inRange, adjust, getPrecision, getExponent, getRoot, solveCubicEquation, trunc, roundFloatPart, getExponentLength, getRemainderByDivision, multiplyInExponentialForm };","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/core/utils/math.js"],"names":["isExponential","sign","value","Math","abs","fitIntoRange","minValue","maxValue","isMinValueUndefined","isMaxValueUndefined","min","max","inRange","getExponent","parseInt","toExponential","split","getExponentialNotation","parts","mantissa","parseFloat","exponent","multiplyInExponentialForm","exponentShift","exponentialNotation","concat","_isEdgeBug","toPrecision","adjust","interval","precision","getPrecision","separatedValue","toString","sourceValue","absValue","separatedAdjustedValue","isExponentValue","integerPart","length","floor","str","indexOf","positionOfDelimiter","getRoot","x","n","NaN","y","pow","solveCubicEquation","a","b","c","d","D2","sqrt","p","q","roots","u","D3","t","acos","k","PI","cos","i","trunc","ceil","getRemainderByDivision","dividend","divider","digitsCount","quotient","roundFloatPart","getExponentLength","_valueString$split$","valueString","arguments","toFixed"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/core/utils/math.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isExponential\r\n} from \"./type\";\r\nvar sign = function(value) {\r\n    if (0 === value) {\r\n        return 0\r\n    }\r\n    return value / Math.abs(value)\r\n};\r\nvar fitIntoRange = function(value, minValue, maxValue) {\r\n    var isMinValueUndefined = !minValue && 0 !== minValue;\r\n    var isMaxValueUndefined = !maxValue && 0 !== maxValue;\r\n    isMinValueUndefined && (minValue = !isMaxValueUndefined ? Math.min(value, maxValue) : value);\r\n    isMaxValueUndefined && (maxValue = !isMinValueUndefined ? Math.max(value, minValue) : value);\r\n    return Math.min(Math.max(value, minValue), maxValue)\r\n};\r\nvar inRange = function(value, minValue, maxValue) {\r\n    return value >= minValue && value <= maxValue\r\n};\r\n\r\nfunction getExponent(value) {\r\n    return Math.abs(parseInt(value.toExponential().split(\"e\")[1]))\r\n}\r\n\r\nfunction getExponentialNotation(value) {\r\n    var parts = value.toExponential().split(\"e\");\r\n    var mantissa = parseFloat(parts[0]);\r\n    var exponent = parseInt(parts[1]);\r\n    return {\r\n        exponent: exponent,\r\n        mantissa: mantissa\r\n    }\r\n}\r\n\r\nfunction multiplyInExponentialForm(value, exponentShift) {\r\n    var exponentialNotation = getExponentialNotation(value);\r\n    return parseFloat(\"\".concat(exponentialNotation.mantissa, \"e\").concat(exponentialNotation.exponent + exponentShift))\r\n}\r\n\r\nfunction _isEdgeBug() {\r\n    return \"0.000300\" !== 3e-4.toPrecision(3)\r\n}\r\n\r\nfunction adjust(value, interval) {\r\n    var precision = getPrecision(interval || 0) + 2;\r\n    var separatedValue = value.toString().split(\".\");\r\n    var sourceValue = value;\r\n    var absValue = Math.abs(value);\r\n    var separatedAdjustedValue;\r\n    var isExponentValue = isExponential(value);\r\n    var integerPart = absValue > 1 ? 10 : 0;\r\n    if (1 === separatedValue.length) {\r\n        return value\r\n    }\r\n    if (!isExponentValue) {\r\n        if (isExponential(interval)) {\r\n            precision = separatedValue[0].length + getExponent(interval)\r\n        }\r\n        value = absValue;\r\n        value = value - Math.floor(value) + integerPart\r\n    }\r\n    precision = _isEdgeBug() && getExponent(value) > 6 || precision > 7 ? 15 : 7;\r\n    if (!isExponentValue) {\r\n        separatedAdjustedValue = parseFloat(value.toPrecision(precision)).toString().split(\".\");\r\n        if (separatedAdjustedValue[0] === integerPart.toString()) {\r\n            return parseFloat(separatedValue[0] + \".\" + separatedAdjustedValue[1])\r\n        }\r\n    }\r\n    return parseFloat(sourceValue.toPrecision(precision))\r\n}\r\n\r\nfunction getPrecision(value) {\r\n    var str = value.toString();\r\n    if (str.indexOf(\".\") < 0) {\r\n        return 0\r\n    }\r\n    var mantissa = str.split(\".\");\r\n    var positionOfDelimiter = mantissa[1].indexOf(\"e\");\r\n    return positionOfDelimiter >= 0 ? positionOfDelimiter : mantissa[1].length\r\n}\r\n\r\nfunction getRoot(x, n) {\r\n    if (x < 0 && n % 2 !== 1) {\r\n        return NaN\r\n    }\r\n    var y = Math.pow(Math.abs(x), 1 / n);\r\n    return n % 2 === 1 && x < 0 ? -y : y\r\n}\r\n\r\nfunction solveCubicEquation(a, b, c, d) {\r\n    if (Math.abs(a) < 1e-8) {\r\n        a = b;\r\n        b = c;\r\n        c = d;\r\n        if (Math.abs(a) < 1e-8) {\r\n            a = b;\r\n            b = c;\r\n            if (Math.abs(a) < 1e-8) {\r\n                return []\r\n            }\r\n            return [-b / a]\r\n        }\r\n        var D2 = b * b - 4 * a * c;\r\n        if (Math.abs(D2) < 1e-8) {\r\n            return [-b / (2 * a)]\r\n        } else if (D2 > 0) {\r\n            return [(-b + Math.sqrt(D2)) / (2 * a), (-b - Math.sqrt(D2)) / (2 * a)]\r\n        }\r\n        return []\r\n    }\r\n    var p = (3 * a * c - b * b) / (3 * a * a);\r\n    var q = (2 * b * b * b - 9 * a * b * c + 27 * a * a * d) / (27 * a * a * a);\r\n    var roots;\r\n    var u;\r\n    if (Math.abs(p) < 1e-8) {\r\n        roots = [getRoot(-q, 3)]\r\n    } else if (Math.abs(q) < 1e-8) {\r\n        roots = [0].concat(p < 0 ? [Math.sqrt(-p), -Math.sqrt(-p)] : [])\r\n    } else {\r\n        var D3 = q * q / 4 + p * p * p / 27;\r\n        if (Math.abs(D3) < 1e-8) {\r\n            roots = [-1.5 * q / p, 3 * q / p]\r\n        } else if (D3 > 0) {\r\n            u = getRoot(-q / 2 - Math.sqrt(D3), 3);\r\n            roots = [u - p / (3 * u)]\r\n        } else {\r\n            u = 2 * Math.sqrt(-p / 3);\r\n            var t = Math.acos(3 * q / p / u) / 3;\r\n            var k = 2 * Math.PI / 3;\r\n            roots = [u * Math.cos(t), u * Math.cos(t - k), u * Math.cos(t - 2 * k)]\r\n        }\r\n    }\r\n    for (var i = 0; i < roots.length; i++) {\r\n        roots[i] -= b / (3 * a)\r\n    }\r\n    return roots\r\n}\r\n\r\nfunction trunc(value) {\r\n    return Math.trunc ? Math.trunc(value) : value > 0 ? Math.floor(value) : Math.ceil(value)\r\n}\r\n\r\nfunction getRemainderByDivision(dividend, divider, digitsCount) {\r\n    if (divider === parseInt(divider)) {\r\n        return dividend % divider\r\n    }\r\n    var quotient = roundFloatPart(dividend / divider, digitsCount);\r\n    return (quotient - parseInt(quotient)) * divider\r\n}\r\n\r\nfunction getExponentLength(value) {\r\n    var _valueString$split$;\r\n    var valueString = value.toString();\r\n    return (null === (_valueString$split$ = valueString.split(\".\")[1]) || void 0 === _valueString$split$ ? void 0 : _valueString$split$.length) || parseInt(valueString.split(\"e-\")[1]) || 0\r\n}\r\n\r\nfunction roundFloatPart(value) {\r\n    var digitsCount = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : 0;\r\n    return parseFloat(value.toFixed(digitsCount))\r\n}\r\nexport {\r\n    sign,\r\n    fitIntoRange,\r\n    inRange,\r\n    adjust,\r\n    getPrecision,\r\n    getExponent,\r\n    getRoot,\r\n    solveCubicEquation,\r\n    trunc,\r\n    roundFloatPart,\r\n    getExponentLength,\r\n    getRemainderByDivision,\r\n    multiplyInExponentialForm\r\n};\r\n"]},"metadata":{},"sourceType":"module"}