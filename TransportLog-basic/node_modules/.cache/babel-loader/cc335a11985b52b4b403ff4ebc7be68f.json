{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.filter_row.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { getOuterWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { normalizeKeyName } from \"../../events/utils/index\";\nimport { each, map } from \"../../core/utils/iterator\";\nimport modules from \"./ui.grid_core.modules\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport messageLocalization from \"../../localization/message\";\nimport Editor from \"../editor/editor\";\nimport Overlay from \"../overlay/ui.overlay\";\nimport Menu from \"../menu\";\nimport { selectView } from \"../shared/accessibility\";\nvar OPERATION_ICONS = {\n  \"=\": \"filter-operation-equals\",\n  \"<>\": \"filter-operation-not-equals\",\n  \"<\": \"filter-operation-less\",\n  \"<=\": \"filter-operation-less-equal\",\n  \">\": \"filter-operation-greater\",\n  \">=\": \"filter-operation-greater-equal\",\n  default: \"filter-operation-default\",\n  notcontains: \"filter-operation-not-contains\",\n  contains: \"filter-operation-contains\",\n  startswith: \"filter-operation-starts-with\",\n  endswith: \"filter-operation-ends-with\",\n  between: \"filter-operation-between\"\n};\nvar OPERATION_DESCRIPTORS = {\n  \"=\": \"equal\",\n  \"<>\": \"notEqual\",\n  \"<\": \"lessThan\",\n  \"<=\": \"lessThanOrEqual\",\n  \">\": \"greaterThan\",\n  \">=\": \"greaterThanOrEqual\",\n  startswith: \"startsWith\",\n  contains: \"contains\",\n  notcontains: \"notContains\",\n  endswith: \"endsWith\",\n  between: \"between\"\n};\nvar FILTERING_TIMEOUT = 700;\nvar CORRECT_FILTER_RANGE_OVERLAY_WIDTH = 1;\nvar FILTER_ROW_CLASS = \"filter-row\";\nvar FILTER_RANGE_OVERLAY_CLASS = \"filter-range-overlay\";\nvar FILTER_RANGE_START_CLASS = \"filter-range-start\";\nvar FILTER_RANGE_END_CLASS = \"filter-range-end\";\nvar MENU_CLASS = \"dx-menu\";\nvar EDITOR_WITH_MENU_CLASS = \"dx-editor-with-menu\";\nvar EDITOR_CONTAINER_CLASS = \"dx-editor-container\";\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\nvar FILTER_MENU = \"dx-filter-menu\";\nvar APPLY_BUTTON_CLASS = \"dx-apply-button\";\nvar HIGHLIGHT_OUTLINE_CLASS = \"dx-highlight-outline\";\nvar FOCUSED_CLASS = \"dx-focused\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar FILTER_RANGE_CONTENT_CLASS = \"dx-filter-range-content\";\nvar FILTER_MODIFIED_CLASS = \"dx-filter-modified\";\nvar EDITORS_INPUT_SELECTOR = \"input:not([type='hidden'])\";\nvar BETWEEN_OPERATION_DATA_TYPES = [\"date\", \"datetime\", \"number\"];\n\nfunction isOnClickApplyFilterMode(that) {\n  return \"onClick\" === that.option(\"filterRow.applyFilter\");\n}\n\nvar getEditorInstance = function ($editorContainer) {\n  var $editor = $editorContainer && $editorContainer.children();\n  var componentNames = $editor && $editor.data(\"dxComponents\");\n  var editor = componentNames && componentNames.length && $editor.data(componentNames[0]);\n\n  if (editor instanceof Editor) {\n    return editor;\n  }\n};\n\nvar ColumnHeadersViewFilterRowExtender = function () {\n  var getRangeTextByFilterValue = function (that, column) {\n    var result = \"\";\n    var rangeEnd = \"\";\n    var filterValue = getColumnFilterValue(that, column);\n    var formatOptions = gridCoreUtils.getFormatOptionsByColumn(column, \"filterRow\");\n\n    if (Array.isArray(filterValue)) {\n      result = gridCoreUtils.formatValue(filterValue[0], formatOptions);\n      rangeEnd = gridCoreUtils.formatValue(filterValue[1], formatOptions);\n\n      if (\"\" !== rangeEnd) {\n        result += \" - \" + rangeEnd;\n      }\n    } else if (isDefined(filterValue)) {\n      result = gridCoreUtils.formatValue(filterValue, formatOptions);\n    }\n\n    return result;\n  };\n\n  function getColumnFilterValue(that, column) {\n    if (column) {\n      return isOnClickApplyFilterMode(that) && void 0 !== column.bufferedFilterValue ? column.bufferedFilterValue : column.filterValue;\n    }\n  }\n\n  var getColumnSelectedFilterOperation = function (that, column) {\n    if (column) {\n      return isOnClickApplyFilterMode(that) && void 0 !== column.bufferedSelectedFilterOperation ? column.bufferedSelectedFilterOperation : column.selectedFilterOperation;\n    }\n  };\n\n  var getFilterValue = function (that, columnIndex, $editorContainer) {\n    var column = that._columnsController.columnOption(columnIndex);\n\n    var filterValue = getColumnFilterValue(that, column);\n    var isFilterRange = $editorContainer.closest(\".\" + that.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)).length;\n    var isRangeStart = $editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS));\n\n    if (filterValue && Array.isArray(filterValue) && \"between\" === getColumnSelectedFilterOperation(that, column)) {\n      if (isRangeStart) {\n        return filterValue[0];\n      } else {\n        return filterValue[1];\n      }\n    }\n\n    return !isFilterRange && function (filterValue, column) {\n      if (column && BETWEEN_OPERATION_DATA_TYPES.indexOf(column.dataType) >= 0 && Array.isArray(filterValue)) {\n        return false;\n      }\n\n      return void 0 !== filterValue;\n    }(filterValue, column) ? filterValue : null;\n  };\n\n  var updateFilterValue = function (that, options) {\n    var value = \"\" === options.value ? null : options.value;\n    var $editorContainer = options.container;\n\n    var column = that._columnsController.columnOption(options.column.index);\n\n    var filterValue = getFilterValue(that, column.index, $editorContainer);\n\n    if (!isDefined(filterValue) && !isDefined(value)) {\n      return;\n    }\n\n    that._applyFilterViewController.setHighLight($editorContainer, filterValue !== value);\n\n    var columnOptionName = isOnClickApplyFilterMode(that) ? \"bufferedFilterValue\" : \"filterValue\";\n\n    var normalizedValue = function (that, filterValue, column, $editorContainer) {\n      if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\n        var columnFilterValue = getColumnFilterValue(that, column);\n\n        if ($editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS))) {\n          return [filterValue, Array.isArray(columnFilterValue) ? columnFilterValue[1] : void 0];\n        } else {\n          return [Array.isArray(columnFilterValue) ? columnFilterValue[0] : columnFilterValue, filterValue];\n        }\n      }\n\n      return filterValue;\n    }(that, value, column, $editorContainer);\n\n    var isBetween = \"between\" === getColumnSelectedFilterOperation(that, column);\n    var notFireEvent = options.notFireEvent || isBetween && Array.isArray(normalizedValue) && normalizedValue.indexOf(void 0) >= 0;\n\n    that._columnsController.columnOption(column.index, columnOptionName, normalizedValue, notFireEvent);\n  };\n\n  return {\n    _updateEditorValue: function (column, $editorContainer) {\n      var editor = getEditorInstance($editorContainer);\n      editor && editor.option(\"value\", getFilterValue(this, column.index, $editorContainer));\n    },\n    _columnOptionChanged: function (e) {\n      var optionNames = e.optionNames;\n      var $cell;\n      var $editorContainer;\n      var $editorRangeElements;\n      var $menu;\n\n      if (gridCoreUtils.checkChanges(optionNames, [\"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"bufferedSelectedFilterOperation\", \"filterValues\", \"filterType\"]) && void 0 !== e.columnIndex) {\n        var visibleIndex = this._columnsController.getVisibleIndex(e.columnIndex);\n\n        var column = this._columnsController.columnOption(e.columnIndex);\n\n        $cell = this._getCellElement(this.element().find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS)).index(), visibleIndex) || $();\n        $editorContainer = $cell.find(\".\" + EDITOR_CONTAINER_CLASS).first();\n\n        if (optionNames.filterValue || optionNames.bufferedFilterValue) {\n          this._updateEditorValue(column, $editorContainer);\n\n          var overlayInstance = $cell.find(\".\" + this.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)).data(\"dxOverlay\");\n\n          if (overlayInstance) {\n            $editorRangeElements = overlayInstance.$content().find(\".\" + EDITOR_CONTAINER_CLASS);\n\n            this._updateEditorValue(column, $editorRangeElements.first());\n\n            this._updateEditorValue(column, $editorRangeElements.last());\n          }\n\n          if (!overlayInstance || !overlayInstance.option(\"visible\")) {\n            this._updateFilterRangeContent($cell, getRangeTextByFilterValue(this, column));\n          }\n        }\n\n        if (optionNames.selectedFilterOperation || optionNames.bufferedSelectedFilterOperation) {\n          if (visibleIndex >= 0 && column) {\n            $menu = $cell.find(\".\" + MENU_CLASS);\n\n            if ($menu.length) {\n              this._updateFilterOperationChooser($menu, column, $editorContainer);\n\n              if (\"between\" === getColumnSelectedFilterOperation(this, column)) {\n                this._renderFilterRangeContent($cell, column);\n              } else if ($editorContainer.find(\".\" + FILTER_RANGE_CONTENT_CLASS).length) {\n                this._renderEditor($editorContainer, this._getEditorOptions($editorContainer, column));\n\n                this._hideFilterRange();\n              }\n            }\n          }\n        }\n\n        return;\n      }\n\n      this.callBase(e);\n    },\n    _renderCore: function () {\n      this._filterRangeOverlayInstance = null;\n      this.callBase.apply(this, arguments);\n    },\n    _resizeCore: function () {\n      this.callBase.apply(this, arguments);\n      this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.repaint();\n    },\n    isFilterRowVisible: function () {\n      return this._isElementVisible(this.option(\"filterRow\"));\n    },\n    isVisible: function () {\n      return this.callBase() || this.isFilterRowVisible();\n    },\n    init: function () {\n      this.callBase();\n      this._applyFilterViewController = this.getController(\"applyFilter\");\n    },\n    _initFilterRangeOverlay: function ($cell, column) {\n      var that = this;\n      var sharedData = {};\n      var $editorContainer = $cell.find(\".dx-editor-container\");\n      var $overlay = $(\"<div>\").addClass(that.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)).appendTo($cell);\n      return that._createComponent($overlay, Overlay, {\n        height: \"auto\",\n        shading: false,\n        showTitle: false,\n        focusStateEnabled: false,\n        hideOnOutsideClick: true,\n        copyRootClassesToWrapper: true,\n        _ignoreCopyRootClassesToWrapperDeprecation: true,\n        animation: false,\n        position: {\n          my: \"top\",\n          at: \"top\",\n          of: $editorContainer.length && $editorContainer || $cell,\n          offset: \"0 -1\"\n        },\n        contentTemplate: function (contentElement) {\n          var editorOptions;\n          var $editor = $(\"<div>\").addClass(EDITOR_CONTAINER_CLASS + \" \" + that.addWidgetPrefix(FILTER_RANGE_START_CLASS)).appendTo(contentElement);\n          column = that._columnsController.columnOption(column.index);\n          editorOptions = that._getEditorOptions($editor, column);\n          editorOptions.sharedData = sharedData;\n\n          that._renderEditor($editor, editorOptions);\n\n          eventsEngine.on($editor.find(EDITORS_INPUT_SELECTOR), \"keydown\", function (e) {\n            var $prevElement = $cell.find(\"[tabindex]\").not(e.target).first();\n\n            if (\"tab\" === normalizeKeyName(e) && e.shiftKey) {\n              e.preventDefault();\n\n              that._hideFilterRange();\n\n              if (!$prevElement.length) {\n                $prevElement = $cell.prev().find(\"[tabindex]\").last();\n              }\n\n              eventsEngine.trigger($prevElement, \"focus\");\n            }\n          });\n          $editor = $(\"<div>\").addClass(EDITOR_CONTAINER_CLASS + \" \" + that.addWidgetPrefix(FILTER_RANGE_END_CLASS)).appendTo(contentElement);\n          editorOptions = that._getEditorOptions($editor, column);\n          editorOptions.sharedData = sharedData;\n\n          that._renderEditor($editor, editorOptions);\n\n          eventsEngine.on($editor.find(EDITORS_INPUT_SELECTOR), \"keydown\", function (e) {\n            if (\"tab\" === normalizeKeyName(e) && !e.shiftKey) {\n              e.preventDefault();\n\n              that._hideFilterRange();\n\n              eventsEngine.trigger($cell.next().find(\"[tabindex]\").first(), \"focus\");\n            }\n          });\n          return $(contentElement).addClass(that.getWidgetContainerClass());\n        },\n        onShown: function (e) {\n          var $editor = e.component.$content().find(\".\" + EDITOR_CONTAINER_CLASS).first();\n          eventsEngine.trigger($editor.find(EDITORS_INPUT_SELECTOR), \"focus\");\n        },\n        onHidden: function () {\n          column = that._columnsController.columnOption(column.index);\n          $cell.find(\".\" + MENU_CLASS).parent().addClass(EDITOR_WITH_MENU_CLASS);\n\n          if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\n            that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column));\n\n            that.component.updateDimensions();\n          }\n        }\n      });\n    },\n    _updateFilterRangeOverlay: function (options) {\n      var overlayInstance = this._filterRangeOverlayInstance;\n      overlayInstance && overlayInstance.option(options);\n    },\n    _showFilterRange: function ($cell, column) {\n      var $overlay = $cell.children(\".\" + this.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS));\n      var overlayInstance = $overlay.length && $overlay.data(\"dxOverlay\");\n\n      if (!overlayInstance && column) {\n        overlayInstance = this._initFilterRangeOverlay($cell, column);\n      }\n\n      if (!overlayInstance.option(\"visible\")) {\n        this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.hide();\n        this._filterRangeOverlayInstance = overlayInstance;\n\n        this._updateFilterRangeOverlay({\n          width: getOuterWidth($cell, true) + CORRECT_FILTER_RANGE_OVERLAY_WIDTH\n        });\n\n        this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.show();\n      }\n    },\n    _hideFilterRange: function () {\n      var overlayInstance = this._filterRangeOverlayInstance;\n      overlayInstance && overlayInstance.hide();\n    },\n    getFilterRangeOverlayInstance: function () {\n      return this._filterRangeOverlayInstance;\n    },\n    _createRow: function (row) {\n      var $row = this.callBase(row);\n\n      if (\"filter\" === row.rowType) {\n        $row.addClass(this.addWidgetPrefix(FILTER_ROW_CLASS));\n\n        if (!this.option(\"useLegacyKeyboardNavigation\")) {\n          eventsEngine.on($row, \"keydown\", event => selectView(\"filterRow\", this, event));\n        }\n      }\n\n      return $row;\n    },\n    _getRows: function () {\n      var result = this.callBase();\n\n      if (this.isFilterRowVisible()) {\n        result.push({\n          rowType: \"filter\"\n        });\n      }\n\n      return result;\n    },\n    _renderFilterCell: function (cell, options) {\n      var column = options.column;\n      var $cell = $(cell);\n\n      if (this.component.option(\"showColumnHeaders\")) {\n        this.setAria(\"describedby\", column.headerId, $cell);\n      }\n\n      this.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaFilterCell\"), $cell);\n      $cell.addClass(EDITOR_CELL_CLASS);\n      var $container = $(\"<div>\").appendTo($cell);\n      var $editorContainer = $(\"<div>\").addClass(EDITOR_CONTAINER_CLASS).appendTo($container);\n\n      if (\"between\" === getColumnSelectedFilterOperation(this, column)) {\n        this._renderFilterRangeContent($cell, column);\n      } else {\n        var editorOptions = this._getEditorOptions($editorContainer, column);\n\n        this._renderEditor($editorContainer, editorOptions);\n      }\n\n      var alignment = column.alignment;\n\n      if (alignment && \"center\" !== alignment) {\n        $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", column.alignment);\n      }\n\n      if (column.filterOperations && column.filterOperations.length) {\n        this._renderFilterOperationChooser($container, column, $editorContainer);\n      }\n    },\n    _renderCellContent: function ($cell, options) {\n      var that = this;\n      var column = options.column;\n\n      if (\"filter\" === options.rowType) {\n        if (column.command) {\n          $cell.html(\"&nbsp;\");\n        } else if (column.allowFiltering) {\n          that.renderTemplate($cell, that._renderFilterCell.bind(that), options).done(() => {\n            that._updateCell($cell, options);\n          });\n          return;\n        }\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    _getEditorOptions: function ($editorContainer, column) {\n      var that = this;\n      var accessibilityOptions = {\n        editorOptions: {\n          inputAttr: that._getFilterInputAccessibilityAttributes(column)\n        }\n      };\n      var result = extend(accessibilityOptions, column, {\n        value: getFilterValue(that, column.index, $editorContainer),\n        parentType: \"filterRow\",\n        showAllText: that.option(\"filterRow.showAllText\"),\n        updateValueTimeout: \"onClick\" === that.option(\"filterRow.applyFilter\") ? 0 : FILTERING_TIMEOUT,\n        width: null,\n        setValue: function (value, notFireEvent) {\n          updateFilterValue(that, {\n            column: column,\n            value: value,\n            container: $editorContainer,\n            notFireEvent: notFireEvent\n          });\n        }\n      });\n\n      if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\n        if ($editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS))) {\n          result.placeholder = that.option(\"filterRow.betweenStartText\");\n        } else {\n          result.placeholder = that.option(\"filterRow.betweenEndText\");\n        }\n      }\n\n      return result;\n    },\n    _getFilterInputAccessibilityAttributes: function (column) {\n      var columnAriaLabel = messageLocalization.format(\"dxDataGrid-ariaFilterCell\");\n\n      if (this.component.option(\"showColumnHeaders\")) {\n        return {\n          \"aria-label\": columnAriaLabel,\n          \"aria-describedby\": column.headerId\n        };\n      }\n\n      return {\n        \"aria-label\": columnAriaLabel\n      };\n    },\n    _renderEditor: function ($editorContainer, options) {\n      $editorContainer.empty();\n      var $element = $(\"<div>\").appendTo($editorContainer);\n      var editorController = this.getController(\"editorFactory\");\n      var dataSource = this.getController(\"data\").dataSource();\n      var filterRowController = this.getController(\"applyFilter\");\n\n      if (options.lookup && this.option(\"syncLookupFilterValues\")) {\n        filterRowController.setCurrentColumnForFiltering(options);\n        var filter = this.getController(\"data\").getCombinedFilter();\n        filterRowController.setCurrentColumnForFiltering(null);\n        var lookupDataSource = gridCoreUtils.getWrappedLookupDataSource(options, dataSource, filter);\n\n        var lookupOptions = _extends({}, options, {\n          lookup: _extends({}, options.lookup, {\n            dataSource: lookupDataSource\n          })\n        });\n\n        return editorController.createEditor($element, lookupOptions);\n      } else {\n        return editorController.createEditor($element, options);\n      }\n    },\n    _renderFilterRangeContent: function ($cell, column) {\n      var that = this;\n      var $editorContainer = $cell.find(\".\" + EDITOR_CONTAINER_CLASS).first();\n      $editorContainer.empty();\n      var $filterRangeContent = $(\"<div>\").addClass(FILTER_RANGE_CONTENT_CLASS).attr(\"tabindex\", this.option(\"tabIndex\"));\n      eventsEngine.on($filterRangeContent, \"focusin\", function () {\n        that._showFilterRange($cell, column);\n      });\n      $filterRangeContent.appendTo($editorContainer);\n\n      that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column));\n    },\n    _updateFilterRangeContent: function ($cell, value) {\n      var $filterRangeContent = $cell.find(\".\" + FILTER_RANGE_CONTENT_CLASS);\n\n      if ($filterRangeContent.length) {\n        if (\"\" === value) {\n          $filterRangeContent.html(\"&nbsp;\");\n        } else {\n          $filterRangeContent.text(value);\n        }\n      }\n    },\n    _updateFilterOperationChooser: function ($menu, column, $editorContainer) {\n      var that = this;\n      var isCellWasFocused;\n\n      var restoreFocus = function () {\n        var menu = Menu.getInstance($menu);\n        menu && menu.option(\"focusedElement\", null);\n        isCellWasFocused && that._focusEditor($editorContainer);\n      };\n\n      that._createComponent($menu, Menu, {\n        integrationOptions: {},\n        activeStateEnabled: false,\n        selectionMode: \"single\",\n        cssClass: that.getWidgetContainerClass() + \" \" + CELL_FOCUS_DISABLED_CLASS + \" \" + FILTER_MENU,\n        showFirstSubmenuMode: \"onHover\",\n        hideSubmenuOnMouseLeave: true,\n        items: [{\n          disabled: column.filterOperations && column.filterOperations.length ? false : true,\n          icon: OPERATION_ICONS[getColumnSelectedFilterOperation(that, column) || \"default\"],\n          selectable: false,\n          items: that._getFilterOperationMenuItems(column)\n        }],\n        onItemClick: function (properties) {\n          var selectedFilterOperation = properties.itemData.name;\n          var columnSelectedFilterOperation = getColumnSelectedFilterOperation(that, column);\n          var notFocusEditor = false;\n          var isOnClickMode = isOnClickApplyFilterMode(that);\n          var options = {};\n\n          if (properties.itemData.items || selectedFilterOperation && selectedFilterOperation === columnSelectedFilterOperation) {\n            return;\n          }\n\n          if (selectedFilterOperation) {\n            options[isOnClickMode ? \"bufferedSelectedFilterOperation\" : \"selectedFilterOperation\"] = selectedFilterOperation;\n\n            if (\"between\" === selectedFilterOperation || \"between\" === columnSelectedFilterOperation) {\n              notFocusEditor = \"between\" === selectedFilterOperation;\n              options[isOnClickMode ? \"bufferedFilterValue\" : \"filterValue\"] = null;\n            }\n          } else {\n            options[isOnClickMode ? \"bufferedFilterValue\" : \"filterValue\"] = null;\n            options[isOnClickMode ? \"bufferedSelectedFilterOperation\" : \"selectedFilterOperation\"] = column.defaultSelectedFilterOperation || null;\n          }\n\n          that._columnsController.columnOption(column.index, options);\n\n          that._applyFilterViewController.setHighLight($editorContainer, true);\n\n          if (!selectedFilterOperation) {\n            var editor = getEditorInstance($editorContainer);\n\n            if (editor && \"dxDateBox\" === editor.NAME && !editor.option(\"isValid\")) {\n              editor.reset();\n              editor.option(\"isValid\", true);\n            }\n          }\n\n          if (!notFocusEditor) {\n            that._focusEditor($editorContainer);\n          } else {\n            that._showFilterRange($editorContainer.closest(\".\" + EDITOR_CELL_CLASS), column);\n          }\n        },\n        onSubmenuShowing: function () {\n          isCellWasFocused = that._isEditorFocused($editorContainer);\n          that.getController(\"editorFactory\").loseFocus();\n        },\n        onSubmenuHiding: function () {\n          eventsEngine.trigger($menu, \"blur\");\n          restoreFocus();\n        },\n        onContentReady: function (e) {\n          eventsEngine.on($menu, \"blur\", () => {\n            var menu = e.component;\n\n            menu._hideSubmenuAfterTimeout();\n\n            restoreFocus();\n          });\n        },\n        rtlEnabled: that.option(\"rtlEnabled\")\n      });\n    },\n    _isEditorFocused: function ($container) {\n      return $container.hasClass(FOCUSED_CLASS) || $container.parents(\".\" + FOCUSED_CLASS).length;\n    },\n    _focusEditor: function ($container) {\n      this.getController(\"editorFactory\").focus($container);\n      eventsEngine.trigger($container.find(EDITORS_INPUT_SELECTOR), \"focus\");\n    },\n    _renderFilterOperationChooser: function ($container, column, $editorContainer) {\n      var $menu;\n\n      if (this.option(\"filterRow.showOperationChooser\")) {\n        $container.addClass(EDITOR_WITH_MENU_CLASS);\n        $menu = $(\"<div>\").prependTo($container);\n\n        this._updateFilterOperationChooser($menu, column, $editorContainer);\n      }\n    },\n    _getFilterOperationMenuItems: function (column) {\n      var that = this;\n      var result = [{}];\n      var filterRowOptions = that.option(\"filterRow\");\n      var operationDescriptions = filterRowOptions && filterRowOptions.operationDescriptions || {};\n\n      if (column.filterOperations && column.filterOperations.length) {\n        var availableFilterOperations = column.filterOperations.filter(function (value) {\n          return isDefined(OPERATION_DESCRIPTORS[value]);\n        });\n        result = map(availableFilterOperations, function (value) {\n          var descriptionName = OPERATION_DESCRIPTORS[value];\n          return {\n            name: value,\n            selected: (getColumnSelectedFilterOperation(that, column) || column.defaultFilterOperation) === value,\n            text: operationDescriptions[descriptionName],\n            icon: OPERATION_ICONS[value]\n          };\n        });\n        result.push({\n          name: null,\n          text: filterRowOptions && filterRowOptions.resetOperationText,\n          icon: OPERATION_ICONS.default\n        });\n      }\n\n      return result;\n    },\n    _handleDataChanged: function (e) {\n      var _e$operationTypes, _e$operationTypes2;\n\n      this.callBase.apply(this, arguments);\n\n      if (null !== (_e$operationTypes = e.operationTypes) && void 0 !== _e$operationTypes && _e$operationTypes.filtering || null !== (_e$operationTypes2 = e.operationTypes) && void 0 !== _e$operationTypes2 && _e$operationTypes2.fullReload) {\n        this.updateLookupDataSource();\n      }\n    },\n    updateLookupDataSource: function () {\n      if (!this.option(\"syncLookupFilterValues\")) {\n        return;\n      }\n\n      if (!this.element()) {\n        return;\n      }\n\n      var columns = this._columnsController.getVisibleColumns();\n\n      var dataSource = this._dataController.dataSource();\n\n      var applyFilterViewController = this._applyFilterViewController;\n      var rowIndex = this.element().find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS)).index();\n\n      if (-1 === rowIndex) {\n        return;\n      }\n\n      columns.forEach((column, index) => {\n        if (!column.lookup || column.calculateCellValue !== column.defaultCalculateCellValue) {\n          return;\n        }\n\n        var $cell = this._getCellElement(rowIndex, index);\n\n        var editor = getEditorInstance(null === $cell || void 0 === $cell ? void 0 : $cell.find(\".dx-editor-container\"));\n\n        if (editor) {\n          applyFilterViewController.setCurrentColumnForFiltering(column);\n\n          var filter = this._dataController.getCombinedFilter();\n\n          applyFilterViewController.setCurrentColumnForFiltering(null);\n          var lookupDataSource = gridCoreUtils.getWrappedLookupDataSource(column, dataSource, filter);\n          editor.option(\"dataSource\", lookupDataSource);\n        }\n      });\n    },\n    optionChanged: function (args) {\n      switch (args.name) {\n        case \"filterRow\":\n        case \"showColumnLines\":\n          this._invalidate(true, true);\n\n          args.handled = true;\n          break;\n\n        case \"syncLookupFilterValues\":\n          if (args.value) {\n            this.updateLookupDataSource();\n          } else {\n            this.render();\n          }\n\n          args.handled = true;\n          break;\n\n        default:\n          this.callBase(args);\n      }\n    }\n  };\n}();\n\nvar DataControllerFilterRowExtender = {\n  skipCalculateColumnFilters: function () {\n    return false;\n  },\n  _calculateAdditionalFilter: function () {\n    if (this.skipCalculateColumnFilters()) {\n      return this.callBase();\n    }\n\n    var filters = [this.callBase()];\n\n    var columns = this._columnsController.getVisibleColumns(null, true);\n\n    var filterRowController = this.getController(\"applyFilter\");\n    each(columns, function () {\n      var _filterRowController$;\n\n      var shouldSkip = (null === (_filterRowController$ = filterRowController.getCurrentColumnForFiltering()) || void 0 === _filterRowController$ ? void 0 : _filterRowController$.index) === this.index;\n\n      if (this.allowFiltering && this.calculateFilterExpression && isDefined(this.filterValue) && !shouldSkip) {\n        var filter = this.createFilterExpression(this.filterValue, this.selectedFilterOperation || this.defaultFilterOperation, \"filterRow\");\n        filters.push(filter);\n      }\n    });\n    return gridCoreUtils.combineFilters(filters);\n  }\n};\nvar ApplyFilterViewController = modules.ViewController.inherit({\n  _getHeaderPanel: function () {\n    if (!this._headerPanel) {\n      this._headerPanel = this.getView(\"headerPanel\");\n    }\n\n    return this._headerPanel;\n  },\n  setHighLight: function ($element, value) {\n    if (isOnClickApplyFilterMode(this)) {\n      $element && $element.toggleClass(HIGHLIGHT_OUTLINE_CLASS, value) && $element.closest(\".\" + EDITOR_CELL_CLASS).toggleClass(FILTER_MODIFIED_CLASS, value);\n\n      this._getHeaderPanel().enableApplyButton(value);\n    }\n  },\n  applyFilter: function () {\n    var columnsController = this.getController(\"columns\");\n    var columns = columnsController.getColumns();\n    columnsController.beginUpdate();\n\n    for (var i = 0; i < columns.length; i++) {\n      var column = columns[i];\n\n      if (void 0 !== column.bufferedFilterValue) {\n        columnsController.columnOption(i, \"filterValue\", column.bufferedFilterValue);\n        column.bufferedFilterValue = void 0;\n      }\n\n      if (void 0 !== column.bufferedSelectedFilterOperation) {\n        columnsController.columnOption(i, \"selectedFilterOperation\", column.bufferedSelectedFilterOperation);\n        column.bufferedSelectedFilterOperation = void 0;\n      }\n    }\n\n    columnsController.endUpdate();\n    this.removeHighLights();\n  },\n  removeHighLights: function () {\n    if (isOnClickApplyFilterMode(this)) {\n      var columnHeadersViewElement = this.getView(\"columnHeadersView\").element();\n      columnHeadersViewElement.find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS) + \" .\" + HIGHLIGHT_OUTLINE_CLASS).removeClass(HIGHLIGHT_OUTLINE_CLASS);\n      columnHeadersViewElement.find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS) + \" .\" + FILTER_MODIFIED_CLASS).removeClass(FILTER_MODIFIED_CLASS);\n\n      this._getHeaderPanel().enableApplyButton(false);\n    }\n  },\n  setCurrentColumnForFiltering: function (column) {\n    this._currentColumn = column;\n  },\n  getCurrentColumnForFiltering: function () {\n    return this._currentColumn;\n  }\n});\nexport var filterRowModule = {\n  defaultOptions: function () {\n    return {\n      syncLookupFilterValues: true,\n      filterRow: {\n        visible: false,\n        showOperationChooser: true,\n        showAllText: messageLocalization.format(\"dxDataGrid-filterRowShowAllText\"),\n        resetOperationText: messageLocalization.format(\"dxDataGrid-filterRowResetOperationText\"),\n        applyFilter: \"auto\",\n        applyFilterText: messageLocalization.format(\"dxDataGrid-applyFilterText\"),\n        operationDescriptions: {\n          equal: messageLocalization.format(\"dxDataGrid-filterRowOperationEquals\"),\n          notEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationNotEquals\"),\n          lessThan: messageLocalization.format(\"dxDataGrid-filterRowOperationLess\"),\n          lessThanOrEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationLessOrEquals\"),\n          greaterThan: messageLocalization.format(\"dxDataGrid-filterRowOperationGreater\"),\n          greaterThanOrEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationGreaterOrEquals\"),\n          startsWith: messageLocalization.format(\"dxDataGrid-filterRowOperationStartsWith\"),\n          contains: messageLocalization.format(\"dxDataGrid-filterRowOperationContains\"),\n          notContains: messageLocalization.format(\"dxDataGrid-filterRowOperationNotContains\"),\n          endsWith: messageLocalization.format(\"dxDataGrid-filterRowOperationEndsWith\"),\n          between: messageLocalization.format(\"dxDataGrid-filterRowOperationBetween\"),\n          isBlank: messageLocalization.format(\"dxFilterBuilder-filterOperationIsBlank\"),\n          isNotBlank: messageLocalization.format(\"dxFilterBuilder-filterOperationIsNotBlank\")\n        },\n        betweenStartText: messageLocalization.format(\"dxDataGrid-filterRowOperationBetweenStartText\"),\n        betweenEndText: messageLocalization.format(\"dxDataGrid-filterRowOperationBetweenEndText\")\n      }\n    };\n  },\n  controllers: {\n    applyFilter: ApplyFilterViewController\n  },\n  extenders: {\n    controllers: {\n      data: DataControllerFilterRowExtender,\n      columnsResizer: {\n        _startResizing: function () {\n          var that = this;\n          that.callBase.apply(that, arguments);\n\n          if (that.isResizing()) {\n            var overlayInstance = that._columnHeadersView.getFilterRangeOverlayInstance();\n\n            if (overlayInstance) {\n              var cellIndex = overlayInstance.$element().closest(\"td\").index();\n\n              if (cellIndex === that._targetPoint.columnIndex || cellIndex === that._targetPoint.columnIndex + 1) {\n                overlayInstance.$content().hide();\n              }\n            }\n          }\n        },\n        _endResizing: function () {\n          var that = this;\n          var $cell;\n\n          if (that.isResizing()) {\n            var overlayInstance = that._columnHeadersView.getFilterRangeOverlayInstance();\n\n            if (overlayInstance) {\n              $cell = overlayInstance.$element().closest(\"td\");\n\n              that._columnHeadersView._updateFilterRangeOverlay({\n                width: getOuterWidth($cell, true) + CORRECT_FILTER_RANGE_OVERLAY_WIDTH\n              });\n\n              overlayInstance.$content().show();\n            }\n          }\n\n          that.callBase.apply(that, arguments);\n        }\n      },\n      editing: {\n        updateFieldValue(options) {\n          if (options.column.lookup) {\n            this._needUpdateLookupDataSource = true;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n\n        _afterSaveEditData(cancel) {\n          if (this._needUpdateLookupDataSource && !cancel) {\n            var _this$getView;\n\n            null === (_this$getView = this.getView(\"columnHeadersView\")) || void 0 === _this$getView ? void 0 : _this$getView.updateLookupDataSource();\n          }\n\n          this._needUpdateLookupDataSource = false;\n          return this.callBase.apply(this, arguments);\n        },\n\n        _afterCancelEditData() {\n          this._needUpdateLookupDataSource = false;\n          return this.callBase.apply(this, arguments);\n        }\n\n      }\n    },\n    views: {\n      columnHeadersView: ColumnHeadersViewFilterRowExtender,\n      headerPanel: {\n        _getToolbarItems: function () {\n          var items = this.callBase();\n\n          var filterItem = this._prepareFilterItem(items);\n\n          return filterItem.concat(items);\n        },\n        _prepareFilterItem: function () {\n          var that = this;\n          var filterItem = [];\n\n          if (that._isShowApplyFilterButton()) {\n            var hintText = that.option(\"filterRow.applyFilterText\");\n\n            var columns = that._columnsController.getColumns();\n\n            var disabled = !columns.filter(function (column) {\n              return void 0 !== column.bufferedFilterValue;\n            }).length;\n            var toolbarItem = {\n              widget: \"dxButton\",\n              options: {\n                icon: \"apply-filter\",\n                disabled: disabled,\n                onClick: function () {\n                  that._applyFilterViewController.applyFilter();\n                },\n                hint: hintText,\n                text: hintText,\n                onInitialized: function (e) {\n                  $(e.element).addClass(that._getToolbarButtonClass(APPLY_BUTTON_CLASS));\n                }\n              },\n              showText: \"inMenu\",\n              name: \"applyFilterButton\",\n              location: \"after\",\n              locateInMenu: \"auto\",\n              sortIndex: 10\n            };\n            filterItem.push(toolbarItem);\n          }\n\n          return filterItem;\n        },\n        _isShowApplyFilterButton: function () {\n          var filterRowOptions = this.option(\"filterRow\");\n          return filterRowOptions && filterRowOptions.visible && \"onClick\" === filterRowOptions.applyFilter;\n        },\n        init: function () {\n          this.callBase();\n          this._dataController = this.getController(\"data\");\n          this._applyFilterViewController = this.getController(\"applyFilter\");\n        },\n        enableApplyButton: function (value) {\n          this.setToolbarItemDisabled(\"applyFilterButton\", !value);\n        },\n        isVisible: function () {\n          return this.callBase() || this._isShowApplyFilterButton();\n        },\n        optionChanged: function (args) {\n          if (\"filterRow\" === args.name) {\n            this._invalidate();\n\n            args.handled = true;\n          } else {\n            this.callBase(args);\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.filter_row.js"],"names":["_extends","getOuterWidth","$","eventsEngine","isDefined","extend","normalizeKeyName","each","map","modules","gridCoreUtils","messageLocalization","Editor","Overlay","Menu","selectView","OPERATION_ICONS","default","notcontains","contains","startswith","endswith","between","OPERATION_DESCRIPTORS","FILTERING_TIMEOUT","CORRECT_FILTER_RANGE_OVERLAY_WIDTH","FILTER_ROW_CLASS","FILTER_RANGE_OVERLAY_CLASS","FILTER_RANGE_START_CLASS","FILTER_RANGE_END_CLASS","MENU_CLASS","EDITOR_WITH_MENU_CLASS","EDITOR_CONTAINER_CLASS","EDITOR_CELL_CLASS","FILTER_MENU","APPLY_BUTTON_CLASS","HIGHLIGHT_OUTLINE_CLASS","FOCUSED_CLASS","CELL_FOCUS_DISABLED_CLASS","FILTER_RANGE_CONTENT_CLASS","FILTER_MODIFIED_CLASS","EDITORS_INPUT_SELECTOR","BETWEEN_OPERATION_DATA_TYPES","isOnClickApplyFilterMode","that","option","getEditorInstance","$editorContainer","$editor","children","componentNames","data","editor","length","ColumnHeadersViewFilterRowExtender","getRangeTextByFilterValue","column","result","rangeEnd","filterValue","getColumnFilterValue","formatOptions","getFormatOptionsByColumn","Array","isArray","formatValue","bufferedFilterValue","getColumnSelectedFilterOperation","bufferedSelectedFilterOperation","selectedFilterOperation","getFilterValue","columnIndex","_columnsController","columnOption","isFilterRange","closest","addWidgetPrefix","isRangeStart","hasClass","indexOf","dataType","updateFilterValue","options","value","container","index","_applyFilterViewController","setHighLight","columnOptionName","normalizedValue","columnFilterValue","isBetween","notFireEvent","_updateEditorValue","_columnOptionChanged","e","optionNames","$cell","$editorRangeElements","$menu","checkChanges","visibleIndex","getVisibleIndex","_getCellElement","element","find","first","overlayInstance","$content","last","_updateFilterRangeContent","_updateFilterOperationChooser","_renderFilterRangeContent","_renderEditor","_getEditorOptions","_hideFilterRange","callBase","_renderCore","_filterRangeOverlayInstance","apply","arguments","_resizeCore","repaint","isFilterRowVisible","_isElementVisible","isVisible","init","getController","_initFilterRangeOverlay","sharedData","$overlay","addClass","appendTo","_createComponent","height","shading","showTitle","focusStateEnabled","hideOnOutsideClick","copyRootClassesToWrapper","_ignoreCopyRootClassesToWrapperDeprecation","animation","position","my","at","of","offset","contentTemplate","contentElement","editorOptions","on","$prevElement","not","target","shiftKey","preventDefault","prev","trigger","next","getWidgetContainerClass","onShown","component","onHidden","parent","updateDimensions","_updateFilterRangeOverlay","_showFilterRange","hide","width","show","getFilterRangeOverlayInstance","_createRow","row","$row","rowType","event","_getRows","push","_renderFilterCell","cell","setAria","headerId","format","$container","alignment","css","filterOperations","_renderFilterOperationChooser","_renderCellContent","command","html","allowFiltering","renderTemplate","bind","done","_updateCell","accessibilityOptions","inputAttr","_getFilterInputAccessibilityAttributes","parentType","showAllText","updateValueTimeout","setValue","placeholder","columnAriaLabel","empty","$element","editorController","dataSource","filterRowController","lookup","setCurrentColumnForFiltering","filter","getCombinedFilter","lookupDataSource","getWrappedLookupDataSource","lookupOptions","createEditor","$filterRangeContent","attr","text","isCellWasFocused","restoreFocus","menu","getInstance","_focusEditor","integrationOptions","activeStateEnabled","selectionMode","cssClass","showFirstSubmenuMode","hideSubmenuOnMouseLeave","items","disabled","icon","selectable","_getFilterOperationMenuItems","onItemClick","properties","itemData","name","columnSelectedFilterOperation","notFocusEditor","isOnClickMode","defaultSelectedFilterOperation","NAME","reset","onSubmenuShowing","_isEditorFocused","loseFocus","onSubmenuHiding","onContentReady","_hideSubmenuAfterTimeout","rtlEnabled","parents","focus","prependTo","filterRowOptions","operationDescriptions","availableFilterOperations","descriptionName","selected","defaultFilterOperation","resetOperationText","_handleDataChanged","_e$operationTypes","_e$operationTypes2","operationTypes","filtering","fullReload","updateLookupDataSource","columns","getVisibleColumns","_dataController","applyFilterViewController","rowIndex","forEach","calculateCellValue","defaultCalculateCellValue","optionChanged","args","_invalidate","handled","render","DataControllerFilterRowExtender","skipCalculateColumnFilters","_calculateAdditionalFilter","filters","_filterRowController$","shouldSkip","getCurrentColumnForFiltering","calculateFilterExpression","createFilterExpression","combineFilters","ApplyFilterViewController","ViewController","inherit","_getHeaderPanel","_headerPanel","getView","toggleClass","enableApplyButton","applyFilter","columnsController","getColumns","beginUpdate","i","endUpdate","removeHighLights","columnHeadersViewElement","removeClass","_currentColumn","filterRowModule","defaultOptions","syncLookupFilterValues","filterRow","visible","showOperationChooser","applyFilterText","equal","notEqual","lessThan","lessThanOrEqual","greaterThan","greaterThanOrEqual","startsWith","notContains","endsWith","isBlank","isNotBlank","betweenStartText","betweenEndText","controllers","extenders","columnsResizer","_startResizing","isResizing","_columnHeadersView","cellIndex","_targetPoint","_endResizing","editing","updateFieldValue","_needUpdateLookupDataSource","_afterSaveEditData","cancel","_this$getView","_afterCancelEditData","views","columnHeadersView","headerPanel","_getToolbarItems","filterItem","_prepareFilterItem","concat","_isShowApplyFilterButton","hintText","toolbarItem","widget","onClick","hint","onInitialized","_getToolbarButtonClass","showText","location","locateInMenu","sortIndex","setToolbarItemDisabled"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.filter_row.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    getOuterWidth\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    normalizeKeyName\r\n} from \"../../events/utils/index\";\r\nimport {\r\n    each,\r\n    map\r\n} from \"../../core/utils/iterator\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport Editor from \"../editor/editor\";\r\nimport Overlay from \"../overlay/ui.overlay\";\r\nimport Menu from \"../menu\";\r\nimport {\r\n    selectView\r\n} from \"../shared/accessibility\";\r\nvar OPERATION_ICONS = {\r\n    \"=\": \"filter-operation-equals\",\r\n    \"<>\": \"filter-operation-not-equals\",\r\n    \"<\": \"filter-operation-less\",\r\n    \"<=\": \"filter-operation-less-equal\",\r\n    \">\": \"filter-operation-greater\",\r\n    \">=\": \"filter-operation-greater-equal\",\r\n    default: \"filter-operation-default\",\r\n    notcontains: \"filter-operation-not-contains\",\r\n    contains: \"filter-operation-contains\",\r\n    startswith: \"filter-operation-starts-with\",\r\n    endswith: \"filter-operation-ends-with\",\r\n    between: \"filter-operation-between\"\r\n};\r\nvar OPERATION_DESCRIPTORS = {\r\n    \"=\": \"equal\",\r\n    \"<>\": \"notEqual\",\r\n    \"<\": \"lessThan\",\r\n    \"<=\": \"lessThanOrEqual\",\r\n    \">\": \"greaterThan\",\r\n    \">=\": \"greaterThanOrEqual\",\r\n    startswith: \"startsWith\",\r\n    contains: \"contains\",\r\n    notcontains: \"notContains\",\r\n    endswith: \"endsWith\",\r\n    between: \"between\"\r\n};\r\nvar FILTERING_TIMEOUT = 700;\r\nvar CORRECT_FILTER_RANGE_OVERLAY_WIDTH = 1;\r\nvar FILTER_ROW_CLASS = \"filter-row\";\r\nvar FILTER_RANGE_OVERLAY_CLASS = \"filter-range-overlay\";\r\nvar FILTER_RANGE_START_CLASS = \"filter-range-start\";\r\nvar FILTER_RANGE_END_CLASS = \"filter-range-end\";\r\nvar MENU_CLASS = \"dx-menu\";\r\nvar EDITOR_WITH_MENU_CLASS = \"dx-editor-with-menu\";\r\nvar EDITOR_CONTAINER_CLASS = \"dx-editor-container\";\r\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\r\nvar FILTER_MENU = \"dx-filter-menu\";\r\nvar APPLY_BUTTON_CLASS = \"dx-apply-button\";\r\nvar HIGHLIGHT_OUTLINE_CLASS = \"dx-highlight-outline\";\r\nvar FOCUSED_CLASS = \"dx-focused\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar FILTER_RANGE_CONTENT_CLASS = \"dx-filter-range-content\";\r\nvar FILTER_MODIFIED_CLASS = \"dx-filter-modified\";\r\nvar EDITORS_INPUT_SELECTOR = \"input:not([type='hidden'])\";\r\nvar BETWEEN_OPERATION_DATA_TYPES = [\"date\", \"datetime\", \"number\"];\r\n\r\nfunction isOnClickApplyFilterMode(that) {\r\n    return \"onClick\" === that.option(\"filterRow.applyFilter\")\r\n}\r\nvar getEditorInstance = function($editorContainer) {\r\n    var $editor = $editorContainer && $editorContainer.children();\r\n    var componentNames = $editor && $editor.data(\"dxComponents\");\r\n    var editor = componentNames && componentNames.length && $editor.data(componentNames[0]);\r\n    if (editor instanceof Editor) {\r\n        return editor\r\n    }\r\n};\r\nvar ColumnHeadersViewFilterRowExtender = function() {\r\n    var getRangeTextByFilterValue = function(that, column) {\r\n        var result = \"\";\r\n        var rangeEnd = \"\";\r\n        var filterValue = getColumnFilterValue(that, column);\r\n        var formatOptions = gridCoreUtils.getFormatOptionsByColumn(column, \"filterRow\");\r\n        if (Array.isArray(filterValue)) {\r\n            result = gridCoreUtils.formatValue(filterValue[0], formatOptions);\r\n            rangeEnd = gridCoreUtils.formatValue(filterValue[1], formatOptions);\r\n            if (\"\" !== rangeEnd) {\r\n                result += \" - \" + rangeEnd\r\n            }\r\n        } else if (isDefined(filterValue)) {\r\n            result = gridCoreUtils.formatValue(filterValue, formatOptions)\r\n        }\r\n        return result\r\n    };\r\n\r\n    function getColumnFilterValue(that, column) {\r\n        if (column) {\r\n            return isOnClickApplyFilterMode(that) && void 0 !== column.bufferedFilterValue ? column.bufferedFilterValue : column.filterValue\r\n        }\r\n    }\r\n    var getColumnSelectedFilterOperation = function(that, column) {\r\n        if (column) {\r\n            return isOnClickApplyFilterMode(that) && void 0 !== column.bufferedSelectedFilterOperation ? column.bufferedSelectedFilterOperation : column.selectedFilterOperation\r\n        }\r\n    };\r\n    var getFilterValue = function(that, columnIndex, $editorContainer) {\r\n        var column = that._columnsController.columnOption(columnIndex);\r\n        var filterValue = getColumnFilterValue(that, column);\r\n        var isFilterRange = $editorContainer.closest(\".\" + that.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)).length;\r\n        var isRangeStart = $editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS));\r\n        if (filterValue && Array.isArray(filterValue) && \"between\" === getColumnSelectedFilterOperation(that, column)) {\r\n            if (isRangeStart) {\r\n                return filterValue[0]\r\n            } else {\r\n                return filterValue[1]\r\n            }\r\n        }\r\n        return !isFilterRange && function(filterValue, column) {\r\n            if (column && BETWEEN_OPERATION_DATA_TYPES.indexOf(column.dataType) >= 0 && Array.isArray(filterValue)) {\r\n                return false\r\n            }\r\n            return void 0 !== filterValue\r\n        }(filterValue, column) ? filterValue : null\r\n    };\r\n    var updateFilterValue = function(that, options) {\r\n        var value = \"\" === options.value ? null : options.value;\r\n        var $editorContainer = options.container;\r\n        var column = that._columnsController.columnOption(options.column.index);\r\n        var filterValue = getFilterValue(that, column.index, $editorContainer);\r\n        if (!isDefined(filterValue) && !isDefined(value)) {\r\n            return\r\n        }\r\n        that._applyFilterViewController.setHighLight($editorContainer, filterValue !== value);\r\n        var columnOptionName = isOnClickApplyFilterMode(that) ? \"bufferedFilterValue\" : \"filterValue\";\r\n        var normalizedValue = function(that, filterValue, column, $editorContainer) {\r\n            if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\r\n                var columnFilterValue = getColumnFilterValue(that, column);\r\n                if ($editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS))) {\r\n                    return [filterValue, Array.isArray(columnFilterValue) ? columnFilterValue[1] : void 0]\r\n                } else {\r\n                    return [Array.isArray(columnFilterValue) ? columnFilterValue[0] : columnFilterValue, filterValue]\r\n                }\r\n            }\r\n            return filterValue\r\n        }(that, value, column, $editorContainer);\r\n        var isBetween = \"between\" === getColumnSelectedFilterOperation(that, column);\r\n        var notFireEvent = options.notFireEvent || isBetween && Array.isArray(normalizedValue) && normalizedValue.indexOf(void 0) >= 0;\r\n        that._columnsController.columnOption(column.index, columnOptionName, normalizedValue, notFireEvent)\r\n    };\r\n    return {\r\n        _updateEditorValue: function(column, $editorContainer) {\r\n            var editor = getEditorInstance($editorContainer);\r\n            editor && editor.option(\"value\", getFilterValue(this, column.index, $editorContainer))\r\n        },\r\n        _columnOptionChanged: function(e) {\r\n            var optionNames = e.optionNames;\r\n            var $cell;\r\n            var $editorContainer;\r\n            var $editorRangeElements;\r\n            var $menu;\r\n            if (gridCoreUtils.checkChanges(optionNames, [\"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"bufferedSelectedFilterOperation\", \"filterValues\", \"filterType\"]) && void 0 !== e.columnIndex) {\r\n                var visibleIndex = this._columnsController.getVisibleIndex(e.columnIndex);\r\n                var column = this._columnsController.columnOption(e.columnIndex);\r\n                $cell = this._getCellElement(this.element().find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS)).index(), visibleIndex) || $();\r\n                $editorContainer = $cell.find(\".\" + EDITOR_CONTAINER_CLASS).first();\r\n                if (optionNames.filterValue || optionNames.bufferedFilterValue) {\r\n                    this._updateEditorValue(column, $editorContainer);\r\n                    var overlayInstance = $cell.find(\".\" + this.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)).data(\"dxOverlay\");\r\n                    if (overlayInstance) {\r\n                        $editorRangeElements = overlayInstance.$content().find(\".\" + EDITOR_CONTAINER_CLASS);\r\n                        this._updateEditorValue(column, $editorRangeElements.first());\r\n                        this._updateEditorValue(column, $editorRangeElements.last())\r\n                    }\r\n                    if (!overlayInstance || !overlayInstance.option(\"visible\")) {\r\n                        this._updateFilterRangeContent($cell, getRangeTextByFilterValue(this, column))\r\n                    }\r\n                }\r\n                if (optionNames.selectedFilterOperation || optionNames.bufferedSelectedFilterOperation) {\r\n                    if (visibleIndex >= 0 && column) {\r\n                        $menu = $cell.find(\".\" + MENU_CLASS);\r\n                        if ($menu.length) {\r\n                            this._updateFilterOperationChooser($menu, column, $editorContainer);\r\n                            if (\"between\" === getColumnSelectedFilterOperation(this, column)) {\r\n                                this._renderFilterRangeContent($cell, column)\r\n                            } else if ($editorContainer.find(\".\" + FILTER_RANGE_CONTENT_CLASS).length) {\r\n                                this._renderEditor($editorContainer, this._getEditorOptions($editorContainer, column));\r\n                                this._hideFilterRange()\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                return\r\n            }\r\n            this.callBase(e)\r\n        },\r\n        _renderCore: function() {\r\n            this._filterRangeOverlayInstance = null;\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _resizeCore: function() {\r\n            this.callBase.apply(this, arguments);\r\n            this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.repaint()\r\n        },\r\n        isFilterRowVisible: function() {\r\n            return this._isElementVisible(this.option(\"filterRow\"))\r\n        },\r\n        isVisible: function() {\r\n            return this.callBase() || this.isFilterRowVisible()\r\n        },\r\n        init: function() {\r\n            this.callBase();\r\n            this._applyFilterViewController = this.getController(\"applyFilter\")\r\n        },\r\n        _initFilterRangeOverlay: function($cell, column) {\r\n            var that = this;\r\n            var sharedData = {};\r\n            var $editorContainer = $cell.find(\".dx-editor-container\");\r\n            var $overlay = $(\"<div>\").addClass(that.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS)).appendTo($cell);\r\n            return that._createComponent($overlay, Overlay, {\r\n                height: \"auto\",\r\n                shading: false,\r\n                showTitle: false,\r\n                focusStateEnabled: false,\r\n                hideOnOutsideClick: true,\r\n                copyRootClassesToWrapper: true,\r\n                _ignoreCopyRootClassesToWrapperDeprecation: true,\r\n                animation: false,\r\n                position: {\r\n                    my: \"top\",\r\n                    at: \"top\",\r\n                    of: $editorContainer.length && $editorContainer || $cell,\r\n                    offset: \"0 -1\"\r\n                },\r\n                contentTemplate: function(contentElement) {\r\n                    var editorOptions;\r\n                    var $editor = $(\"<div>\").addClass(EDITOR_CONTAINER_CLASS + \" \" + that.addWidgetPrefix(FILTER_RANGE_START_CLASS)).appendTo(contentElement);\r\n                    column = that._columnsController.columnOption(column.index);\r\n                    editorOptions = that._getEditorOptions($editor, column);\r\n                    editorOptions.sharedData = sharedData;\r\n                    that._renderEditor($editor, editorOptions);\r\n                    eventsEngine.on($editor.find(EDITORS_INPUT_SELECTOR), \"keydown\", (function(e) {\r\n                        var $prevElement = $cell.find(\"[tabindex]\").not(e.target).first();\r\n                        if (\"tab\" === normalizeKeyName(e) && e.shiftKey) {\r\n                            e.preventDefault();\r\n                            that._hideFilterRange();\r\n                            if (!$prevElement.length) {\r\n                                $prevElement = $cell.prev().find(\"[tabindex]\").last()\r\n                            }\r\n                            eventsEngine.trigger($prevElement, \"focus\")\r\n                        }\r\n                    }));\r\n                    $editor = $(\"<div>\").addClass(EDITOR_CONTAINER_CLASS + \" \" + that.addWidgetPrefix(FILTER_RANGE_END_CLASS)).appendTo(contentElement);\r\n                    editorOptions = that._getEditorOptions($editor, column);\r\n                    editorOptions.sharedData = sharedData;\r\n                    that._renderEditor($editor, editorOptions);\r\n                    eventsEngine.on($editor.find(EDITORS_INPUT_SELECTOR), \"keydown\", (function(e) {\r\n                        if (\"tab\" === normalizeKeyName(e) && !e.shiftKey) {\r\n                            e.preventDefault();\r\n                            that._hideFilterRange();\r\n                            eventsEngine.trigger($cell.next().find(\"[tabindex]\").first(), \"focus\")\r\n                        }\r\n                    }));\r\n                    return $(contentElement).addClass(that.getWidgetContainerClass())\r\n                },\r\n                onShown: function(e) {\r\n                    var $editor = e.component.$content().find(\".\" + EDITOR_CONTAINER_CLASS).first();\r\n                    eventsEngine.trigger($editor.find(EDITORS_INPUT_SELECTOR), \"focus\")\r\n                },\r\n                onHidden: function() {\r\n                    column = that._columnsController.columnOption(column.index);\r\n                    $cell.find(\".\" + MENU_CLASS).parent().addClass(EDITOR_WITH_MENU_CLASS);\r\n                    if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\r\n                        that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column));\r\n                        that.component.updateDimensions()\r\n                    }\r\n                }\r\n            })\r\n        },\r\n        _updateFilterRangeOverlay: function(options) {\r\n            var overlayInstance = this._filterRangeOverlayInstance;\r\n            overlayInstance && overlayInstance.option(options)\r\n        },\r\n        _showFilterRange: function($cell, column) {\r\n            var $overlay = $cell.children(\".\" + this.addWidgetPrefix(FILTER_RANGE_OVERLAY_CLASS));\r\n            var overlayInstance = $overlay.length && $overlay.data(\"dxOverlay\");\r\n            if (!overlayInstance && column) {\r\n                overlayInstance = this._initFilterRangeOverlay($cell, column)\r\n            }\r\n            if (!overlayInstance.option(\"visible\")) {\r\n                this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.hide();\r\n                this._filterRangeOverlayInstance = overlayInstance;\r\n                this._updateFilterRangeOverlay({\r\n                    width: getOuterWidth($cell, true) + CORRECT_FILTER_RANGE_OVERLAY_WIDTH\r\n                });\r\n                this._filterRangeOverlayInstance && this._filterRangeOverlayInstance.show()\r\n            }\r\n        },\r\n        _hideFilterRange: function() {\r\n            var overlayInstance = this._filterRangeOverlayInstance;\r\n            overlayInstance && overlayInstance.hide()\r\n        },\r\n        getFilterRangeOverlayInstance: function() {\r\n            return this._filterRangeOverlayInstance\r\n        },\r\n        _createRow: function(row) {\r\n            var $row = this.callBase(row);\r\n            if (\"filter\" === row.rowType) {\r\n                $row.addClass(this.addWidgetPrefix(FILTER_ROW_CLASS));\r\n                if (!this.option(\"useLegacyKeyboardNavigation\")) {\r\n                    eventsEngine.on($row, \"keydown\", event => selectView(\"filterRow\", this, event))\r\n                }\r\n            }\r\n            return $row\r\n        },\r\n        _getRows: function() {\r\n            var result = this.callBase();\r\n            if (this.isFilterRowVisible()) {\r\n                result.push({\r\n                    rowType: \"filter\"\r\n                })\r\n            }\r\n            return result\r\n        },\r\n        _renderFilterCell: function(cell, options) {\r\n            var column = options.column;\r\n            var $cell = $(cell);\r\n            if (this.component.option(\"showColumnHeaders\")) {\r\n                this.setAria(\"describedby\", column.headerId, $cell)\r\n            }\r\n            this.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaFilterCell\"), $cell);\r\n            $cell.addClass(EDITOR_CELL_CLASS);\r\n            var $container = $(\"<div>\").appendTo($cell);\r\n            var $editorContainer = $(\"<div>\").addClass(EDITOR_CONTAINER_CLASS).appendTo($container);\r\n            if (\"between\" === getColumnSelectedFilterOperation(this, column)) {\r\n                this._renderFilterRangeContent($cell, column)\r\n            } else {\r\n                var editorOptions = this._getEditorOptions($editorContainer, column);\r\n                this._renderEditor($editorContainer, editorOptions)\r\n            }\r\n            var alignment = column.alignment;\r\n            if (alignment && \"center\" !== alignment) {\r\n                $cell.find(EDITORS_INPUT_SELECTOR).first().css(\"textAlign\", column.alignment)\r\n            }\r\n            if (column.filterOperations && column.filterOperations.length) {\r\n                this._renderFilterOperationChooser($container, column, $editorContainer)\r\n            }\r\n        },\r\n        _renderCellContent: function($cell, options) {\r\n            var that = this;\r\n            var column = options.column;\r\n            if (\"filter\" === options.rowType) {\r\n                if (column.command) {\r\n                    $cell.html(\"&nbsp;\")\r\n                } else if (column.allowFiltering) {\r\n                    that.renderTemplate($cell, that._renderFilterCell.bind(that), options).done(() => {\r\n                        that._updateCell($cell, options)\r\n                    });\r\n                    return\r\n                }\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _getEditorOptions: function($editorContainer, column) {\r\n            var that = this;\r\n            var accessibilityOptions = {\r\n                editorOptions: {\r\n                    inputAttr: that._getFilterInputAccessibilityAttributes(column)\r\n                }\r\n            };\r\n            var result = extend(accessibilityOptions, column, {\r\n                value: getFilterValue(that, column.index, $editorContainer),\r\n                parentType: \"filterRow\",\r\n                showAllText: that.option(\"filterRow.showAllText\"),\r\n                updateValueTimeout: \"onClick\" === that.option(\"filterRow.applyFilter\") ? 0 : FILTERING_TIMEOUT,\r\n                width: null,\r\n                setValue: function(value, notFireEvent) {\r\n                    updateFilterValue(that, {\r\n                        column: column,\r\n                        value: value,\r\n                        container: $editorContainer,\r\n                        notFireEvent: notFireEvent\r\n                    })\r\n                }\r\n            });\r\n            if (\"between\" === getColumnSelectedFilterOperation(that, column)) {\r\n                if ($editorContainer.hasClass(that.addWidgetPrefix(FILTER_RANGE_START_CLASS))) {\r\n                    result.placeholder = that.option(\"filterRow.betweenStartText\")\r\n                } else {\r\n                    result.placeholder = that.option(\"filterRow.betweenEndText\")\r\n                }\r\n            }\r\n            return result\r\n        },\r\n        _getFilterInputAccessibilityAttributes: function(column) {\r\n            var columnAriaLabel = messageLocalization.format(\"dxDataGrid-ariaFilterCell\");\r\n            if (this.component.option(\"showColumnHeaders\")) {\r\n                return {\r\n                    \"aria-label\": columnAriaLabel,\r\n                    \"aria-describedby\": column.headerId\r\n                }\r\n            }\r\n            return {\r\n                \"aria-label\": columnAriaLabel\r\n            }\r\n        },\r\n        _renderEditor: function($editorContainer, options) {\r\n            $editorContainer.empty();\r\n            var $element = $(\"<div>\").appendTo($editorContainer);\r\n            var editorController = this.getController(\"editorFactory\");\r\n            var dataSource = this.getController(\"data\").dataSource();\r\n            var filterRowController = this.getController(\"applyFilter\");\r\n            if (options.lookup && this.option(\"syncLookupFilterValues\")) {\r\n                filterRowController.setCurrentColumnForFiltering(options);\r\n                var filter = this.getController(\"data\").getCombinedFilter();\r\n                filterRowController.setCurrentColumnForFiltering(null);\r\n                var lookupDataSource = gridCoreUtils.getWrappedLookupDataSource(options, dataSource, filter);\r\n                var lookupOptions = _extends({}, options, {\r\n                    lookup: _extends({}, options.lookup, {\r\n                        dataSource: lookupDataSource\r\n                    })\r\n                });\r\n                return editorController.createEditor($element, lookupOptions)\r\n            } else {\r\n                return editorController.createEditor($element, options)\r\n            }\r\n        },\r\n        _renderFilterRangeContent: function($cell, column) {\r\n            var that = this;\r\n            var $editorContainer = $cell.find(\".\" + EDITOR_CONTAINER_CLASS).first();\r\n            $editorContainer.empty();\r\n            var $filterRangeContent = $(\"<div>\").addClass(FILTER_RANGE_CONTENT_CLASS).attr(\"tabindex\", this.option(\"tabIndex\"));\r\n            eventsEngine.on($filterRangeContent, \"focusin\", (function() {\r\n                that._showFilterRange($cell, column)\r\n            }));\r\n            $filterRangeContent.appendTo($editorContainer);\r\n            that._updateFilterRangeContent($cell, getRangeTextByFilterValue(that, column))\r\n        },\r\n        _updateFilterRangeContent: function($cell, value) {\r\n            var $filterRangeContent = $cell.find(\".\" + FILTER_RANGE_CONTENT_CLASS);\r\n            if ($filterRangeContent.length) {\r\n                if (\"\" === value) {\r\n                    $filterRangeContent.html(\"&nbsp;\")\r\n                } else {\r\n                    $filterRangeContent.text(value)\r\n                }\r\n            }\r\n        },\r\n        _updateFilterOperationChooser: function($menu, column, $editorContainer) {\r\n            var that = this;\r\n            var isCellWasFocused;\r\n            var restoreFocus = function() {\r\n                var menu = Menu.getInstance($menu);\r\n                menu && menu.option(\"focusedElement\", null);\r\n                isCellWasFocused && that._focusEditor($editorContainer)\r\n            };\r\n            that._createComponent($menu, Menu, {\r\n                integrationOptions: {},\r\n                activeStateEnabled: false,\r\n                selectionMode: \"single\",\r\n                cssClass: that.getWidgetContainerClass() + \" \" + CELL_FOCUS_DISABLED_CLASS + \" \" + FILTER_MENU,\r\n                showFirstSubmenuMode: \"onHover\",\r\n                hideSubmenuOnMouseLeave: true,\r\n                items: [{\r\n                    disabled: column.filterOperations && column.filterOperations.length ? false : true,\r\n                    icon: OPERATION_ICONS[getColumnSelectedFilterOperation(that, column) || \"default\"],\r\n                    selectable: false,\r\n                    items: that._getFilterOperationMenuItems(column)\r\n                }],\r\n                onItemClick: function(properties) {\r\n                    var selectedFilterOperation = properties.itemData.name;\r\n                    var columnSelectedFilterOperation = getColumnSelectedFilterOperation(that, column);\r\n                    var notFocusEditor = false;\r\n                    var isOnClickMode = isOnClickApplyFilterMode(that);\r\n                    var options = {};\r\n                    if (properties.itemData.items || selectedFilterOperation && selectedFilterOperation === columnSelectedFilterOperation) {\r\n                        return\r\n                    }\r\n                    if (selectedFilterOperation) {\r\n                        options[isOnClickMode ? \"bufferedSelectedFilterOperation\" : \"selectedFilterOperation\"] = selectedFilterOperation;\r\n                        if (\"between\" === selectedFilterOperation || \"between\" === columnSelectedFilterOperation) {\r\n                            notFocusEditor = \"between\" === selectedFilterOperation;\r\n                            options[isOnClickMode ? \"bufferedFilterValue\" : \"filterValue\"] = null\r\n                        }\r\n                    } else {\r\n                        options[isOnClickMode ? \"bufferedFilterValue\" : \"filterValue\"] = null;\r\n                        options[isOnClickMode ? \"bufferedSelectedFilterOperation\" : \"selectedFilterOperation\"] = column.defaultSelectedFilterOperation || null\r\n                    }\r\n                    that._columnsController.columnOption(column.index, options);\r\n                    that._applyFilterViewController.setHighLight($editorContainer, true);\r\n                    if (!selectedFilterOperation) {\r\n                        var editor = getEditorInstance($editorContainer);\r\n                        if (editor && \"dxDateBox\" === editor.NAME && !editor.option(\"isValid\")) {\r\n                            editor.reset();\r\n                            editor.option(\"isValid\", true)\r\n                        }\r\n                    }\r\n                    if (!notFocusEditor) {\r\n                        that._focusEditor($editorContainer)\r\n                    } else {\r\n                        that._showFilterRange($editorContainer.closest(\".\" + EDITOR_CELL_CLASS), column)\r\n                    }\r\n                },\r\n                onSubmenuShowing: function() {\r\n                    isCellWasFocused = that._isEditorFocused($editorContainer);\r\n                    that.getController(\"editorFactory\").loseFocus()\r\n                },\r\n                onSubmenuHiding: function() {\r\n                    eventsEngine.trigger($menu, \"blur\");\r\n                    restoreFocus()\r\n                },\r\n                onContentReady: function(e) {\r\n                    eventsEngine.on($menu, \"blur\", () => {\r\n                        var menu = e.component;\r\n                        menu._hideSubmenuAfterTimeout();\r\n                        restoreFocus()\r\n                    })\r\n                },\r\n                rtlEnabled: that.option(\"rtlEnabled\")\r\n            })\r\n        },\r\n        _isEditorFocused: function($container) {\r\n            return $container.hasClass(FOCUSED_CLASS) || $container.parents(\".\" + FOCUSED_CLASS).length\r\n        },\r\n        _focusEditor: function($container) {\r\n            this.getController(\"editorFactory\").focus($container);\r\n            eventsEngine.trigger($container.find(EDITORS_INPUT_SELECTOR), \"focus\")\r\n        },\r\n        _renderFilterOperationChooser: function($container, column, $editorContainer) {\r\n            var $menu;\r\n            if (this.option(\"filterRow.showOperationChooser\")) {\r\n                $container.addClass(EDITOR_WITH_MENU_CLASS);\r\n                $menu = $(\"<div>\").prependTo($container);\r\n                this._updateFilterOperationChooser($menu, column, $editorContainer)\r\n            }\r\n        },\r\n        _getFilterOperationMenuItems: function(column) {\r\n            var that = this;\r\n            var result = [{}];\r\n            var filterRowOptions = that.option(\"filterRow\");\r\n            var operationDescriptions = filterRowOptions && filterRowOptions.operationDescriptions || {};\r\n            if (column.filterOperations && column.filterOperations.length) {\r\n                var availableFilterOperations = column.filterOperations.filter((function(value) {\r\n                    return isDefined(OPERATION_DESCRIPTORS[value])\r\n                }));\r\n                result = map(availableFilterOperations, (function(value) {\r\n                    var descriptionName = OPERATION_DESCRIPTORS[value];\r\n                    return {\r\n                        name: value,\r\n                        selected: (getColumnSelectedFilterOperation(that, column) || column.defaultFilterOperation) === value,\r\n                        text: operationDescriptions[descriptionName],\r\n                        icon: OPERATION_ICONS[value]\r\n                    }\r\n                }));\r\n                result.push({\r\n                    name: null,\r\n                    text: filterRowOptions && filterRowOptions.resetOperationText,\r\n                    icon: OPERATION_ICONS.default\r\n                })\r\n            }\r\n            return result\r\n        },\r\n        _handleDataChanged: function(e) {\r\n            var _e$operationTypes, _e$operationTypes2;\r\n            this.callBase.apply(this, arguments);\r\n            if (null !== (_e$operationTypes = e.operationTypes) && void 0 !== _e$operationTypes && _e$operationTypes.filtering || null !== (_e$operationTypes2 = e.operationTypes) && void 0 !== _e$operationTypes2 && _e$operationTypes2.fullReload) {\r\n                this.updateLookupDataSource()\r\n            }\r\n        },\r\n        updateLookupDataSource: function() {\r\n            if (!this.option(\"syncLookupFilterValues\")) {\r\n                return\r\n            }\r\n            if (!this.element()) {\r\n                return\r\n            }\r\n            var columns = this._columnsController.getVisibleColumns();\r\n            var dataSource = this._dataController.dataSource();\r\n            var applyFilterViewController = this._applyFilterViewController;\r\n            var rowIndex = this.element().find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS)).index();\r\n            if (-1 === rowIndex) {\r\n                return\r\n            }\r\n            columns.forEach((column, index) => {\r\n                if (!column.lookup || column.calculateCellValue !== column.defaultCalculateCellValue) {\r\n                    return\r\n                }\r\n                var $cell = this._getCellElement(rowIndex, index);\r\n                var editor = getEditorInstance(null === $cell || void 0 === $cell ? void 0 : $cell.find(\".dx-editor-container\"));\r\n                if (editor) {\r\n                    applyFilterViewController.setCurrentColumnForFiltering(column);\r\n                    var filter = this._dataController.getCombinedFilter();\r\n                    applyFilterViewController.setCurrentColumnForFiltering(null);\r\n                    var lookupDataSource = gridCoreUtils.getWrappedLookupDataSource(column, dataSource, filter);\r\n                    editor.option(\"dataSource\", lookupDataSource)\r\n                }\r\n            })\r\n        },\r\n        optionChanged: function(args) {\r\n            switch (args.name) {\r\n                case \"filterRow\":\r\n                case \"showColumnLines\":\r\n                    this._invalidate(true, true);\r\n                    args.handled = true;\r\n                    break;\r\n                case \"syncLookupFilterValues\":\r\n                    if (args.value) {\r\n                        this.updateLookupDataSource()\r\n                    } else {\r\n                        this.render()\r\n                    }\r\n                    args.handled = true;\r\n                    break;\r\n                default:\r\n                    this.callBase(args)\r\n            }\r\n        }\r\n    }\r\n}();\r\nvar DataControllerFilterRowExtender = {\r\n    skipCalculateColumnFilters: function() {\r\n        return false\r\n    },\r\n    _calculateAdditionalFilter: function() {\r\n        if (this.skipCalculateColumnFilters()) {\r\n            return this.callBase()\r\n        }\r\n        var filters = [this.callBase()];\r\n        var columns = this._columnsController.getVisibleColumns(null, true);\r\n        var filterRowController = this.getController(\"applyFilter\");\r\n        each(columns, (function() {\r\n            var _filterRowController$;\r\n            var shouldSkip = (null === (_filterRowController$ = filterRowController.getCurrentColumnForFiltering()) || void 0 === _filterRowController$ ? void 0 : _filterRowController$.index) === this.index;\r\n            if (this.allowFiltering && this.calculateFilterExpression && isDefined(this.filterValue) && !shouldSkip) {\r\n                var filter = this.createFilterExpression(this.filterValue, this.selectedFilterOperation || this.defaultFilterOperation, \"filterRow\");\r\n                filters.push(filter)\r\n            }\r\n        }));\r\n        return gridCoreUtils.combineFilters(filters)\r\n    }\r\n};\r\nvar ApplyFilterViewController = modules.ViewController.inherit({\r\n    _getHeaderPanel: function() {\r\n        if (!this._headerPanel) {\r\n            this._headerPanel = this.getView(\"headerPanel\")\r\n        }\r\n        return this._headerPanel\r\n    },\r\n    setHighLight: function($element, value) {\r\n        if (isOnClickApplyFilterMode(this)) {\r\n            $element && $element.toggleClass(HIGHLIGHT_OUTLINE_CLASS, value) && $element.closest(\".\" + EDITOR_CELL_CLASS).toggleClass(FILTER_MODIFIED_CLASS, value);\r\n            this._getHeaderPanel().enableApplyButton(value)\r\n        }\r\n    },\r\n    applyFilter: function() {\r\n        var columnsController = this.getController(\"columns\");\r\n        var columns = columnsController.getColumns();\r\n        columnsController.beginUpdate();\r\n        for (var i = 0; i < columns.length; i++) {\r\n            var column = columns[i];\r\n            if (void 0 !== column.bufferedFilterValue) {\r\n                columnsController.columnOption(i, \"filterValue\", column.bufferedFilterValue);\r\n                column.bufferedFilterValue = void 0\r\n            }\r\n            if (void 0 !== column.bufferedSelectedFilterOperation) {\r\n                columnsController.columnOption(i, \"selectedFilterOperation\", column.bufferedSelectedFilterOperation);\r\n                column.bufferedSelectedFilterOperation = void 0\r\n            }\r\n        }\r\n        columnsController.endUpdate();\r\n        this.removeHighLights()\r\n    },\r\n    removeHighLights: function() {\r\n        if (isOnClickApplyFilterMode(this)) {\r\n            var columnHeadersViewElement = this.getView(\"columnHeadersView\").element();\r\n            columnHeadersViewElement.find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS) + \" .\" + HIGHLIGHT_OUTLINE_CLASS).removeClass(HIGHLIGHT_OUTLINE_CLASS);\r\n            columnHeadersViewElement.find(\".\" + this.addWidgetPrefix(FILTER_ROW_CLASS) + \" .\" + FILTER_MODIFIED_CLASS).removeClass(FILTER_MODIFIED_CLASS);\r\n            this._getHeaderPanel().enableApplyButton(false)\r\n        }\r\n    },\r\n    setCurrentColumnForFiltering: function(column) {\r\n        this._currentColumn = column\r\n    },\r\n    getCurrentColumnForFiltering: function() {\r\n        return this._currentColumn\r\n    }\r\n});\r\nexport var filterRowModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            syncLookupFilterValues: true,\r\n            filterRow: {\r\n                visible: false,\r\n                showOperationChooser: true,\r\n                showAllText: messageLocalization.format(\"dxDataGrid-filterRowShowAllText\"),\r\n                resetOperationText: messageLocalization.format(\"dxDataGrid-filterRowResetOperationText\"),\r\n                applyFilter: \"auto\",\r\n                applyFilterText: messageLocalization.format(\"dxDataGrid-applyFilterText\"),\r\n                operationDescriptions: {\r\n                    equal: messageLocalization.format(\"dxDataGrid-filterRowOperationEquals\"),\r\n                    notEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationNotEquals\"),\r\n                    lessThan: messageLocalization.format(\"dxDataGrid-filterRowOperationLess\"),\r\n                    lessThanOrEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationLessOrEquals\"),\r\n                    greaterThan: messageLocalization.format(\"dxDataGrid-filterRowOperationGreater\"),\r\n                    greaterThanOrEqual: messageLocalization.format(\"dxDataGrid-filterRowOperationGreaterOrEquals\"),\r\n                    startsWith: messageLocalization.format(\"dxDataGrid-filterRowOperationStartsWith\"),\r\n                    contains: messageLocalization.format(\"dxDataGrid-filterRowOperationContains\"),\r\n                    notContains: messageLocalization.format(\"dxDataGrid-filterRowOperationNotContains\"),\r\n                    endsWith: messageLocalization.format(\"dxDataGrid-filterRowOperationEndsWith\"),\r\n                    between: messageLocalization.format(\"dxDataGrid-filterRowOperationBetween\"),\r\n                    isBlank: messageLocalization.format(\"dxFilterBuilder-filterOperationIsBlank\"),\r\n                    isNotBlank: messageLocalization.format(\"dxFilterBuilder-filterOperationIsNotBlank\")\r\n                },\r\n                betweenStartText: messageLocalization.format(\"dxDataGrid-filterRowOperationBetweenStartText\"),\r\n                betweenEndText: messageLocalization.format(\"dxDataGrid-filterRowOperationBetweenEndText\")\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        applyFilter: ApplyFilterViewController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: DataControllerFilterRowExtender,\r\n            columnsResizer: {\r\n                _startResizing: function() {\r\n                    var that = this;\r\n                    that.callBase.apply(that, arguments);\r\n                    if (that.isResizing()) {\r\n                        var overlayInstance = that._columnHeadersView.getFilterRangeOverlayInstance();\r\n                        if (overlayInstance) {\r\n                            var cellIndex = overlayInstance.$element().closest(\"td\").index();\r\n                            if (cellIndex === that._targetPoint.columnIndex || cellIndex === that._targetPoint.columnIndex + 1) {\r\n                                overlayInstance.$content().hide()\r\n                            }\r\n                        }\r\n                    }\r\n                },\r\n                _endResizing: function() {\r\n                    var that = this;\r\n                    var $cell;\r\n                    if (that.isResizing()) {\r\n                        var overlayInstance = that._columnHeadersView.getFilterRangeOverlayInstance();\r\n                        if (overlayInstance) {\r\n                            $cell = overlayInstance.$element().closest(\"td\");\r\n                            that._columnHeadersView._updateFilterRangeOverlay({\r\n                                width: getOuterWidth($cell, true) + CORRECT_FILTER_RANGE_OVERLAY_WIDTH\r\n                            });\r\n                            overlayInstance.$content().show()\r\n                        }\r\n                    }\r\n                    that.callBase.apply(that, arguments)\r\n                }\r\n            },\r\n            editing: {\r\n                updateFieldValue(options) {\r\n                    if (options.column.lookup) {\r\n                        this._needUpdateLookupDataSource = true\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _afterSaveEditData(cancel) {\r\n                    if (this._needUpdateLookupDataSource && !cancel) {\r\n                        var _this$getView;\r\n                        null === (_this$getView = this.getView(\"columnHeadersView\")) || void 0 === _this$getView ? void 0 : _this$getView.updateLookupDataSource()\r\n                    }\r\n                    this._needUpdateLookupDataSource = false;\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _afterCancelEditData() {\r\n                    this._needUpdateLookupDataSource = false;\r\n                    return this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            columnHeadersView: ColumnHeadersViewFilterRowExtender,\r\n            headerPanel: {\r\n                _getToolbarItems: function() {\r\n                    var items = this.callBase();\r\n                    var filterItem = this._prepareFilterItem(items);\r\n                    return filterItem.concat(items)\r\n                },\r\n                _prepareFilterItem: function() {\r\n                    var that = this;\r\n                    var filterItem = [];\r\n                    if (that._isShowApplyFilterButton()) {\r\n                        var hintText = that.option(\"filterRow.applyFilterText\");\r\n                        var columns = that._columnsController.getColumns();\r\n                        var disabled = !columns.filter((function(column) {\r\n                            return void 0 !== column.bufferedFilterValue\r\n                        })).length;\r\n                        var toolbarItem = {\r\n                            widget: \"dxButton\",\r\n                            options: {\r\n                                icon: \"apply-filter\",\r\n                                disabled: disabled,\r\n                                onClick: function() {\r\n                                    that._applyFilterViewController.applyFilter()\r\n                                },\r\n                                hint: hintText,\r\n                                text: hintText,\r\n                                onInitialized: function(e) {\r\n                                    $(e.element).addClass(that._getToolbarButtonClass(APPLY_BUTTON_CLASS))\r\n                                }\r\n                            },\r\n                            showText: \"inMenu\",\r\n                            name: \"applyFilterButton\",\r\n                            location: \"after\",\r\n                            locateInMenu: \"auto\",\r\n                            sortIndex: 10\r\n                        };\r\n                        filterItem.push(toolbarItem)\r\n                    }\r\n                    return filterItem\r\n                },\r\n                _isShowApplyFilterButton: function() {\r\n                    var filterRowOptions = this.option(\"filterRow\");\r\n                    return filterRowOptions && filterRowOptions.visible && \"onClick\" === filterRowOptions.applyFilter\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._dataController = this.getController(\"data\");\r\n                    this._applyFilterViewController = this.getController(\"applyFilter\")\r\n                },\r\n                enableApplyButton: function(value) {\r\n                    this.setToolbarItemDisabled(\"applyFilterButton\", !value)\r\n                },\r\n                isVisible: function() {\r\n                    return this.callBase() || this._isShowApplyFilterButton()\r\n                },\r\n                optionChanged: function(args) {\r\n                    if (\"filterRow\" === args.name) {\r\n                        this._invalidate();\r\n                        args.handled = true\r\n                    } else {\r\n                        this.callBase(args)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}