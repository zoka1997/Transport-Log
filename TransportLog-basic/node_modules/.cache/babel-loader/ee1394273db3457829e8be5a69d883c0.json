{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments/rendering_strategies/strategy_horizontal_month.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport HorizontalMonthLineRenderingStrategy from \"./strategy_horizontal_month_line\";\nimport { getGroupWidth } from \"../../workspaces/helpers/positionHelper\";\nvar MONTH_APPOINTMENT_HEIGHT_RATIO = .6;\nvar MONTH_APPOINTMENT_MIN_OFFSET = 26;\nvar MONTH_APPOINTMENT_MAX_OFFSET = 30;\nvar MONTH_DROPDOWN_APPOINTMENT_MIN_RIGHT_OFFSET = 36;\nvar MONTH_DROPDOWN_APPOINTMENT_MAX_RIGHT_OFFSET = 60;\n\nclass HorizontalMonthRenderingStrategy extends HorizontalMonthLineRenderingStrategy {\n  get endViewDate() {\n    return this.options.endViewDate;\n  }\n\n  get adaptivityEnabled() {\n    return this.options.adaptivityEnabled;\n  }\n\n  get DOMMetaData() {\n    return this.options.DOMMetaData;\n  }\n\n  _getLeftPosition(settings) {\n    var fullWeekAppointmentWidth = this.getGroupWidth(settings.groupIndex);\n    return this._calculateMultiWeekAppointmentLeftOffset(settings.hMax, fullWeekAppointmentWidth);\n  }\n\n  _getChunkCount(fullChunksWidth, firstChunkWidth, weekWidth) {\n    var rawFullChunksWidth = fullChunksWidth - firstChunkWidth + weekWidth;\n    return Math.ceil(rawFullChunksWidth / weekWidth);\n  }\n\n  _getChunkWidths(geometry) {\n    var firstChunkWidth = geometry.reducedWidth;\n    var fullChunksWidth = Math.floor(geometry.sourceAppointmentWidth);\n    var widthWithoutFirstChunk = fullChunksWidth - firstChunkWidth;\n    return [firstChunkWidth, fullChunksWidth, widthWithoutFirstChunk];\n  }\n\n  _getTailChunkSettings(withoutFirstChunkWidth, weekWidth, leftPosition) {\n    var tailChunkWidth = withoutFirstChunkWidth % weekWidth || weekWidth;\n    var rtlPosition = leftPosition + (weekWidth - tailChunkWidth);\n    var tailChunkLeftPosition = this.rtlEnabled ? rtlPosition : leftPosition;\n    return [tailChunkWidth, tailChunkLeftPosition];\n  }\n\n  _getAppointmentParts(geometry, settings) {\n    var result = [];\n    var weekWidth = Math.round(this.getGroupWidth(settings.groupIndex));\n\n    var [firstChunkWidth, fullChunksWidth, withoutFirstChunkWidth] = this._getChunkWidths(geometry, settings, weekWidth);\n\n    var leftPosition = this._getLeftPosition(settings);\n\n    var hasTailChunk = this.endViewDate > settings.info.appointment.endDate;\n\n    var chunkCount = this._getChunkCount(fullChunksWidth, firstChunkWidth, weekWidth);\n\n    var [tailChunkWidth, tailChunkLeftPosition] = this._getTailChunkSettings(withoutFirstChunkWidth, weekWidth, leftPosition);\n\n    for (var chunkIndex = 1; chunkIndex < chunkCount; chunkIndex++) {\n      var topPosition = settings.top + this.cellHeight * chunkIndex;\n      var isTailChunk = hasTailChunk && chunkIndex === chunkCount - 1;\n      result.push(_extends({}, settings, {\n        top: topPosition,\n        left: isTailChunk ? tailChunkLeftPosition : leftPosition,\n        height: geometry.height,\n        width: isTailChunk ? tailChunkWidth : weekWidth,\n        appointmentReduced: isTailChunk ? \"tail\" : \"body\",\n        rowIndex: ++settings.rowIndex,\n        columnIndex: 0\n      }));\n    }\n\n    return result;\n  }\n\n  _calculateMultiWeekAppointmentLeftOffset(max, width) {\n    return this.rtlEnabled ? max : max - width;\n  }\n\n  getGroupWidth(groupIndex) {\n    return getGroupWidth(groupIndex, this.viewDataProvider, {\n      intervalCount: this.options.intervalCount,\n      currentDate: this.options.currentDate,\n      viewType: this.options.viewType,\n      hoursInterval: this.options.hoursInterval,\n      startDayHour: this.options.startDayHour,\n      endDayHour: this.options.endDayHour,\n      isVirtualScrolling: this.isVirtualScrolling,\n      rtlEnabled: this.rtlEnabled,\n      DOMMetaData: this.DOMMetaData\n    });\n  }\n\n  _getAppointmentDefaultHeight() {\n    return this._getAppointmentHeightByTheme();\n  }\n\n  _getAppointmentMinHeight() {\n    return this._getAppointmentDefaultHeight();\n  }\n\n  _columnCondition(a, b) {\n    var conditions = this._getConditions(a, b);\n\n    return conditions.rowCondition || conditions.columnCondition || conditions.cellPositionCondition;\n  }\n\n  createTaskPositionMap(items) {\n    return super.createTaskPositionMap(items, true);\n  }\n\n  _getSortedPositions(map) {\n    return super._getSortedPositions(map, true);\n  }\n\n  _getDefaultRatio() {\n    return MONTH_APPOINTMENT_HEIGHT_RATIO;\n  }\n\n  _getOffsets() {\n    return {\n      unlimited: MONTH_APPOINTMENT_MIN_OFFSET,\n      auto: MONTH_APPOINTMENT_MAX_OFFSET\n    };\n  }\n\n  getDropDownAppointmentWidth(intervalCount) {\n    if (this.adaptivityEnabled) {\n      return this.getDropDownButtonAdaptiveSize();\n    }\n\n    var offset = intervalCount > 1 ? MONTH_DROPDOWN_APPOINTMENT_MAX_RIGHT_OFFSET : MONTH_DROPDOWN_APPOINTMENT_MIN_RIGHT_OFFSET;\n    return this.cellWidth - offset;\n  }\n\n  needCorrectAppointmentDates() {\n    return false;\n  }\n\n  _needVerticalGroupBounds() {\n    return false;\n  }\n\n  _needHorizontalGroupBounds() {\n    return true;\n  }\n\n  getPositionShift(timeShift) {\n    return {\n      cellPosition: timeShift * this.cellWidth,\n      top: 0,\n      left: 0\n    };\n  }\n\n}\n\nexport default HorizontalMonthRenderingStrategy;","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/scheduler/appointments/rendering_strategies/strategy_horizontal_month.js"],"names":["_extends","HorizontalMonthLineRenderingStrategy","getGroupWidth","MONTH_APPOINTMENT_HEIGHT_RATIO","MONTH_APPOINTMENT_MIN_OFFSET","MONTH_APPOINTMENT_MAX_OFFSET","MONTH_DROPDOWN_APPOINTMENT_MIN_RIGHT_OFFSET","MONTH_DROPDOWN_APPOINTMENT_MAX_RIGHT_OFFSET","HorizontalMonthRenderingStrategy","endViewDate","options","adaptivityEnabled","DOMMetaData","_getLeftPosition","settings","fullWeekAppointmentWidth","groupIndex","_calculateMultiWeekAppointmentLeftOffset","hMax","_getChunkCount","fullChunksWidth","firstChunkWidth","weekWidth","rawFullChunksWidth","Math","ceil","_getChunkWidths","geometry","reducedWidth","floor","sourceAppointmentWidth","widthWithoutFirstChunk","_getTailChunkSettings","withoutFirstChunkWidth","leftPosition","tailChunkWidth","rtlPosition","tailChunkLeftPosition","rtlEnabled","_getAppointmentParts","result","round","hasTailChunk","info","appointment","endDate","chunkCount","chunkIndex","topPosition","top","cellHeight","isTailChunk","push","left","height","width","appointmentReduced","rowIndex","columnIndex","max","viewDataProvider","intervalCount","currentDate","viewType","hoursInterval","startDayHour","endDayHour","isVirtualScrolling","_getAppointmentDefaultHeight","_getAppointmentHeightByTheme","_getAppointmentMinHeight","_columnCondition","a","b","conditions","_getConditions","rowCondition","columnCondition","cellPositionCondition","createTaskPositionMap","items","_getSortedPositions","map","_getDefaultRatio","_getOffsets","unlimited","auto","getDropDownAppointmentWidth","getDropDownButtonAdaptiveSize","offset","cellWidth","needCorrectAppointmentDates","_needVerticalGroupBounds","_needHorizontalGroupBounds","getPositionShift","timeShift","cellPosition"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/appointments/rendering_strategies/strategy_horizontal_month.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport HorizontalMonthLineRenderingStrategy from \"./strategy_horizontal_month_line\";\r\nimport {\r\n    getGroupWidth\r\n} from \"../../workspaces/helpers/positionHelper\";\r\nvar MONTH_APPOINTMENT_HEIGHT_RATIO = .6;\r\nvar MONTH_APPOINTMENT_MIN_OFFSET = 26;\r\nvar MONTH_APPOINTMENT_MAX_OFFSET = 30;\r\nvar MONTH_DROPDOWN_APPOINTMENT_MIN_RIGHT_OFFSET = 36;\r\nvar MONTH_DROPDOWN_APPOINTMENT_MAX_RIGHT_OFFSET = 60;\r\nclass HorizontalMonthRenderingStrategy extends HorizontalMonthLineRenderingStrategy {\r\n    get endViewDate() {\r\n        return this.options.endViewDate\r\n    }\r\n    get adaptivityEnabled() {\r\n        return this.options.adaptivityEnabled\r\n    }\r\n    get DOMMetaData() {\r\n        return this.options.DOMMetaData\r\n    }\r\n    _getLeftPosition(settings) {\r\n        var fullWeekAppointmentWidth = this.getGroupWidth(settings.groupIndex);\r\n        return this._calculateMultiWeekAppointmentLeftOffset(settings.hMax, fullWeekAppointmentWidth)\r\n    }\r\n    _getChunkCount(fullChunksWidth, firstChunkWidth, weekWidth) {\r\n        var rawFullChunksWidth = fullChunksWidth - firstChunkWidth + weekWidth;\r\n        return Math.ceil(rawFullChunksWidth / weekWidth)\r\n    }\r\n    _getChunkWidths(geometry) {\r\n        var firstChunkWidth = geometry.reducedWidth;\r\n        var fullChunksWidth = Math.floor(geometry.sourceAppointmentWidth);\r\n        var widthWithoutFirstChunk = fullChunksWidth - firstChunkWidth;\r\n        return [firstChunkWidth, fullChunksWidth, widthWithoutFirstChunk]\r\n    }\r\n    _getTailChunkSettings(withoutFirstChunkWidth, weekWidth, leftPosition) {\r\n        var tailChunkWidth = withoutFirstChunkWidth % weekWidth || weekWidth;\r\n        var rtlPosition = leftPosition + (weekWidth - tailChunkWidth);\r\n        var tailChunkLeftPosition = this.rtlEnabled ? rtlPosition : leftPosition;\r\n        return [tailChunkWidth, tailChunkLeftPosition]\r\n    }\r\n    _getAppointmentParts(geometry, settings) {\r\n        var result = [];\r\n        var weekWidth = Math.round(this.getGroupWidth(settings.groupIndex));\r\n        var [firstChunkWidth, fullChunksWidth, withoutFirstChunkWidth] = this._getChunkWidths(geometry, settings, weekWidth);\r\n        var leftPosition = this._getLeftPosition(settings);\r\n        var hasTailChunk = this.endViewDate > settings.info.appointment.endDate;\r\n        var chunkCount = this._getChunkCount(fullChunksWidth, firstChunkWidth, weekWidth);\r\n        var [tailChunkWidth, tailChunkLeftPosition] = this._getTailChunkSettings(withoutFirstChunkWidth, weekWidth, leftPosition);\r\n        for (var chunkIndex = 1; chunkIndex < chunkCount; chunkIndex++) {\r\n            var topPosition = settings.top + this.cellHeight * chunkIndex;\r\n            var isTailChunk = hasTailChunk && chunkIndex === chunkCount - 1;\r\n            result.push(_extends({}, settings, {\r\n                top: topPosition,\r\n                left: isTailChunk ? tailChunkLeftPosition : leftPosition,\r\n                height: geometry.height,\r\n                width: isTailChunk ? tailChunkWidth : weekWidth,\r\n                appointmentReduced: isTailChunk ? \"tail\" : \"body\",\r\n                rowIndex: ++settings.rowIndex,\r\n                columnIndex: 0\r\n            }))\r\n        }\r\n        return result\r\n    }\r\n    _calculateMultiWeekAppointmentLeftOffset(max, width) {\r\n        return this.rtlEnabled ? max : max - width\r\n    }\r\n    getGroupWidth(groupIndex) {\r\n        return getGroupWidth(groupIndex, this.viewDataProvider, {\r\n            intervalCount: this.options.intervalCount,\r\n            currentDate: this.options.currentDate,\r\n            viewType: this.options.viewType,\r\n            hoursInterval: this.options.hoursInterval,\r\n            startDayHour: this.options.startDayHour,\r\n            endDayHour: this.options.endDayHour,\r\n            isVirtualScrolling: this.isVirtualScrolling,\r\n            rtlEnabled: this.rtlEnabled,\r\n            DOMMetaData: this.DOMMetaData\r\n        })\r\n    }\r\n    _getAppointmentDefaultHeight() {\r\n        return this._getAppointmentHeightByTheme()\r\n    }\r\n    _getAppointmentMinHeight() {\r\n        return this._getAppointmentDefaultHeight()\r\n    }\r\n    _columnCondition(a, b) {\r\n        var conditions = this._getConditions(a, b);\r\n        return conditions.rowCondition || conditions.columnCondition || conditions.cellPositionCondition\r\n    }\r\n    createTaskPositionMap(items) {\r\n        return super.createTaskPositionMap(items, true)\r\n    }\r\n    _getSortedPositions(map) {\r\n        return super._getSortedPositions(map, true)\r\n    }\r\n    _getDefaultRatio() {\r\n        return MONTH_APPOINTMENT_HEIGHT_RATIO\r\n    }\r\n    _getOffsets() {\r\n        return {\r\n            unlimited: MONTH_APPOINTMENT_MIN_OFFSET,\r\n            auto: MONTH_APPOINTMENT_MAX_OFFSET\r\n        }\r\n    }\r\n    getDropDownAppointmentWidth(intervalCount) {\r\n        if (this.adaptivityEnabled) {\r\n            return this.getDropDownButtonAdaptiveSize()\r\n        }\r\n        var offset = intervalCount > 1 ? MONTH_DROPDOWN_APPOINTMENT_MAX_RIGHT_OFFSET : MONTH_DROPDOWN_APPOINTMENT_MIN_RIGHT_OFFSET;\r\n        return this.cellWidth - offset\r\n    }\r\n    needCorrectAppointmentDates() {\r\n        return false\r\n    }\r\n    _needVerticalGroupBounds() {\r\n        return false\r\n    }\r\n    _needHorizontalGroupBounds() {\r\n        return true\r\n    }\r\n    getPositionShift(timeShift) {\r\n        return {\r\n            cellPosition: timeShift * this.cellWidth,\r\n            top: 0,\r\n            left: 0\r\n        }\r\n    }\r\n}\r\nexport default HorizontalMonthRenderingStrategy;\r\n"]},"metadata":{},"sourceType":"module"}