{"ast":null,"code":"/**\r\n * DevExtreme (esm/exporter/excel/excel.file.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../core/utils/type\";\nimport tagHelper from \"./excel.tag_helper\";\nimport cellFormatHelper from \"./excel.cell_format_helper\";\nimport fillHelper from \"./excel.fill_helper\";\nimport fontHelper from \"./excel.font_helper\";\nimport numberFormatHelper from \"./excel.number_format_helper\";\nexport default class ExcelFile {\n  constructor() {\n    this._cellFormatTags = [];\n    this._fillTags = [];\n    this._fontTags = [];\n    this._numberFormatTags = [];\n\n    this._fillTags.push(fillHelper.tryCreateTag({\n      patternFill: {\n        patternType: \"none\"\n      }\n    }));\n  }\n\n  registerCellFormat(cellFormat) {\n    var result;\n    var cellFormatTag = cellFormatHelper.tryCreateTag(cellFormat, {\n      registerFill: this.registerFill.bind(this),\n      registerFont: this.registerFont.bind(this),\n      registerNumberFormat: this.registerNumberFormat.bind(this)\n    });\n\n    if (isDefined(cellFormatTag)) {\n      for (var i = 0; i < this._cellFormatTags.length; i++) {\n        if (cellFormatHelper.areEqual(this._cellFormatTags[i], cellFormatTag)) {\n          result = i;\n          break;\n        }\n      }\n\n      if (void 0 === result) {\n        result = this._cellFormatTags.push(cellFormatTag) - 1;\n      }\n    }\n\n    return result;\n  }\n\n  static copyCellFormat(source) {\n    return cellFormatHelper.copy(source);\n  }\n\n  generateCellFormatsXml() {\n    var cellFormatTagsAsXmlStringsArray = this._cellFormatTags.map(tag => cellFormatHelper.toXml(tag));\n\n    return tagHelper.toXml(\"cellXfs\", {\n      count: cellFormatTagsAsXmlStringsArray.length\n    }, cellFormatTagsAsXmlStringsArray.join(\"\"));\n  }\n\n  registerFill(fill) {\n    var result;\n    var fillTag = fillHelper.tryCreateTag(fill);\n\n    if (isDefined(fillTag)) {\n      for (var i = 0; i < this._fillTags.length; i++) {\n        if (fillHelper.areEqual(this._fillTags[i], fillTag)) {\n          result = i;\n          break;\n        }\n      }\n\n      if (void 0 === result) {\n        if (this._fillTags.length < 2) {\n          this._fillTags.push(fillHelper.tryCreateTag({\n            patternFill: {\n              patternType: \"Gray125\"\n            }\n          }));\n        }\n\n        result = this._fillTags.push(fillTag) - 1;\n      }\n    }\n\n    return result;\n  }\n\n  generateFillsXml() {\n    var tagsAsXmlStringsArray = this._fillTags.map(tag => fillHelper.toXml(tag));\n\n    return tagHelper.toXml(\"fills\", {\n      count: tagsAsXmlStringsArray.length\n    }, tagsAsXmlStringsArray.join(\"\"));\n  }\n\n  registerFont(font) {\n    var result;\n    var fontTag = fontHelper.tryCreateTag(font);\n\n    if (isDefined(fontTag)) {\n      for (var i = 0; i < this._fontTags.length; i++) {\n        if (fontHelper.areEqual(this._fontTags[i], fontTag)) {\n          result = i;\n          break;\n        }\n      }\n\n      if (void 0 === result) {\n        result = this._fontTags.push(fontTag) - 1;\n      }\n    }\n\n    return result;\n  }\n\n  generateFontsXml() {\n    var xmlStringsArray = this._fontTags.map(tag => fontHelper.toXml(tag));\n\n    return tagHelper.toXml(\"fonts\", {\n      count: xmlStringsArray.length\n    }, xmlStringsArray.join(\"\"));\n  }\n\n  _convertNumberFormatIndexToId(index) {\n    return 165 + index;\n  }\n\n  registerNumberFormat(numberFormat) {\n    var result;\n    var tag = numberFormatHelper.tryCreateTag(numberFormat);\n\n    if (isDefined(tag)) {\n      for (var i = 0; i < this._numberFormatTags.length; i++) {\n        if (numberFormatHelper.areEqual(this._numberFormatTags[i], tag)) {\n          result = this._numberFormatTags[i][numberFormatHelper.ID_PROPERTY_NAME];\n          break;\n        }\n      }\n\n      if (void 0 === result) {\n        tag[numberFormatHelper.ID_PROPERTY_NAME] = this._convertNumberFormatIndexToId(this._numberFormatTags.length);\n        result = tag[numberFormatHelper.ID_PROPERTY_NAME];\n\n        this._numberFormatTags.push(tag);\n      }\n    }\n\n    return result;\n  }\n\n  generateNumberFormatsXml() {\n    if (this._numberFormatTags.length > 0) {\n      var xmlStringsArray = this._numberFormatTags.map(tag => numberFormatHelper.toXml(tag));\n\n      return tagHelper.toXml(\"numFmts\", {\n        count: xmlStringsArray.length\n      }, xmlStringsArray.join(\"\"));\n    } else {\n      return \"\";\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/exporter/excel/excel.file.js"],"names":["isDefined","tagHelper","cellFormatHelper","fillHelper","fontHelper","numberFormatHelper","ExcelFile","constructor","_cellFormatTags","_fillTags","_fontTags","_numberFormatTags","push","tryCreateTag","patternFill","patternType","registerCellFormat","cellFormat","result","cellFormatTag","registerFill","bind","registerFont","registerNumberFormat","i","length","areEqual","copyCellFormat","source","copy","generateCellFormatsXml","cellFormatTagsAsXmlStringsArray","map","tag","toXml","count","join","fill","fillTag","generateFillsXml","tagsAsXmlStringsArray","font","fontTag","generateFontsXml","xmlStringsArray","_convertNumberFormatIndexToId","index","numberFormat","ID_PROPERTY_NAME","generateNumberFormatsXml"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/exporter/excel/excel.file.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport tagHelper from \"./excel.tag_helper\";\r\nimport cellFormatHelper from \"./excel.cell_format_helper\";\r\nimport fillHelper from \"./excel.fill_helper\";\r\nimport fontHelper from \"./excel.font_helper\";\r\nimport numberFormatHelper from \"./excel.number_format_helper\";\r\nexport default class ExcelFile {\r\n    constructor() {\r\n        this._cellFormatTags = [];\r\n        this._fillTags = [];\r\n        this._fontTags = [];\r\n        this._numberFormatTags = [];\r\n        this._fillTags.push(fillHelper.tryCreateTag({\r\n            patternFill: {\r\n                patternType: \"none\"\r\n            }\r\n        }))\r\n    }\r\n    registerCellFormat(cellFormat) {\r\n        var result;\r\n        var cellFormatTag = cellFormatHelper.tryCreateTag(cellFormat, {\r\n            registerFill: this.registerFill.bind(this),\r\n            registerFont: this.registerFont.bind(this),\r\n            registerNumberFormat: this.registerNumberFormat.bind(this)\r\n        });\r\n        if (isDefined(cellFormatTag)) {\r\n            for (var i = 0; i < this._cellFormatTags.length; i++) {\r\n                if (cellFormatHelper.areEqual(this._cellFormatTags[i], cellFormatTag)) {\r\n                    result = i;\r\n                    break\r\n                }\r\n            }\r\n            if (void 0 === result) {\r\n                result = this._cellFormatTags.push(cellFormatTag) - 1\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    static copyCellFormat(source) {\r\n        return cellFormatHelper.copy(source)\r\n    }\r\n    generateCellFormatsXml() {\r\n        var cellFormatTagsAsXmlStringsArray = this._cellFormatTags.map(tag => cellFormatHelper.toXml(tag));\r\n        return tagHelper.toXml(\"cellXfs\", {\r\n            count: cellFormatTagsAsXmlStringsArray.length\r\n        }, cellFormatTagsAsXmlStringsArray.join(\"\"))\r\n    }\r\n    registerFill(fill) {\r\n        var result;\r\n        var fillTag = fillHelper.tryCreateTag(fill);\r\n        if (isDefined(fillTag)) {\r\n            for (var i = 0; i < this._fillTags.length; i++) {\r\n                if (fillHelper.areEqual(this._fillTags[i], fillTag)) {\r\n                    result = i;\r\n                    break\r\n                }\r\n            }\r\n            if (void 0 === result) {\r\n                if (this._fillTags.length < 2) {\r\n                    this._fillTags.push(fillHelper.tryCreateTag({\r\n                        patternFill: {\r\n                            patternType: \"Gray125\"\r\n                        }\r\n                    }))\r\n                }\r\n                result = this._fillTags.push(fillTag) - 1\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    generateFillsXml() {\r\n        var tagsAsXmlStringsArray = this._fillTags.map(tag => fillHelper.toXml(tag));\r\n        return tagHelper.toXml(\"fills\", {\r\n            count: tagsAsXmlStringsArray.length\r\n        }, tagsAsXmlStringsArray.join(\"\"))\r\n    }\r\n    registerFont(font) {\r\n        var result;\r\n        var fontTag = fontHelper.tryCreateTag(font);\r\n        if (isDefined(fontTag)) {\r\n            for (var i = 0; i < this._fontTags.length; i++) {\r\n                if (fontHelper.areEqual(this._fontTags[i], fontTag)) {\r\n                    result = i;\r\n                    break\r\n                }\r\n            }\r\n            if (void 0 === result) {\r\n                result = this._fontTags.push(fontTag) - 1\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    generateFontsXml() {\r\n        var xmlStringsArray = this._fontTags.map(tag => fontHelper.toXml(tag));\r\n        return tagHelper.toXml(\"fonts\", {\r\n            count: xmlStringsArray.length\r\n        }, xmlStringsArray.join(\"\"))\r\n    }\r\n    _convertNumberFormatIndexToId(index) {\r\n        return 165 + index\r\n    }\r\n    registerNumberFormat(numberFormat) {\r\n        var result;\r\n        var tag = numberFormatHelper.tryCreateTag(numberFormat);\r\n        if (isDefined(tag)) {\r\n            for (var i = 0; i < this._numberFormatTags.length; i++) {\r\n                if (numberFormatHelper.areEqual(this._numberFormatTags[i], tag)) {\r\n                    result = this._numberFormatTags[i][numberFormatHelper.ID_PROPERTY_NAME];\r\n                    break\r\n                }\r\n            }\r\n            if (void 0 === result) {\r\n                tag[numberFormatHelper.ID_PROPERTY_NAME] = this._convertNumberFormatIndexToId(this._numberFormatTags.length);\r\n                result = tag[numberFormatHelper.ID_PROPERTY_NAME];\r\n                this._numberFormatTags.push(tag)\r\n            }\r\n        }\r\n        return result\r\n    }\r\n    generateNumberFormatsXml() {\r\n        if (this._numberFormatTags.length > 0) {\r\n            var xmlStringsArray = this._numberFormatTags.map(tag => numberFormatHelper.toXml(tag));\r\n            return tagHelper.toXml(\"numFmts\", {\r\n                count: xmlStringsArray.length\r\n            }, xmlStringsArray.join(\"\"))\r\n        } else {\r\n            return \"\"\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}