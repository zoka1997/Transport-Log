{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.filter_sync.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { isDefined } from \"../../core/utils/type\";\nimport modules from \"./ui.grid_core.modules\";\nimport { getDefaultOperation, getMatchedConditions, syncFilters, removeFieldConditionsFromFilter, addItem, getNormalizedFilter, getFilterExpression, filterHasField } from \"../filter_builder/utils\";\nimport errors from \"../widget/ui.errors\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport filterUtils from \"../shared/filtering\";\nimport { anyOf, noneOf } from \"./ui.grid_core.filter_custom_operations\";\nvar FILTER_ROW_OPERATIONS = [\"=\", \"<>\", \"<\", \"<=\", \">\", \">=\", \"notcontains\", \"contains\", \"startswith\", \"endswith\", \"between\"];\nvar FILTER_TYPES_INCLUDE = \"include\";\nvar FILTER_TYPES_EXCLUDE = \"exclude\";\n\nfunction getColumnIdentifier(column) {\n  return column.name || column.dataField;\n}\n\nfunction checkForErrors(columns) {\n  columns.forEach(column => {\n    var identifier = getColumnIdentifier(column);\n\n    if (!isDefined(identifier) && column.allowFiltering) {\n      throw new errors.Error(\"E1049\", column.caption);\n    }\n  });\n}\n\nvar FilterSyncController = modules.Controller.inherit(function () {\n  var getEmptyFilterValues = function () {\n    return {\n      filterType: FILTER_TYPES_INCLUDE,\n      filterValues: void 0\n    };\n  };\n\n  var canSyncHeaderFilterWithFilterRow = function (column) {\n    var filterValues = column.filterValues || [];\n    return !filterUtils.getGroupInterval(column) && !(column.headerFilter && column.headerFilter.dataSource) || 1 === filterValues.length && null === filterValues[0];\n  };\n\n  var getConditionFromFilterRow = function (column) {\n    var value = column.filterValue;\n\n    if (isDefined(value)) {\n      var operation = column.selectedFilterOperation || column.defaultFilterOperation || getDefaultOperation(column);\n      var filter = [getColumnIdentifier(column), operation, column.filterValue];\n      return filter;\n    } else {\n      return null;\n    }\n  };\n\n  var getConditionFromHeaderFilter = function (column) {\n    var selectedOperation;\n    var value;\n    var filterValues = column.filterValues;\n\n    if (!filterValues) {\n      return null;\n    }\n\n    if (1 === filterValues.length && canSyncHeaderFilterWithFilterRow(column) && !Array.isArray(filterValues[0])) {\n      column.filterType === FILTER_TYPES_EXCLUDE ? selectedOperation = \"<>\" : selectedOperation = \"=\";\n      value = filterValues[0];\n    } else {\n      column.filterType === FILTER_TYPES_EXCLUDE ? selectedOperation = \"noneof\" : selectedOperation = \"anyof\";\n      value = filterValues;\n    }\n\n    return [getColumnIdentifier(column), selectedOperation, value];\n  };\n\n  var updateHeaderFilterCondition = function (columnsController, column, headerFilterCondition) {\n    var headerFilter = function (headerFilterCondition, column) {\n      if (!headerFilterCondition) {\n        return getEmptyFilterValues();\n      }\n\n      var filterType;\n      var selectedFilterOperation = headerFilterCondition[1];\n      var value = headerFilterCondition[2];\n      var hasArrayValue = Array.isArray(value);\n\n      if (!hasArrayValue) {\n        if (!canSyncHeaderFilterWithFilterRow(column)) {\n          return getEmptyFilterValues();\n        }\n      }\n\n      switch (selectedFilterOperation) {\n        case \"anyof\":\n        case \"=\":\n          filterType = FILTER_TYPES_INCLUDE;\n          break;\n\n        case \"noneof\":\n        case \"<>\":\n          filterType = FILTER_TYPES_EXCLUDE;\n          break;\n\n        default:\n          return getEmptyFilterValues();\n      }\n\n      return {\n        filterType: filterType,\n        filterValues: hasArrayValue ? value : [value]\n      };\n    }(headerFilterCondition, column);\n\n    columnsController.columnOption(getColumnIdentifier(column), headerFilter);\n  };\n\n  var updateFilterRowCondition = function (columnsController, column, condition) {\n    var filterRowOptions;\n    var selectedFilterOperation = null === condition || void 0 === condition ? void 0 : condition[1];\n    var filterValue = null === condition || void 0 === condition ? void 0 : condition[2];\n    var filterOperations = column.filterOperations || column.defaultFilterOperations;\n\n    if ((!filterOperations || filterOperations.indexOf(selectedFilterOperation) >= 0 || selectedFilterOperation === column.defaultFilterOperation) && FILTER_ROW_OPERATIONS.indexOf(selectedFilterOperation) >= 0 && null !== filterValue) {\n      if (selectedFilterOperation === column.defaultFilterOperation && !isDefined(column.selectedFilterOperation)) {\n        selectedFilterOperation = column.selectedFilterOperation;\n      }\n\n      filterRowOptions = {\n        filterValue: filterValue,\n        selectedFilterOperation: selectedFilterOperation\n      };\n    } else {\n      filterRowOptions = {\n        filterValue: void 0,\n        selectedFilterOperation: void 0\n      };\n    }\n\n    columnsController.columnOption(getColumnIdentifier(column), filterRowOptions);\n  };\n\n  return {\n    syncFilterValue: function () {\n      var that = this;\n      var columnsController = that.getController(\"columns\");\n      var columns = columnsController.getFilteringColumns();\n      this._skipSyncColumnOptions = true;\n      columns.forEach(function (column) {\n        var filterConditions = getMatchedConditions(that.option(\"filterValue\"), getColumnIdentifier(column));\n\n        if (1 === filterConditions.length) {\n          var filterCondition = filterConditions[0];\n          updateHeaderFilterCondition(columnsController, column, filterCondition);\n          updateFilterRowCondition(columnsController, column, filterCondition);\n        } else {\n          isDefined(column.filterValues) && updateHeaderFilterCondition(columnsController, column);\n          isDefined(column.filterValue) && updateFilterRowCondition(columnsController, column);\n        }\n      });\n      this._skipSyncColumnOptions = false;\n    },\n    _initSync: function () {\n      var columns = this.getController(\"columns\").getColumns();\n      var dataController = this.getController(\"data\");\n      var pageIndex = dataController.pageIndex();\n      checkForErrors(columns);\n\n      if (!this.option(\"filterValue\")) {\n        var filteringColumns = this.getController(\"columns\").getFilteringColumns();\n        var filterValue = this.getFilterValueFromColumns(filteringColumns);\n        this.option(\"filterValue\", filterValue);\n      }\n\n      this.syncFilterValue();\n      dataController.pageIndex(pageIndex);\n    },\n    init: function () {\n      var dataController = this.getController(\"data\");\n\n      if (dataController.isFilterSyncActive()) {\n        if (this.getController(\"columns\").isAllDataTypesDefined()) {\n          this._initSync();\n        } else {\n          dataController.dataSourceChanged.add(() => this._initSync());\n        }\n      }\n    },\n    _getSyncFilterRow: function (filterValue, column) {\n      var filter = getConditionFromFilterRow(column);\n\n      if (isDefined(filter)) {\n        return syncFilters(filterValue, filter);\n      } else {\n        return removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(column));\n      }\n    },\n    _getSyncHeaderFilter: function (filterValue, column) {\n      var filter = getConditionFromHeaderFilter(column);\n\n      if (filter) {\n        return syncFilters(filterValue, filter);\n      } else {\n        return removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(column));\n      }\n    },\n    getFilterValueFromColumns: function (columns) {\n      if (!this.getController(\"data\").isFilterSyncActive()) {\n        return null;\n      }\n\n      var filterValue = [\"and\"];\n      columns && columns.forEach(column => {\n        var headerFilter = getConditionFromHeaderFilter(column);\n        var filterRow = getConditionFromFilterRow(column);\n        headerFilter && addItem(headerFilter, filterValue);\n        filterRow && addItem(filterRow, filterValue);\n      });\n      return getNormalizedFilter(filterValue);\n    },\n    syncFilterRow: function (column, value) {\n      this.option(\"filterValue\", this._getSyncFilterRow(this.option(\"filterValue\"), column));\n    },\n    syncHeaderFilter: function (column) {\n      this.option(\"filterValue\", this._getSyncHeaderFilter(this.option(\"filterValue\"), column));\n    },\n    getCustomFilterOperations: function () {\n      var filterBuilderCustomOperations = this.option(\"filterBuilder.customOperations\") || [];\n      return [anyOf(this.component), noneOf(this.component)].concat(filterBuilderCustomOperations);\n    },\n    publicMethods: function () {\n      return [\"getCustomFilterOperations\"];\n    }\n  };\n}());\nvar DataControllerFilterSyncExtender = {\n  isFilterSyncActive: function () {\n    var filterSyncEnabledValue = this.option(\"filterSyncEnabled\");\n    return \"auto\" === filterSyncEnabledValue ? this.option(\"filterPanel.visible\") : filterSyncEnabledValue;\n  },\n  skipCalculateColumnFilters: function () {\n    return isDefined(this.option(\"filterValue\")) && this.isFilterSyncActive();\n  },\n  _calculateAdditionalFilter: function () {\n    if (false === this.option(\"filterPanel.filterEnabled\")) {\n      return this.callBase();\n    }\n\n    var filters = [this.callBase()];\n    var columns = this.getController(\"columns\").getFilteringColumns();\n    var filterValue = this.option(\"filterValue\");\n\n    if (this.isFilterSyncActive()) {\n      var currentColumn = this.getController(\"headerFilter\").getCurrentColumn();\n\n      if (currentColumn && filterValue) {\n        filterValue = removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(currentColumn));\n      }\n    }\n\n    var customOperations = this.getController(\"filterSync\").getCustomFilterOperations();\n    var calculatedFilterValue = getFilterExpression(filterValue, columns, customOperations, \"filterBuilder\");\n\n    if (calculatedFilterValue) {\n      filters.push(calculatedFilterValue);\n    }\n\n    return gridCoreUtils.combineFilters(filters);\n  },\n  _parseColumnPropertyName: function (fullName) {\n    var matched = fullName.match(/.*\\.(.*)/);\n\n    if (matched) {\n      return matched[1];\n    } else {\n      return null;\n    }\n  },\n  clearFilter: function (filterName) {\n    this.component.beginUpdate();\n\n    if (arguments.length > 0) {\n      if (\"filterValue\" === filterName) {\n        this.option(\"filterValue\", null);\n      }\n\n      this.callBase(filterName);\n    } else {\n      this.option(\"filterValue\", null);\n      this.callBase();\n    }\n\n    this.component.endUpdate();\n  },\n  optionChanged: function (args) {\n    switch (args.name) {\n      case \"filterValue\":\n        this._applyFilter();\n\n        this.isFilterSyncActive() && this.getController(\"filterSync\").syncFilterValue();\n        args.handled = true;\n        break;\n\n      case \"filterSyncEnabled\":\n        args.handled = true;\n        break;\n\n      case \"columns\":\n        if (this.isFilterSyncActive()) {\n          var column = this.getController(\"columns\").getColumnByPath(args.fullName);\n          var filterSyncController = this.getController(\"filterSync\");\n\n          if (column && !filterSyncController._skipSyncColumnOptions) {\n            var propertyName = this._parseColumnPropertyName(args.fullName);\n\n            filterSyncController._skipSyncColumnOptions = true;\n\n            if (\"filterType\" === propertyName) {\n              if (FILTER_TYPES_EXCLUDE === args.value || FILTER_TYPES_EXCLUDE === args.previousValue) {\n                filterSyncController.syncHeaderFilter(column);\n              }\n            } else if (\"filterValues\" === propertyName) {\n              filterSyncController.syncHeaderFilter(column);\n            } else if ([\"filterValue\", \"selectedFilterOperation\"].indexOf(propertyName) > -1) {\n              filterSyncController.syncFilterRow(column, column.filterValue);\n            }\n\n            filterSyncController._skipSyncColumnOptions = false;\n          }\n        }\n\n        this.callBase(args);\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n};\nvar ColumnHeadersViewFilterSyncExtender = {\n  _isHeaderFilterEmpty: function (column) {\n    if (this.getController(\"data\").isFilterSyncActive()) {\n      return !filterHasField(this.option(\"filterValue\"), getColumnIdentifier(column));\n    }\n\n    return this.callBase(column);\n  },\n  _needUpdateFilterIndicators: function () {\n    return !this.getController(\"data\").isFilterSyncActive();\n  },\n  optionChanged: function (args) {\n    if (\"filterValue\" === args.name) {\n      this._updateHeaderFilterIndicators();\n    } else {\n      this.callBase(args);\n    }\n  }\n};\nexport var filterSyncModule = {\n  defaultOptions: function () {\n    return {\n      filterValue: null,\n      filterSyncEnabled: \"auto\"\n    };\n  },\n  controllers: {\n    filterSync: FilterSyncController\n  },\n  extenders: {\n    controllers: {\n      data: DataControllerFilterSyncExtender\n    },\n    views: {\n      columnHeadersView: ColumnHeadersViewFilterSyncExtender\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.filter_sync.js"],"names":["isDefined","modules","getDefaultOperation","getMatchedConditions","syncFilters","removeFieldConditionsFromFilter","addItem","getNormalizedFilter","getFilterExpression","filterHasField","errors","gridCoreUtils","filterUtils","anyOf","noneOf","FILTER_ROW_OPERATIONS","FILTER_TYPES_INCLUDE","FILTER_TYPES_EXCLUDE","getColumnIdentifier","column","name","dataField","checkForErrors","columns","forEach","identifier","allowFiltering","Error","caption","FilterSyncController","Controller","inherit","getEmptyFilterValues","filterType","filterValues","canSyncHeaderFilterWithFilterRow","getGroupInterval","headerFilter","dataSource","length","getConditionFromFilterRow","value","filterValue","operation","selectedFilterOperation","defaultFilterOperation","filter","getConditionFromHeaderFilter","selectedOperation","Array","isArray","updateHeaderFilterCondition","columnsController","headerFilterCondition","hasArrayValue","columnOption","updateFilterRowCondition","condition","filterRowOptions","filterOperations","defaultFilterOperations","indexOf","syncFilterValue","that","getController","getFilteringColumns","_skipSyncColumnOptions","filterConditions","option","filterCondition","_initSync","getColumns","dataController","pageIndex","filteringColumns","getFilterValueFromColumns","init","isFilterSyncActive","isAllDataTypesDefined","dataSourceChanged","add","_getSyncFilterRow","_getSyncHeaderFilter","filterRow","syncFilterRow","syncHeaderFilter","getCustomFilterOperations","filterBuilderCustomOperations","component","concat","publicMethods","DataControllerFilterSyncExtender","filterSyncEnabledValue","skipCalculateColumnFilters","_calculateAdditionalFilter","callBase","filters","currentColumn","getCurrentColumn","customOperations","calculatedFilterValue","push","combineFilters","_parseColumnPropertyName","fullName","matched","match","clearFilter","filterName","beginUpdate","arguments","endUpdate","optionChanged","args","_applyFilter","handled","getColumnByPath","filterSyncController","propertyName","previousValue","ColumnHeadersViewFilterSyncExtender","_isHeaderFilterEmpty","_needUpdateFilterIndicators","_updateHeaderFilterIndicators","filterSyncModule","defaultOptions","filterSyncEnabled","controllers","filterSync","extenders","data","views","columnHeadersView"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.filter_sync.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport {\r\n    getDefaultOperation,\r\n    getMatchedConditions,\r\n    syncFilters,\r\n    removeFieldConditionsFromFilter,\r\n    addItem,\r\n    getNormalizedFilter,\r\n    getFilterExpression,\r\n    filterHasField\r\n} from \"../filter_builder/utils\";\r\nimport errors from \"../widget/ui.errors\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport filterUtils from \"../shared/filtering\";\r\nimport {\r\n    anyOf,\r\n    noneOf\r\n} from \"./ui.grid_core.filter_custom_operations\";\r\nvar FILTER_ROW_OPERATIONS = [\"=\", \"<>\", \"<\", \"<=\", \">\", \">=\", \"notcontains\", \"contains\", \"startswith\", \"endswith\", \"between\"];\r\nvar FILTER_TYPES_INCLUDE = \"include\";\r\nvar FILTER_TYPES_EXCLUDE = \"exclude\";\r\n\r\nfunction getColumnIdentifier(column) {\r\n    return column.name || column.dataField\r\n}\r\n\r\nfunction checkForErrors(columns) {\r\n    columns.forEach(column => {\r\n        var identifier = getColumnIdentifier(column);\r\n        if (!isDefined(identifier) && column.allowFiltering) {\r\n            throw new errors.Error(\"E1049\", column.caption)\r\n        }\r\n    })\r\n}\r\nvar FilterSyncController = modules.Controller.inherit(function() {\r\n    var getEmptyFilterValues = function() {\r\n        return {\r\n            filterType: FILTER_TYPES_INCLUDE,\r\n            filterValues: void 0\r\n        }\r\n    };\r\n    var canSyncHeaderFilterWithFilterRow = function(column) {\r\n        var filterValues = column.filterValues || [];\r\n        return !filterUtils.getGroupInterval(column) && !(column.headerFilter && column.headerFilter.dataSource) || 1 === filterValues.length && null === filterValues[0]\r\n    };\r\n    var getConditionFromFilterRow = function(column) {\r\n        var value = column.filterValue;\r\n        if (isDefined(value)) {\r\n            var operation = column.selectedFilterOperation || column.defaultFilterOperation || getDefaultOperation(column);\r\n            var filter = [getColumnIdentifier(column), operation, column.filterValue];\r\n            return filter\r\n        } else {\r\n            return null\r\n        }\r\n    };\r\n    var getConditionFromHeaderFilter = function(column) {\r\n        var selectedOperation;\r\n        var value;\r\n        var filterValues = column.filterValues;\r\n        if (!filterValues) {\r\n            return null\r\n        }\r\n        if (1 === filterValues.length && canSyncHeaderFilterWithFilterRow(column) && !Array.isArray(filterValues[0])) {\r\n            column.filterType === FILTER_TYPES_EXCLUDE ? selectedOperation = \"<>\" : selectedOperation = \"=\";\r\n            value = filterValues[0]\r\n        } else {\r\n            column.filterType === FILTER_TYPES_EXCLUDE ? selectedOperation = \"noneof\" : selectedOperation = \"anyof\";\r\n            value = filterValues\r\n        }\r\n        return [getColumnIdentifier(column), selectedOperation, value]\r\n    };\r\n    var updateHeaderFilterCondition = function(columnsController, column, headerFilterCondition) {\r\n        var headerFilter = function(headerFilterCondition, column) {\r\n            if (!headerFilterCondition) {\r\n                return getEmptyFilterValues()\r\n            }\r\n            var filterType;\r\n            var selectedFilterOperation = headerFilterCondition[1];\r\n            var value = headerFilterCondition[2];\r\n            var hasArrayValue = Array.isArray(value);\r\n            if (!hasArrayValue) {\r\n                if (!canSyncHeaderFilterWithFilterRow(column)) {\r\n                    return getEmptyFilterValues()\r\n                }\r\n            }\r\n            switch (selectedFilterOperation) {\r\n                case \"anyof\":\r\n                case \"=\":\r\n                    filterType = FILTER_TYPES_INCLUDE;\r\n                    break;\r\n                case \"noneof\":\r\n                case \"<>\":\r\n                    filterType = FILTER_TYPES_EXCLUDE;\r\n                    break;\r\n                default:\r\n                    return getEmptyFilterValues()\r\n            }\r\n            return {\r\n                filterType: filterType,\r\n                filterValues: hasArrayValue ? value : [value]\r\n            }\r\n        }(headerFilterCondition, column);\r\n        columnsController.columnOption(getColumnIdentifier(column), headerFilter)\r\n    };\r\n    var updateFilterRowCondition = function(columnsController, column, condition) {\r\n        var filterRowOptions;\r\n        var selectedFilterOperation = null === condition || void 0 === condition ? void 0 : condition[1];\r\n        var filterValue = null === condition || void 0 === condition ? void 0 : condition[2];\r\n        var filterOperations = column.filterOperations || column.defaultFilterOperations;\r\n        if ((!filterOperations || filterOperations.indexOf(selectedFilterOperation) >= 0 || selectedFilterOperation === column.defaultFilterOperation) && FILTER_ROW_OPERATIONS.indexOf(selectedFilterOperation) >= 0 && null !== filterValue) {\r\n            if (selectedFilterOperation === column.defaultFilterOperation && !isDefined(column.selectedFilterOperation)) {\r\n                selectedFilterOperation = column.selectedFilterOperation\r\n            }\r\n            filterRowOptions = {\r\n                filterValue: filterValue,\r\n                selectedFilterOperation: selectedFilterOperation\r\n            }\r\n        } else {\r\n            filterRowOptions = {\r\n                filterValue: void 0,\r\n                selectedFilterOperation: void 0\r\n            }\r\n        }\r\n        columnsController.columnOption(getColumnIdentifier(column), filterRowOptions)\r\n    };\r\n    return {\r\n        syncFilterValue: function() {\r\n            var that = this;\r\n            var columnsController = that.getController(\"columns\");\r\n            var columns = columnsController.getFilteringColumns();\r\n            this._skipSyncColumnOptions = true;\r\n            columns.forEach((function(column) {\r\n                var filterConditions = getMatchedConditions(that.option(\"filterValue\"), getColumnIdentifier(column));\r\n                if (1 === filterConditions.length) {\r\n                    var filterCondition = filterConditions[0];\r\n                    updateHeaderFilterCondition(columnsController, column, filterCondition);\r\n                    updateFilterRowCondition(columnsController, column, filterCondition)\r\n                } else {\r\n                    isDefined(column.filterValues) && updateHeaderFilterCondition(columnsController, column);\r\n                    isDefined(column.filterValue) && updateFilterRowCondition(columnsController, column)\r\n                }\r\n            }));\r\n            this._skipSyncColumnOptions = false\r\n        },\r\n        _initSync: function() {\r\n            var columns = this.getController(\"columns\").getColumns();\r\n            var dataController = this.getController(\"data\");\r\n            var pageIndex = dataController.pageIndex();\r\n            checkForErrors(columns);\r\n            if (!this.option(\"filterValue\")) {\r\n                var filteringColumns = this.getController(\"columns\").getFilteringColumns();\r\n                var filterValue = this.getFilterValueFromColumns(filteringColumns);\r\n                this.option(\"filterValue\", filterValue)\r\n            }\r\n            this.syncFilterValue();\r\n            dataController.pageIndex(pageIndex)\r\n        },\r\n        init: function() {\r\n            var dataController = this.getController(\"data\");\r\n            if (dataController.isFilterSyncActive()) {\r\n                if (this.getController(\"columns\").isAllDataTypesDefined()) {\r\n                    this._initSync()\r\n                } else {\r\n                    dataController.dataSourceChanged.add(() => this._initSync())\r\n                }\r\n            }\r\n        },\r\n        _getSyncFilterRow: function(filterValue, column) {\r\n            var filter = getConditionFromFilterRow(column);\r\n            if (isDefined(filter)) {\r\n                return syncFilters(filterValue, filter)\r\n            } else {\r\n                return removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(column))\r\n            }\r\n        },\r\n        _getSyncHeaderFilter: function(filterValue, column) {\r\n            var filter = getConditionFromHeaderFilter(column);\r\n            if (filter) {\r\n                return syncFilters(filterValue, filter)\r\n            } else {\r\n                return removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(column))\r\n            }\r\n        },\r\n        getFilterValueFromColumns: function(columns) {\r\n            if (!this.getController(\"data\").isFilterSyncActive()) {\r\n                return null\r\n            }\r\n            var filterValue = [\"and\"];\r\n            columns && columns.forEach(column => {\r\n                var headerFilter = getConditionFromHeaderFilter(column);\r\n                var filterRow = getConditionFromFilterRow(column);\r\n                headerFilter && addItem(headerFilter, filterValue);\r\n                filterRow && addItem(filterRow, filterValue)\r\n            });\r\n            return getNormalizedFilter(filterValue)\r\n        },\r\n        syncFilterRow: function(column, value) {\r\n            this.option(\"filterValue\", this._getSyncFilterRow(this.option(\"filterValue\"), column))\r\n        },\r\n        syncHeaderFilter: function(column) {\r\n            this.option(\"filterValue\", this._getSyncHeaderFilter(this.option(\"filterValue\"), column))\r\n        },\r\n        getCustomFilterOperations: function() {\r\n            var filterBuilderCustomOperations = this.option(\"filterBuilder.customOperations\") || [];\r\n            return [anyOf(this.component), noneOf(this.component)].concat(filterBuilderCustomOperations)\r\n        },\r\n        publicMethods: function() {\r\n            return [\"getCustomFilterOperations\"]\r\n        }\r\n    }\r\n}());\r\nvar DataControllerFilterSyncExtender = {\r\n    isFilterSyncActive: function() {\r\n        var filterSyncEnabledValue = this.option(\"filterSyncEnabled\");\r\n        return \"auto\" === filterSyncEnabledValue ? this.option(\"filterPanel.visible\") : filterSyncEnabledValue\r\n    },\r\n    skipCalculateColumnFilters: function() {\r\n        return isDefined(this.option(\"filterValue\")) && this.isFilterSyncActive()\r\n    },\r\n    _calculateAdditionalFilter: function() {\r\n        if (false === this.option(\"filterPanel.filterEnabled\")) {\r\n            return this.callBase()\r\n        }\r\n        var filters = [this.callBase()];\r\n        var columns = this.getController(\"columns\").getFilteringColumns();\r\n        var filterValue = this.option(\"filterValue\");\r\n        if (this.isFilterSyncActive()) {\r\n            var currentColumn = this.getController(\"headerFilter\").getCurrentColumn();\r\n            if (currentColumn && filterValue) {\r\n                filterValue = removeFieldConditionsFromFilter(filterValue, getColumnIdentifier(currentColumn))\r\n            }\r\n        }\r\n        var customOperations = this.getController(\"filterSync\").getCustomFilterOperations();\r\n        var calculatedFilterValue = getFilterExpression(filterValue, columns, customOperations, \"filterBuilder\");\r\n        if (calculatedFilterValue) {\r\n            filters.push(calculatedFilterValue)\r\n        }\r\n        return gridCoreUtils.combineFilters(filters)\r\n    },\r\n    _parseColumnPropertyName: function(fullName) {\r\n        var matched = fullName.match(/.*\\.(.*)/);\r\n        if (matched) {\r\n            return matched[1]\r\n        } else {\r\n            return null\r\n        }\r\n    },\r\n    clearFilter: function(filterName) {\r\n        this.component.beginUpdate();\r\n        if (arguments.length > 0) {\r\n            if (\"filterValue\" === filterName) {\r\n                this.option(\"filterValue\", null)\r\n            }\r\n            this.callBase(filterName)\r\n        } else {\r\n            this.option(\"filterValue\", null);\r\n            this.callBase()\r\n        }\r\n        this.component.endUpdate()\r\n    },\r\n    optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"filterValue\":\r\n                this._applyFilter();\r\n                this.isFilterSyncActive() && this.getController(\"filterSync\").syncFilterValue();\r\n                args.handled = true;\r\n                break;\r\n            case \"filterSyncEnabled\":\r\n                args.handled = true;\r\n                break;\r\n            case \"columns\":\r\n                if (this.isFilterSyncActive()) {\r\n                    var column = this.getController(\"columns\").getColumnByPath(args.fullName);\r\n                    var filterSyncController = this.getController(\"filterSync\");\r\n                    if (column && !filterSyncController._skipSyncColumnOptions) {\r\n                        var propertyName = this._parseColumnPropertyName(args.fullName);\r\n                        filterSyncController._skipSyncColumnOptions = true;\r\n                        if (\"filterType\" === propertyName) {\r\n                            if (FILTER_TYPES_EXCLUDE === args.value || FILTER_TYPES_EXCLUDE === args.previousValue) {\r\n                                filterSyncController.syncHeaderFilter(column)\r\n                            }\r\n                        } else if (\"filterValues\" === propertyName) {\r\n                            filterSyncController.syncHeaderFilter(column)\r\n                        } else if ([\"filterValue\", \"selectedFilterOperation\"].indexOf(propertyName) > -1) {\r\n                            filterSyncController.syncFilterRow(column, column.filterValue)\r\n                        }\r\n                        filterSyncController._skipSyncColumnOptions = false\r\n                    }\r\n                }\r\n                this.callBase(args);\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n};\r\nvar ColumnHeadersViewFilterSyncExtender = {\r\n    _isHeaderFilterEmpty: function(column) {\r\n        if (this.getController(\"data\").isFilterSyncActive()) {\r\n            return !filterHasField(this.option(\"filterValue\"), getColumnIdentifier(column))\r\n        }\r\n        return this.callBase(column)\r\n    },\r\n    _needUpdateFilterIndicators: function() {\r\n        return !this.getController(\"data\").isFilterSyncActive()\r\n    },\r\n    optionChanged: function(args) {\r\n        if (\"filterValue\" === args.name) {\r\n            this._updateHeaderFilterIndicators()\r\n        } else {\r\n            this.callBase(args)\r\n        }\r\n    }\r\n};\r\nexport var filterSyncModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            filterValue: null,\r\n            filterSyncEnabled: \"auto\"\r\n        }\r\n    },\r\n    controllers: {\r\n        filterSync: FilterSyncController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: DataControllerFilterSyncExtender\r\n        },\r\n        views: {\r\n            columnHeadersView: ColumnHeadersViewFilterSyncExtender\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}