{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/view_model/date_header_data_generator.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"startDate\", \"endDate\", \"isFirstGroupCell\", \"isLastGroupCell\"];\nimport dateUtils from \"../../../../core/utils/date\";\nimport { getGroupCount } from \"../../resources/utils\";\nimport { getHeaderCellText, formatWeekdayAndDay, getHorizontalGroupCount, getTotalCellCountByCompleteData, getDisplayedCellCount } from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nexport class DateHeaderDataGenerator {\n  constructor(viewDataGenerator) {\n    this._viewDataGenerator = viewDataGenerator;\n  }\n\n  getCompleteDateHeaderMap(options, completeViewDataMap) {\n    var {\n      isGenerateWeekDaysHeaderData: isGenerateWeekDaysHeaderData\n    } = options;\n    var result = [];\n\n    if (isGenerateWeekDaysHeaderData) {\n      var weekDaysRow = this._generateWeekDaysHeaderRowMap(options, completeViewDataMap);\n\n      result.push(weekDaysRow);\n    }\n\n    var dateRow = this._generateHeaderDateRow(options, completeViewDataMap);\n\n    result.push(dateRow);\n    return result;\n  }\n\n  _generateWeekDaysHeaderRowMap(options, completeViewDataMap) {\n    var {\n      isGroupedByDate: isGroupedByDate,\n      groups: groups,\n      groupOrientation: groupOrientation,\n      startDayHour: startDayHour,\n      endDayHour: endDayHour,\n      hoursInterval: hoursInterval,\n      isHorizontalGrouping: isHorizontalGrouping,\n      intervalCount: intervalCount\n    } = options;\n\n    var cellCountInDay = this._viewDataGenerator.getCellCountInDay(startDayHour, endDayHour, hoursInterval);\n\n    var horizontalGroupCount = getHorizontalGroupCount(groups, groupOrientation);\n    var index = completeViewDataMap[0][0].allDay ? 1 : 0;\n    var colSpan = isGroupedByDate ? horizontalGroupCount * cellCountInDay : cellCountInDay;\n    var groupCount = getGroupCount(groups);\n    var datesRepeatCount = isHorizontalGrouping && !isGroupedByDate ? groupCount : 1;\n    var daysInGroup = this._viewDataGenerator.daysInInterval * intervalCount;\n    var daysInView = daysInGroup * datesRepeatCount;\n    var weekDaysRow = [];\n\n    for (var dayIndex = 0; dayIndex < daysInView; dayIndex += 1) {\n      var cell = completeViewDataMap[index][dayIndex * colSpan];\n      weekDaysRow.push(_extends({}, cell, {\n        colSpan: colSpan,\n        text: formatWeekdayAndDay(cell.startDate),\n        isFirstGroupCell: false,\n        isLastGroupCell: false\n      }));\n    }\n\n    return weekDaysRow;\n  }\n\n  _generateHeaderDateRow(options, completeViewDataMap) {\n    var {\n      today: today,\n      isGroupedByDate: isGroupedByDate,\n      groupOrientation: groupOrientation,\n      groups: groups,\n      headerCellTextFormat: headerCellTextFormat,\n      getDateForHeaderText: getDateForHeaderText,\n      interval: interval,\n      startViewDate: startViewDate,\n      startDayHour: startDayHour,\n      endDayHour: endDayHour,\n      hoursInterval: hoursInterval,\n      intervalCount: intervalCount,\n      currentDate: currentDate,\n      viewType: viewType\n    } = options;\n    var horizontalGroupCount = getHorizontalGroupCount(groups, groupOrientation);\n    var index = completeViewDataMap[0][0].allDay ? 1 : 0;\n    var colSpan = isGroupedByDate ? horizontalGroupCount : 1;\n    var isVerticalGrouping = \"vertical\" === groupOrientation;\n\n    var cellCountInGroupRow = this._viewDataGenerator.getCellCount({\n      intervalCount: intervalCount,\n      currentDate: currentDate,\n      viewType: viewType,\n      hoursInterval: hoursInterval,\n      startDayHour: startDayHour,\n      endDayHour: endDayHour\n    });\n\n    var cellCountInDay = this._viewDataGenerator.getCellCountInDay(startDayHour, endDayHour, hoursInterval);\n\n    var slicedByColumnsData = isGroupedByDate ? completeViewDataMap[index].filter((_, columnIndex) => columnIndex % horizontalGroupCount === 0) : completeViewDataMap[index];\n    return slicedByColumnsData.map((_ref, index) => {\n      var {\n        startDate: startDate,\n        isFirstGroupCell: isFirstGroupCell,\n        isLastGroupCell: isLastGroupCell\n      } = _ref,\n          restProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n      var text = getHeaderCellText(index % cellCountInGroupRow, startDate, headerCellTextFormat, getDateForHeaderText, {\n        interval: interval,\n        startViewDate: startViewDate,\n        startDayHour: startDayHour,\n        cellCountInDay: cellCountInDay\n      });\n      return _extends({}, restProps, {\n        startDate: startDate,\n        text: text,\n        today: dateUtils.sameDate(startDate, today),\n        colSpan: colSpan,\n        isFirstGroupCell: isGroupedByDate || isFirstGroupCell && !isVerticalGrouping,\n        isLastGroupCell: isGroupedByDate || isLastGroupCell && !isVerticalGrouping\n      });\n    });\n  }\n\n  generateDateHeaderData(completeDateHeaderMap, completeViewDataMap, options) {\n    var {\n      isGenerateWeekDaysHeaderData: isGenerateWeekDaysHeaderData,\n      cellWidth: cellWidth,\n      isProvideVirtualCellsWidth: isProvideVirtualCellsWidth,\n      startDayHour: startDayHour,\n      endDayHour: endDayHour,\n      hoursInterval: hoursInterval,\n      isMonthDateHeader: isMonthDateHeader\n    } = options;\n    var dataMap = [];\n    var weekDayRowConfig = {};\n    var validCellWidth = cellWidth || 0;\n\n    if (isGenerateWeekDaysHeaderData) {\n      weekDayRowConfig = this._generateDateHeaderDataRow(options, completeDateHeaderMap, completeViewDataMap, this._viewDataGenerator.getCellCountInDay(startDayHour, endDayHour, hoursInterval), 0, validCellWidth);\n      dataMap.push(weekDayRowConfig.dateRow);\n    }\n\n    var datesRowConfig = this._generateDateHeaderDataRow(options, completeDateHeaderMap, completeViewDataMap, 1, isGenerateWeekDaysHeaderData ? 1 : 0, validCellWidth);\n\n    dataMap.push(datesRowConfig.dateRow);\n    return {\n      dataMap: dataMap,\n      leftVirtualCellWidth: isProvideVirtualCellsWidth ? datesRowConfig.leftVirtualCellWidth : void 0,\n      rightVirtualCellWidth: isProvideVirtualCellsWidth ? datesRowConfig.rightVirtualCellWidth : void 0,\n      leftVirtualCellCount: datesRowConfig.leftVirtualCellCount,\n      rightVirtualCellCount: datesRowConfig.rightVirtualCellCount,\n      weekDayLeftVirtualCellWidth: weekDayRowConfig.leftVirtualCellWidth,\n      weekDayRightVirtualCellWidth: weekDayRowConfig.rightVirtualCellWidth,\n      weekDayLeftVirtualCellCount: weekDayRowConfig.leftVirtualCellCount,\n      weekDayRightVirtualCellCount: weekDayRowConfig.rightVirtualCellCount,\n      isMonthDateHeader: isMonthDateHeader\n    };\n  }\n\n  _generateDateHeaderDataRow(options, completeDateHeaderMap, completeViewDataMap, baseColSpan, rowIndex, cellWidth) {\n    var {\n      startCellIndex: startCellIndex,\n      cellCount: cellCount,\n      isProvideVirtualCellsWidth: isProvideVirtualCellsWidth,\n      groups: groups,\n      groupOrientation: groupOrientation,\n      isGroupedByDate: isGroupedByDate\n    } = options;\n    var horizontalGroupCount = getHorizontalGroupCount(groups, groupOrientation);\n    var colSpan = isGroupedByDate ? horizontalGroupCount * baseColSpan : baseColSpan;\n    var leftVirtualCellCount = Math.floor(startCellIndex / colSpan);\n    var displayedCellCount = getDisplayedCellCount(cellCount, completeViewDataMap);\n    var actualCellCount = Math.ceil((startCellIndex + displayedCellCount) / colSpan);\n    var totalCellCount = getTotalCellCountByCompleteData(completeViewDataMap);\n    var dateRow = completeDateHeaderMap[rowIndex].slice(leftVirtualCellCount, actualCellCount);\n    var finalLeftVirtualCellCount = leftVirtualCellCount * colSpan;\n    var finalLeftVirtualCellWidth = finalLeftVirtualCellCount * cellWidth;\n    var finalRightVirtualCellCount = totalCellCount - actualCellCount * colSpan;\n    var finalRightVirtualCellWidth = finalRightVirtualCellCount * cellWidth;\n    return {\n      dateRow: dateRow,\n      leftVirtualCellCount: finalLeftVirtualCellCount,\n      leftVirtualCellWidth: isProvideVirtualCellsWidth ? finalLeftVirtualCellWidth : void 0,\n      rightVirtualCellCount: finalRightVirtualCellCount,\n      rightVirtualCellWidth: isProvideVirtualCellsWidth ? finalRightVirtualCellWidth : void 0\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/scheduler/workspaces/view_model/date_header_data_generator.js"],"names":["_objectWithoutPropertiesLoose","_extends","_excluded","dateUtils","getGroupCount","getHeaderCellText","formatWeekdayAndDay","getHorizontalGroupCount","getTotalCellCountByCompleteData","getDisplayedCellCount","DateHeaderDataGenerator","constructor","viewDataGenerator","_viewDataGenerator","getCompleteDateHeaderMap","options","completeViewDataMap","isGenerateWeekDaysHeaderData","result","weekDaysRow","_generateWeekDaysHeaderRowMap","push","dateRow","_generateHeaderDateRow","isGroupedByDate","groups","groupOrientation","startDayHour","endDayHour","hoursInterval","isHorizontalGrouping","intervalCount","cellCountInDay","getCellCountInDay","horizontalGroupCount","index","allDay","colSpan","groupCount","datesRepeatCount","daysInGroup","daysInInterval","daysInView","dayIndex","cell","text","startDate","isFirstGroupCell","isLastGroupCell","today","headerCellTextFormat","getDateForHeaderText","interval","startViewDate","currentDate","viewType","isVerticalGrouping","cellCountInGroupRow","getCellCount","slicedByColumnsData","filter","_","columnIndex","map","_ref","restProps","sameDate","generateDateHeaderData","completeDateHeaderMap","cellWidth","isProvideVirtualCellsWidth","isMonthDateHeader","dataMap","weekDayRowConfig","validCellWidth","_generateDateHeaderDataRow","datesRowConfig","leftVirtualCellWidth","rightVirtualCellWidth","leftVirtualCellCount","rightVirtualCellCount","weekDayLeftVirtualCellWidth","weekDayRightVirtualCellWidth","weekDayLeftVirtualCellCount","weekDayRightVirtualCellCount","baseColSpan","rowIndex","startCellIndex","cellCount","Math","floor","displayedCellCount","actualCellCount","ceil","totalCellCount","slice","finalLeftVirtualCellCount","finalLeftVirtualCellWidth","finalRightVirtualCellCount","finalRightVirtualCellWidth"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/view_model/date_header_data_generator.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nvar _excluded = [\"startDate\", \"endDate\", \"isFirstGroupCell\", \"isLastGroupCell\"];\r\nimport dateUtils from \"../../../../core/utils/date\";\r\nimport {\r\n    getGroupCount\r\n} from \"../../resources/utils\";\r\nimport {\r\n    getHeaderCellText,\r\n    formatWeekdayAndDay,\r\n    getHorizontalGroupCount,\r\n    getTotalCellCountByCompleteData,\r\n    getDisplayedCellCount\r\n} from \"../../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nexport class DateHeaderDataGenerator {\r\n    constructor(viewDataGenerator) {\r\n        this._viewDataGenerator = viewDataGenerator\r\n    }\r\n    getCompleteDateHeaderMap(options, completeViewDataMap) {\r\n        var {\r\n            isGenerateWeekDaysHeaderData: isGenerateWeekDaysHeaderData\r\n        } = options;\r\n        var result = [];\r\n        if (isGenerateWeekDaysHeaderData) {\r\n            var weekDaysRow = this._generateWeekDaysHeaderRowMap(options, completeViewDataMap);\r\n            result.push(weekDaysRow)\r\n        }\r\n        var dateRow = this._generateHeaderDateRow(options, completeViewDataMap);\r\n        result.push(dateRow);\r\n        return result\r\n    }\r\n    _generateWeekDaysHeaderRowMap(options, completeViewDataMap) {\r\n        var {\r\n            isGroupedByDate: isGroupedByDate,\r\n            groups: groups,\r\n            groupOrientation: groupOrientation,\r\n            startDayHour: startDayHour,\r\n            endDayHour: endDayHour,\r\n            hoursInterval: hoursInterval,\r\n            isHorizontalGrouping: isHorizontalGrouping,\r\n            intervalCount: intervalCount\r\n        } = options;\r\n        var cellCountInDay = this._viewDataGenerator.getCellCountInDay(startDayHour, endDayHour, hoursInterval);\r\n        var horizontalGroupCount = getHorizontalGroupCount(groups, groupOrientation);\r\n        var index = completeViewDataMap[0][0].allDay ? 1 : 0;\r\n        var colSpan = isGroupedByDate ? horizontalGroupCount * cellCountInDay : cellCountInDay;\r\n        var groupCount = getGroupCount(groups);\r\n        var datesRepeatCount = isHorizontalGrouping && !isGroupedByDate ? groupCount : 1;\r\n        var daysInGroup = this._viewDataGenerator.daysInInterval * intervalCount;\r\n        var daysInView = daysInGroup * datesRepeatCount;\r\n        var weekDaysRow = [];\r\n        for (var dayIndex = 0; dayIndex < daysInView; dayIndex += 1) {\r\n            var cell = completeViewDataMap[index][dayIndex * colSpan];\r\n            weekDaysRow.push(_extends({}, cell, {\r\n                colSpan: colSpan,\r\n                text: formatWeekdayAndDay(cell.startDate),\r\n                isFirstGroupCell: false,\r\n                isLastGroupCell: false\r\n            }))\r\n        }\r\n        return weekDaysRow\r\n    }\r\n    _generateHeaderDateRow(options, completeViewDataMap) {\r\n        var {\r\n            today: today,\r\n            isGroupedByDate: isGroupedByDate,\r\n            groupOrientation: groupOrientation,\r\n            groups: groups,\r\n            headerCellTextFormat: headerCellTextFormat,\r\n            getDateForHeaderText: getDateForHeaderText,\r\n            interval: interval,\r\n            startViewDate: startViewDate,\r\n            startDayHour: startDayHour,\r\n            endDayHour: endDayHour,\r\n            hoursInterval: hoursInterval,\r\n            intervalCount: intervalCount,\r\n            currentDate: currentDate,\r\n            viewType: viewType\r\n        } = options;\r\n        var horizontalGroupCount = getHorizontalGroupCount(groups, groupOrientation);\r\n        var index = completeViewDataMap[0][0].allDay ? 1 : 0;\r\n        var colSpan = isGroupedByDate ? horizontalGroupCount : 1;\r\n        var isVerticalGrouping = \"vertical\" === groupOrientation;\r\n        var cellCountInGroupRow = this._viewDataGenerator.getCellCount({\r\n            intervalCount: intervalCount,\r\n            currentDate: currentDate,\r\n            viewType: viewType,\r\n            hoursInterval: hoursInterval,\r\n            startDayHour: startDayHour,\r\n            endDayHour: endDayHour\r\n        });\r\n        var cellCountInDay = this._viewDataGenerator.getCellCountInDay(startDayHour, endDayHour, hoursInterval);\r\n        var slicedByColumnsData = isGroupedByDate ? completeViewDataMap[index].filter((_, columnIndex) => columnIndex % horizontalGroupCount === 0) : completeViewDataMap[index];\r\n        return slicedByColumnsData.map((_ref, index) => {\r\n            var {\r\n                startDate: startDate,\r\n                isFirstGroupCell: isFirstGroupCell,\r\n                isLastGroupCell: isLastGroupCell\r\n            } = _ref, restProps = _objectWithoutPropertiesLoose(_ref, _excluded);\r\n            var text = getHeaderCellText(index % cellCountInGroupRow, startDate, headerCellTextFormat, getDateForHeaderText, {\r\n                interval: interval,\r\n                startViewDate: startViewDate,\r\n                startDayHour: startDayHour,\r\n                cellCountInDay: cellCountInDay\r\n            });\r\n            return _extends({}, restProps, {\r\n                startDate: startDate,\r\n                text: text,\r\n                today: dateUtils.sameDate(startDate, today),\r\n                colSpan: colSpan,\r\n                isFirstGroupCell: isGroupedByDate || isFirstGroupCell && !isVerticalGrouping,\r\n                isLastGroupCell: isGroupedByDate || isLastGroupCell && !isVerticalGrouping\r\n            })\r\n        })\r\n    }\r\n    generateDateHeaderData(completeDateHeaderMap, completeViewDataMap, options) {\r\n        var {\r\n            isGenerateWeekDaysHeaderData: isGenerateWeekDaysHeaderData,\r\n            cellWidth: cellWidth,\r\n            isProvideVirtualCellsWidth: isProvideVirtualCellsWidth,\r\n            startDayHour: startDayHour,\r\n            endDayHour: endDayHour,\r\n            hoursInterval: hoursInterval,\r\n            isMonthDateHeader: isMonthDateHeader\r\n        } = options;\r\n        var dataMap = [];\r\n        var weekDayRowConfig = {};\r\n        var validCellWidth = cellWidth || 0;\r\n        if (isGenerateWeekDaysHeaderData) {\r\n            weekDayRowConfig = this._generateDateHeaderDataRow(options, completeDateHeaderMap, completeViewDataMap, this._viewDataGenerator.getCellCountInDay(startDayHour, endDayHour, hoursInterval), 0, validCellWidth);\r\n            dataMap.push(weekDayRowConfig.dateRow)\r\n        }\r\n        var datesRowConfig = this._generateDateHeaderDataRow(options, completeDateHeaderMap, completeViewDataMap, 1, isGenerateWeekDaysHeaderData ? 1 : 0, validCellWidth);\r\n        dataMap.push(datesRowConfig.dateRow);\r\n        return {\r\n            dataMap: dataMap,\r\n            leftVirtualCellWidth: isProvideVirtualCellsWidth ? datesRowConfig.leftVirtualCellWidth : void 0,\r\n            rightVirtualCellWidth: isProvideVirtualCellsWidth ? datesRowConfig.rightVirtualCellWidth : void 0,\r\n            leftVirtualCellCount: datesRowConfig.leftVirtualCellCount,\r\n            rightVirtualCellCount: datesRowConfig.rightVirtualCellCount,\r\n            weekDayLeftVirtualCellWidth: weekDayRowConfig.leftVirtualCellWidth,\r\n            weekDayRightVirtualCellWidth: weekDayRowConfig.rightVirtualCellWidth,\r\n            weekDayLeftVirtualCellCount: weekDayRowConfig.leftVirtualCellCount,\r\n            weekDayRightVirtualCellCount: weekDayRowConfig.rightVirtualCellCount,\r\n            isMonthDateHeader: isMonthDateHeader\r\n        }\r\n    }\r\n    _generateDateHeaderDataRow(options, completeDateHeaderMap, completeViewDataMap, baseColSpan, rowIndex, cellWidth) {\r\n        var {\r\n            startCellIndex: startCellIndex,\r\n            cellCount: cellCount,\r\n            isProvideVirtualCellsWidth: isProvideVirtualCellsWidth,\r\n            groups: groups,\r\n            groupOrientation: groupOrientation,\r\n            isGroupedByDate: isGroupedByDate\r\n        } = options;\r\n        var horizontalGroupCount = getHorizontalGroupCount(groups, groupOrientation);\r\n        var colSpan = isGroupedByDate ? horizontalGroupCount * baseColSpan : baseColSpan;\r\n        var leftVirtualCellCount = Math.floor(startCellIndex / colSpan);\r\n        var displayedCellCount = getDisplayedCellCount(cellCount, completeViewDataMap);\r\n        var actualCellCount = Math.ceil((startCellIndex + displayedCellCount) / colSpan);\r\n        var totalCellCount = getTotalCellCountByCompleteData(completeViewDataMap);\r\n        var dateRow = completeDateHeaderMap[rowIndex].slice(leftVirtualCellCount, actualCellCount);\r\n        var finalLeftVirtualCellCount = leftVirtualCellCount * colSpan;\r\n        var finalLeftVirtualCellWidth = finalLeftVirtualCellCount * cellWidth;\r\n        var finalRightVirtualCellCount = totalCellCount - actualCellCount * colSpan;\r\n        var finalRightVirtualCellWidth = finalRightVirtualCellCount * cellWidth;\r\n        return {\r\n            dateRow: dateRow,\r\n            leftVirtualCellCount: finalLeftVirtualCellCount,\r\n            leftVirtualCellWidth: isProvideVirtualCellsWidth ? finalLeftVirtualCellWidth : void 0,\r\n            rightVirtualCellCount: finalRightVirtualCellCount,\r\n            rightVirtualCellWidth: isProvideVirtualCellsWidth ? finalRightVirtualCellWidth : void 0\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}