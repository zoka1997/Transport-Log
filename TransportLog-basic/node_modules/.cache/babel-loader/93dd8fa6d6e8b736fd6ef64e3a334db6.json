{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/data_grid/ui.data_grid.grouping.core.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport Class from \"../../core/class\";\nimport gridCore from \"./ui.data_grid.core\";\nimport { normalizeSortingInfo } from \"../../data/utils\";\nimport { when } from \"../../core/utils/deferred\";\nexport function createOffsetFilter(path, storeLoadOptions, lastLevelOnly) {\n  var groups = normalizeSortingInfo(storeLoadOptions.group);\n  var filter = [];\n\n  for (var i = lastLevelOnly ? path.length - 1 : 0; i < path.length; i++) {\n    var filterElement = [];\n\n    for (var j = 0; j <= i; j++) {\n      var selector = groups[j].selector;\n\n      if (i === j && (null === path[j] || false === path[j] || true === path[j])) {\n        if (false === path[j]) {\n          filterElement.push([selector, \"=\", groups[j].desc ? true : null]);\n        } else if (path[j] ? !groups[j].desc : groups[j].desc) {\n          filterElement.push([selector, \"<>\", path[j]]);\n        } else {\n          filterElement.push([selector, \"<>\", null]);\n          filterElement.push([selector, \"=\", null]);\n        }\n      } else {\n        var currentFilter = [selector, i === j ? groups[j].desc ? \">\" : \"<\" : \"=\", path[j]];\n\n        if (\"<\" === currentFilter[1]) {\n          filterElement.push([currentFilter, \"or\", [selector, \"=\", null]]);\n        } else {\n          filterElement.push(currentFilter);\n        }\n      }\n    }\n\n    filter.push(gridCore.combineFilters(filterElement));\n  }\n\n  filter = gridCore.combineFilters(filter, \"or\");\n  return gridCore.combineFilters([filter, storeLoadOptions.filter]);\n}\nexport var GroupingHelper = Class.inherit(function () {\n  var findGroupInfoByKey = function (groupsInfo, key) {\n    var hash = groupsInfo.hash;\n    return hash && hash[JSON.stringify(key)];\n  };\n\n  var getGroupInfoIndexByOffset = function (groupsInfo, offset) {\n    var leftIndex = 0;\n    var rightIndex = groupsInfo.length - 1;\n\n    if (!groupsInfo.length) {\n      return 0;\n    }\n\n    do {\n      var middleIndex = rightIndex + leftIndex >> 1;\n\n      if (groupsInfo[middleIndex].offset > offset) {\n        rightIndex = middleIndex;\n      } else {\n        leftIndex = middleIndex;\n      }\n    } while (rightIndex - leftIndex > 1);\n\n    var index;\n\n    for (index = leftIndex; index <= rightIndex; index++) {\n      if (groupsInfo[index].offset > offset) {\n        break;\n      }\n    }\n\n    return index;\n  };\n\n  return {\n    ctor: function (dataSourceAdapter) {\n      this._dataSource = dataSourceAdapter;\n      this.reset();\n    },\n    reset: function () {\n      this._groupsInfo = [];\n      this._totalCountCorrection = 0;\n    },\n    totalCountCorrection: function () {\n      return this._totalCountCorrection;\n    },\n    updateTotalItemsCount: function (totalCountCorrection) {\n      this._totalCountCorrection = totalCountCorrection || 0;\n    },\n    isGroupItemCountable: function (item) {\n      return !this._isVirtualPaging() || !item.isContinuation;\n    },\n    _isVirtualPaging: function () {\n      var scrollingMode = this._dataSource.option(\"scrolling.mode\");\n\n      return \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\n    },\n    itemsCount: function () {\n      var dataSourceAdapter = this._dataSource;\n      var dataSource = dataSourceAdapter._dataSource;\n      var groupCount = gridCore.normalizeSortingInfo(dataSource.group() || []).length;\n\n      var itemsCount = function calculateItemsCount(that, items, groupsCount) {\n        var result = 0;\n\n        if (items) {\n          if (!groupsCount) {\n            result = items.length;\n          } else {\n            for (var i = 0; i < items.length; i++) {\n              if (that.isGroupItemCountable(items[i])) {\n                result++;\n              }\n\n              result += calculateItemsCount(that, items[i].items, groupsCount - 1);\n            }\n          }\n        }\n\n        return result;\n      }(this, dataSource.items(), groupCount);\n\n      return itemsCount;\n    },\n    foreachGroups: function (callback, childrenAtFirst, foreachCollapsedGroups, updateOffsets, updateParentOffsets) {\n      var that = this;\n      return function foreachGroupsCore(groupsInfo, callback, childrenAtFirst, parents) {\n        var callbackResults = [];\n\n        function executeCallback(callback, data, parents, callbackResults) {\n          var callbackResult = data && callback(data, parents);\n          callbackResult && callbackResults.push(callbackResult);\n          return callbackResult;\n        }\n\n        for (var i = 0; i < groupsInfo.length; i++) {\n          parents.push(groupsInfo[i].data);\n\n          if (!childrenAtFirst && false === executeCallback(callback, groupsInfo[i].data, parents, callbackResults)) {\n            return false;\n          }\n\n          if (!groupsInfo[i].data || groupsInfo[i].data.isExpanded || foreachCollapsedGroups) {\n            var children = groupsInfo[i].children;\n            var callbackResult = children.length && foreachGroupsCore(children, callback, childrenAtFirst, parents);\n            callbackResult && callbackResults.push(callbackResult);\n\n            if (false === callbackResult) {\n              return false;\n            }\n          }\n\n          if (childrenAtFirst && false === executeCallback(callback, groupsInfo[i].data, parents, callbackResults)) {\n            return false;\n          }\n\n          if (!groupsInfo[i].data || groupsInfo[i].data.offset !== groupsInfo[i].offset) {\n            updateOffsets = true;\n          }\n\n          parents.pop();\n        }\n\n        var currentParents = updateParentOffsets && parents.slice(0);\n        return updateOffsets && when.apply($, callbackResults).always(function () {\n          that._updateGroupInfoOffsets(groupsInfo, currentParents);\n        });\n      }(that._groupsInfo, callback, childrenAtFirst, []);\n    },\n    _updateGroupInfoOffsets: function (groupsInfo, parents) {\n      parents = parents || [];\n\n      for (var index = 0; index < groupsInfo.length; index++) {\n        var groupInfo = groupsInfo[index];\n\n        if (groupInfo.data && groupInfo.data.offset !== groupInfo.offset) {\n          groupInfo.offset = groupInfo.data.offset;\n\n          for (var parentIndex = 0; parentIndex < parents.length; parentIndex++) {\n            parents[parentIndex].offset = groupInfo.offset;\n          }\n        }\n      }\n\n      groupsInfo.sort(function (a, b) {\n        return a.offset - b.offset;\n      });\n    },\n    findGroupInfo: function (path) {\n      var groupInfo;\n      var groupsInfo = this._groupsInfo;\n\n      for (var pathIndex = 0; groupsInfo && pathIndex < path.length; pathIndex++) {\n        groupInfo = findGroupInfoByKey(groupsInfo, path[pathIndex]);\n        groupsInfo = groupInfo && groupInfo.children;\n      }\n\n      return groupInfo && groupInfo.data;\n    },\n    addGroupInfo: function (groupInfoData) {\n      var groupInfo;\n      var path = groupInfoData.path;\n      var groupsInfo = this._groupsInfo;\n\n      for (var pathIndex = 0; pathIndex < path.length; pathIndex++) {\n        groupInfo = findGroupInfoByKey(groupsInfo, path[pathIndex]);\n\n        if (!groupInfo) {\n          groupInfo = {\n            key: path[pathIndex],\n            offset: groupInfoData.offset,\n            data: {\n              offset: groupInfoData.offset,\n              isExpanded: true,\n              path: path.slice(0, pathIndex + 1)\n            },\n            children: []\n          };\n          var index = getGroupInfoIndexByOffset(groupsInfo, groupInfoData.offset);\n          groupsInfo.splice(index, 0, groupInfo);\n          groupsInfo.hash = groupsInfo.hash || {};\n          groupsInfo.hash[JSON.stringify(groupInfo.key)] = groupInfo;\n        }\n\n        if (pathIndex === path.length - 1) {\n          groupInfo.data = groupInfoData;\n\n          if (groupInfo.offset !== groupInfoData.offset) {\n            this._updateGroupInfoOffsets(groupsInfo);\n          }\n        }\n\n        groupsInfo = groupInfo.children;\n      }\n    },\n    allowCollapseAll: function () {\n      return true;\n    },\n    refresh: function (options) {\n      var storeLoadOptions = options.storeLoadOptions;\n      var groups = normalizeSortingInfo(storeLoadOptions.group || []);\n      var oldGroups = \"_group\" in this ? normalizeSortingInfo(this._group || []) : groups;\n      var groupsCount = Math.min(oldGroups.length, groups.length);\n      this._group = storeLoadOptions.group;\n\n      for (var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {\n        if (oldGroups[groupIndex].selector !== groups[groupIndex].selector) {\n          groupsCount = groupIndex;\n          break;\n        }\n      }\n\n      if (!groupsCount) {\n        this.reset();\n      } else {\n        !function cleanGroupsInfo(groupsInfo, groupIndex, groupsCount) {\n          for (var i = 0; i < groupsInfo.length; i++) {\n            if (groupIndex + 1 >= groupsCount) {\n              groupsInfo[i].children = [];\n            } else {\n              cleanGroupsInfo(groupsInfo[i].children, groupIndex + 1, groupsCount);\n            }\n          }\n        }(this._groupsInfo, 0, groupsCount);\n      }\n    },\n    handleDataLoading: function () {},\n    handleDataLoaded: function (options, callBase) {\n      callBase(options);\n    },\n    handleDataLoadedCore: function (options, callBase) {\n      callBase(options);\n    }\n  };\n}());","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.core.js"],"names":["$","Class","gridCore","normalizeSortingInfo","when","createOffsetFilter","path","storeLoadOptions","lastLevelOnly","groups","group","filter","i","length","filterElement","j","selector","push","desc","currentFilter","combineFilters","GroupingHelper","inherit","findGroupInfoByKey","groupsInfo","key","hash","JSON","stringify","getGroupInfoIndexByOffset","offset","leftIndex","rightIndex","middleIndex","index","ctor","dataSourceAdapter","_dataSource","reset","_groupsInfo","_totalCountCorrection","totalCountCorrection","updateTotalItemsCount","isGroupItemCountable","item","_isVirtualPaging","isContinuation","scrollingMode","option","itemsCount","dataSource","groupCount","calculateItemsCount","that","items","groupsCount","result","foreachGroups","callback","childrenAtFirst","foreachCollapsedGroups","updateOffsets","updateParentOffsets","foreachGroupsCore","parents","callbackResults","executeCallback","data","callbackResult","isExpanded","children","pop","currentParents","slice","apply","always","_updateGroupInfoOffsets","groupInfo","parentIndex","sort","a","b","findGroupInfo","pathIndex","addGroupInfo","groupInfoData","splice","allowCollapseAll","refresh","options","oldGroups","_group","Math","min","groupIndex","cleanGroupsInfo","handleDataLoading","handleDataLoaded","callBase","handleDataLoadedCore"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,CAAP,MAAc,qBAAd;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,SACIC,oBADJ,QAEO,kBAFP;AAGA,SACIC,IADJ,QAEO,2BAFP;AAGA,OAAO,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,gBAAlC,EAAoDC,aAApD,EAAmE;AACtE,MAAIC,MAAM,GAAGN,oBAAoB,CAACI,gBAAgB,CAACG,KAAlB,CAAjC;AACA,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAGJ,aAAa,GAAGF,IAAI,CAACO,MAAL,GAAc,CAAjB,GAAqB,CAA/C,EAAkDD,CAAC,GAAGN,IAAI,CAACO,MAA3D,EAAmED,CAAC,EAApE,EAAwE;AACpE,QAAIE,aAAa,GAAG,EAApB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIH,CAArB,EAAwBG,CAAC,EAAzB,EAA6B;AACzB,UAAIC,QAAQ,GAAGP,MAAM,CAACM,CAAD,CAAN,CAAUC,QAAzB;;AACA,UAAIJ,CAAC,KAAKG,CAAN,KAAY,SAAST,IAAI,CAACS,CAAD,CAAb,IAAoB,UAAUT,IAAI,CAACS,CAAD,CAAlC,IAAyC,SAAST,IAAI,CAACS,CAAD,CAAlE,CAAJ,EAA4E;AACxE,YAAI,UAAUT,IAAI,CAACS,CAAD,CAAlB,EAAuB;AACnBD,UAAAA,aAAa,CAACG,IAAd,CAAmB,CAACD,QAAD,EAAW,GAAX,EAAgBP,MAAM,CAACM,CAAD,CAAN,CAAUG,IAAV,GAAiB,IAAjB,GAAwB,IAAxC,CAAnB;AACH,SAFD,MAEO,IAAIZ,IAAI,CAACS,CAAD,CAAJ,GAAU,CAACN,MAAM,CAACM,CAAD,CAAN,CAAUG,IAArB,GAA4BT,MAAM,CAACM,CAAD,CAAN,CAAUG,IAA1C,EAAgD;AACnDJ,UAAAA,aAAa,CAACG,IAAd,CAAmB,CAACD,QAAD,EAAW,IAAX,EAAiBV,IAAI,CAACS,CAAD,CAArB,CAAnB;AACH,SAFM,MAEA;AACHD,UAAAA,aAAa,CAACG,IAAd,CAAmB,CAACD,QAAD,EAAW,IAAX,EAAiB,IAAjB,CAAnB;AACAF,UAAAA,aAAa,CAACG,IAAd,CAAmB,CAACD,QAAD,EAAW,GAAX,EAAgB,IAAhB,CAAnB;AACH;AACJ,OATD,MASO;AACH,YAAIG,aAAa,GAAG,CAACH,QAAD,EAAWJ,CAAC,KAAKG,CAAN,GAAUN,MAAM,CAACM,CAAD,CAAN,CAAUG,IAAV,GAAiB,GAAjB,GAAuB,GAAjC,GAAuC,GAAlD,EAAuDZ,IAAI,CAACS,CAAD,CAA3D,CAApB;;AACA,YAAI,QAAQI,aAAa,CAAC,CAAD,CAAzB,EAA8B;AAC1BL,UAAAA,aAAa,CAACG,IAAd,CAAmB,CAACE,aAAD,EAAgB,IAAhB,EAAsB,CAACH,QAAD,EAAW,GAAX,EAAgB,IAAhB,CAAtB,CAAnB;AACH,SAFD,MAEO;AACHF,UAAAA,aAAa,CAACG,IAAd,CAAmBE,aAAnB;AACH;AACJ;AACJ;;AACDR,IAAAA,MAAM,CAACM,IAAP,CAAYf,QAAQ,CAACkB,cAAT,CAAwBN,aAAxB,CAAZ;AACH;;AACDH,EAAAA,MAAM,GAAGT,QAAQ,CAACkB,cAAT,CAAwBT,MAAxB,EAAgC,IAAhC,CAAT;AACA,SAAOT,QAAQ,CAACkB,cAAT,CAAwB,CAACT,MAAD,EAASJ,gBAAgB,CAACI,MAA1B,CAAxB,CAAP;AACH;AACD,OAAO,IAAIU,cAAc,GAAGpB,KAAK,CAACqB,OAAN,CAAc,YAAW;AACjD,MAAIC,kBAAkB,GAAG,UAASC,UAAT,EAAqBC,GAArB,EAA0B;AAC/C,QAAIC,IAAI,GAAGF,UAAU,CAACE,IAAtB;AACA,WAAOA,IAAI,IAAIA,IAAI,CAACC,IAAI,CAACC,SAAL,CAAeH,GAAf,CAAD,CAAnB;AACH,GAHD;;AAIA,MAAII,yBAAyB,GAAG,UAASL,UAAT,EAAqBM,MAArB,EAA6B;AACzD,QAAIC,SAAS,GAAG,CAAhB;AACA,QAAIC,UAAU,GAAGR,UAAU,CAACX,MAAX,GAAoB,CAArC;;AACA,QAAI,CAACW,UAAU,CAACX,MAAhB,EAAwB;AACpB,aAAO,CAAP;AACH;;AACD,OAAG;AACC,UAAIoB,WAAW,GAAGD,UAAU,GAAGD,SAAb,IAA0B,CAA5C;;AACA,UAAIP,UAAU,CAACS,WAAD,CAAV,CAAwBH,MAAxB,GAAiCA,MAArC,EAA6C;AACzCE,QAAAA,UAAU,GAAGC,WAAb;AACH,OAFD,MAEO;AACHF,QAAAA,SAAS,GAAGE,WAAZ;AACH;AACJ,KAPD,QAOSD,UAAU,GAAGD,SAAb,GAAyB,CAPlC;;AAQA,QAAIG,KAAJ;;AACA,SAAKA,KAAK,GAAGH,SAAb,EAAwBG,KAAK,IAAIF,UAAjC,EAA6CE,KAAK,EAAlD,EAAsD;AAClD,UAAIV,UAAU,CAACU,KAAD,CAAV,CAAkBJ,MAAlB,GAA2BA,MAA/B,EAAuC;AACnC;AACH;AACJ;;AACD,WAAOI,KAAP;AACH,GArBD;;AAsBA,SAAO;AACHC,IAAAA,IAAI,EAAE,UAASC,iBAAT,EAA4B;AAC9B,WAAKC,WAAL,GAAmBD,iBAAnB;AACA,WAAKE,KAAL;AACH,KAJE;AAKHA,IAAAA,KAAK,EAAE,YAAW;AACd,WAAKC,WAAL,GAAmB,EAAnB;AACA,WAAKC,qBAAL,GAA6B,CAA7B;AACH,KARE;AASHC,IAAAA,oBAAoB,EAAE,YAAW;AAC7B,aAAO,KAAKD,qBAAZ;AACH,KAXE;AAYHE,IAAAA,qBAAqB,EAAE,UAASD,oBAAT,EAA+B;AAClD,WAAKD,qBAAL,GAA6BC,oBAAoB,IAAI,CAArD;AACH,KAdE;AAeHE,IAAAA,oBAAoB,EAAE,UAASC,IAAT,EAAe;AACjC,aAAO,CAAC,KAAKC,gBAAL,EAAD,IAA4B,CAACD,IAAI,CAACE,cAAzC;AACH,KAjBE;AAkBHD,IAAAA,gBAAgB,EAAE,YAAW;AACzB,UAAIE,aAAa,GAAG,KAAKV,WAAL,CAAiBW,MAAjB,CAAwB,gBAAxB,CAApB;;AACA,aAAO,cAAcD,aAAd,IAA+B,eAAeA,aAArD;AACH,KArBE;AAsBHE,IAAAA,UAAU,EAAE,YAAW;AACnB,UAAIb,iBAAiB,GAAG,KAAKC,WAA7B;AACA,UAAIa,UAAU,GAAGd,iBAAiB,CAACC,WAAnC;AACA,UAAIc,UAAU,GAAGjD,QAAQ,CAACC,oBAAT,CAA8B+C,UAAU,CAACxC,KAAX,MAAsB,EAApD,EAAwDG,MAAzE;;AACA,UAAIoC,UAAU,GAAG,SAASG,mBAAT,CAA6BC,IAA7B,EAAmCC,KAAnC,EAA0CC,WAA1C,EAAuD;AACpE,YAAIC,MAAM,GAAG,CAAb;;AACA,YAAIF,KAAJ,EAAW;AACP,cAAI,CAACC,WAAL,EAAkB;AACdC,YAAAA,MAAM,GAAGF,KAAK,CAACzC,MAAf;AACH,WAFD,MAEO;AACH,iBAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG0C,KAAK,CAACzC,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,kBAAIyC,IAAI,CAACV,oBAAL,CAA0BW,KAAK,CAAC1C,CAAD,CAA/B,CAAJ,EAAyC;AACrC4C,gBAAAA,MAAM;AACT;;AACDA,cAAAA,MAAM,IAAIJ,mBAAmB,CAACC,IAAD,EAAOC,KAAK,CAAC1C,CAAD,CAAL,CAAS0C,KAAhB,EAAuBC,WAAW,GAAG,CAArC,CAA7B;AACH;AACJ;AACJ;;AACD,eAAOC,MAAP;AACH,OAfgB,CAef,IAfe,EAeTN,UAAU,CAACI,KAAX,EAfS,EAeWH,UAfX,CAAjB;;AAgBA,aAAOF,UAAP;AACH,KA3CE;AA4CHQ,IAAAA,aAAa,EAAE,UAASC,QAAT,EAAmBC,eAAnB,EAAoCC,sBAApC,EAA4DC,aAA5D,EAA2EC,mBAA3E,EAAgG;AAC3G,UAAIT,IAAI,GAAG,IAAX;AACA,aAAO,SAASU,iBAAT,CAA2BvC,UAA3B,EAAuCkC,QAAvC,EAAiDC,eAAjD,EAAkEK,OAAlE,EAA2E;AAC9E,YAAIC,eAAe,GAAG,EAAtB;;AAEA,iBAASC,eAAT,CAAyBR,QAAzB,EAAmCS,IAAnC,EAAyCH,OAAzC,EAAkDC,eAAlD,EAAmE;AAC/D,cAAIG,cAAc,GAAGD,IAAI,IAAIT,QAAQ,CAACS,IAAD,EAAOH,OAAP,CAArC;AACAI,UAAAA,cAAc,IAAIH,eAAe,CAAChD,IAAhB,CAAqBmD,cAArB,CAAlB;AACA,iBAAOA,cAAP;AACH;;AACD,aAAK,IAAIxD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGY,UAAU,CAACX,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxCoD,UAAAA,OAAO,CAAC/C,IAAR,CAAaO,UAAU,CAACZ,CAAD,CAAV,CAAcuD,IAA3B;;AACA,cAAI,CAACR,eAAD,IAAoB,UAAUO,eAAe,CAACR,QAAD,EAAWlC,UAAU,CAACZ,CAAD,CAAV,CAAcuD,IAAzB,EAA+BH,OAA/B,EAAwCC,eAAxC,CAAjD,EAA2G;AACvG,mBAAO,KAAP;AACH;;AACD,cAAI,CAACzC,UAAU,CAACZ,CAAD,CAAV,CAAcuD,IAAf,IAAuB3C,UAAU,CAACZ,CAAD,CAAV,CAAcuD,IAAd,CAAmBE,UAA1C,IAAwDT,sBAA5D,EAAoF;AAChF,gBAAIU,QAAQ,GAAG9C,UAAU,CAACZ,CAAD,CAAV,CAAc0D,QAA7B;AACA,gBAAIF,cAAc,GAAGE,QAAQ,CAACzD,MAAT,IAAmBkD,iBAAiB,CAACO,QAAD,EAAWZ,QAAX,EAAqBC,eAArB,EAAsCK,OAAtC,CAAzD;AACAI,YAAAA,cAAc,IAAIH,eAAe,CAAChD,IAAhB,CAAqBmD,cAArB,CAAlB;;AACA,gBAAI,UAAUA,cAAd,EAA8B;AAC1B,qBAAO,KAAP;AACH;AACJ;;AACD,cAAIT,eAAe,IAAI,UAAUO,eAAe,CAACR,QAAD,EAAWlC,UAAU,CAACZ,CAAD,CAAV,CAAcuD,IAAzB,EAA+BH,OAA/B,EAAwCC,eAAxC,CAAhD,EAA0G;AACtG,mBAAO,KAAP;AACH;;AACD,cAAI,CAACzC,UAAU,CAACZ,CAAD,CAAV,CAAcuD,IAAf,IAAuB3C,UAAU,CAACZ,CAAD,CAAV,CAAcuD,IAAd,CAAmBrC,MAAnB,KAA8BN,UAAU,CAACZ,CAAD,CAAV,CAAckB,MAAvE,EAA+E;AAC3E+B,YAAAA,aAAa,GAAG,IAAhB;AACH;;AACDG,UAAAA,OAAO,CAACO,GAAR;AACH;;AACD,YAAIC,cAAc,GAAGV,mBAAmB,IAAIE,OAAO,CAACS,KAAR,CAAc,CAAd,CAA5C;AACA,eAAOZ,aAAa,IAAIzD,IAAI,CAACsE,KAAL,CAAW1E,CAAX,EAAciE,eAAd,EAA+BU,MAA/B,CAAuC,YAAW;AACtEtB,UAAAA,IAAI,CAACuB,uBAAL,CAA6BpD,UAA7B,EAAyCgD,cAAzC;AACH,SAFuB,CAAxB;AAGH,OAjCM,CAiCLnB,IAAI,CAACd,WAjCA,EAiCamB,QAjCb,EAiCuBC,eAjCvB,EAiCwC,EAjCxC,CAAP;AAkCH,KAhFE;AAiFHiB,IAAAA,uBAAuB,EAAE,UAASpD,UAAT,EAAqBwC,OAArB,EAA8B;AACnDA,MAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;;AACA,WAAK,IAAI9B,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGV,UAAU,CAACX,MAAvC,EAA+CqB,KAAK,EAApD,EAAwD;AACpD,YAAI2C,SAAS,GAAGrD,UAAU,CAACU,KAAD,CAA1B;;AACA,YAAI2C,SAAS,CAACV,IAAV,IAAkBU,SAAS,CAACV,IAAV,CAAerC,MAAf,KAA0B+C,SAAS,CAAC/C,MAA1D,EAAkE;AAC9D+C,UAAAA,SAAS,CAAC/C,MAAV,GAAmB+C,SAAS,CAACV,IAAV,CAAerC,MAAlC;;AACA,eAAK,IAAIgD,WAAW,GAAG,CAAvB,EAA0BA,WAAW,GAAGd,OAAO,CAACnD,MAAhD,EAAwDiE,WAAW,EAAnE,EAAuE;AACnEd,YAAAA,OAAO,CAACc,WAAD,CAAP,CAAqBhD,MAArB,GAA8B+C,SAAS,CAAC/C,MAAxC;AACH;AACJ;AACJ;;AACDN,MAAAA,UAAU,CAACuD,IAAX,CAAiB,UAASC,CAAT,EAAYC,CAAZ,EAAe;AAC5B,eAAOD,CAAC,CAAClD,MAAF,GAAWmD,CAAC,CAACnD,MAApB;AACH,OAFD;AAGH,KA/FE;AAgGHoD,IAAAA,aAAa,EAAE,UAAS5E,IAAT,EAAe;AAC1B,UAAIuE,SAAJ;AACA,UAAIrD,UAAU,GAAG,KAAKe,WAAtB;;AACA,WAAK,IAAI4C,SAAS,GAAG,CAArB,EAAwB3D,UAAU,IAAI2D,SAAS,GAAG7E,IAAI,CAACO,MAAvD,EAA+DsE,SAAS,EAAxE,EAA4E;AACxEN,QAAAA,SAAS,GAAGtD,kBAAkB,CAACC,UAAD,EAAalB,IAAI,CAAC6E,SAAD,CAAjB,CAA9B;AACA3D,QAAAA,UAAU,GAAGqD,SAAS,IAAIA,SAAS,CAACP,QAApC;AACH;;AACD,aAAOO,SAAS,IAAIA,SAAS,CAACV,IAA9B;AACH,KAxGE;AAyGHiB,IAAAA,YAAY,EAAE,UAASC,aAAT,EAAwB;AAClC,UAAIR,SAAJ;AACA,UAAIvE,IAAI,GAAG+E,aAAa,CAAC/E,IAAzB;AACA,UAAIkB,UAAU,GAAG,KAAKe,WAAtB;;AACA,WAAK,IAAI4C,SAAS,GAAG,CAArB,EAAwBA,SAAS,GAAG7E,IAAI,CAACO,MAAzC,EAAiDsE,SAAS,EAA1D,EAA8D;AAC1DN,QAAAA,SAAS,GAAGtD,kBAAkB,CAACC,UAAD,EAAalB,IAAI,CAAC6E,SAAD,CAAjB,CAA9B;;AACA,YAAI,CAACN,SAAL,EAAgB;AACZA,UAAAA,SAAS,GAAG;AACRpD,YAAAA,GAAG,EAAEnB,IAAI,CAAC6E,SAAD,CADD;AAERrD,YAAAA,MAAM,EAAEuD,aAAa,CAACvD,MAFd;AAGRqC,YAAAA,IAAI,EAAE;AACFrC,cAAAA,MAAM,EAAEuD,aAAa,CAACvD,MADpB;AAEFuC,cAAAA,UAAU,EAAE,IAFV;AAGF/D,cAAAA,IAAI,EAAEA,IAAI,CAACmE,KAAL,CAAW,CAAX,EAAcU,SAAS,GAAG,CAA1B;AAHJ,aAHE;AAQRb,YAAAA,QAAQ,EAAE;AARF,WAAZ;AAUA,cAAIpC,KAAK,GAAGL,yBAAyB,CAACL,UAAD,EAAa6D,aAAa,CAACvD,MAA3B,CAArC;AACAN,UAAAA,UAAU,CAAC8D,MAAX,CAAkBpD,KAAlB,EAAyB,CAAzB,EAA4B2C,SAA5B;AACArD,UAAAA,UAAU,CAACE,IAAX,GAAkBF,UAAU,CAACE,IAAX,IAAmB,EAArC;AACAF,UAAAA,UAAU,CAACE,IAAX,CAAgBC,IAAI,CAACC,SAAL,CAAeiD,SAAS,CAACpD,GAAzB,CAAhB,IAAiDoD,SAAjD;AACH;;AACD,YAAIM,SAAS,KAAK7E,IAAI,CAACO,MAAL,GAAc,CAAhC,EAAmC;AAC/BgE,UAAAA,SAAS,CAACV,IAAV,GAAiBkB,aAAjB;;AACA,cAAIR,SAAS,CAAC/C,MAAV,KAAqBuD,aAAa,CAACvD,MAAvC,EAA+C;AAC3C,iBAAK8C,uBAAL,CAA6BpD,UAA7B;AACH;AACJ;;AACDA,QAAAA,UAAU,GAAGqD,SAAS,CAACP,QAAvB;AACH;AACJ,KAvIE;AAwIHiB,IAAAA,gBAAgB,EAAE,YAAW;AACzB,aAAO,IAAP;AACH,KA1IE;AA2IHC,IAAAA,OAAO,EAAE,UAASC,OAAT,EAAkB;AACvB,UAAIlF,gBAAgB,GAAGkF,OAAO,CAAClF,gBAA/B;AACA,UAAIE,MAAM,GAAGN,oBAAoB,CAACI,gBAAgB,CAACG,KAAjB,IAA0B,EAA3B,CAAjC;AACA,UAAIgF,SAAS,GAAG,YAAY,IAAZ,GAAmBvF,oBAAoB,CAAC,KAAKwF,MAAL,IAAe,EAAhB,CAAvC,GAA6DlF,MAA7E;AACA,UAAI8C,WAAW,GAAGqC,IAAI,CAACC,GAAL,CAASH,SAAS,CAAC7E,MAAnB,EAA2BJ,MAAM,CAACI,MAAlC,CAAlB;AACA,WAAK8E,MAAL,GAAcpF,gBAAgB,CAACG,KAA/B;;AACA,WAAK,IAAIoF,UAAU,GAAG,CAAtB,EAAyBA,UAAU,GAAGvC,WAAtC,EAAmDuC,UAAU,EAA7D,EAAiE;AAC7D,YAAIJ,SAAS,CAACI,UAAD,CAAT,CAAsB9E,QAAtB,KAAmCP,MAAM,CAACqF,UAAD,CAAN,CAAmB9E,QAA1D,EAAoE;AAChEuC,UAAAA,WAAW,GAAGuC,UAAd;AACA;AACH;AACJ;;AACD,UAAI,CAACvC,WAAL,EAAkB;AACd,aAAKjB,KAAL;AACH,OAFD,MAEO;AACH,SAAE,SAASyD,eAAT,CAAyBvE,UAAzB,EAAqCsE,UAArC,EAAiDvC,WAAjD,EAA8D;AAC5D,eAAK,IAAI3C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGY,UAAU,CAACX,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AACxC,gBAAIkF,UAAU,GAAG,CAAb,IAAkBvC,WAAtB,EAAmC;AAC/B/B,cAAAA,UAAU,CAACZ,CAAD,CAAV,CAAc0D,QAAd,GAAyB,EAAzB;AACH,aAFD,MAEO;AACHyB,cAAAA,eAAe,CAACvE,UAAU,CAACZ,CAAD,CAAV,CAAc0D,QAAf,EAAyBwB,UAAU,GAAG,CAAtC,EAAyCvC,WAAzC,CAAf;AACH;AACJ;AACJ,SARC,CAQA,KAAKhB,WARL,EAQkB,CARlB,EAQqBgB,WARrB,CAAF;AASH;AACJ,KApKE;AAqKHyC,IAAAA,iBAAiB,EAAE,YAAW,CAAE,CArK7B;AAsKHC,IAAAA,gBAAgB,EAAE,UAASR,OAAT,EAAkBS,QAAlB,EAA4B;AAC1CA,MAAAA,QAAQ,CAACT,OAAD,CAAR;AACH,KAxKE;AAyKHU,IAAAA,oBAAoB,EAAE,UAASV,OAAT,EAAkBS,QAAlB,EAA4B;AAC9CA,MAAAA,QAAQ,CAACT,OAAD,CAAR;AACH;AA3KE,GAAP;AA6KH,CAxMyC,EAAd,CAArB","sourcesContent":["/**\r\n * DevExtreme (esm/ui/data_grid/ui.data_grid.grouping.core.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport Class from \"../../core/class\";\r\nimport gridCore from \"./ui.data_grid.core\";\r\nimport {\r\n    normalizeSortingInfo\r\n} from \"../../data/utils\";\r\nimport {\r\n    when\r\n} from \"../../core/utils/deferred\";\r\nexport function createOffsetFilter(path, storeLoadOptions, lastLevelOnly) {\r\n    var groups = normalizeSortingInfo(storeLoadOptions.group);\r\n    var filter = [];\r\n    for (var i = lastLevelOnly ? path.length - 1 : 0; i < path.length; i++) {\r\n        var filterElement = [];\r\n        for (var j = 0; j <= i; j++) {\r\n            var selector = groups[j].selector;\r\n            if (i === j && (null === path[j] || false === path[j] || true === path[j])) {\r\n                if (false === path[j]) {\r\n                    filterElement.push([selector, \"=\", groups[j].desc ? true : null])\r\n                } else if (path[j] ? !groups[j].desc : groups[j].desc) {\r\n                    filterElement.push([selector, \"<>\", path[j]])\r\n                } else {\r\n                    filterElement.push([selector, \"<>\", null]);\r\n                    filterElement.push([selector, \"=\", null])\r\n                }\r\n            } else {\r\n                var currentFilter = [selector, i === j ? groups[j].desc ? \">\" : \"<\" : \"=\", path[j]];\r\n                if (\"<\" === currentFilter[1]) {\r\n                    filterElement.push([currentFilter, \"or\", [selector, \"=\", null]])\r\n                } else {\r\n                    filterElement.push(currentFilter)\r\n                }\r\n            }\r\n        }\r\n        filter.push(gridCore.combineFilters(filterElement))\r\n    }\r\n    filter = gridCore.combineFilters(filter, \"or\");\r\n    return gridCore.combineFilters([filter, storeLoadOptions.filter])\r\n}\r\nexport var GroupingHelper = Class.inherit(function() {\r\n    var findGroupInfoByKey = function(groupsInfo, key) {\r\n        var hash = groupsInfo.hash;\r\n        return hash && hash[JSON.stringify(key)]\r\n    };\r\n    var getGroupInfoIndexByOffset = function(groupsInfo, offset) {\r\n        var leftIndex = 0;\r\n        var rightIndex = groupsInfo.length - 1;\r\n        if (!groupsInfo.length) {\r\n            return 0\r\n        }\r\n        do {\r\n            var middleIndex = rightIndex + leftIndex >> 1;\r\n            if (groupsInfo[middleIndex].offset > offset) {\r\n                rightIndex = middleIndex\r\n            } else {\r\n                leftIndex = middleIndex\r\n            }\r\n        } while (rightIndex - leftIndex > 1);\r\n        var index;\r\n        for (index = leftIndex; index <= rightIndex; index++) {\r\n            if (groupsInfo[index].offset > offset) {\r\n                break\r\n            }\r\n        }\r\n        return index\r\n    };\r\n    return {\r\n        ctor: function(dataSourceAdapter) {\r\n            this._dataSource = dataSourceAdapter;\r\n            this.reset()\r\n        },\r\n        reset: function() {\r\n            this._groupsInfo = [];\r\n            this._totalCountCorrection = 0\r\n        },\r\n        totalCountCorrection: function() {\r\n            return this._totalCountCorrection\r\n        },\r\n        updateTotalItemsCount: function(totalCountCorrection) {\r\n            this._totalCountCorrection = totalCountCorrection || 0\r\n        },\r\n        isGroupItemCountable: function(item) {\r\n            return !this._isVirtualPaging() || !item.isContinuation\r\n        },\r\n        _isVirtualPaging: function() {\r\n            var scrollingMode = this._dataSource.option(\"scrolling.mode\");\r\n            return \"virtual\" === scrollingMode || \"infinite\" === scrollingMode\r\n        },\r\n        itemsCount: function() {\r\n            var dataSourceAdapter = this._dataSource;\r\n            var dataSource = dataSourceAdapter._dataSource;\r\n            var groupCount = gridCore.normalizeSortingInfo(dataSource.group() || []).length;\r\n            var itemsCount = function calculateItemsCount(that, items, groupsCount) {\r\n                var result = 0;\r\n                if (items) {\r\n                    if (!groupsCount) {\r\n                        result = items.length\r\n                    } else {\r\n                        for (var i = 0; i < items.length; i++) {\r\n                            if (that.isGroupItemCountable(items[i])) {\r\n                                result++\r\n                            }\r\n                            result += calculateItemsCount(that, items[i].items, groupsCount - 1)\r\n                        }\r\n                    }\r\n                }\r\n                return result\r\n            }(this, dataSource.items(), groupCount);\r\n            return itemsCount\r\n        },\r\n        foreachGroups: function(callback, childrenAtFirst, foreachCollapsedGroups, updateOffsets, updateParentOffsets) {\r\n            var that = this;\r\n            return function foreachGroupsCore(groupsInfo, callback, childrenAtFirst, parents) {\r\n                var callbackResults = [];\r\n\r\n                function executeCallback(callback, data, parents, callbackResults) {\r\n                    var callbackResult = data && callback(data, parents);\r\n                    callbackResult && callbackResults.push(callbackResult);\r\n                    return callbackResult\r\n                }\r\n                for (var i = 0; i < groupsInfo.length; i++) {\r\n                    parents.push(groupsInfo[i].data);\r\n                    if (!childrenAtFirst && false === executeCallback(callback, groupsInfo[i].data, parents, callbackResults)) {\r\n                        return false\r\n                    }\r\n                    if (!groupsInfo[i].data || groupsInfo[i].data.isExpanded || foreachCollapsedGroups) {\r\n                        var children = groupsInfo[i].children;\r\n                        var callbackResult = children.length && foreachGroupsCore(children, callback, childrenAtFirst, parents);\r\n                        callbackResult && callbackResults.push(callbackResult);\r\n                        if (false === callbackResult) {\r\n                            return false\r\n                        }\r\n                    }\r\n                    if (childrenAtFirst && false === executeCallback(callback, groupsInfo[i].data, parents, callbackResults)) {\r\n                        return false\r\n                    }\r\n                    if (!groupsInfo[i].data || groupsInfo[i].data.offset !== groupsInfo[i].offset) {\r\n                        updateOffsets = true\r\n                    }\r\n                    parents.pop()\r\n                }\r\n                var currentParents = updateParentOffsets && parents.slice(0);\r\n                return updateOffsets && when.apply($, callbackResults).always((function() {\r\n                    that._updateGroupInfoOffsets(groupsInfo, currentParents)\r\n                }))\r\n            }(that._groupsInfo, callback, childrenAtFirst, [])\r\n        },\r\n        _updateGroupInfoOffsets: function(groupsInfo, parents) {\r\n            parents = parents || [];\r\n            for (var index = 0; index < groupsInfo.length; index++) {\r\n                var groupInfo = groupsInfo[index];\r\n                if (groupInfo.data && groupInfo.data.offset !== groupInfo.offset) {\r\n                    groupInfo.offset = groupInfo.data.offset;\r\n                    for (var parentIndex = 0; parentIndex < parents.length; parentIndex++) {\r\n                        parents[parentIndex].offset = groupInfo.offset\r\n                    }\r\n                }\r\n            }\r\n            groupsInfo.sort((function(a, b) {\r\n                return a.offset - b.offset\r\n            }))\r\n        },\r\n        findGroupInfo: function(path) {\r\n            var groupInfo;\r\n            var groupsInfo = this._groupsInfo;\r\n            for (var pathIndex = 0; groupsInfo && pathIndex < path.length; pathIndex++) {\r\n                groupInfo = findGroupInfoByKey(groupsInfo, path[pathIndex]);\r\n                groupsInfo = groupInfo && groupInfo.children\r\n            }\r\n            return groupInfo && groupInfo.data\r\n        },\r\n        addGroupInfo: function(groupInfoData) {\r\n            var groupInfo;\r\n            var path = groupInfoData.path;\r\n            var groupsInfo = this._groupsInfo;\r\n            for (var pathIndex = 0; pathIndex < path.length; pathIndex++) {\r\n                groupInfo = findGroupInfoByKey(groupsInfo, path[pathIndex]);\r\n                if (!groupInfo) {\r\n                    groupInfo = {\r\n                        key: path[pathIndex],\r\n                        offset: groupInfoData.offset,\r\n                        data: {\r\n                            offset: groupInfoData.offset,\r\n                            isExpanded: true,\r\n                            path: path.slice(0, pathIndex + 1)\r\n                        },\r\n                        children: []\r\n                    };\r\n                    var index = getGroupInfoIndexByOffset(groupsInfo, groupInfoData.offset);\r\n                    groupsInfo.splice(index, 0, groupInfo);\r\n                    groupsInfo.hash = groupsInfo.hash || {};\r\n                    groupsInfo.hash[JSON.stringify(groupInfo.key)] = groupInfo\r\n                }\r\n                if (pathIndex === path.length - 1) {\r\n                    groupInfo.data = groupInfoData;\r\n                    if (groupInfo.offset !== groupInfoData.offset) {\r\n                        this._updateGroupInfoOffsets(groupsInfo)\r\n                    }\r\n                }\r\n                groupsInfo = groupInfo.children\r\n            }\r\n        },\r\n        allowCollapseAll: function() {\r\n            return true\r\n        },\r\n        refresh: function(options) {\r\n            var storeLoadOptions = options.storeLoadOptions;\r\n            var groups = normalizeSortingInfo(storeLoadOptions.group || []);\r\n            var oldGroups = \"_group\" in this ? normalizeSortingInfo(this._group || []) : groups;\r\n            var groupsCount = Math.min(oldGroups.length, groups.length);\r\n            this._group = storeLoadOptions.group;\r\n            for (var groupIndex = 0; groupIndex < groupsCount; groupIndex++) {\r\n                if (oldGroups[groupIndex].selector !== groups[groupIndex].selector) {\r\n                    groupsCount = groupIndex;\r\n                    break\r\n                }\r\n            }\r\n            if (!groupsCount) {\r\n                this.reset()\r\n            } else {\r\n                ! function cleanGroupsInfo(groupsInfo, groupIndex, groupsCount) {\r\n                    for (var i = 0; i < groupsInfo.length; i++) {\r\n                        if (groupIndex + 1 >= groupsCount) {\r\n                            groupsInfo[i].children = []\r\n                        } else {\r\n                            cleanGroupsInfo(groupsInfo[i].children, groupIndex + 1, groupsCount)\r\n                        }\r\n                    }\r\n                }(this._groupsInfo, 0, groupsCount)\r\n            }\r\n        },\r\n        handleDataLoading: function() {},\r\n        handleDataLoaded: function(options, callBase) {\r\n            callBase(options)\r\n        },\r\n        handleDataLoadedCore: function(options, callBase) {\r\n            callBase(options)\r\n        }\r\n    }\r\n}());\r\n"]},"metadata":{},"sourceType":"module"}