{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/pager/page_size/selector.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"isLargeDisplayMode\", \"pageSize\", \"pageSizeChange\", \"pageSizes\", \"rootElementRef\"];\nimport { createVNode, createComponentVNode } from \"inferno\";\nimport { InfernoEffect, InfernoComponent } from \"@devextreme/runtime/inferno\";\nimport { PageSizeSmall } from \"./small\";\nimport { PageSizeLarge } from \"./large\";\nimport { InternalPagerProps } from \"../common/pager_props\";\nimport messageLocalization from \"../../../../localization/message\";\nimport { PAGER_PAGE_SIZES_CLASS } from \"../common/consts\";\nexport var viewFunction = _ref => {\n  var {\n    htmlRef: htmlRef,\n    normalizedPageSizes: normalizedPageSizes,\n    props: {\n      isLargeDisplayMode: isLargeDisplayMode,\n      pageSize: pageSize,\n      pageSizeChange: pageSizeChange\n    }\n  } = _ref;\n  return createVNode(1, \"div\", PAGER_PAGE_SIZES_CLASS, [isLargeDisplayMode && createComponentVNode(2, PageSizeLarge, {\n    pageSizes: normalizedPageSizes,\n    pageSize: pageSize,\n    pageSizeChange: pageSizeChange\n  }), !isLargeDisplayMode && createComponentVNode(2, PageSizeSmall, {\n    parentRef: htmlRef,\n    pageSizes: normalizedPageSizes,\n    pageSize: pageSize,\n    pageSizeChange: pageSizeChange\n  })], 0, null, null, htmlRef);\n};\n\nfunction getAllText() {\n  return messageLocalization.getFormatter(\"dxPager-pageSizesAllText\")();\n}\n\nvar PageSizeSelectorProps = {\n  isLargeDisplayMode: true\n};\nvar PageSizeSelectorPropsType = {\n  get pageSize() {\n    return InternalPagerProps.pageSize;\n  },\n\n  get pageSizes() {\n    return InternalPagerProps.pageSizes;\n  },\n\n  get isLargeDisplayMode() {\n    return PageSizeSelectorProps.isLargeDisplayMode;\n  }\n\n};\nimport { createRef as infernoCreateRef } from \"inferno\";\nexport class PageSizeSelector extends InfernoComponent {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.htmlRef = infernoCreateRef();\n    this.__getterCache = {};\n    this.setRootElementRef = this.setRootElementRef.bind(this);\n  }\n\n  createEffects() {\n    return [new InfernoEffect(this.setRootElementRef, [])];\n  }\n\n  setRootElementRef() {\n    var {\n      rootElementRef: rootElementRef\n    } = this.props;\n\n    if (rootElementRef) {\n      rootElementRef.current = this.htmlRef.current;\n    }\n  }\n\n  get normalizedPageSizes() {\n    if (void 0 !== this.__getterCache.normalizedPageSizes) {\n      return this.__getterCache.normalizedPageSizes;\n    }\n\n    return this.__getterCache.normalizedPageSizes = (() => {\n      var {\n        pageSizes: pageSizes\n      } = this.props;\n      return pageSizes.map(p => \"all\" === p || 0 === p ? {\n        text: getAllText(),\n        value: 0\n      } : {\n        text: String(p),\n        value: p\n      });\n    })();\n  }\n\n  get restAttributes() {\n    var _this$props = this.props,\n        restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    return restProps;\n  }\n\n  componentWillUpdate(nextProps, nextState, context) {\n    super.componentWillUpdate();\n\n    if (this.props.pageSizes !== nextProps.pageSizes) {\n      this.__getterCache.normalizedPageSizes = void 0;\n    }\n  }\n\n  render() {\n    var props = this.props;\n    return viewFunction({\n      props: _extends({}, props),\n      htmlRef: this.htmlRef,\n      normalizedPageSizes: this.normalizedPageSizes,\n      restAttributes: this.restAttributes\n    });\n  }\n\n}\nPageSizeSelector.defaultProps = PageSizeSelectorPropsType;","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/renovation/ui/pager/page_size/selector.js"],"names":["_extends","_objectWithoutPropertiesLoose","_excluded","createVNode","createComponentVNode","InfernoEffect","InfernoComponent","PageSizeSmall","PageSizeLarge","InternalPagerProps","messageLocalization","PAGER_PAGE_SIZES_CLASS","viewFunction","_ref","htmlRef","normalizedPageSizes","props","isLargeDisplayMode","pageSize","pageSizeChange","pageSizes","parentRef","getAllText","getFormatter","PageSizeSelectorProps","PageSizeSelectorPropsType","createRef","infernoCreateRef","PageSizeSelector","constructor","state","__getterCache","setRootElementRef","bind","createEffects","rootElementRef","current","map","p","text","value","String","restAttributes","_this$props","restProps","componentWillUpdate","nextProps","nextState","context","render","defaultProps"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/renovation/ui/pager/page_size/selector.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nvar _excluded = [\"isLargeDisplayMode\", \"pageSize\", \"pageSizeChange\", \"pageSizes\", \"rootElementRef\"];\r\nimport {\r\n    createVNode,\r\n    createComponentVNode\r\n} from \"inferno\";\r\nimport {\r\n    InfernoEffect,\r\n    InfernoComponent\r\n} from \"@devextreme/runtime/inferno\";\r\nimport {\r\n    PageSizeSmall\r\n} from \"./small\";\r\nimport {\r\n    PageSizeLarge\r\n} from \"./large\";\r\nimport {\r\n    InternalPagerProps\r\n} from \"../common/pager_props\";\r\nimport messageLocalization from \"../../../../localization/message\";\r\nimport {\r\n    PAGER_PAGE_SIZES_CLASS\r\n} from \"../common/consts\";\r\nexport var viewFunction = _ref => {\r\n    var {\r\n        htmlRef: htmlRef,\r\n        normalizedPageSizes: normalizedPageSizes,\r\n        props: {\r\n            isLargeDisplayMode: isLargeDisplayMode,\r\n            pageSize: pageSize,\r\n            pageSizeChange: pageSizeChange\r\n        }\r\n    } = _ref;\r\n    return createVNode(1, \"div\", PAGER_PAGE_SIZES_CLASS, [isLargeDisplayMode && createComponentVNode(2, PageSizeLarge, {\r\n        pageSizes: normalizedPageSizes,\r\n        pageSize: pageSize,\r\n        pageSizeChange: pageSizeChange\r\n    }), !isLargeDisplayMode && createComponentVNode(2, PageSizeSmall, {\r\n        parentRef: htmlRef,\r\n        pageSizes: normalizedPageSizes,\r\n        pageSize: pageSize,\r\n        pageSizeChange: pageSizeChange\r\n    })], 0, null, null, htmlRef)\r\n};\r\n\r\nfunction getAllText() {\r\n    return messageLocalization.getFormatter(\"dxPager-pageSizesAllText\")()\r\n}\r\nvar PageSizeSelectorProps = {\r\n    isLargeDisplayMode: true\r\n};\r\nvar PageSizeSelectorPropsType = {\r\n    get pageSize() {\r\n        return InternalPagerProps.pageSize\r\n    },\r\n    get pageSizes() {\r\n        return InternalPagerProps.pageSizes\r\n    },\r\n    get isLargeDisplayMode() {\r\n        return PageSizeSelectorProps.isLargeDisplayMode\r\n    }\r\n};\r\nimport {\r\n    createRef as infernoCreateRef\r\n} from \"inferno\";\r\nexport class PageSizeSelector extends InfernoComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        this.htmlRef = infernoCreateRef();\r\n        this.__getterCache = {};\r\n        this.setRootElementRef = this.setRootElementRef.bind(this)\r\n    }\r\n    createEffects() {\r\n        return [new InfernoEffect(this.setRootElementRef, [])]\r\n    }\r\n    setRootElementRef() {\r\n        var {\r\n            rootElementRef: rootElementRef\r\n        } = this.props;\r\n        if (rootElementRef) {\r\n            rootElementRef.current = this.htmlRef.current\r\n        }\r\n    }\r\n    get normalizedPageSizes() {\r\n        if (void 0 !== this.__getterCache.normalizedPageSizes) {\r\n            return this.__getterCache.normalizedPageSizes\r\n        }\r\n        return this.__getterCache.normalizedPageSizes = (() => {\r\n            var {\r\n                pageSizes: pageSizes\r\n            } = this.props;\r\n            return pageSizes.map(p => \"all\" === p || 0 === p ? {\r\n                text: getAllText(),\r\n                value: 0\r\n            } : {\r\n                text: String(p),\r\n                value: p\r\n            })\r\n        })()\r\n    }\r\n    get restAttributes() {\r\n        var _this$props = this.props,\r\n            restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);\r\n        return restProps\r\n    }\r\n    componentWillUpdate(nextProps, nextState, context) {\r\n        super.componentWillUpdate();\r\n        if (this.props.pageSizes !== nextProps.pageSizes) {\r\n            this.__getterCache.normalizedPageSizes = void 0\r\n        }\r\n    }\r\n    render() {\r\n        var props = this.props;\r\n        return viewFunction({\r\n            props: _extends({}, props),\r\n            htmlRef: this.htmlRef,\r\n            normalizedPageSizes: this.normalizedPageSizes,\r\n            restAttributes: this.restAttributes\r\n        })\r\n    }\r\n}\r\nPageSizeSelector.defaultProps = PageSizeSelectorPropsType;\r\n"]},"metadata":{},"sourceType":"module"}