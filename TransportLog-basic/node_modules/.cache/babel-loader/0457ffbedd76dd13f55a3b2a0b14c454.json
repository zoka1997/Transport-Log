{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/subscribes.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { isPlainObject } from \"../../core/utils/type\";\nimport dateUtils from \"../../core/utils/date\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { AGENDA_LAST_IN_DATE_APPOINTMENT_CLASS } from \"./classes\";\nimport { utils } from \"./utils\";\nimport { createAppointmentAdapter } from \"./appointmentAdapter\";\nimport { getFormatType, formatDates } from \"./appointments/textUtils\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar subscribes = {\n  isCurrentViewAgenda: function () {\n    return \"agenda\" === this.currentViewType;\n  },\n  currentViewUpdated: function (currentView) {\n    this.option(\"currentView\", currentView);\n  },\n  currentDateUpdated: function (date) {\n    this.option(\"currentDate\", date);\n  },\n  getOption: function (name) {\n    return this.option(name);\n  },\n  getWorkspaceOption: function (name) {\n    return this.getWorkSpace().option(name);\n  },\n  isVirtualScrolling: function () {\n    return this.isVirtualScrolling();\n  },\n  setCellDataCacheAlias: function (appointment, geometry) {\n    this._workSpace.setCellDataCacheAlias(appointment, geometry);\n  },\n  isGroupedByDate: function () {\n    return this.getWorkSpace().isGroupedByDate();\n  },\n  showAppointmentTooltip: function (options) {\n    var targetedAppointment = this.getTargetedAppointment(options.data, options.target);\n    this.showAppointmentTooltip(options.data, options.target, targetedAppointment);\n  },\n  hideAppointmentTooltip: function () {\n    this.hideAppointmentTooltip();\n  },\n  showEditAppointmentPopup: function (options) {\n    var targetedData = this.getTargetedAppointment(options.data, options.target);\n    this.showAppointmentPopup(options.data, false, targetedData);\n  },\n  updateAppointmentAfterResize: function (options) {\n    var info = utils.dataAccessors.getAppointmentInfo(options.$appointment);\n    var exceptionDate = info.sourceAppointment.exceptionDate;\n\n    this._checkRecurringAppointment(options.target, options.data, exceptionDate, function () {\n      this._updateAppointment(options.target, options.data, function () {\n        this._appointments.moveAppointmentBack();\n      });\n    }.bind(this));\n  },\n  getUpdatedData: function (rawAppointment) {\n    return this._getUpdatedData(rawAppointment);\n  },\n  updateAppointmentAfterDrag: function (_ref) {\n    var {\n      event: event,\n      element: element,\n      rawAppointment: rawAppointment,\n      coordinates: coordinates\n    } = _ref;\n    var info = utils.dataAccessors.getAppointmentInfo(element);\n    var appointment = createAppointmentAdapter(rawAppointment, this._dataAccessors, this.timeZoneCalculator);\n    var targetedAppointment = createAppointmentAdapter(extend({}, rawAppointment, this._getUpdatedData(rawAppointment)), this._dataAccessors, this.timeZoneCalculator);\n    var targetedRawAppointment = targetedAppointment.source();\n\n    var newCellIndex = this._workSpace.getDroppableCellIndex();\n\n    var oldCellIndex = this._workSpace.getCellIndexByCoordinates(coordinates);\n\n    var becomeAllDay = targetedAppointment.allDay;\n    var wasAllDay = appointment.allDay;\n    var movedBetweenAllDayAndSimple = this._workSpace.supportAllDayRow() && (wasAllDay && !becomeAllDay || !wasAllDay && becomeAllDay);\n    var isDragAndDropBetweenComponents = event.fromComponent !== event.toComponent;\n\n    if (newCellIndex !== oldCellIndex || isDragAndDropBetweenComponents || movedBetweenAllDayAndSimple) {\n      this._checkRecurringAppointment(rawAppointment, targetedRawAppointment, info.sourceAppointment.exceptionDate, function () {\n        this._updateAppointment(rawAppointment, targetedRawAppointment, function () {\n          this._appointments.moveAppointmentBack(event);\n        }, event);\n      }.bind(this), void 0, void 0, event);\n    } else {\n      this._appointments.moveAppointmentBack(event);\n    }\n  },\n  onDeleteButtonPress: function (options) {\n    var targetedData = this.getTargetedAppointment(options.data, $(options.target));\n    this.checkAndDeleteAppointment(options.data, targetedData);\n    this.hideAppointmentTooltip();\n  },\n\n  getTextAndFormatDate(appointmentRaw, targetedAppointmentRaw, format) {\n    var appointmentAdapter = createAppointmentAdapter(appointmentRaw, this._dataAccessors, this.timeZoneCalculator);\n    var targetedAdapter = createAppointmentAdapter(targetedAppointmentRaw || appointmentRaw, this._dataAccessors, this.timeZoneCalculator);\n    var startDate = this.timeZoneCalculator.createDate(targetedAdapter.startDate, {\n      path: \"toGrid\"\n    });\n    var endDate = this.timeZoneCalculator.createDate(targetedAdapter.endDate, {\n      path: \"toGrid\"\n    });\n    var formatType = format || getFormatType(startDate, endDate, targetedAdapter.allDay, \"month\" !== this.currentViewType);\n    return {\n      text: targetedAdapter.text || appointmentAdapter.text,\n      formatDate: formatDates(startDate, endDate, formatType)\n    };\n  },\n\n  _createAppointmentTitle(data) {\n    if (isPlainObject(data)) {\n      return data.text;\n    }\n\n    return String(data);\n  },\n\n  getResizableAppointmentArea: function (options) {\n    var allDay = options.allDay;\n\n    var groups = this._getCurrentViewOption(\"groups\");\n\n    if (groups && groups.length) {\n      if (allDay || this.getLayoutManager().getRenderingStrategyInstance()._needHorizontalGroupBounds()) {\n        var horizontalGroupBounds = this._workSpace.getGroupBounds(options.coordinates);\n\n        return {\n          left: horizontalGroupBounds.left,\n          right: horizontalGroupBounds.right,\n          top: 0,\n          bottom: 0\n        };\n      }\n\n      if (this.getLayoutManager().getRenderingStrategyInstance()._needVerticalGroupBounds(allDay) && this._workSpace._isVerticalGroupedWorkSpace()) {\n        var verticalGroupBounds = this._workSpace.getGroupBounds(options.coordinates);\n\n        return {\n          left: 0,\n          right: 0,\n          top: verticalGroupBounds.top,\n          bottom: verticalGroupBounds.bottom\n        };\n      }\n    }\n  },\n  needRecalculateResizableArea: function () {\n    return this.getWorkSpace().needRecalculateResizableArea();\n  },\n  getAppointmentGeometry: function (settings) {\n    return this.getLayoutManager().getRenderingStrategyInstance().getAppointmentGeometry(settings);\n  },\n  isAllDay: function (appointmentData) {\n    return this.getLayoutManager().getRenderingStrategyInstance().isAllDay(appointmentData);\n  },\n  getDeltaTime: function (e, initialSize, itemData) {\n    return this.getLayoutManager().getRenderingStrategyInstance().getDeltaTime(e, initialSize, itemData);\n  },\n  getDropDownAppointmentWidth: function (isAllDay) {\n    return this.getLayoutManager().getRenderingStrategyInstance().getDropDownAppointmentWidth(this._getViewCountConfig().intervalCount, isAllDay);\n  },\n  getDropDownAppointmentHeight: function () {\n    return this.getLayoutManager().getRenderingStrategyInstance().getDropDownAppointmentHeight();\n  },\n  getCellWidth: function () {\n    return this.getWorkSpace().getCellWidth();\n  },\n  getCellHeight: function () {\n    return this.getWorkSpace().getCellHeight();\n  },\n  getMaxAppointmentCountPerCellByType: function (isAllDay) {\n    return this.getRenderingStrategyInstance()._getMaxAppointmentCountPerCellByType(isAllDay);\n  },\n  needCorrectAppointmentDates: function () {\n    return this.getRenderingStrategyInstance().needCorrectAppointmentDates();\n  },\n  getRenderingStrategyDirection: function () {\n    return this.getRenderingStrategyInstance().getDirection();\n  },\n  updateAppointmentEndDate: function (options) {\n    var endDate = options.endDate;\n\n    var endDayHour = this._getCurrentViewOption(\"endDayHour\");\n\n    var startDayHour = this._getCurrentViewOption(\"startDayHour\");\n\n    var updatedEndDate = endDate;\n\n    if (endDate.getHours() >= endDayHour) {\n      updatedEndDate.setHours(endDayHour, 0, 0, 0);\n    } else if (!options.isSameDate && startDayHour > 0 && 60 * endDate.getHours() + endDate.getMinutes() < 60 * startDayHour) {\n      updatedEndDate = new Date(updatedEndDate.getTime() - toMs(\"day\"));\n      updatedEndDate.setHours(endDayHour, 0, 0, 0);\n    }\n\n    return updatedEndDate;\n  },\n  renderCompactAppointments: function (options) {\n    this._compactAppointmentsHelper.render(options);\n  },\n  clearCompactAppointments: function () {\n    this._compactAppointmentsHelper.clear();\n  },\n  supportCompactDropDownAppointments: function () {\n    return this.getLayoutManager().getRenderingStrategyInstance().supportCompactDropDownAppointments();\n  },\n  getGroupCount: function () {\n    return this._workSpace._getGroupCount();\n  },\n  mapAppointmentFields: function (config) {\n    var {\n      itemData: itemData,\n      itemElement: itemElement,\n      targetedAppointment: targetedAppointment\n    } = config;\n    var targetedData = targetedAppointment || this.getTargetedAppointment(itemData, itemElement);\n    return {\n      appointmentData: config.itemData,\n      appointmentElement: config.itemElement,\n      targetedAppointmentData: targetedData\n    };\n  },\n  dayHasAppointment: function (day, appointment, trimTime) {\n    return this.dayHasAppointment(day, appointment, trimTime);\n  },\n  getLayoutManager: function () {\n    return this._layoutManager;\n  },\n  getAgendaVerticalStepHeight: function () {\n    return this.getWorkSpace().getAgendaVerticalStepHeight();\n  },\n  getAgendaDuration: function () {\n    return this._getCurrentViewOption(\"agendaDuration\");\n  },\n  getStartViewDate: function () {\n    return this.getStartViewDate();\n  },\n  getEndViewDate: function () {\n    return this.getEndViewDate();\n  },\n  forceMaxAppointmentPerCell: function () {\n    return this.forceMaxAppointmentPerCell();\n  },\n  onAgendaReady: function (rows) {\n    var $appts = this.getAppointmentsInstance()._itemElements();\n\n    var total = 0;\n\n    var applyClass = function (_, count) {\n      var index = count + total - 1;\n      $appts.eq(index).addClass(AGENDA_LAST_IN_DATE_APPOINTMENT_CLASS);\n      total += count;\n    };\n\n    for (var i = 0; i < rows.length; i++) {\n      each(rows[i], applyClass);\n    }\n  },\n  getTimezone: function () {\n    return this._getTimezoneOffsetByOption();\n  },\n  getTargetedAppointmentData: function (appointment, element) {\n    return this.getTargetedAppointment(appointment, element);\n  },\n  getEndDayHour: function () {\n    return this._workSpace.option(\"endDayHour\") || this.option(\"endDayHour\");\n  },\n  getStartDayHour: function () {\n    return this._workSpace.option(\"startDayHour\") || this.option(\"startDayHour\");\n  },\n  isAdaptive: function () {\n    return this.option(\"adaptivityEnabled\");\n  },\n  removeDroppableCellClass: function () {\n    this._workSpace.removeDroppableCellClass();\n  }\n};\nexport default subscribes;","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/scheduler/subscribes.js"],"names":["$","isPlainObject","dateUtils","each","extend","AGENDA_LAST_IN_DATE_APPOINTMENT_CLASS","utils","createAppointmentAdapter","getFormatType","formatDates","toMs","dateToMilliseconds","subscribes","isCurrentViewAgenda","currentViewType","currentViewUpdated","currentView","option","currentDateUpdated","date","getOption","name","getWorkspaceOption","getWorkSpace","isVirtualScrolling","setCellDataCacheAlias","appointment","geometry","_workSpace","isGroupedByDate","showAppointmentTooltip","options","targetedAppointment","getTargetedAppointment","data","target","hideAppointmentTooltip","showEditAppointmentPopup","targetedData","showAppointmentPopup","updateAppointmentAfterResize","info","dataAccessors","getAppointmentInfo","$appointment","exceptionDate","sourceAppointment","_checkRecurringAppointment","_updateAppointment","_appointments","moveAppointmentBack","bind","getUpdatedData","rawAppointment","_getUpdatedData","updateAppointmentAfterDrag","_ref","event","element","coordinates","_dataAccessors","timeZoneCalculator","targetedRawAppointment","source","newCellIndex","getDroppableCellIndex","oldCellIndex","getCellIndexByCoordinates","becomeAllDay","allDay","wasAllDay","movedBetweenAllDayAndSimple","supportAllDayRow","isDragAndDropBetweenComponents","fromComponent","toComponent","onDeleteButtonPress","checkAndDeleteAppointment","getTextAndFormatDate","appointmentRaw","targetedAppointmentRaw","format","appointmentAdapter","targetedAdapter","startDate","createDate","path","endDate","formatType","text","formatDate","_createAppointmentTitle","String","getResizableAppointmentArea","groups","_getCurrentViewOption","length","getLayoutManager","getRenderingStrategyInstance","_needHorizontalGroupBounds","horizontalGroupBounds","getGroupBounds","left","right","top","bottom","_needVerticalGroupBounds","_isVerticalGroupedWorkSpace","verticalGroupBounds","needRecalculateResizableArea","getAppointmentGeometry","settings","isAllDay","appointmentData","getDeltaTime","e","initialSize","itemData","getDropDownAppointmentWidth","_getViewCountConfig","intervalCount","getDropDownAppointmentHeight","getCellWidth","getCellHeight","getMaxAppointmentCountPerCellByType","_getMaxAppointmentCountPerCellByType","needCorrectAppointmentDates","getRenderingStrategyDirection","getDirection","updateAppointmentEndDate","endDayHour","startDayHour","updatedEndDate","getHours","setHours","isSameDate","getMinutes","Date","getTime","renderCompactAppointments","_compactAppointmentsHelper","render","clearCompactAppointments","clear","supportCompactDropDownAppointments","getGroupCount","_getGroupCount","mapAppointmentFields","config","itemElement","appointmentElement","targetedAppointmentData","dayHasAppointment","day","trimTime","_layoutManager","getAgendaVerticalStepHeight","getAgendaDuration","getStartViewDate","getEndViewDate","forceMaxAppointmentPerCell","onAgendaReady","rows","$appts","getAppointmentsInstance","_itemElements","total","applyClass","_","count","index","eq","addClass","i","getTimezone","_getTimezoneOffsetByOption","getTargetedAppointmentData","getEndDayHour","getStartDayHour","isAdaptive","removeDroppableCellClass"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/subscribes.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    isPlainObject\r\n} from \"../../core/utils/type\";\r\nimport dateUtils from \"../../core/utils/date\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    AGENDA_LAST_IN_DATE_APPOINTMENT_CLASS\r\n} from \"./classes\";\r\nimport {\r\n    utils\r\n} from \"./utils\";\r\nimport {\r\n    createAppointmentAdapter\r\n} from \"./appointmentAdapter\";\r\nimport {\r\n    getFormatType,\r\n    formatDates\r\n} from \"./appointments/textUtils\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar subscribes = {\r\n    isCurrentViewAgenda: function() {\r\n        return \"agenda\" === this.currentViewType\r\n    },\r\n    currentViewUpdated: function(currentView) {\r\n        this.option(\"currentView\", currentView)\r\n    },\r\n    currentDateUpdated: function(date) {\r\n        this.option(\"currentDate\", date)\r\n    },\r\n    getOption: function(name) {\r\n        return this.option(name)\r\n    },\r\n    getWorkspaceOption: function(name) {\r\n        return this.getWorkSpace().option(name)\r\n    },\r\n    isVirtualScrolling: function() {\r\n        return this.isVirtualScrolling()\r\n    },\r\n    setCellDataCacheAlias: function(appointment, geometry) {\r\n        this._workSpace.setCellDataCacheAlias(appointment, geometry)\r\n    },\r\n    isGroupedByDate: function() {\r\n        return this.getWorkSpace().isGroupedByDate()\r\n    },\r\n    showAppointmentTooltip: function(options) {\r\n        var targetedAppointment = this.getTargetedAppointment(options.data, options.target);\r\n        this.showAppointmentTooltip(options.data, options.target, targetedAppointment)\r\n    },\r\n    hideAppointmentTooltip: function() {\r\n        this.hideAppointmentTooltip()\r\n    },\r\n    showEditAppointmentPopup: function(options) {\r\n        var targetedData = this.getTargetedAppointment(options.data, options.target);\r\n        this.showAppointmentPopup(options.data, false, targetedData)\r\n    },\r\n    updateAppointmentAfterResize: function(options) {\r\n        var info = utils.dataAccessors.getAppointmentInfo(options.$appointment);\r\n        var exceptionDate = info.sourceAppointment.exceptionDate;\r\n        this._checkRecurringAppointment(options.target, options.data, exceptionDate, function() {\r\n            this._updateAppointment(options.target, options.data, (function() {\r\n                this._appointments.moveAppointmentBack()\r\n            }))\r\n        }.bind(this))\r\n    },\r\n    getUpdatedData: function(rawAppointment) {\r\n        return this._getUpdatedData(rawAppointment)\r\n    },\r\n    updateAppointmentAfterDrag: function(_ref) {\r\n        var {\r\n            event: event,\r\n            element: element,\r\n            rawAppointment: rawAppointment,\r\n            coordinates: coordinates\r\n        } = _ref;\r\n        var info = utils.dataAccessors.getAppointmentInfo(element);\r\n        var appointment = createAppointmentAdapter(rawAppointment, this._dataAccessors, this.timeZoneCalculator);\r\n        var targetedAppointment = createAppointmentAdapter(extend({}, rawAppointment, this._getUpdatedData(rawAppointment)), this._dataAccessors, this.timeZoneCalculator);\r\n        var targetedRawAppointment = targetedAppointment.source();\r\n        var newCellIndex = this._workSpace.getDroppableCellIndex();\r\n        var oldCellIndex = this._workSpace.getCellIndexByCoordinates(coordinates);\r\n        var becomeAllDay = targetedAppointment.allDay;\r\n        var wasAllDay = appointment.allDay;\r\n        var movedBetweenAllDayAndSimple = this._workSpace.supportAllDayRow() && (wasAllDay && !becomeAllDay || !wasAllDay && becomeAllDay);\r\n        var isDragAndDropBetweenComponents = event.fromComponent !== event.toComponent;\r\n        if (newCellIndex !== oldCellIndex || isDragAndDropBetweenComponents || movedBetweenAllDayAndSimple) {\r\n            this._checkRecurringAppointment(rawAppointment, targetedRawAppointment, info.sourceAppointment.exceptionDate, function() {\r\n                this._updateAppointment(rawAppointment, targetedRawAppointment, (function() {\r\n                    this._appointments.moveAppointmentBack(event)\r\n                }), event)\r\n            }.bind(this), void 0, void 0, event)\r\n        } else {\r\n            this._appointments.moveAppointmentBack(event)\r\n        }\r\n    },\r\n    onDeleteButtonPress: function(options) {\r\n        var targetedData = this.getTargetedAppointment(options.data, $(options.target));\r\n        this.checkAndDeleteAppointment(options.data, targetedData);\r\n        this.hideAppointmentTooltip()\r\n    },\r\n    getTextAndFormatDate(appointmentRaw, targetedAppointmentRaw, format) {\r\n        var appointmentAdapter = createAppointmentAdapter(appointmentRaw, this._dataAccessors, this.timeZoneCalculator);\r\n        var targetedAdapter = createAppointmentAdapter(targetedAppointmentRaw || appointmentRaw, this._dataAccessors, this.timeZoneCalculator);\r\n        var startDate = this.timeZoneCalculator.createDate(targetedAdapter.startDate, {\r\n            path: \"toGrid\"\r\n        });\r\n        var endDate = this.timeZoneCalculator.createDate(targetedAdapter.endDate, {\r\n            path: \"toGrid\"\r\n        });\r\n        var formatType = format || getFormatType(startDate, endDate, targetedAdapter.allDay, \"month\" !== this.currentViewType);\r\n        return {\r\n            text: targetedAdapter.text || appointmentAdapter.text,\r\n            formatDate: formatDates(startDate, endDate, formatType)\r\n        }\r\n    },\r\n    _createAppointmentTitle(data) {\r\n        if (isPlainObject(data)) {\r\n            return data.text\r\n        }\r\n        return String(data)\r\n    },\r\n    getResizableAppointmentArea: function(options) {\r\n        var allDay = options.allDay;\r\n        var groups = this._getCurrentViewOption(\"groups\");\r\n        if (groups && groups.length) {\r\n            if (allDay || this.getLayoutManager().getRenderingStrategyInstance()._needHorizontalGroupBounds()) {\r\n                var horizontalGroupBounds = this._workSpace.getGroupBounds(options.coordinates);\r\n                return {\r\n                    left: horizontalGroupBounds.left,\r\n                    right: horizontalGroupBounds.right,\r\n                    top: 0,\r\n                    bottom: 0\r\n                }\r\n            }\r\n            if (this.getLayoutManager().getRenderingStrategyInstance()._needVerticalGroupBounds(allDay) && this._workSpace._isVerticalGroupedWorkSpace()) {\r\n                var verticalGroupBounds = this._workSpace.getGroupBounds(options.coordinates);\r\n                return {\r\n                    left: 0,\r\n                    right: 0,\r\n                    top: verticalGroupBounds.top,\r\n                    bottom: verticalGroupBounds.bottom\r\n                }\r\n            }\r\n        }\r\n    },\r\n    needRecalculateResizableArea: function() {\r\n        return this.getWorkSpace().needRecalculateResizableArea()\r\n    },\r\n    getAppointmentGeometry: function(settings) {\r\n        return this.getLayoutManager().getRenderingStrategyInstance().getAppointmentGeometry(settings)\r\n    },\r\n    isAllDay: function(appointmentData) {\r\n        return this.getLayoutManager().getRenderingStrategyInstance().isAllDay(appointmentData)\r\n    },\r\n    getDeltaTime: function(e, initialSize, itemData) {\r\n        return this.getLayoutManager().getRenderingStrategyInstance().getDeltaTime(e, initialSize, itemData)\r\n    },\r\n    getDropDownAppointmentWidth: function(isAllDay) {\r\n        return this.getLayoutManager().getRenderingStrategyInstance().getDropDownAppointmentWidth(this._getViewCountConfig().intervalCount, isAllDay)\r\n    },\r\n    getDropDownAppointmentHeight: function() {\r\n        return this.getLayoutManager().getRenderingStrategyInstance().getDropDownAppointmentHeight()\r\n    },\r\n    getCellWidth: function() {\r\n        return this.getWorkSpace().getCellWidth()\r\n    },\r\n    getCellHeight: function() {\r\n        return this.getWorkSpace().getCellHeight()\r\n    },\r\n    getMaxAppointmentCountPerCellByType: function(isAllDay) {\r\n        return this.getRenderingStrategyInstance()._getMaxAppointmentCountPerCellByType(isAllDay)\r\n    },\r\n    needCorrectAppointmentDates: function() {\r\n        return this.getRenderingStrategyInstance().needCorrectAppointmentDates()\r\n    },\r\n    getRenderingStrategyDirection: function() {\r\n        return this.getRenderingStrategyInstance().getDirection()\r\n    },\r\n    updateAppointmentEndDate: function(options) {\r\n        var endDate = options.endDate;\r\n        var endDayHour = this._getCurrentViewOption(\"endDayHour\");\r\n        var startDayHour = this._getCurrentViewOption(\"startDayHour\");\r\n        var updatedEndDate = endDate;\r\n        if (endDate.getHours() >= endDayHour) {\r\n            updatedEndDate.setHours(endDayHour, 0, 0, 0)\r\n        } else if (!options.isSameDate && startDayHour > 0 && 60 * endDate.getHours() + endDate.getMinutes() < 60 * startDayHour) {\r\n            updatedEndDate = new Date(updatedEndDate.getTime() - toMs(\"day\"));\r\n            updatedEndDate.setHours(endDayHour, 0, 0, 0)\r\n        }\r\n        return updatedEndDate\r\n    },\r\n    renderCompactAppointments: function(options) {\r\n        this._compactAppointmentsHelper.render(options)\r\n    },\r\n    clearCompactAppointments: function() {\r\n        this._compactAppointmentsHelper.clear()\r\n    },\r\n    supportCompactDropDownAppointments: function() {\r\n        return this.getLayoutManager().getRenderingStrategyInstance().supportCompactDropDownAppointments()\r\n    },\r\n    getGroupCount: function() {\r\n        return this._workSpace._getGroupCount()\r\n    },\r\n    mapAppointmentFields: function(config) {\r\n        var {\r\n            itemData: itemData,\r\n            itemElement: itemElement,\r\n            targetedAppointment: targetedAppointment\r\n        } = config;\r\n        var targetedData = targetedAppointment || this.getTargetedAppointment(itemData, itemElement);\r\n        return {\r\n            appointmentData: config.itemData,\r\n            appointmentElement: config.itemElement,\r\n            targetedAppointmentData: targetedData\r\n        }\r\n    },\r\n    dayHasAppointment: function(day, appointment, trimTime) {\r\n        return this.dayHasAppointment(day, appointment, trimTime)\r\n    },\r\n    getLayoutManager: function() {\r\n        return this._layoutManager\r\n    },\r\n    getAgendaVerticalStepHeight: function() {\r\n        return this.getWorkSpace().getAgendaVerticalStepHeight()\r\n    },\r\n    getAgendaDuration: function() {\r\n        return this._getCurrentViewOption(\"agendaDuration\")\r\n    },\r\n    getStartViewDate: function() {\r\n        return this.getStartViewDate()\r\n    },\r\n    getEndViewDate: function() {\r\n        return this.getEndViewDate()\r\n    },\r\n    forceMaxAppointmentPerCell: function() {\r\n        return this.forceMaxAppointmentPerCell()\r\n    },\r\n    onAgendaReady: function(rows) {\r\n        var $appts = this.getAppointmentsInstance()._itemElements();\r\n        var total = 0;\r\n        var applyClass = function(_, count) {\r\n            var index = count + total - 1;\r\n            $appts.eq(index).addClass(AGENDA_LAST_IN_DATE_APPOINTMENT_CLASS);\r\n            total += count\r\n        };\r\n        for (var i = 0; i < rows.length; i++) {\r\n            each(rows[i], applyClass)\r\n        }\r\n    },\r\n    getTimezone: function() {\r\n        return this._getTimezoneOffsetByOption()\r\n    },\r\n    getTargetedAppointmentData: function(appointment, element) {\r\n        return this.getTargetedAppointment(appointment, element)\r\n    },\r\n    getEndDayHour: function() {\r\n        return this._workSpace.option(\"endDayHour\") || this.option(\"endDayHour\")\r\n    },\r\n    getStartDayHour: function() {\r\n        return this._workSpace.option(\"startDayHour\") || this.option(\"startDayHour\")\r\n    },\r\n    isAdaptive: function() {\r\n        return this.option(\"adaptivityEnabled\")\r\n    },\r\n    removeDroppableCellClass: function() {\r\n        this._workSpace.removeDroppableCellClass()\r\n    }\r\n};\r\nexport default subscribes;\r\n"]},"metadata":{},"sourceType":"module"}