{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/utils/recurrence/excludeFromRecurrence.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { createAppointmentAdapter } from \"../../../../../ui/scheduler/appointmentAdapter\";\nimport dateSerialization from \"../../../../../core/utils/date_serialization\";\nvar FULL_DATE_FORMAT = \"yyyyMMddTHHmmss\";\nvar UTC_FULL_DATE_FORMAT = \"\".concat(FULL_DATE_FORMAT, \"Z\");\n\nvar getSerializedDate = (date, startDate, isAllDay) => {\n  if (isAllDay) {\n    date.setHours(startDate.getHours(), startDate.getMinutes(), startDate.getSeconds(), startDate.getMilliseconds());\n  }\n\n  return dateSerialization.serializeDate(date, UTC_FULL_DATE_FORMAT);\n};\n\nvar createRecurrenceException = (appointmentAdapter, exceptionDate) => {\n  var result = [];\n\n  if (appointmentAdapter.recurrenceException) {\n    result.push(appointmentAdapter.recurrenceException);\n  }\n\n  result.push(getSerializedDate(exceptionDate, appointmentAdapter.startDate, appointmentAdapter.allDay));\n  return result.join();\n};\n\nexport var excludeFromRecurrence = (appointment, exceptionDate, dataAccessors, timeZoneCalculator) => {\n  var appointmentAdapter = createAppointmentAdapter(_extends({}, appointment), dataAccessors, timeZoneCalculator);\n  appointmentAdapter.recurrenceException = createRecurrenceException(appointmentAdapter, exceptionDate);\n  return appointmentAdapter;\n};","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/renovation/ui/scheduler/utils/recurrence/excludeFromRecurrence.js"],"names":["_extends","createAppointmentAdapter","dateSerialization","FULL_DATE_FORMAT","UTC_FULL_DATE_FORMAT","concat","getSerializedDate","date","startDate","isAllDay","setHours","getHours","getMinutes","getSeconds","getMilliseconds","serializeDate","createRecurrenceException","appointmentAdapter","exceptionDate","result","recurrenceException","push","allDay","join","excludeFromRecurrence","appointment","dataAccessors","timeZoneCalculator"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,QAAP,MAAqB,oCAArB;AACA,SACIC,wBADJ,QAEO,gDAFP;AAGA,OAAOC,iBAAP,MAA8B,8CAA9B;AACA,IAAIC,gBAAgB,GAAG,iBAAvB;AACA,IAAIC,oBAAoB,GAAG,GAAGC,MAAH,CAAUF,gBAAV,EAA4B,GAA5B,CAA3B;;AACA,IAAIG,iBAAiB,GAAG,CAACC,IAAD,EAAOC,SAAP,EAAkBC,QAAlB,KAA+B;AACnD,MAAIA,QAAJ,EAAc;AACVF,IAAAA,IAAI,CAACG,QAAL,CAAcF,SAAS,CAACG,QAAV,EAAd,EAAoCH,SAAS,CAACI,UAAV,EAApC,EAA4DJ,SAAS,CAACK,UAAV,EAA5D,EAAoFL,SAAS,CAACM,eAAV,EAApF;AACH;;AACD,SAAOZ,iBAAiB,CAACa,aAAlB,CAAgCR,IAAhC,EAAsCH,oBAAtC,CAAP;AACH,CALD;;AAMA,IAAIY,yBAAyB,GAAG,CAACC,kBAAD,EAAqBC,aAArB,KAAuC;AACnE,MAAIC,MAAM,GAAG,EAAb;;AACA,MAAIF,kBAAkB,CAACG,mBAAvB,EAA4C;AACxCD,IAAAA,MAAM,CAACE,IAAP,CAAYJ,kBAAkB,CAACG,mBAA/B;AACH;;AACDD,EAAAA,MAAM,CAACE,IAAP,CAAYf,iBAAiB,CAACY,aAAD,EAAgBD,kBAAkB,CAACT,SAAnC,EAA8CS,kBAAkB,CAACK,MAAjE,CAA7B;AACA,SAAOH,MAAM,CAACI,IAAP,EAAP;AACH,CAPD;;AAQA,OAAO,IAAIC,qBAAqB,GAAG,CAACC,WAAD,EAAcP,aAAd,EAA6BQ,aAA7B,EAA4CC,kBAA5C,KAAmE;AAClG,MAAIV,kBAAkB,GAAGhB,wBAAwB,CAACD,QAAQ,CAAC,EAAD,EAAKyB,WAAL,CAAT,EAA4BC,aAA5B,EAA2CC,kBAA3C,CAAjD;AACAV,EAAAA,kBAAkB,CAACG,mBAAnB,GAAyCJ,yBAAyB,CAACC,kBAAD,EAAqBC,aAArB,CAAlE;AACA,SAAOD,kBAAP;AACH,CAJM","sourcesContent":["/**\r\n * DevExtreme (esm/renovation/ui/scheduler/utils/recurrence/excludeFromRecurrence.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    createAppointmentAdapter\r\n} from \"../../../../../ui/scheduler/appointmentAdapter\";\r\nimport dateSerialization from \"../../../../../core/utils/date_serialization\";\r\nvar FULL_DATE_FORMAT = \"yyyyMMddTHHmmss\";\r\nvar UTC_FULL_DATE_FORMAT = \"\".concat(FULL_DATE_FORMAT, \"Z\");\r\nvar getSerializedDate = (date, startDate, isAllDay) => {\r\n    if (isAllDay) {\r\n        date.setHours(startDate.getHours(), startDate.getMinutes(), startDate.getSeconds(), startDate.getMilliseconds())\r\n    }\r\n    return dateSerialization.serializeDate(date, UTC_FULL_DATE_FORMAT)\r\n};\r\nvar createRecurrenceException = (appointmentAdapter, exceptionDate) => {\r\n    var result = [];\r\n    if (appointmentAdapter.recurrenceException) {\r\n        result.push(appointmentAdapter.recurrenceException)\r\n    }\r\n    result.push(getSerializedDate(exceptionDate, appointmentAdapter.startDate, appointmentAdapter.allDay));\r\n    return result.join()\r\n};\r\nexport var excludeFromRecurrence = (appointment, exceptionDate, dataAccessors, timeZoneCalculator) => {\r\n    var appointmentAdapter = createAppointmentAdapter(_extends({}, appointment), dataAccessors, timeZoneCalculator);\r\n    appointmentAdapter.recurrenceException = createRecurrenceException(appointmentAdapter, exceptionDate);\r\n    return appointmentAdapter\r\n};\r\n"]},"metadata":{},"sourceType":"module"}