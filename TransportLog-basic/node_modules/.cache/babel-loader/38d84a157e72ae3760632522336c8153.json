{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.vertical.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport { Cache } from \"./cache\";\nimport { FIRST_GROUP_CELL_CLASS, LAST_GROUP_CELL_CLASS } from \"../classes\";\nimport { calculateDayDuration, getVerticalGroupCountClass } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nvar DATE_HEADER_OFFSET = 10;\nvar WORK_SPACE_BORDER = 1;\n\nclass VerticalGroupedStrategy {\n  constructor(workSpace) {\n    this._workSpace = workSpace;\n    this.cache = new Cache();\n  }\n\n  prepareCellIndexes(cellCoordinates, groupIndex, inAllDayRow) {\n    var rowIndex = cellCoordinates.rowIndex + groupIndex * this._workSpace._getRowCount();\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      rowIndex += groupIndex;\n\n      if (!inAllDayRow) {\n        rowIndex += 1;\n      }\n    }\n\n    return {\n      rowIndex: rowIndex,\n      columnIndex: cellCoordinates.columnIndex\n    };\n  }\n\n  getGroupIndex(rowIndex) {\n    return Math.floor(rowIndex / this._workSpace._getRowCount());\n  }\n\n  calculateHeaderCellRepeatCount() {\n    return 1;\n  }\n\n  insertAllDayRowsIntoDateTable() {\n    return this._workSpace.option(\"showAllDayPanel\");\n  }\n\n  getTotalCellCount() {\n    return this._workSpace._getCellCount();\n  }\n\n  getTotalRowCount() {\n    return this._workSpace._getRowCount() * this._workSpace._getGroupCount();\n  }\n\n  calculateTimeCellRepeatCount() {\n    return this._workSpace._getGroupCount() || 1;\n  }\n\n  getWorkSpaceMinWidth() {\n    var minWidth = this._workSpace._getWorkSpaceWidth();\n\n    var workspaceContainerWidth = getBoundingRect(this._workSpace.$element().get(0)).width - this._workSpace.getTimePanelWidth() - this._workSpace.getGroupTableWidth() - 2 * WORK_SPACE_BORDER;\n\n    if (minWidth < workspaceContainerWidth) {\n      minWidth = workspaceContainerWidth;\n    }\n\n    return minWidth;\n  }\n\n  getAllDayOffset() {\n    return 0;\n  }\n\n  getGroupCountClass(groups) {\n    return getVerticalGroupCountClass(groups);\n  }\n\n  getLeftOffset() {\n    return this._workSpace.getTimePanelWidth() + this._workSpace.getGroupTableWidth();\n  }\n\n  getGroupBoundsOffset(groupIndex, _ref) {\n    var [$firstCell, $lastCell] = _ref;\n    return this.cache.get(\"groupBoundsOffset\".concat(groupIndex), () => {\n      var startDayHour = this._workSpace.option(\"startDayHour\");\n\n      var endDayHour = this._workSpace.option(\"endDayHour\");\n\n      var hoursInterval = this._workSpace.option(\"hoursInterval\");\n\n      var dayHeight = calculateDayDuration(startDayHour, endDayHour) / hoursInterval * this._workSpace.getCellHeight();\n\n      var scrollTop = this.getScrollableScrollTop();\n      var topOffset = groupIndex * dayHeight + getBoundingRect(this._workSpace._$thead.get(0)).height + this._workSpace.option(\"getHeaderHeight\")() + DATE_HEADER_OFFSET - scrollTop;\n\n      if (this._workSpace.option(\"showAllDayPanel\") && this._workSpace.supportAllDayRow()) {\n        topOffset += this._workSpace.getCellHeight() * (groupIndex + 1);\n      }\n\n      var bottomOffset = topOffset + dayHeight;\n      var {\n        left: left\n      } = $firstCell.getBoundingClientRect();\n      var {\n        right: right\n      } = $lastCell.getBoundingClientRect();\n      return this._groupBoundsOffset = {\n        left: left,\n        right: right,\n        top: topOffset,\n        bottom: bottomOffset\n      };\n    });\n  }\n\n  shiftIndicator($indicator, height, rtlOffset, i) {\n    var offset = this._workSpace.getIndicatorOffset(0);\n\n    var tableOffset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\n    var horizontalOffset = rtlOffset ? rtlOffset - offset : offset;\n    var verticalOffset = this._workSpace._getRowCount() * this._workSpace.getCellHeight() * i;\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      verticalOffset += this._workSpace.getAllDayHeight() * (i + 1);\n    }\n\n    $indicator.css(\"left\", horizontalOffset + tableOffset);\n    $indicator.css(\"top\", height + verticalOffset);\n  }\n\n  getShaderOffset(i, width) {\n    var offset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\n    return this._workSpace.option(\"rtlEnabled\") ? getBoundingRect(this._$container.get(0)).width - offset - this._workSpace.getWorkSpaceLeftOffset() - width : offset;\n  }\n\n  getShaderTopOffset(i) {\n    return 0;\n  }\n\n  getShaderHeight() {\n    var height = this._workSpace.getIndicationHeight();\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      height += this._workSpace.getCellHeight();\n    }\n\n    return height;\n  }\n\n  getShaderMaxHeight() {\n    var height = this._workSpace._getRowCount() * this._workSpace.getCellHeight();\n\n    if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\n      height += this._workSpace.getCellHeight();\n    }\n\n    return height;\n  }\n\n  getShaderWidth() {\n    return this._workSpace.getIndicationWidth(0);\n  }\n\n  getScrollableScrollTop() {\n    return this._workSpace.getScrollable().scrollTop();\n  }\n\n  addAdditionalGroupCellClasses(cellClass, index, i, j) {\n    cellClass = this._addLastGroupCellClass(cellClass, i + 1);\n    return this._addFirstGroupCellClass(cellClass, i + 1);\n  }\n\n  _addLastGroupCellClass(cellClass, index) {\n    if (index % this._workSpace._getRowCount() === 0) {\n      return \"\".concat(cellClass, \" \").concat(LAST_GROUP_CELL_CLASS);\n    }\n\n    return cellClass;\n  }\n\n  _addFirstGroupCellClass(cellClass, index) {\n    if ((index - 1) % this._workSpace._getRowCount() === 0) {\n      return \"\".concat(cellClass, \" \").concat(FIRST_GROUP_CELL_CLASS);\n    }\n\n    return cellClass;\n  }\n\n}\n\nexport default VerticalGroupedStrategy;","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.vertical.js"],"names":["getBoundingRect","Cache","FIRST_GROUP_CELL_CLASS","LAST_GROUP_CELL_CLASS","calculateDayDuration","getVerticalGroupCountClass","DATE_HEADER_OFFSET","WORK_SPACE_BORDER","VerticalGroupedStrategy","constructor","workSpace","_workSpace","cache","prepareCellIndexes","cellCoordinates","groupIndex","inAllDayRow","rowIndex","_getRowCount","supportAllDayRow","option","columnIndex","getGroupIndex","Math","floor","calculateHeaderCellRepeatCount","insertAllDayRowsIntoDateTable","getTotalCellCount","_getCellCount","getTotalRowCount","_getGroupCount","calculateTimeCellRepeatCount","getWorkSpaceMinWidth","minWidth","_getWorkSpaceWidth","workspaceContainerWidth","$element","get","width","getTimePanelWidth","getGroupTableWidth","getAllDayOffset","getGroupCountClass","groups","getLeftOffset","getGroupBoundsOffset","_ref","$firstCell","$lastCell","concat","startDayHour","endDayHour","hoursInterval","dayHeight","getCellHeight","scrollTop","getScrollableScrollTop","topOffset","_$thead","height","bottomOffset","left","getBoundingClientRect","right","_groupBoundsOffset","top","bottom","shiftIndicator","$indicator","rtlOffset","i","offset","getIndicatorOffset","tableOffset","horizontalOffset","verticalOffset","getAllDayHeight","css","getShaderOffset","_$container","getWorkSpaceLeftOffset","getShaderTopOffset","getShaderHeight","getIndicationHeight","getShaderMaxHeight","getShaderWidth","getIndicationWidth","getScrollable","addAdditionalGroupCellClasses","cellClass","index","j","_addLastGroupCellClass","_addFirstGroupCellClass"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,eADJ,QAEO,8BAFP;AAGA,SACIC,KADJ,QAEO,SAFP;AAGA,SACIC,sBADJ,EAEIC,qBAFJ,QAGO,YAHP;AAIA,SACIC,oBADJ,EAEIC,0BAFJ,QAGO,sEAHP;AAIA,IAAIC,kBAAkB,GAAG,EAAzB;AACA,IAAIC,iBAAiB,GAAG,CAAxB;;AACA,MAAMC,uBAAN,CAA8B;AAC1BC,EAAAA,WAAW,CAACC,SAAD,EAAY;AACnB,SAAKC,UAAL,GAAkBD,SAAlB;AACA,SAAKE,KAAL,GAAa,IAAIX,KAAJ,EAAb;AACH;;AACDY,EAAAA,kBAAkB,CAACC,eAAD,EAAkBC,UAAlB,EAA8BC,WAA9B,EAA2C;AACzD,QAAIC,QAAQ,GAAGH,eAAe,CAACG,QAAhB,GAA2BF,UAAU,GAAG,KAAKJ,UAAL,CAAgBO,YAAhB,EAAvD;;AACA,QAAI,KAAKP,UAAL,CAAgBQ,gBAAhB,MAAsC,KAAKR,UAAL,CAAgBS,MAAhB,CAAuB,iBAAvB,CAA1C,EAAqF;AACjFH,MAAAA,QAAQ,IAAIF,UAAZ;;AACA,UAAI,CAACC,WAAL,EAAkB;AACdC,QAAAA,QAAQ,IAAI,CAAZ;AACH;AACJ;;AACD,WAAO;AACHA,MAAAA,QAAQ,EAAEA,QADP;AAEHI,MAAAA,WAAW,EAAEP,eAAe,CAACO;AAF1B,KAAP;AAIH;;AACDC,EAAAA,aAAa,CAACL,QAAD,EAAW;AACpB,WAAOM,IAAI,CAACC,KAAL,CAAWP,QAAQ,GAAG,KAAKN,UAAL,CAAgBO,YAAhB,EAAtB,CAAP;AACH;;AACDO,EAAAA,8BAA8B,GAAG;AAC7B,WAAO,CAAP;AACH;;AACDC,EAAAA,6BAA6B,GAAG;AAC5B,WAAO,KAAKf,UAAL,CAAgBS,MAAhB,CAAuB,iBAAvB,CAAP;AACH;;AACDO,EAAAA,iBAAiB,GAAG;AAChB,WAAO,KAAKhB,UAAL,CAAgBiB,aAAhB,EAAP;AACH;;AACDC,EAAAA,gBAAgB,GAAG;AACf,WAAO,KAAKlB,UAAL,CAAgBO,YAAhB,KAAiC,KAAKP,UAAL,CAAgBmB,cAAhB,EAAxC;AACH;;AACDC,EAAAA,4BAA4B,GAAG;AAC3B,WAAO,KAAKpB,UAAL,CAAgBmB,cAAhB,MAAoC,CAA3C;AACH;;AACDE,EAAAA,oBAAoB,GAAG;AACnB,QAAIC,QAAQ,GAAG,KAAKtB,UAAL,CAAgBuB,kBAAhB,EAAf;;AACA,QAAIC,uBAAuB,GAAGnC,eAAe,CAAC,KAAKW,UAAL,CAAgByB,QAAhB,GAA2BC,GAA3B,CAA+B,CAA/B,CAAD,CAAf,CAAmDC,KAAnD,GAA2D,KAAK3B,UAAL,CAAgB4B,iBAAhB,EAA3D,GAAiG,KAAK5B,UAAL,CAAgB6B,kBAAhB,EAAjG,GAAwI,IAAIjC,iBAA1K;;AACA,QAAI0B,QAAQ,GAAGE,uBAAf,EAAwC;AACpCF,MAAAA,QAAQ,GAAGE,uBAAX;AACH;;AACD,WAAOF,QAAP;AACH;;AACDQ,EAAAA,eAAe,GAAG;AACd,WAAO,CAAP;AACH;;AACDC,EAAAA,kBAAkB,CAACC,MAAD,EAAS;AACvB,WAAOtC,0BAA0B,CAACsC,MAAD,CAAjC;AACH;;AACDC,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAKjC,UAAL,CAAgB4B,iBAAhB,KAAsC,KAAK5B,UAAL,CAAgB6B,kBAAhB,EAA7C;AACH;;AACDK,EAAAA,oBAAoB,CAAC9B,UAAD,EAAa+B,IAAb,EAAmB;AACnC,QAAI,CAACC,UAAD,EAAaC,SAAb,IAA0BF,IAA9B;AACA,WAAO,KAAKlC,KAAL,CAAWyB,GAAX,CAAe,oBAAoBY,MAApB,CAA2BlC,UAA3B,CAAf,EAAuD,MAAM;AAChE,UAAImC,YAAY,GAAG,KAAKvC,UAAL,CAAgBS,MAAhB,CAAuB,cAAvB,CAAnB;;AACA,UAAI+B,UAAU,GAAG,KAAKxC,UAAL,CAAgBS,MAAhB,CAAuB,YAAvB,CAAjB;;AACA,UAAIgC,aAAa,GAAG,KAAKzC,UAAL,CAAgBS,MAAhB,CAAuB,eAAvB,CAApB;;AACA,UAAIiC,SAAS,GAAGjD,oBAAoB,CAAC8C,YAAD,EAAeC,UAAf,CAApB,GAAiDC,aAAjD,GAAiE,KAAKzC,UAAL,CAAgB2C,aAAhB,EAAjF;;AACA,UAAIC,SAAS,GAAG,KAAKC,sBAAL,EAAhB;AACA,UAAIC,SAAS,GAAG1C,UAAU,GAAGsC,SAAb,GAAyBrD,eAAe,CAAC,KAAKW,UAAL,CAAgB+C,OAAhB,CAAwBrB,GAAxB,CAA4B,CAA5B,CAAD,CAAf,CAAgDsB,MAAzE,GAAkF,KAAKhD,UAAL,CAAgBS,MAAhB,CAAuB,iBAAvB,GAAlF,GAAgId,kBAAhI,GAAqJiD,SAArK;;AACA,UAAI,KAAK5C,UAAL,CAAgBS,MAAhB,CAAuB,iBAAvB,KAA6C,KAAKT,UAAL,CAAgBQ,gBAAhB,EAAjD,EAAqF;AACjFsC,QAAAA,SAAS,IAAI,KAAK9C,UAAL,CAAgB2C,aAAhB,MAAmCvC,UAAU,GAAG,CAAhD,CAAb;AACH;;AACD,UAAI6C,YAAY,GAAGH,SAAS,GAAGJ,SAA/B;AACA,UAAI;AACAQ,QAAAA,IAAI,EAAEA;AADN,UAEAd,UAAU,CAACe,qBAAX,EAFJ;AAGA,UAAI;AACAC,QAAAA,KAAK,EAAEA;AADP,UAEAf,SAAS,CAACc,qBAAV,EAFJ;AAGA,aAAO,KAAKE,kBAAL,GAA0B;AAC7BH,QAAAA,IAAI,EAAEA,IADuB;AAE7BE,QAAAA,KAAK,EAAEA,KAFsB;AAG7BE,QAAAA,GAAG,EAAER,SAHwB;AAI7BS,QAAAA,MAAM,EAAEN;AAJqB,OAAjC;AAMH,KAvBM,CAAP;AAwBH;;AACDO,EAAAA,cAAc,CAACC,UAAD,EAAaT,MAAb,EAAqBU,SAArB,EAAgCC,CAAhC,EAAmC;AAC7C,QAAIC,MAAM,GAAG,KAAK5D,UAAL,CAAgB6D,kBAAhB,CAAmC,CAAnC,CAAb;;AACA,QAAIC,WAAW,GAAG,KAAK9D,UAAL,CAAgBS,MAAhB,CAAuB,uBAAvB,IAAkD,CAAlD,GAAsD,KAAKT,UAAL,CAAgB6B,kBAAhB,EAAxE;AACA,QAAIkC,gBAAgB,GAAGL,SAAS,GAAGA,SAAS,GAAGE,MAAf,GAAwBA,MAAxD;AACA,QAAII,cAAc,GAAG,KAAKhE,UAAL,CAAgBO,YAAhB,KAAiC,KAAKP,UAAL,CAAgB2C,aAAhB,EAAjC,GAAmEgB,CAAxF;;AACA,QAAI,KAAK3D,UAAL,CAAgBQ,gBAAhB,MAAsC,KAAKR,UAAL,CAAgBS,MAAhB,CAAuB,iBAAvB,CAA1C,EAAqF;AACjFuD,MAAAA,cAAc,IAAI,KAAKhE,UAAL,CAAgBiE,eAAhB,MAAqCN,CAAC,GAAG,CAAzC,CAAlB;AACH;;AACDF,IAAAA,UAAU,CAACS,GAAX,CAAe,MAAf,EAAuBH,gBAAgB,GAAGD,WAA1C;AACAL,IAAAA,UAAU,CAACS,GAAX,CAAe,KAAf,EAAsBlB,MAAM,GAAGgB,cAA/B;AACH;;AACDG,EAAAA,eAAe,CAACR,CAAD,EAAIhC,KAAJ,EAAW;AACtB,QAAIiC,MAAM,GAAG,KAAK5D,UAAL,CAAgBS,MAAhB,CAAuB,uBAAvB,IAAkD,CAAlD,GAAsD,KAAKT,UAAL,CAAgB6B,kBAAhB,EAAnE;AACA,WAAO,KAAK7B,UAAL,CAAgBS,MAAhB,CAAuB,YAAvB,IAAuCpB,eAAe,CAAC,KAAK+E,WAAL,CAAiB1C,GAAjB,CAAqB,CAArB,CAAD,CAAf,CAAyCC,KAAzC,GAAiDiC,MAAjD,GAA0D,KAAK5D,UAAL,CAAgBqE,sBAAhB,EAA1D,GAAqG1C,KAA5I,GAAoJiC,MAA3J;AACH;;AACDU,EAAAA,kBAAkB,CAACX,CAAD,EAAI;AAClB,WAAO,CAAP;AACH;;AACDY,EAAAA,eAAe,GAAG;AACd,QAAIvB,MAAM,GAAG,KAAKhD,UAAL,CAAgBwE,mBAAhB,EAAb;;AACA,QAAI,KAAKxE,UAAL,CAAgBQ,gBAAhB,MAAsC,KAAKR,UAAL,CAAgBS,MAAhB,CAAuB,iBAAvB,CAA1C,EAAqF;AACjFuC,MAAAA,MAAM,IAAI,KAAKhD,UAAL,CAAgB2C,aAAhB,EAAV;AACH;;AACD,WAAOK,MAAP;AACH;;AACDyB,EAAAA,kBAAkB,GAAG;AACjB,QAAIzB,MAAM,GAAG,KAAKhD,UAAL,CAAgBO,YAAhB,KAAiC,KAAKP,UAAL,CAAgB2C,aAAhB,EAA9C;;AACA,QAAI,KAAK3C,UAAL,CAAgBQ,gBAAhB,MAAsC,KAAKR,UAAL,CAAgBS,MAAhB,CAAuB,iBAAvB,CAA1C,EAAqF;AACjFuC,MAAAA,MAAM,IAAI,KAAKhD,UAAL,CAAgB2C,aAAhB,EAAV;AACH;;AACD,WAAOK,MAAP;AACH;;AACD0B,EAAAA,cAAc,GAAG;AACb,WAAO,KAAK1E,UAAL,CAAgB2E,kBAAhB,CAAmC,CAAnC,CAAP;AACH;;AACD9B,EAAAA,sBAAsB,GAAG;AACrB,WAAO,KAAK7C,UAAL,CAAgB4E,aAAhB,GAAgChC,SAAhC,EAAP;AACH;;AACDiC,EAAAA,6BAA6B,CAACC,SAAD,EAAYC,KAAZ,EAAmBpB,CAAnB,EAAsBqB,CAAtB,EAAyB;AAClDF,IAAAA,SAAS,GAAG,KAAKG,sBAAL,CAA4BH,SAA5B,EAAuCnB,CAAC,GAAG,CAA3C,CAAZ;AACA,WAAO,KAAKuB,uBAAL,CAA6BJ,SAA7B,EAAwCnB,CAAC,GAAG,CAA5C,CAAP;AACH;;AACDsB,EAAAA,sBAAsB,CAACH,SAAD,EAAYC,KAAZ,EAAmB;AACrC,QAAIA,KAAK,GAAG,KAAK/E,UAAL,CAAgBO,YAAhB,EAAR,KAA2C,CAA/C,EAAkD;AAC9C,aAAO,GAAG+B,MAAH,CAAUwC,SAAV,EAAqB,GAArB,EAA0BxC,MAA1B,CAAiC9C,qBAAjC,CAAP;AACH;;AACD,WAAOsF,SAAP;AACH;;AACDI,EAAAA,uBAAuB,CAACJ,SAAD,EAAYC,KAAZ,EAAmB;AACtC,QAAI,CAACA,KAAK,GAAG,CAAT,IAAc,KAAK/E,UAAL,CAAgBO,YAAhB,EAAd,KAAiD,CAArD,EAAwD;AACpD,aAAO,GAAG+B,MAAH,CAAUwC,SAAV,EAAqB,GAArB,EAA0BxC,MAA1B,CAAiC/C,sBAAjC,CAAP;AACH;;AACD,WAAOuF,SAAP;AACH;;AArIyB;;AAuI9B,eAAejF,uBAAf","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.grouped.strategy.vertical.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport {\r\n    Cache\r\n} from \"./cache\";\r\nimport {\r\n    FIRST_GROUP_CELL_CLASS,\r\n    LAST_GROUP_CELL_CLASS\r\n} from \"../classes\";\r\nimport {\r\n    calculateDayDuration,\r\n    getVerticalGroupCountClass\r\n} from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nvar DATE_HEADER_OFFSET = 10;\r\nvar WORK_SPACE_BORDER = 1;\r\nclass VerticalGroupedStrategy {\r\n    constructor(workSpace) {\r\n        this._workSpace = workSpace;\r\n        this.cache = new Cache\r\n    }\r\n    prepareCellIndexes(cellCoordinates, groupIndex, inAllDayRow) {\r\n        var rowIndex = cellCoordinates.rowIndex + groupIndex * this._workSpace._getRowCount();\r\n        if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\r\n            rowIndex += groupIndex;\r\n            if (!inAllDayRow) {\r\n                rowIndex += 1\r\n            }\r\n        }\r\n        return {\r\n            rowIndex: rowIndex,\r\n            columnIndex: cellCoordinates.columnIndex\r\n        }\r\n    }\r\n    getGroupIndex(rowIndex) {\r\n        return Math.floor(rowIndex / this._workSpace._getRowCount())\r\n    }\r\n    calculateHeaderCellRepeatCount() {\r\n        return 1\r\n    }\r\n    insertAllDayRowsIntoDateTable() {\r\n        return this._workSpace.option(\"showAllDayPanel\")\r\n    }\r\n    getTotalCellCount() {\r\n        return this._workSpace._getCellCount()\r\n    }\r\n    getTotalRowCount() {\r\n        return this._workSpace._getRowCount() * this._workSpace._getGroupCount()\r\n    }\r\n    calculateTimeCellRepeatCount() {\r\n        return this._workSpace._getGroupCount() || 1\r\n    }\r\n    getWorkSpaceMinWidth() {\r\n        var minWidth = this._workSpace._getWorkSpaceWidth();\r\n        var workspaceContainerWidth = getBoundingRect(this._workSpace.$element().get(0)).width - this._workSpace.getTimePanelWidth() - this._workSpace.getGroupTableWidth() - 2 * WORK_SPACE_BORDER;\r\n        if (minWidth < workspaceContainerWidth) {\r\n            minWidth = workspaceContainerWidth\r\n        }\r\n        return minWidth\r\n    }\r\n    getAllDayOffset() {\r\n        return 0\r\n    }\r\n    getGroupCountClass(groups) {\r\n        return getVerticalGroupCountClass(groups)\r\n    }\r\n    getLeftOffset() {\r\n        return this._workSpace.getTimePanelWidth() + this._workSpace.getGroupTableWidth()\r\n    }\r\n    getGroupBoundsOffset(groupIndex, _ref) {\r\n        var [$firstCell, $lastCell] = _ref;\r\n        return this.cache.get(\"groupBoundsOffset\".concat(groupIndex), () => {\r\n            var startDayHour = this._workSpace.option(\"startDayHour\");\r\n            var endDayHour = this._workSpace.option(\"endDayHour\");\r\n            var hoursInterval = this._workSpace.option(\"hoursInterval\");\r\n            var dayHeight = calculateDayDuration(startDayHour, endDayHour) / hoursInterval * this._workSpace.getCellHeight();\r\n            var scrollTop = this.getScrollableScrollTop();\r\n            var topOffset = groupIndex * dayHeight + getBoundingRect(this._workSpace._$thead.get(0)).height + this._workSpace.option(\"getHeaderHeight\")() + DATE_HEADER_OFFSET - scrollTop;\r\n            if (this._workSpace.option(\"showAllDayPanel\") && this._workSpace.supportAllDayRow()) {\r\n                topOffset += this._workSpace.getCellHeight() * (groupIndex + 1)\r\n            }\r\n            var bottomOffset = topOffset + dayHeight;\r\n            var {\r\n                left: left\r\n            } = $firstCell.getBoundingClientRect();\r\n            var {\r\n                right: right\r\n            } = $lastCell.getBoundingClientRect();\r\n            return this._groupBoundsOffset = {\r\n                left: left,\r\n                right: right,\r\n                top: topOffset,\r\n                bottom: bottomOffset\r\n            }\r\n        })\r\n    }\r\n    shiftIndicator($indicator, height, rtlOffset, i) {\r\n        var offset = this._workSpace.getIndicatorOffset(0);\r\n        var tableOffset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\r\n        var horizontalOffset = rtlOffset ? rtlOffset - offset : offset;\r\n        var verticalOffset = this._workSpace._getRowCount() * this._workSpace.getCellHeight() * i;\r\n        if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\r\n            verticalOffset += this._workSpace.getAllDayHeight() * (i + 1)\r\n        }\r\n        $indicator.css(\"left\", horizontalOffset + tableOffset);\r\n        $indicator.css(\"top\", height + verticalOffset)\r\n    }\r\n    getShaderOffset(i, width) {\r\n        var offset = this._workSpace.option(\"crossScrollingEnabled\") ? 0 : this._workSpace.getGroupTableWidth();\r\n        return this._workSpace.option(\"rtlEnabled\") ? getBoundingRect(this._$container.get(0)).width - offset - this._workSpace.getWorkSpaceLeftOffset() - width : offset\r\n    }\r\n    getShaderTopOffset(i) {\r\n        return 0\r\n    }\r\n    getShaderHeight() {\r\n        var height = this._workSpace.getIndicationHeight();\r\n        if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\r\n            height += this._workSpace.getCellHeight()\r\n        }\r\n        return height\r\n    }\r\n    getShaderMaxHeight() {\r\n        var height = this._workSpace._getRowCount() * this._workSpace.getCellHeight();\r\n        if (this._workSpace.supportAllDayRow() && this._workSpace.option(\"showAllDayPanel\")) {\r\n            height += this._workSpace.getCellHeight()\r\n        }\r\n        return height\r\n    }\r\n    getShaderWidth() {\r\n        return this._workSpace.getIndicationWidth(0)\r\n    }\r\n    getScrollableScrollTop() {\r\n        return this._workSpace.getScrollable().scrollTop()\r\n    }\r\n    addAdditionalGroupCellClasses(cellClass, index, i, j) {\r\n        cellClass = this._addLastGroupCellClass(cellClass, i + 1);\r\n        return this._addFirstGroupCellClass(cellClass, i + 1)\r\n    }\r\n    _addLastGroupCellClass(cellClass, index) {\r\n        if (index % this._workSpace._getRowCount() === 0) {\r\n            return \"\".concat(cellClass, \" \").concat(LAST_GROUP_CELL_CLASS)\r\n        }\r\n        return cellClass\r\n    }\r\n    _addFirstGroupCellClass(cellClass, index) {\r\n        if ((index - 1) % this._workSpace._getRowCount() === 0) {\r\n            return \"\".concat(cellClass, \" \").concat(FIRST_GROUP_CELL_CLASS)\r\n        }\r\n        return cellClass\r\n    }\r\n}\r\nexport default VerticalGroupedStrategy;\r\n"]},"metadata":{},"sourceType":"module"}