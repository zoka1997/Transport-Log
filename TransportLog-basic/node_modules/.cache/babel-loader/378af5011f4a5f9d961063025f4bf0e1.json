{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments/viewModelGenerator.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport VerticalAppointmentsStrategy from \"./rendering_strategies/strategy_vertical\";\nimport WeekAppointmentRenderingStrategy from \"./rendering_strategies/strategy_week\";\nimport HorizontalAppointmentsStrategy from \"./rendering_strategies/strategy_horizontal\";\nimport HorizontalMonthLineAppointmentsStrategy from \"./rendering_strategies/strategy_horizontal_month_line\";\nimport HorizontalMonthAppointmentsStrategy from \"./rendering_strategies/strategy_horizontal_month\";\nimport AgendaAppointmentsStrategy from \"./rendering_strategies/strategy_agenda\";\nimport { getAppointmentKey } from \"../../../renovation/ui/scheduler/appointment/utils\";\nvar RENDERING_STRATEGIES = {\n  horizontal: HorizontalAppointmentsStrategy,\n  horizontalMonth: HorizontalMonthAppointmentsStrategy,\n  horizontalMonthLine: HorizontalMonthLineAppointmentsStrategy,\n  vertical: VerticalAppointmentsStrategy,\n  week: WeekAppointmentRenderingStrategy,\n  agenda: AgendaAppointmentsStrategy\n};\nexport class AppointmentViewModelGenerator {\n  initRenderingStrategy(options) {\n    var RenderingStrategy = RENDERING_STRATEGIES[options.appointmentRenderingStrategyName];\n    this.renderingStrategy = new RenderingStrategy(options);\n  }\n\n  generate(filteredItems, options) {\n    var {\n      isRenovatedAppointments: isRenovatedAppointments\n    } = options;\n    var appointments = filteredItems ? filteredItems.slice() : [];\n    this.initRenderingStrategy(options);\n    var renderingStrategy = this.getRenderingStrategy();\n    var positionMap = renderingStrategy.createTaskPositionMap(appointments);\n    var viewModel = this.postProcess(appointments, positionMap, isRenovatedAppointments);\n\n    if (isRenovatedAppointments) {\n      return this.makeRenovatedViewModels(viewModel, options.supportAllDayRow, options.isVerticalGroupOrientation);\n    }\n\n    return {\n      positionMap: positionMap,\n      viewModel: viewModel\n    };\n  }\n\n  postProcess(filteredItems, positionMap, isRenovatedAppointments) {\n    var renderingStrategy = this.getRenderingStrategy();\n    return filteredItems.map((data, index) => {\n      if (!renderingStrategy.keepAppointmentSettings()) {\n        delete data.settings;\n      }\n\n      var appointmentSettings = positionMap[index];\n      appointmentSettings.forEach(item => {\n        item.direction = \"vertical\" === renderingStrategy.getDirection() && !item.allDay ? \"vertical\" : \"horizontal\";\n      });\n      var item = {\n        itemData: data,\n        settings: appointmentSettings\n      };\n\n      if (!isRenovatedAppointments) {\n        item.needRepaint = true;\n        item.needRemove = false;\n      }\n\n      return item;\n    });\n  }\n\n  makeRenovatedViewModels(viewModel, supportAllDayRow, isVerticalGrouping) {\n    var strategy = this.getRenderingStrategy();\n    var regularViewModels = [];\n    var allDayViewModels = [];\n    var compactOptions = [];\n    var isAllDayPanel = supportAllDayRow && !isVerticalGrouping;\n    viewModel.forEach(_ref => {\n      var {\n        itemData: itemData,\n        settings: settings\n      } = _ref;\n      settings.forEach(options => {\n        var item = this.prepareViewModel(options, strategy, itemData);\n\n        if (options.isCompact) {\n          compactOptions.push({\n            compactViewModel: options.virtual,\n            appointmentViewModel: item\n          });\n        } else if (options.allDay && isAllDayPanel) {\n          allDayViewModels.push(item);\n        } else {\n          regularViewModels.push(item);\n        }\n      });\n    });\n    var compactViewModels = this.prepareCompactViewModels(compactOptions, supportAllDayRow);\n\n    var result = _extends({\n      allDay: allDayViewModels,\n      regular: regularViewModels\n    }, compactViewModels);\n\n    return result;\n  }\n\n  prepareViewModel(options, strategy, itemData) {\n    var geometry = strategy.getAppointmentGeometry(options);\n    var viewModel = {\n      key: getAppointmentKey(geometry),\n      appointment: itemData,\n      geometry: _extends({}, geometry, {\n        leftVirtualWidth: options.leftVirtualWidth,\n        topVirtualHeight: options.topVirtualHeight\n      }),\n      info: _extends({}, options.info, {\n        allDay: options.allDay,\n        direction: options.direction,\n        appointmentReduced: options.appointmentReduced,\n        groupIndex: options.groupIndex\n      })\n    };\n    return viewModel;\n  }\n\n  getCompactViewModelFrame(compactViewModel) {\n    return {\n      isAllDay: !!compactViewModel.isAllDay,\n      isCompact: compactViewModel.isCompact,\n      groupIndex: compactViewModel.groupIndex,\n      geometry: {\n        left: compactViewModel.left,\n        top: compactViewModel.top,\n        width: compactViewModel.width,\n        height: compactViewModel.height\n      },\n      items: {\n        colors: [],\n        data: [],\n        settings: []\n      }\n    };\n  }\n\n  prepareCompactViewModels(compactOptions, supportAllDayRow) {\n    var regularCompact = {};\n    var allDayCompact = {};\n    compactOptions.forEach(_ref2 => {\n      var {\n        compactViewModel: compactViewModel,\n        appointmentViewModel: appointmentViewModel\n      } = _ref2;\n      var {\n        index: index,\n        isAllDay: isAllDay\n      } = compactViewModel;\n      var viewModel = isAllDay && supportAllDayRow ? allDayCompact : regularCompact;\n\n      if (!viewModel[index]) {\n        viewModel[index] = this.getCompactViewModelFrame(compactViewModel);\n      }\n\n      var {\n        settings: settings,\n        data: data,\n        colors: colors\n      } = viewModel[index].items;\n      settings.push(appointmentViewModel);\n      data.push(appointmentViewModel.appointment);\n      colors.push(appointmentViewModel.info.resourceColor);\n    });\n\n    var toArray = items => Object.keys(items).map(key => _extends({\n      key: key\n    }, items[key]));\n\n    var allDayViewModels = toArray(allDayCompact);\n    var regularViewModels = toArray(regularCompact);\n    return {\n      allDayCompact: allDayViewModels,\n      regularCompact: regularViewModels\n    };\n  }\n\n  getRenderingStrategy() {\n    return this.renderingStrategy;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/scheduler/appointments/viewModelGenerator.js"],"names":["_extends","VerticalAppointmentsStrategy","WeekAppointmentRenderingStrategy","HorizontalAppointmentsStrategy","HorizontalMonthLineAppointmentsStrategy","HorizontalMonthAppointmentsStrategy","AgendaAppointmentsStrategy","getAppointmentKey","RENDERING_STRATEGIES","horizontal","horizontalMonth","horizontalMonthLine","vertical","week","agenda","AppointmentViewModelGenerator","initRenderingStrategy","options","RenderingStrategy","appointmentRenderingStrategyName","renderingStrategy","generate","filteredItems","isRenovatedAppointments","appointments","slice","getRenderingStrategy","positionMap","createTaskPositionMap","viewModel","postProcess","makeRenovatedViewModels","supportAllDayRow","isVerticalGroupOrientation","map","data","index","keepAppointmentSettings","settings","appointmentSettings","forEach","item","direction","getDirection","allDay","itemData","needRepaint","needRemove","isVerticalGrouping","strategy","regularViewModels","allDayViewModels","compactOptions","isAllDayPanel","_ref","prepareViewModel","isCompact","push","compactViewModel","virtual","appointmentViewModel","compactViewModels","prepareCompactViewModels","result","regular","geometry","getAppointmentGeometry","key","appointment","leftVirtualWidth","topVirtualHeight","info","appointmentReduced","groupIndex","getCompactViewModelFrame","isAllDay","left","top","width","height","items","colors","regularCompact","allDayCompact","_ref2","resourceColor","toArray","Object","keys"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/appointments/viewModelGenerator.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport VerticalAppointmentsStrategy from \"./rendering_strategies/strategy_vertical\";\r\nimport WeekAppointmentRenderingStrategy from \"./rendering_strategies/strategy_week\";\r\nimport HorizontalAppointmentsStrategy from \"./rendering_strategies/strategy_horizontal\";\r\nimport HorizontalMonthLineAppointmentsStrategy from \"./rendering_strategies/strategy_horizontal_month_line\";\r\nimport HorizontalMonthAppointmentsStrategy from \"./rendering_strategies/strategy_horizontal_month\";\r\nimport AgendaAppointmentsStrategy from \"./rendering_strategies/strategy_agenda\";\r\nimport {\r\n    getAppointmentKey\r\n} from \"../../../renovation/ui/scheduler/appointment/utils\";\r\nvar RENDERING_STRATEGIES = {\r\n    horizontal: HorizontalAppointmentsStrategy,\r\n    horizontalMonth: HorizontalMonthAppointmentsStrategy,\r\n    horizontalMonthLine: HorizontalMonthLineAppointmentsStrategy,\r\n    vertical: VerticalAppointmentsStrategy,\r\n    week: WeekAppointmentRenderingStrategy,\r\n    agenda: AgendaAppointmentsStrategy\r\n};\r\nexport class AppointmentViewModelGenerator {\r\n    initRenderingStrategy(options) {\r\n        var RenderingStrategy = RENDERING_STRATEGIES[options.appointmentRenderingStrategyName];\r\n        this.renderingStrategy = new RenderingStrategy(options)\r\n    }\r\n    generate(filteredItems, options) {\r\n        var {\r\n            isRenovatedAppointments: isRenovatedAppointments\r\n        } = options;\r\n        var appointments = filteredItems ? filteredItems.slice() : [];\r\n        this.initRenderingStrategy(options);\r\n        var renderingStrategy = this.getRenderingStrategy();\r\n        var positionMap = renderingStrategy.createTaskPositionMap(appointments);\r\n        var viewModel = this.postProcess(appointments, positionMap, isRenovatedAppointments);\r\n        if (isRenovatedAppointments) {\r\n            return this.makeRenovatedViewModels(viewModel, options.supportAllDayRow, options.isVerticalGroupOrientation)\r\n        }\r\n        return {\r\n            positionMap: positionMap,\r\n            viewModel: viewModel\r\n        }\r\n    }\r\n    postProcess(filteredItems, positionMap, isRenovatedAppointments) {\r\n        var renderingStrategy = this.getRenderingStrategy();\r\n        return filteredItems.map((data, index) => {\r\n            if (!renderingStrategy.keepAppointmentSettings()) {\r\n                delete data.settings\r\n            }\r\n            var appointmentSettings = positionMap[index];\r\n            appointmentSettings.forEach(item => {\r\n                item.direction = \"vertical\" === renderingStrategy.getDirection() && !item.allDay ? \"vertical\" : \"horizontal\"\r\n            });\r\n            var item = {\r\n                itemData: data,\r\n                settings: appointmentSettings\r\n            };\r\n            if (!isRenovatedAppointments) {\r\n                item.needRepaint = true;\r\n                item.needRemove = false\r\n            }\r\n            return item\r\n        })\r\n    }\r\n    makeRenovatedViewModels(viewModel, supportAllDayRow, isVerticalGrouping) {\r\n        var strategy = this.getRenderingStrategy();\r\n        var regularViewModels = [];\r\n        var allDayViewModels = [];\r\n        var compactOptions = [];\r\n        var isAllDayPanel = supportAllDayRow && !isVerticalGrouping;\r\n        viewModel.forEach(_ref => {\r\n            var {\r\n                itemData: itemData,\r\n                settings: settings\r\n            } = _ref;\r\n            settings.forEach(options => {\r\n                var item = this.prepareViewModel(options, strategy, itemData);\r\n                if (options.isCompact) {\r\n                    compactOptions.push({\r\n                        compactViewModel: options.virtual,\r\n                        appointmentViewModel: item\r\n                    })\r\n                } else if (options.allDay && isAllDayPanel) {\r\n                    allDayViewModels.push(item)\r\n                } else {\r\n                    regularViewModels.push(item)\r\n                }\r\n            })\r\n        });\r\n        var compactViewModels = this.prepareCompactViewModels(compactOptions, supportAllDayRow);\r\n        var result = _extends({\r\n            allDay: allDayViewModels,\r\n            regular: regularViewModels\r\n        }, compactViewModels);\r\n        return result\r\n    }\r\n    prepareViewModel(options, strategy, itemData) {\r\n        var geometry = strategy.getAppointmentGeometry(options);\r\n        var viewModel = {\r\n            key: getAppointmentKey(geometry),\r\n            appointment: itemData,\r\n            geometry: _extends({}, geometry, {\r\n                leftVirtualWidth: options.leftVirtualWidth,\r\n                topVirtualHeight: options.topVirtualHeight\r\n            }),\r\n            info: _extends({}, options.info, {\r\n                allDay: options.allDay,\r\n                direction: options.direction,\r\n                appointmentReduced: options.appointmentReduced,\r\n                groupIndex: options.groupIndex\r\n            })\r\n        };\r\n        return viewModel\r\n    }\r\n    getCompactViewModelFrame(compactViewModel) {\r\n        return {\r\n            isAllDay: !!compactViewModel.isAllDay,\r\n            isCompact: compactViewModel.isCompact,\r\n            groupIndex: compactViewModel.groupIndex,\r\n            geometry: {\r\n                left: compactViewModel.left,\r\n                top: compactViewModel.top,\r\n                width: compactViewModel.width,\r\n                height: compactViewModel.height\r\n            },\r\n            items: {\r\n                colors: [],\r\n                data: [],\r\n                settings: []\r\n            }\r\n        }\r\n    }\r\n    prepareCompactViewModels(compactOptions, supportAllDayRow) {\r\n        var regularCompact = {};\r\n        var allDayCompact = {};\r\n        compactOptions.forEach(_ref2 => {\r\n            var {\r\n                compactViewModel: compactViewModel,\r\n                appointmentViewModel: appointmentViewModel\r\n            } = _ref2;\r\n            var {\r\n                index: index,\r\n                isAllDay: isAllDay\r\n            } = compactViewModel;\r\n            var viewModel = isAllDay && supportAllDayRow ? allDayCompact : regularCompact;\r\n            if (!viewModel[index]) {\r\n                viewModel[index] = this.getCompactViewModelFrame(compactViewModel)\r\n            }\r\n            var {\r\n                settings: settings,\r\n                data: data,\r\n                colors: colors\r\n            } = viewModel[index].items;\r\n            settings.push(appointmentViewModel);\r\n            data.push(appointmentViewModel.appointment);\r\n            colors.push(appointmentViewModel.info.resourceColor)\r\n        });\r\n        var toArray = items => Object.keys(items).map(key => _extends({\r\n            key: key\r\n        }, items[key]));\r\n        var allDayViewModels = toArray(allDayCompact);\r\n        var regularViewModels = toArray(regularCompact);\r\n        return {\r\n            allDayCompact: allDayViewModels,\r\n            regularCompact: regularViewModels\r\n        }\r\n    }\r\n    getRenderingStrategy() {\r\n        return this.renderingStrategy\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}