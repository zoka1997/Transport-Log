{"ast":null,"code":"const NUMBER_STYLES = new Set(['animationIterationCount', 'borderImageOutset', 'borderImageSlice', 'border-imageWidth', 'boxFlex', 'boxFlexGroup', 'boxOrdinalGroup', 'columnCount', 'fillOpacity', 'flex', 'flexGrow', 'flexNegative', 'flexOrder', 'flexPositive', 'flexShrink', 'floodOpacity', 'fontWeight', 'gridColumn', 'gridRow', 'lineClamp', 'lineHeight', 'opacity', 'order', 'orphans', 'stopOpacity', 'strokeDasharray', 'strokeDashoffset', 'strokeMiterlimit', 'strokeOpacity', 'strokeWidth', 'tabSize', 'widows', 'zIndex', 'zoom']);\n\nconst isNumeric = value => {\n  if (typeof value === 'number') return true;\n  return !Number.isNaN(Number(value));\n};\n\nconst getNumberStyleValue = (style, value) => NUMBER_STYLES.has(style) ? value : `${value}px`;\n\nconst uppercasePattern = /[A-Z]/g;\n\nconst kebabCase = str => str.replace(uppercasePattern, '-$&').toLowerCase();\n\nexport function normalizeStyles(styles) {\n  if (!(styles instanceof Object)) {\n    return undefined;\n  }\n\n  return Object.entries(styles).reduce((acc, [key, value]) => {\n    acc[kebabCase(key)] = isNumeric(value) ? getNumberStyleValue(key, value) : value;\n    return acc;\n  }, {});\n}","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/@devextreme/runtime/esm/inferno/normalize_styles.js"],"names":["NUMBER_STYLES","Set","isNumeric","value","Number","isNaN","getNumberStyleValue","style","has","uppercasePattern","kebabCase","str","replace","toLowerCase","normalizeStyles","styles","Object","undefined","entries","reduce","acc","key"],"mappings":"AAAA,MAAMA,aAAa,GAAG,IAAIC,GAAJ,CAAQ,CAC1B,yBAD0B,EAE1B,mBAF0B,EAG1B,kBAH0B,EAI1B,mBAJ0B,EAK1B,SAL0B,EAM1B,cAN0B,EAO1B,iBAP0B,EAQ1B,aAR0B,EAS1B,aAT0B,EAU1B,MAV0B,EAW1B,UAX0B,EAY1B,cAZ0B,EAa1B,WAb0B,EAc1B,cAd0B,EAe1B,YAf0B,EAgB1B,cAhB0B,EAiB1B,YAjB0B,EAkB1B,YAlB0B,EAmB1B,SAnB0B,EAoB1B,WApB0B,EAqB1B,YArB0B,EAsB1B,SAtB0B,EAuB1B,OAvB0B,EAwB1B,SAxB0B,EAyB1B,aAzB0B,EA0B1B,iBA1B0B,EA2B1B,kBA3B0B,EA4B1B,kBA5B0B,EA6B1B,eA7B0B,EA8B1B,aA9B0B,EA+B1B,SA/B0B,EAgC1B,QAhC0B,EAiC1B,QAjC0B,EAkC1B,MAlC0B,CAAR,CAAtB;;AAoCA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AACzB,MAAI,OAAOA,KAAP,KAAiB,QAArB,EACI,OAAO,IAAP;AACJ,SAAO,CAACC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACD,KAAD,CAAnB,CAAR;AACH,CAJD;;AAKA,MAAMG,mBAAmB,GAAG,CAACC,KAAD,EAAQJ,KAAR,KAAmBH,aAAa,CAACQ,GAAd,CAAkBD,KAAlB,IAA2BJ,KAA3B,GAAoC,GAAEA,KAAM,IAA3F;;AACA,MAAMM,gBAAgB,GAAG,QAAzB;;AACA,MAAMC,SAAS,GAAIC,GAAD,IAASA,GAAG,CAACC,OAAJ,CAAYH,gBAAZ,EAA8B,KAA9B,EAAqCI,WAArC,EAA3B;;AACA,OAAO,SAASC,eAAT,CAAyBC,MAAzB,EAAiC;AACpC,MAAI,EAAEA,MAAM,YAAYC,MAApB,CAAJ,EAAiC;AAC7B,WAAOC,SAAP;AACH;;AACD,SAAOD,MAAM,CACRE,OADE,CACMH,MADN,EAEFI,MAFE,CAEK,CAACC,GAAD,EAAM,CAACC,GAAD,EAAMlB,KAAN,CAAN,KAAuB;AAC/BiB,IAAAA,GAAG,CAACV,SAAS,CAACW,GAAD,CAAV,CAAH,GAAsBnB,SAAS,CAACC,KAAD,CAAT,GAChBG,mBAAmB,CAACe,GAAD,EAAMlB,KAAN,CADH,GAEhBA,KAFN;AAGA,WAAOiB,GAAP;AACH,GAPM,EAOJ,EAPI,CAAP;AAQH","sourcesContent":["const NUMBER_STYLES = new Set([\n    'animationIterationCount',\n    'borderImageOutset',\n    'borderImageSlice',\n    'border-imageWidth',\n    'boxFlex',\n    'boxFlexGroup',\n    'boxOrdinalGroup',\n    'columnCount',\n    'fillOpacity',\n    'flex',\n    'flexGrow',\n    'flexNegative',\n    'flexOrder',\n    'flexPositive',\n    'flexShrink',\n    'floodOpacity',\n    'fontWeight',\n    'gridColumn',\n    'gridRow',\n    'lineClamp',\n    'lineHeight',\n    'opacity',\n    'order',\n    'orphans',\n    'stopOpacity',\n    'strokeDasharray',\n    'strokeDashoffset',\n    'strokeMiterlimit',\n    'strokeOpacity',\n    'strokeWidth',\n    'tabSize',\n    'widows',\n    'zIndex',\n    'zoom',\n]);\nconst isNumeric = (value) => {\n    if (typeof value === 'number')\n        return true;\n    return !Number.isNaN(Number(value));\n};\nconst getNumberStyleValue = (style, value) => (NUMBER_STYLES.has(style) ? value : `${value}px`);\nconst uppercasePattern = /[A-Z]/g;\nconst kebabCase = (str) => str.replace(uppercasePattern, '-$&').toLowerCase();\nexport function normalizeStyles(styles) {\n    if (!(styles instanceof Object)) {\n        return undefined;\n    }\n    return Object\n        .entries(styles)\n        .reduce((acc, [key, value]) => {\n        acc[kebabCase(key)] = isNumeric(value)\n            ? getNumberStyleValue(key, value)\n            : value;\n        return acc;\n    }, {});\n}\n"]},"metadata":{},"sourceType":"module"}