{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.filter_panel.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { isDefined } from \"../../core/utils/type\";\nimport modules from \"./ui.grid_core.modules\";\nimport gridUtils from \"./ui.grid_core.utils\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport messageLocalization from \"../../localization/message\";\nimport CheckBox from \"../check_box\";\nimport { getCurrentLookupValueText, getCustomOperation, getCurrentValueText, getField, getCaptionByOperation, getGroupValue, isCondition, isGroup } from \"../filter_builder/utils\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nimport { captionize } from \"../../core/utils/inflector\";\nimport { registerKeyboardAction } from \"./ui.grid_core.accessibility\";\nvar FILTER_PANEL_CLASS = \"filter-panel\";\nvar FILTER_PANEL_TEXT_CLASS = FILTER_PANEL_CLASS + \"-text\";\nvar FILTER_PANEL_CHECKBOX_CLASS = FILTER_PANEL_CLASS + \"-checkbox\";\nvar FILTER_PANEL_CLEAR_FILTER_CLASS = FILTER_PANEL_CLASS + \"-clear-filter\";\nvar FILTER_PANEL_LEFT_CONTAINER = FILTER_PANEL_CLASS + \"-left\";\nvar FILTER_PANEL_TARGET = \"filterPanel\";\nvar FilterPanelView = modules.View.inherit({\n  isVisible: function () {\n    return this.option(\"filterPanel.visible\") && this.getController(\"data\").dataSource();\n  },\n  init: function () {\n    this.getController(\"data\").dataSourceChanged.add(() => this.render());\n  },\n  _renderCore: function () {\n    var $element = this.element();\n    $element.empty().addClass(this.addWidgetPrefix(FILTER_PANEL_CLASS));\n    var $leftContainer = $(\"<div>\").addClass(this.addWidgetPrefix(FILTER_PANEL_LEFT_CONTAINER)).appendTo($element);\n\n    if (this.option(\"filterValue\") || this._filterValueBuffer) {\n      $leftContainer.append(this._getCheckElement()).append(this._getFilterElement()).append(this._getTextElement());\n      $element.append(this._getRemoveButtonElement());\n    } else {\n      $leftContainer.append(this._getFilterElement()).append(this._getTextElement());\n    }\n  },\n  _getCheckElement: function () {\n    var that = this;\n    var $element = $(\"<div>\").addClass(this.addWidgetPrefix(FILTER_PANEL_CHECKBOX_CLASS));\n\n    that._createComponent($element, CheckBox, {\n      value: that.option(\"filterPanel.filterEnabled\"),\n      onValueChanged: function (e) {\n        that.option(\"filterPanel.filterEnabled\", e.value);\n      }\n    });\n\n    $element.attr(\"title\", this.option(\"filterPanel.texts.filterEnabledHint\"));\n    return $element;\n  },\n  _getFilterElement: function () {\n    var that = this;\n    var $element = $(\"<div>\").addClass(\"dx-icon-filter\");\n    eventsEngine.on($element, \"click\", () => that._showFilterBuilder());\n    registerKeyboardAction(\"filterPanel\", that, $element, void 0, () => that._showFilterBuilder());\n\n    that._addTabIndexToElement($element);\n\n    return $element;\n  },\n  _getTextElement: function () {\n    var that = this;\n    var $textElement = $(\"<div>\").addClass(that.addWidgetPrefix(FILTER_PANEL_TEXT_CLASS));\n    var filterText;\n    var filterValue = that.option(\"filterValue\");\n\n    if (filterValue) {\n      when(that.getFilterText(filterValue, that.getController(\"filterSync\").getCustomFilterOperations())).done(function (filterText) {\n        var customizeText = that.option(\"filterPanel.customizeText\");\n\n        if (customizeText) {\n          var customText = customizeText({\n            component: that.component,\n            filterValue: filterValue,\n            text: filterText\n          });\n\n          if (\"string\" === typeof customText) {\n            filterText = customText;\n          }\n        }\n\n        $textElement.text(filterText);\n      });\n    } else {\n      filterText = that.option(\"filterPanel.texts.createFilter\");\n      $textElement.text(filterText);\n    }\n\n    eventsEngine.on($textElement, \"click\", () => that._showFilterBuilder());\n    registerKeyboardAction(\"filterPanel\", that, $textElement, void 0, () => that._showFilterBuilder());\n\n    that._addTabIndexToElement($textElement);\n\n    return $textElement;\n  },\n  _showFilterBuilder: function () {\n    this.option(\"filterBuilderPopup.visible\", true);\n  },\n  _getRemoveButtonElement: function () {\n    var that = this;\n\n    var clearFilterValue = () => that.option(\"filterValue\", null);\n\n    var $element = $(\"<div>\").addClass(that.addWidgetPrefix(FILTER_PANEL_CLEAR_FILTER_CLASS)).text(that.option(\"filterPanel.texts.clearFilter\"));\n    eventsEngine.on($element, \"click\", clearFilterValue);\n    registerKeyboardAction(\"filterPanel\", this, $element, void 0, clearFilterValue);\n\n    that._addTabIndexToElement($element);\n\n    return $element;\n  },\n  _addTabIndexToElement: function ($element) {\n    if (!this.option(\"useLegacyKeyboardNavigation\")) {\n      var tabindex = this.option(\"tabindex\") || 0;\n      $element.attr(\"tabindex\", tabindex);\n    }\n  },\n  optionChanged: function (args) {\n    switch (args.name) {\n      case \"filterValue\":\n        this._invalidate();\n\n        this.option(\"filterPanel.filterEnabled\", true);\n        args.handled = true;\n        break;\n\n      case \"filterPanel\":\n        this._invalidate();\n\n        args.handled = true;\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _getConditionText: function (fieldText, operationText, valueText) {\n    var result = \"[\".concat(fieldText, \"] \").concat(operationText);\n\n    if (isDefined(valueText)) {\n      result += valueText;\n    }\n\n    return result;\n  },\n  _getValueMaskedText: function (value) {\n    return Array.isArray(value) ? \"('\".concat(value.join(\"', '\"), \"')\") : \" '\".concat(value, \"'\");\n  },\n  _getValueText: function (field, customOperation, value) {\n    var deferred = new Deferred();\n    var hasCustomOperation = customOperation && customOperation.customizeText;\n\n    if (isDefined(value) || hasCustomOperation) {\n      if (!hasCustomOperation && field.lookup) {\n        getCurrentLookupValueText(field, value, data => {\n          deferred.resolve(this._getValueMaskedText(data));\n        });\n      } else {\n        var displayValue = Array.isArray(value) ? value : gridUtils.getDisplayValue(field, value);\n        when(getCurrentValueText(field, displayValue, customOperation, FILTER_PANEL_TARGET)).done(data => {\n          deferred.resolve(this._getValueMaskedText(data));\n        });\n      }\n    } else {\n      deferred.resolve(\"\");\n    }\n\n    return deferred.promise();\n  },\n  getConditionText: function (filterValue, options) {\n    var that = this;\n    var operation = filterValue[1];\n    var deferred = new Deferred();\n    var customOperation = getCustomOperation(options.customOperations, operation);\n    var operationText;\n    var field = getField(filterValue[0], options.columns);\n    var fieldText = field.caption || \"\";\n    var value = filterValue[2];\n\n    if (customOperation) {\n      operationText = customOperation.caption || captionize(customOperation.name);\n    } else if (null === value) {\n      operationText = getCaptionByOperation(\"=\" === operation ? \"isblank\" : \"isnotblank\", options.filterOperationDescriptions);\n    } else {\n      operationText = getCaptionByOperation(operation, options.filterOperationDescriptions);\n    }\n\n    this._getValueText(field, customOperation, value).done(valueText => {\n      deferred.resolve(that._getConditionText(fieldText, operationText, valueText));\n    });\n\n    return deferred;\n  },\n  getGroupText: function (filterValue, options, isInnerGroup) {\n    var that = this;\n    var result = new Deferred();\n    var textParts = [];\n    var groupValue = getGroupValue(filterValue);\n    filterValue.forEach(item => {\n      if (isCondition(item)) {\n        textParts.push(that.getConditionText(item, options));\n      } else if (isGroup(item)) {\n        textParts.push(that.getGroupText(item, options, true));\n      }\n    });\n    when.apply(this, textParts).done(function () {\n      var text;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (\"!\" === groupValue[0]) {\n        var groupText = options.groupOperationDescriptions[\"not\" + groupValue.substring(1, 2).toUpperCase() + groupValue.substring(2)].split(\" \");\n        text = \"\".concat(groupText[0], \" \").concat(args[0]);\n      } else {\n        text = args.join(\" \".concat(options.groupOperationDescriptions[groupValue], \" \"));\n      }\n\n      if (isInnerGroup) {\n        text = \"(\".concat(text, \")\");\n      }\n\n      result.resolve(text);\n    });\n    return result;\n  },\n  getFilterText: function (filterValue, customOperations) {\n    var options = {\n      customOperations: customOperations,\n      columns: this.getController(\"columns\").getFilteringColumns(),\n      filterOperationDescriptions: this.option(\"filterBuilder.filterOperationDescriptions\"),\n      groupOperationDescriptions: this.option(\"filterBuilder.groupOperationDescriptions\")\n    };\n    return isCondition(filterValue) ? this.getConditionText(filterValue, options) : this.getGroupText(filterValue, options);\n  }\n});\nexport var filterPanelModule = {\n  defaultOptions: function () {\n    return {\n      filterPanel: {\n        visible: false,\n        filterEnabled: true,\n        texts: {\n          createFilter: messageLocalization.format(\"dxDataGrid-filterPanelCreateFilter\"),\n          clearFilter: messageLocalization.format(\"dxDataGrid-filterPanelClearFilter\"),\n          filterEnabledHint: messageLocalization.format(\"dxDataGrid-filterPanelFilterEnabledHint\")\n        }\n      }\n    };\n  },\n  views: {\n    filterPanelView: FilterPanelView\n  },\n  extenders: {\n    controllers: {\n      data: {\n        optionChanged: function (args) {\n          switch (args.name) {\n            case \"filterPanel\":\n              this._applyFilter();\n\n              args.handled = true;\n              break;\n\n            default:\n              this.callBase(args);\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.filter_panel.js"],"names":["$","isDefined","modules","gridUtils","eventsEngine","messageLocalization","CheckBox","getCurrentLookupValueText","getCustomOperation","getCurrentValueText","getField","getCaptionByOperation","getGroupValue","isCondition","isGroup","when","Deferred","captionize","registerKeyboardAction","FILTER_PANEL_CLASS","FILTER_PANEL_TEXT_CLASS","FILTER_PANEL_CHECKBOX_CLASS","FILTER_PANEL_CLEAR_FILTER_CLASS","FILTER_PANEL_LEFT_CONTAINER","FILTER_PANEL_TARGET","FilterPanelView","View","inherit","isVisible","option","getController","dataSource","init","dataSourceChanged","add","render","_renderCore","$element","element","empty","addClass","addWidgetPrefix","$leftContainer","appendTo","_filterValueBuffer","append","_getCheckElement","_getFilterElement","_getTextElement","_getRemoveButtonElement","that","_createComponent","value","onValueChanged","e","attr","on","_showFilterBuilder","_addTabIndexToElement","$textElement","filterText","filterValue","getFilterText","getCustomFilterOperations","done","customizeText","customText","component","text","clearFilterValue","tabindex","optionChanged","args","name","_invalidate","handled","callBase","_getConditionText","fieldText","operationText","valueText","result","concat","_getValueMaskedText","Array","isArray","join","_getValueText","field","customOperation","deferred","hasCustomOperation","lookup","data","resolve","displayValue","getDisplayValue","promise","getConditionText","options","operation","customOperations","columns","caption","filterOperationDescriptions","getGroupText","isInnerGroup","textParts","groupValue","forEach","item","push","apply","_len","arguments","length","_key","groupText","groupOperationDescriptions","substring","toUpperCase","split","getFilteringColumns","filterPanelModule","defaultOptions","filterPanel","visible","filterEnabled","texts","createFilter","format","clearFilter","filterEnabledHint","views","filterPanelView","extenders","controllers","_applyFilter"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.filter_panel.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport gridUtils from \"./ui.grid_core.utils\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport CheckBox from \"../check_box\";\r\nimport {\r\n    getCurrentLookupValueText,\r\n    getCustomOperation,\r\n    getCurrentValueText,\r\n    getField,\r\n    getCaptionByOperation,\r\n    getGroupValue,\r\n    isCondition,\r\n    isGroup\r\n} from \"../filter_builder/utils\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    captionize\r\n} from \"../../core/utils/inflector\";\r\nimport {\r\n    registerKeyboardAction\r\n} from \"./ui.grid_core.accessibility\";\r\nvar FILTER_PANEL_CLASS = \"filter-panel\";\r\nvar FILTER_PANEL_TEXT_CLASS = FILTER_PANEL_CLASS + \"-text\";\r\nvar FILTER_PANEL_CHECKBOX_CLASS = FILTER_PANEL_CLASS + \"-checkbox\";\r\nvar FILTER_PANEL_CLEAR_FILTER_CLASS = FILTER_PANEL_CLASS + \"-clear-filter\";\r\nvar FILTER_PANEL_LEFT_CONTAINER = FILTER_PANEL_CLASS + \"-left\";\r\nvar FILTER_PANEL_TARGET = \"filterPanel\";\r\nvar FilterPanelView = modules.View.inherit({\r\n    isVisible: function() {\r\n        return this.option(\"filterPanel.visible\") && this.getController(\"data\").dataSource()\r\n    },\r\n    init: function() {\r\n        this.getController(\"data\").dataSourceChanged.add(() => this.render())\r\n    },\r\n    _renderCore: function() {\r\n        var $element = this.element();\r\n        $element.empty().addClass(this.addWidgetPrefix(FILTER_PANEL_CLASS));\r\n        var $leftContainer = $(\"<div>\").addClass(this.addWidgetPrefix(FILTER_PANEL_LEFT_CONTAINER)).appendTo($element);\r\n        if (this.option(\"filterValue\") || this._filterValueBuffer) {\r\n            $leftContainer.append(this._getCheckElement()).append(this._getFilterElement()).append(this._getTextElement());\r\n            $element.append(this._getRemoveButtonElement())\r\n        } else {\r\n            $leftContainer.append(this._getFilterElement()).append(this._getTextElement())\r\n        }\r\n    },\r\n    _getCheckElement: function() {\r\n        var that = this;\r\n        var $element = $(\"<div>\").addClass(this.addWidgetPrefix(FILTER_PANEL_CHECKBOX_CLASS));\r\n        that._createComponent($element, CheckBox, {\r\n            value: that.option(\"filterPanel.filterEnabled\"),\r\n            onValueChanged: function(e) {\r\n                that.option(\"filterPanel.filterEnabled\", e.value)\r\n            }\r\n        });\r\n        $element.attr(\"title\", this.option(\"filterPanel.texts.filterEnabledHint\"));\r\n        return $element\r\n    },\r\n    _getFilterElement: function() {\r\n        var that = this;\r\n        var $element = $(\"<div>\").addClass(\"dx-icon-filter\");\r\n        eventsEngine.on($element, \"click\", () => that._showFilterBuilder());\r\n        registerKeyboardAction(\"filterPanel\", that, $element, void 0, () => that._showFilterBuilder());\r\n        that._addTabIndexToElement($element);\r\n        return $element\r\n    },\r\n    _getTextElement: function() {\r\n        var that = this;\r\n        var $textElement = $(\"<div>\").addClass(that.addWidgetPrefix(FILTER_PANEL_TEXT_CLASS));\r\n        var filterText;\r\n        var filterValue = that.option(\"filterValue\");\r\n        if (filterValue) {\r\n            when(that.getFilterText(filterValue, that.getController(\"filterSync\").getCustomFilterOperations())).done((function(filterText) {\r\n                var customizeText = that.option(\"filterPanel.customizeText\");\r\n                if (customizeText) {\r\n                    var customText = customizeText({\r\n                        component: that.component,\r\n                        filterValue: filterValue,\r\n                        text: filterText\r\n                    });\r\n                    if (\"string\" === typeof customText) {\r\n                        filterText = customText\r\n                    }\r\n                }\r\n                $textElement.text(filterText)\r\n            }))\r\n        } else {\r\n            filterText = that.option(\"filterPanel.texts.createFilter\");\r\n            $textElement.text(filterText)\r\n        }\r\n        eventsEngine.on($textElement, \"click\", () => that._showFilterBuilder());\r\n        registerKeyboardAction(\"filterPanel\", that, $textElement, void 0, () => that._showFilterBuilder());\r\n        that._addTabIndexToElement($textElement);\r\n        return $textElement\r\n    },\r\n    _showFilterBuilder: function() {\r\n        this.option(\"filterBuilderPopup.visible\", true)\r\n    },\r\n    _getRemoveButtonElement: function() {\r\n        var that = this;\r\n        var clearFilterValue = () => that.option(\"filterValue\", null);\r\n        var $element = $(\"<div>\").addClass(that.addWidgetPrefix(FILTER_PANEL_CLEAR_FILTER_CLASS)).text(that.option(\"filterPanel.texts.clearFilter\"));\r\n        eventsEngine.on($element, \"click\", clearFilterValue);\r\n        registerKeyboardAction(\"filterPanel\", this, $element, void 0, clearFilterValue);\r\n        that._addTabIndexToElement($element);\r\n        return $element\r\n    },\r\n    _addTabIndexToElement: function($element) {\r\n        if (!this.option(\"useLegacyKeyboardNavigation\")) {\r\n            var tabindex = this.option(\"tabindex\") || 0;\r\n            $element.attr(\"tabindex\", tabindex)\r\n        }\r\n    },\r\n    optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"filterValue\":\r\n                this._invalidate();\r\n                this.option(\"filterPanel.filterEnabled\", true);\r\n                args.handled = true;\r\n                break;\r\n            case \"filterPanel\":\r\n                this._invalidate();\r\n                args.handled = true;\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    _getConditionText: function(fieldText, operationText, valueText) {\r\n        var result = \"[\".concat(fieldText, \"] \").concat(operationText);\r\n        if (isDefined(valueText)) {\r\n            result += valueText\r\n        }\r\n        return result\r\n    },\r\n    _getValueMaskedText: function(value) {\r\n        return Array.isArray(value) ? \"('\".concat(value.join(\"', '\"), \"')\") : \" '\".concat(value, \"'\")\r\n    },\r\n    _getValueText: function(field, customOperation, value) {\r\n        var deferred = new Deferred;\r\n        var hasCustomOperation = customOperation && customOperation.customizeText;\r\n        if (isDefined(value) || hasCustomOperation) {\r\n            if (!hasCustomOperation && field.lookup) {\r\n                getCurrentLookupValueText(field, value, data => {\r\n                    deferred.resolve(this._getValueMaskedText(data))\r\n                })\r\n            } else {\r\n                var displayValue = Array.isArray(value) ? value : gridUtils.getDisplayValue(field, value);\r\n                when(getCurrentValueText(field, displayValue, customOperation, FILTER_PANEL_TARGET)).done(data => {\r\n                    deferred.resolve(this._getValueMaskedText(data))\r\n                })\r\n            }\r\n        } else {\r\n            deferred.resolve(\"\")\r\n        }\r\n        return deferred.promise()\r\n    },\r\n    getConditionText: function(filterValue, options) {\r\n        var that = this;\r\n        var operation = filterValue[1];\r\n        var deferred = new Deferred;\r\n        var customOperation = getCustomOperation(options.customOperations, operation);\r\n        var operationText;\r\n        var field = getField(filterValue[0], options.columns);\r\n        var fieldText = field.caption || \"\";\r\n        var value = filterValue[2];\r\n        if (customOperation) {\r\n            operationText = customOperation.caption || captionize(customOperation.name)\r\n        } else if (null === value) {\r\n            operationText = getCaptionByOperation(\"=\" === operation ? \"isblank\" : \"isnotblank\", options.filterOperationDescriptions)\r\n        } else {\r\n            operationText = getCaptionByOperation(operation, options.filterOperationDescriptions)\r\n        }\r\n        this._getValueText(field, customOperation, value).done(valueText => {\r\n            deferred.resolve(that._getConditionText(fieldText, operationText, valueText))\r\n        });\r\n        return deferred\r\n    },\r\n    getGroupText: function(filterValue, options, isInnerGroup) {\r\n        var that = this;\r\n        var result = new Deferred;\r\n        var textParts = [];\r\n        var groupValue = getGroupValue(filterValue);\r\n        filterValue.forEach(item => {\r\n            if (isCondition(item)) {\r\n                textParts.push(that.getConditionText(item, options))\r\n            } else if (isGroup(item)) {\r\n                textParts.push(that.getGroupText(item, options, true))\r\n            }\r\n        });\r\n        when.apply(this, textParts).done((function() {\r\n            var text;\r\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n                args[_key] = arguments[_key]\r\n            }\r\n            if (\"!\" === groupValue[0]) {\r\n                var groupText = options.groupOperationDescriptions[\"not\" + groupValue.substring(1, 2).toUpperCase() + groupValue.substring(2)].split(\" \");\r\n                text = \"\".concat(groupText[0], \" \").concat(args[0])\r\n            } else {\r\n                text = args.join(\" \".concat(options.groupOperationDescriptions[groupValue], \" \"))\r\n            }\r\n            if (isInnerGroup) {\r\n                text = \"(\".concat(text, \")\")\r\n            }\r\n            result.resolve(text)\r\n        }));\r\n        return result\r\n    },\r\n    getFilterText: function(filterValue, customOperations) {\r\n        var options = {\r\n            customOperations: customOperations,\r\n            columns: this.getController(\"columns\").getFilteringColumns(),\r\n            filterOperationDescriptions: this.option(\"filterBuilder.filterOperationDescriptions\"),\r\n            groupOperationDescriptions: this.option(\"filterBuilder.groupOperationDescriptions\")\r\n        };\r\n        return isCondition(filterValue) ? this.getConditionText(filterValue, options) : this.getGroupText(filterValue, options)\r\n    }\r\n});\r\nexport var filterPanelModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            filterPanel: {\r\n                visible: false,\r\n                filterEnabled: true,\r\n                texts: {\r\n                    createFilter: messageLocalization.format(\"dxDataGrid-filterPanelCreateFilter\"),\r\n                    clearFilter: messageLocalization.format(\"dxDataGrid-filterPanelClearFilter\"),\r\n                    filterEnabledHint: messageLocalization.format(\"dxDataGrid-filterPanelFilterEnabledHint\")\r\n                }\r\n            }\r\n        }\r\n    },\r\n    views: {\r\n        filterPanelView: FilterPanelView\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: {\r\n                optionChanged: function(args) {\r\n                    switch (args.name) {\r\n                        case \"filterPanel\":\r\n                            this._applyFilter();\r\n                            args.handled = true;\r\n                            break;\r\n                        default:\r\n                            this.callBase(args)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}