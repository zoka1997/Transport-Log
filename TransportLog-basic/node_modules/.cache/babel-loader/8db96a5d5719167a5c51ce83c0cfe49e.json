{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/calendar/ui.calendar.base_view.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { data as elementData } from \"../../core/element_data\";\nimport { getPublicElement } from \"../../core/element\";\nimport Widget from \"../widget/ui.widget\";\nimport coreDateUtils from \"../../core/utils/date\";\nimport { extend } from \"../../core/utils/extend\";\nimport { noop } from \"../../core/utils/common\";\nimport dateSerialization from \"../../core/utils/date_serialization\";\nimport messageLocalization from \"../../localization/message\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { name as clickEventName } from \"../../events/click\";\nvar {\n  abstract: abstract\n} = Widget;\nvar CALENDAR_OTHER_VIEW_CLASS = \"dx-calendar-other-view\";\nvar CALENDAR_CELL_CLASS = \"dx-calendar-cell\";\nvar CALENDAR_EMPTY_CELL_CLASS = \"dx-calendar-empty-cell\";\nvar CALENDAR_TODAY_CLASS = \"dx-calendar-today\";\nvar CALENDAR_SELECTED_DATE_CLASS = \"dx-calendar-selected-date\";\nvar CALENDAR_CONTOURED_DATE_CLASS = \"dx-calendar-contoured-date\";\nvar CALENDAR_DXCLICK_EVENT_NAME = addNamespace(clickEventName, \"dxCalendar\");\nvar CALENDAR_DATE_VALUE_KEY = \"dxDateValueKey\";\nvar BaseView = Widget.inherit({\n  _getViewName: function () {\n    return \"base\";\n  },\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      date: new Date(),\n      focusStateEnabled: false,\n      cellTemplate: null,\n      disabledDates: null,\n      onCellClick: null,\n      rowCount: 3,\n      colCount: 4,\n      allowValueSelection: true,\n      _todayDate: () => new Date()\n    });\n  },\n  _initMarkup: function () {\n    this.callBase();\n\n    this._renderImpl();\n  },\n  _renderImpl: function () {\n    this.$element().append(this._createTable());\n\n    this._createDisabledDatesHandler();\n\n    this._renderBody();\n\n    this._renderContouredDate();\n\n    this._renderValue();\n\n    this._renderEvents();\n  },\n  _createTable: function () {\n    this._$table = $(\"<table>\");\n    this.setAria({\n      label: messageLocalization.format(\"dxCalendar-ariaWidgetName\"),\n      role: \"grid\"\n    }, this._$table);\n    return this._$table;\n  },\n  _renderBody: function () {\n    this.$body = $(\"<tbody>\").appendTo(this._$table);\n    var rowData = {\n      cellDate: this._getFirstCellData(),\n      prevCellDate: null\n    };\n\n    for (var rowIndex = 0, rowCount = this.option(\"rowCount\"); rowIndex < rowCount; rowIndex++) {\n      rowData.row = this._createRow();\n\n      for (var colIndex = 0, colCount = this.option(\"colCount\"); colIndex < colCount; colIndex++) {\n        this._renderCell(rowData, colIndex);\n      }\n    }\n  },\n  _createRow: function () {\n    var row = domAdapter.createElement(\"tr\");\n    this.setAria(\"role\", \"row\", $(row));\n    this.$body.get(0).appendChild(row);\n    return row;\n  },\n  _appendCell: function (row, cell) {\n    if (!this._appendMethodName) {\n      this._cacheAppendMethodName();\n    }\n\n    $(row)[this._appendMethodName](cell);\n  },\n  _cacheAppendMethodName: function (rtlEnabled) {\n    this._appendMethodName = (null !== rtlEnabled && void 0 !== rtlEnabled ? rtlEnabled : this.option(\"rtlEnabled\")) ? \"prepend\" : \"append\";\n  },\n  _createCell: function (cellDate) {\n    var cell = domAdapter.createElement(\"td\");\n    var $cell = $(cell);\n    cell.className = this._getClassNameByDate(cellDate);\n    cell.setAttribute(\"data-value\", dateSerialization.serializeDate(cellDate, coreDateUtils.getShortDateFormat()));\n    elementData(cell, CALENDAR_DATE_VALUE_KEY, cellDate);\n    this.setAria({\n      role: \"gridcell\",\n      label: this.getCellAriaLabel(cellDate)\n    }, $cell);\n    return {\n      cell: cell,\n      $cell: $cell\n    };\n  },\n  _renderCell: function (params, cellIndex) {\n    var {\n      cellDate: cellDate,\n      prevCellDate: prevCellDate,\n      row: row\n    } = params;\n\n    if (prevCellDate) {\n      coreDateUtils.fixTimezoneGap(prevCellDate, cellDate);\n    }\n\n    params.prevCellDate = cellDate;\n\n    var {\n      cell: cell,\n      $cell: $cell\n    } = this._createCell(cellDate);\n\n    var cellTemplate = this.option(\"cellTemplate\");\n\n    this._appendCell(row, cell);\n\n    if (cellTemplate) {\n      cellTemplate.render(this._prepareCellTemplateData(cellDate, cellIndex, $cell));\n    } else {\n      cell.innerHTML = this._getCellText(cellDate);\n    }\n\n    params.cellDate = this._getNextCellData(cellDate);\n  },\n  _getClassNameByDate: function (cellDate) {\n    var className = CALENDAR_CELL_CLASS;\n\n    if (this._isTodayCell(cellDate)) {\n      className += \" \".concat(CALENDAR_TODAY_CLASS);\n    }\n\n    if (this._isDateOutOfRange(cellDate) || this.isDateDisabled(cellDate)) {\n      className += \" \".concat(CALENDAR_EMPTY_CELL_CLASS);\n    }\n\n    if (this._isOtherView(cellDate)) {\n      className += \" \".concat(CALENDAR_OTHER_VIEW_CLASS);\n    }\n\n    return className;\n  },\n  _prepareCellTemplateData: function (cellDate, cellIndex, $cell) {\n    return {\n      model: {\n        text: this._getCellText(cellDate),\n        date: cellDate,\n        view: this._getViewName()\n      },\n      container: getPublicElement($cell),\n      index: cellIndex\n    };\n  },\n  _renderEvents: function () {\n    this._createCellClickAction();\n\n    eventsEngine.off(this._$table, CALENDAR_DXCLICK_EVENT_NAME);\n    eventsEngine.on(this._$table, CALENDAR_DXCLICK_EVENT_NAME, \"td\", e => {\n      if (!$(e.currentTarget).hasClass(CALENDAR_EMPTY_CELL_CLASS)) {\n        this._cellClickAction({\n          event: e,\n          value: $(e.currentTarget).data(CALENDAR_DATE_VALUE_KEY)\n        });\n      }\n    });\n  },\n  _createCellClickAction: function () {\n    this._cellClickAction = this._createActionByOption(\"onCellClick\");\n  },\n  _createDisabledDatesHandler: function () {\n    var disabledDates = this.option(\"disabledDates\");\n    this._disabledDatesHandler = Array.isArray(disabledDates) ? this._getDefaultDisabledDatesHandler(disabledDates) : disabledDates || noop;\n  },\n  _getDefaultDisabledDatesHandler: function (disabledDates) {\n    return noop;\n  },\n  _isTodayCell: abstract,\n  _isDateOutOfRange: abstract,\n  isDateDisabled: function (cellDate) {\n    var dateParts = {\n      date: cellDate,\n      view: this._getViewName()\n    };\n    return this._disabledDatesHandler(dateParts);\n  },\n  _isOtherView: abstract,\n  _getCellText: abstract,\n  _getFirstCellData: abstract,\n  _getNextCellData: abstract,\n  _renderContouredDate: function (contouredDate) {\n    if (!this.option(\"focusStateEnabled\")) {\n      return;\n    }\n\n    contouredDate = contouredDate || this.option(\"contouredDate\");\n\n    var $oldContouredCell = this._getContouredCell();\n\n    var $newContouredCell = this._getCellByDate(contouredDate);\n\n    $oldContouredCell.removeClass(CALENDAR_CONTOURED_DATE_CLASS);\n    $newContouredCell.addClass(CALENDAR_CONTOURED_DATE_CLASS);\n  },\n  _getContouredCell: function () {\n    return this._$table.find(\".\".concat(CALENDAR_CONTOURED_DATE_CLASS));\n  },\n  _changeValue: function (cellDate) {\n    if (cellDate) {\n      var value = this.option(\"value\");\n      var newValue = value ? new Date(value) : new Date();\n      newValue.setDate(cellDate.getDate());\n      newValue.setMonth(cellDate.getMonth());\n      newValue.setFullYear(cellDate.getFullYear());\n      newValue.setDate(cellDate.getDate());\n      this.option(\"value\", newValue);\n    } else {\n      this.option(\"value\", null);\n    }\n  },\n  _renderValue: function () {\n    if (!this.option(\"allowValueSelection\")) {\n      return;\n    }\n\n    var value = this.option(\"value\");\n\n    var selectedCell = this._getCellByDate(value);\n\n    if (this._selectedCell) {\n      this._selectedCell.removeClass(CALENDAR_SELECTED_DATE_CLASS);\n    }\n\n    selectedCell.addClass(CALENDAR_SELECTED_DATE_CLASS);\n    this._selectedCell = selectedCell;\n  },\n  getCellAriaLabel: function (date) {\n    return this._getCellText(date);\n  },\n  _getFirstAvailableDate: function () {\n    var date = this.option(\"date\");\n    var min = this.option(\"min\");\n    date = coreDateUtils.getFirstDateView(this._getViewName(), date);\n    return new Date(min && date < min ? min : date);\n  },\n  _getCellByDate: abstract,\n  isBoundary: abstract,\n  _optionChanged: function (args) {\n    var {\n      name: name,\n      value: value\n    } = args;\n\n    switch (name) {\n      case \"value\":\n        this._renderValue();\n\n        break;\n\n      case \"contouredDate\":\n        this._renderContouredDate(value);\n\n        break;\n\n      case \"onCellClick\":\n        this._createCellClickAction();\n\n        break;\n\n      case \"disabledDates\":\n      case \"cellTemplate\":\n        this._invalidate();\n\n        break;\n\n      case \"rtlEnabled\":\n        this._cacheAppendMethodName(value);\n\n        this.callBase(args);\n        break;\n\n      case \"_todayDate\":\n        this._renderBody();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n});\nexport default BaseView;","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/calendar/ui.calendar.base_view.js"],"names":["$","domAdapter","eventsEngine","data","elementData","getPublicElement","Widget","coreDateUtils","extend","noop","dateSerialization","messageLocalization","addNamespace","name","clickEventName","abstract","CALENDAR_OTHER_VIEW_CLASS","CALENDAR_CELL_CLASS","CALENDAR_EMPTY_CELL_CLASS","CALENDAR_TODAY_CLASS","CALENDAR_SELECTED_DATE_CLASS","CALENDAR_CONTOURED_DATE_CLASS","CALENDAR_DXCLICK_EVENT_NAME","CALENDAR_DATE_VALUE_KEY","BaseView","inherit","_getViewName","_getDefaultOptions","callBase","date","Date","focusStateEnabled","cellTemplate","disabledDates","onCellClick","rowCount","colCount","allowValueSelection","_todayDate","_initMarkup","_renderImpl","$element","append","_createTable","_createDisabledDatesHandler","_renderBody","_renderContouredDate","_renderValue","_renderEvents","_$table","setAria","label","format","role","$body","appendTo","rowData","cellDate","_getFirstCellData","prevCellDate","rowIndex","option","row","_createRow","colIndex","_renderCell","createElement","get","appendChild","_appendCell","cell","_appendMethodName","_cacheAppendMethodName","rtlEnabled","_createCell","$cell","className","_getClassNameByDate","setAttribute","serializeDate","getShortDateFormat","getCellAriaLabel","params","cellIndex","fixTimezoneGap","render","_prepareCellTemplateData","innerHTML","_getCellText","_getNextCellData","_isTodayCell","concat","_isDateOutOfRange","isDateDisabled","_isOtherView","model","text","view","container","index","_createCellClickAction","off","on","e","currentTarget","hasClass","_cellClickAction","event","value","_createActionByOption","_disabledDatesHandler","Array","isArray","_getDefaultDisabledDatesHandler","dateParts","contouredDate","$oldContouredCell","_getContouredCell","$newContouredCell","_getCellByDate","removeClass","addClass","find","_changeValue","newValue","setDate","getDate","setMonth","getMonth","setFullYear","getFullYear","selectedCell","_selectedCell","_getFirstAvailableDate","min","getFirstDateView","isBoundary","_optionChanged","args","_invalidate"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/calendar/ui.calendar.base_view.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport domAdapter from \"../../core/dom_adapter\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    data as elementData\r\n} from \"../../core/element_data\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../core/element\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport coreDateUtils from \"../../core/utils/date\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    noop\r\n} from \"../../core/utils/common\";\r\nimport dateSerialization from \"../../core/utils/date_serialization\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport {\r\n    addNamespace\r\n} from \"../../events/utils/index\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../events/click\";\r\nvar {\r\n    abstract: abstract\r\n} = Widget;\r\nvar CALENDAR_OTHER_VIEW_CLASS = \"dx-calendar-other-view\";\r\nvar CALENDAR_CELL_CLASS = \"dx-calendar-cell\";\r\nvar CALENDAR_EMPTY_CELL_CLASS = \"dx-calendar-empty-cell\";\r\nvar CALENDAR_TODAY_CLASS = \"dx-calendar-today\";\r\nvar CALENDAR_SELECTED_DATE_CLASS = \"dx-calendar-selected-date\";\r\nvar CALENDAR_CONTOURED_DATE_CLASS = \"dx-calendar-contoured-date\";\r\nvar CALENDAR_DXCLICK_EVENT_NAME = addNamespace(clickEventName, \"dxCalendar\");\r\nvar CALENDAR_DATE_VALUE_KEY = \"dxDateValueKey\";\r\nvar BaseView = Widget.inherit({\r\n    _getViewName: function() {\r\n        return \"base\"\r\n    },\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            date: new Date,\r\n            focusStateEnabled: false,\r\n            cellTemplate: null,\r\n            disabledDates: null,\r\n            onCellClick: null,\r\n            rowCount: 3,\r\n            colCount: 4,\r\n            allowValueSelection: true,\r\n            _todayDate: () => new Date\r\n        })\r\n    },\r\n    _initMarkup: function() {\r\n        this.callBase();\r\n        this._renderImpl()\r\n    },\r\n    _renderImpl: function() {\r\n        this.$element().append(this._createTable());\r\n        this._createDisabledDatesHandler();\r\n        this._renderBody();\r\n        this._renderContouredDate();\r\n        this._renderValue();\r\n        this._renderEvents()\r\n    },\r\n    _createTable: function() {\r\n        this._$table = $(\"<table>\");\r\n        this.setAria({\r\n            label: messageLocalization.format(\"dxCalendar-ariaWidgetName\"),\r\n            role: \"grid\"\r\n        }, this._$table);\r\n        return this._$table\r\n    },\r\n    _renderBody: function() {\r\n        this.$body = $(\"<tbody>\").appendTo(this._$table);\r\n        var rowData = {\r\n            cellDate: this._getFirstCellData(),\r\n            prevCellDate: null\r\n        };\r\n        for (var rowIndex = 0, rowCount = this.option(\"rowCount\"); rowIndex < rowCount; rowIndex++) {\r\n            rowData.row = this._createRow();\r\n            for (var colIndex = 0, colCount = this.option(\"colCount\"); colIndex < colCount; colIndex++) {\r\n                this._renderCell(rowData, colIndex)\r\n            }\r\n        }\r\n    },\r\n    _createRow: function() {\r\n        var row = domAdapter.createElement(\"tr\");\r\n        this.setAria(\"role\", \"row\", $(row));\r\n        this.$body.get(0).appendChild(row);\r\n        return row\r\n    },\r\n    _appendCell: function(row, cell) {\r\n        if (!this._appendMethodName) {\r\n            this._cacheAppendMethodName()\r\n        }\r\n        $(row)[this._appendMethodName](cell)\r\n    },\r\n    _cacheAppendMethodName: function(rtlEnabled) {\r\n        this._appendMethodName = (null !== rtlEnabled && void 0 !== rtlEnabled ? rtlEnabled : this.option(\"rtlEnabled\")) ? \"prepend\" : \"append\"\r\n    },\r\n    _createCell: function(cellDate) {\r\n        var cell = domAdapter.createElement(\"td\");\r\n        var $cell = $(cell);\r\n        cell.className = this._getClassNameByDate(cellDate);\r\n        cell.setAttribute(\"data-value\", dateSerialization.serializeDate(cellDate, coreDateUtils.getShortDateFormat()));\r\n        elementData(cell, CALENDAR_DATE_VALUE_KEY, cellDate);\r\n        this.setAria({\r\n            role: \"gridcell\",\r\n            label: this.getCellAriaLabel(cellDate)\r\n        }, $cell);\r\n        return {\r\n            cell: cell,\r\n            $cell: $cell\r\n        }\r\n    },\r\n    _renderCell: function(params, cellIndex) {\r\n        var {\r\n            cellDate: cellDate,\r\n            prevCellDate: prevCellDate,\r\n            row: row\r\n        } = params;\r\n        if (prevCellDate) {\r\n            coreDateUtils.fixTimezoneGap(prevCellDate, cellDate)\r\n        }\r\n        params.prevCellDate = cellDate;\r\n        var {\r\n            cell: cell,\r\n            $cell: $cell\r\n        } = this._createCell(cellDate);\r\n        var cellTemplate = this.option(\"cellTemplate\");\r\n        this._appendCell(row, cell);\r\n        if (cellTemplate) {\r\n            cellTemplate.render(this._prepareCellTemplateData(cellDate, cellIndex, $cell))\r\n        } else {\r\n            cell.innerHTML = this._getCellText(cellDate)\r\n        }\r\n        params.cellDate = this._getNextCellData(cellDate)\r\n    },\r\n    _getClassNameByDate: function(cellDate) {\r\n        var className = CALENDAR_CELL_CLASS;\r\n        if (this._isTodayCell(cellDate)) {\r\n            className += \" \".concat(CALENDAR_TODAY_CLASS)\r\n        }\r\n        if (this._isDateOutOfRange(cellDate) || this.isDateDisabled(cellDate)) {\r\n            className += \" \".concat(CALENDAR_EMPTY_CELL_CLASS)\r\n        }\r\n        if (this._isOtherView(cellDate)) {\r\n            className += \" \".concat(CALENDAR_OTHER_VIEW_CLASS)\r\n        }\r\n        return className\r\n    },\r\n    _prepareCellTemplateData: function(cellDate, cellIndex, $cell) {\r\n        return {\r\n            model: {\r\n                text: this._getCellText(cellDate),\r\n                date: cellDate,\r\n                view: this._getViewName()\r\n            },\r\n            container: getPublicElement($cell),\r\n            index: cellIndex\r\n        }\r\n    },\r\n    _renderEvents: function() {\r\n        this._createCellClickAction();\r\n        eventsEngine.off(this._$table, CALENDAR_DXCLICK_EVENT_NAME);\r\n        eventsEngine.on(this._$table, CALENDAR_DXCLICK_EVENT_NAME, \"td\", e => {\r\n            if (!$(e.currentTarget).hasClass(CALENDAR_EMPTY_CELL_CLASS)) {\r\n                this._cellClickAction({\r\n                    event: e,\r\n                    value: $(e.currentTarget).data(CALENDAR_DATE_VALUE_KEY)\r\n                })\r\n            }\r\n        })\r\n    },\r\n    _createCellClickAction: function() {\r\n        this._cellClickAction = this._createActionByOption(\"onCellClick\")\r\n    },\r\n    _createDisabledDatesHandler: function() {\r\n        var disabledDates = this.option(\"disabledDates\");\r\n        this._disabledDatesHandler = Array.isArray(disabledDates) ? this._getDefaultDisabledDatesHandler(disabledDates) : disabledDates || noop\r\n    },\r\n    _getDefaultDisabledDatesHandler: function(disabledDates) {\r\n        return noop\r\n    },\r\n    _isTodayCell: abstract,\r\n    _isDateOutOfRange: abstract,\r\n    isDateDisabled: function(cellDate) {\r\n        var dateParts = {\r\n            date: cellDate,\r\n            view: this._getViewName()\r\n        };\r\n        return this._disabledDatesHandler(dateParts)\r\n    },\r\n    _isOtherView: abstract,\r\n    _getCellText: abstract,\r\n    _getFirstCellData: abstract,\r\n    _getNextCellData: abstract,\r\n    _renderContouredDate: function(contouredDate) {\r\n        if (!this.option(\"focusStateEnabled\")) {\r\n            return\r\n        }\r\n        contouredDate = contouredDate || this.option(\"contouredDate\");\r\n        var $oldContouredCell = this._getContouredCell();\r\n        var $newContouredCell = this._getCellByDate(contouredDate);\r\n        $oldContouredCell.removeClass(CALENDAR_CONTOURED_DATE_CLASS);\r\n        $newContouredCell.addClass(CALENDAR_CONTOURED_DATE_CLASS)\r\n    },\r\n    _getContouredCell: function() {\r\n        return this._$table.find(\".\".concat(CALENDAR_CONTOURED_DATE_CLASS))\r\n    },\r\n    _changeValue: function(cellDate) {\r\n        if (cellDate) {\r\n            var value = this.option(\"value\");\r\n            var newValue = value ? new Date(value) : new Date;\r\n            newValue.setDate(cellDate.getDate());\r\n            newValue.setMonth(cellDate.getMonth());\r\n            newValue.setFullYear(cellDate.getFullYear());\r\n            newValue.setDate(cellDate.getDate());\r\n            this.option(\"value\", newValue)\r\n        } else {\r\n            this.option(\"value\", null)\r\n        }\r\n    },\r\n    _renderValue: function() {\r\n        if (!this.option(\"allowValueSelection\")) {\r\n            return\r\n        }\r\n        var value = this.option(\"value\");\r\n        var selectedCell = this._getCellByDate(value);\r\n        if (this._selectedCell) {\r\n            this._selectedCell.removeClass(CALENDAR_SELECTED_DATE_CLASS)\r\n        }\r\n        selectedCell.addClass(CALENDAR_SELECTED_DATE_CLASS);\r\n        this._selectedCell = selectedCell\r\n    },\r\n    getCellAriaLabel: function(date) {\r\n        return this._getCellText(date)\r\n    },\r\n    _getFirstAvailableDate: function() {\r\n        var date = this.option(\"date\");\r\n        var min = this.option(\"min\");\r\n        date = coreDateUtils.getFirstDateView(this._getViewName(), date);\r\n        return new Date(min && date < min ? min : date)\r\n    },\r\n    _getCellByDate: abstract,\r\n    isBoundary: abstract,\r\n    _optionChanged: function(args) {\r\n        var {\r\n            name: name,\r\n            value: value\r\n        } = args;\r\n        switch (name) {\r\n            case \"value\":\r\n                this._renderValue();\r\n                break;\r\n            case \"contouredDate\":\r\n                this._renderContouredDate(value);\r\n                break;\r\n            case \"onCellClick\":\r\n                this._createCellClickAction();\r\n                break;\r\n            case \"disabledDates\":\r\n            case \"cellTemplate\":\r\n                this._invalidate();\r\n                break;\r\n            case \"rtlEnabled\":\r\n                this._cacheAppendMethodName(value);\r\n                this.callBase(args);\r\n                break;\r\n            case \"_todayDate\":\r\n                this._renderBody();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nexport default BaseView;\r\n"]},"metadata":{},"sourceType":"module"}