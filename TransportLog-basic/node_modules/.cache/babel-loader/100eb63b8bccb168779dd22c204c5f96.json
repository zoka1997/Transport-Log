{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/number_box/number_box.mask.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { extend } from \"../../core/utils/extend\";\nimport { isNumeric, isDefined, isFunction, isString } from \"../../core/utils/type\";\nimport devices from \"../../core/devices\";\nimport { fitIntoRange, inRange } from \"../../core/utils/math\";\nimport number from \"../../localization/number\";\nimport { getCaretWithOffset, isCaretInBoundaries, getCaretInBoundaries, getCaretBoundaries, getCaretAfterFormat, getCaretOffset } from \"./number_box.caret\";\nimport { getFormat as getLDMLFormat } from \"../../localization/ldml/number\";\nimport NumberBoxBase from \"./number_box.base\";\nimport { addNamespace, getChar, normalizeKeyName, isCommandKeyPressed } from \"../../events/utils/index\";\nimport { ensureDefined, escapeRegExp } from \"../../core/utils/common\";\nimport { getRealSeparatorIndex, getNthOccurrence, splitByIndex, adjustPercentValue } from \"./utils\";\nvar NUMBER_FORMATTER_NAMESPACE = \"dxNumberFormatter\";\nvar MOVE_FORWARD = 1;\nvar MOVE_BACKWARD = -1;\nvar MINUS = \"-\";\nvar MINUS_KEY = \"minus\";\nvar INPUT_EVENT = \"input\";\nvar CARET_TIMEOUT_DURATION = 0;\nvar NumberBoxMask = NumberBoxBase.inherit({\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      useMaskBehavior: true,\n      format: null\n    });\n  },\n  _isDeleteKey: function (key) {\n    return \"del\" === key;\n  },\n  _supportedKeys: function () {\n    if (!this._useMaskBehavior()) {\n      return this.callBase();\n    }\n\n    return extend(this.callBase(), {\n      minus: this._revertSign.bind(this),\n      del: this._removeHandler.bind(this),\n      backspace: this._removeHandler.bind(this),\n      leftArrow: this._arrowHandler.bind(this, MOVE_BACKWARD),\n      rightArrow: this._arrowHandler.bind(this, MOVE_FORWARD),\n      home: this._moveCaretToBoundaryEventHandler.bind(this, MOVE_FORWARD),\n      enter: this._updateFormattedValue.bind(this),\n      end: this._moveCaretToBoundaryEventHandler.bind(this, MOVE_BACKWARD)\n    });\n  },\n  _getTextSeparatorIndex: function (text) {\n    var decimalSeparator = number.getDecimalSeparator();\n    var realSeparatorOccurrenceIndex = getRealSeparatorIndex(this.option(\"format\")).occurrence;\n    return getNthOccurrence(text, decimalSeparator, realSeparatorOccurrenceIndex);\n  },\n  _focusInHandler: function (e) {\n    if (!this._preventNestedFocusEvent(e)) {\n      this.clearCaretTimeout();\n      this._caretTimeout = setTimeout(function () {\n        this._caretTimeout = void 0;\n\n        var caret = this._caret();\n\n        if (caret.start === caret.end && this._useMaskBehavior()) {\n          var text = this._getInputVal();\n\n          var decimalSeparatorIndex = this._getTextSeparatorIndex(text);\n\n          if (decimalSeparatorIndex >= 0) {\n            this._caret({\n              start: decimalSeparatorIndex,\n              end: decimalSeparatorIndex\n            });\n          } else {\n            this._moveCaretToBoundaryEventHandler(MOVE_BACKWARD, e);\n          }\n        }\n      }.bind(this), CARET_TIMEOUT_DURATION);\n    }\n\n    this.callBase(e);\n  },\n  _focusOutHandler: function (e) {\n    var shouldHandleEvent = !this._preventNestedFocusEvent(e);\n\n    if (shouldHandleEvent) {\n      this._focusOutOccurs = true;\n\n      if (this._useMaskBehavior()) {\n        this._updateFormattedValue();\n      }\n    }\n\n    this.callBase(e);\n\n    if (shouldHandleEvent) {\n      this._focusOutOccurs = false;\n    }\n  },\n\n  _hasValueBeenChanged(inputValue) {\n    var format = this._getFormatPattern();\n\n    var value = this.option(\"value\");\n    var formatted = this._format(value, format) || \"\";\n    return formatted !== inputValue;\n  },\n\n  _updateFormattedValue: function () {\n    var inputValue = this._getInputVal();\n\n    if (this._hasValueBeenChanged(inputValue)) {\n      this._updateParsedValue();\n\n      this._adjustParsedValue();\n\n      this._setTextByParsedValue();\n\n      if (this._parsedValue !== this.option(\"value\")) {\n        eventsEngine.trigger(this._input(), \"change\");\n      }\n    }\n  },\n  _arrowHandler: function (step, e) {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n\n    var text = this._getInputVal();\n\n    var format = this._getFormatPattern();\n\n    var nextCaret = getCaretWithOffset(this._caret(), step);\n\n    if (!isCaretInBoundaries(nextCaret, text, format)) {\n      nextCaret = step === MOVE_FORWARD ? nextCaret.end : nextCaret.start;\n      e.preventDefault();\n\n      this._caret(getCaretInBoundaries(nextCaret, text, format));\n    }\n  },\n  _moveCaretToBoundary: function (direction) {\n    var boundaries = getCaretBoundaries(this._getInputVal(), this._getFormatPattern());\n    var newCaret = getCaretWithOffset(direction === MOVE_FORWARD ? boundaries.start : boundaries.end, 0);\n\n    this._caret(newCaret);\n  },\n  _moveCaretToBoundaryEventHandler: function (direction, e) {\n    if (!this._useMaskBehavior() || e && e.shiftKey) {\n      return;\n    }\n\n    this._moveCaretToBoundary(direction);\n\n    e && e.preventDefault();\n  },\n  _shouldMoveCaret: function (text, caret) {\n    var decimalSeparator = number.getDecimalSeparator();\n    var isDecimalSeparatorNext = text.charAt(caret.end) === decimalSeparator;\n    var moveToFloat = (this._lastKey === decimalSeparator || \".\" === this._lastKey || \",\" === this._lastKey) && isDecimalSeparatorNext;\n    return moveToFloat;\n  },\n  _getInputVal: function () {\n    return number.convertDigits(this._input().val(), true);\n  },\n  _keyboardHandler: function (e) {\n    this.clearCaretTimeout();\n    this._lastKey = number.convertDigits(getChar(e), true);\n    this._lastKeyName = normalizeKeyName(e);\n\n    if (!this._shouldHandleKey(e.originalEvent)) {\n      return this.callBase(e);\n    }\n\n    var normalizedText = this._getInputVal();\n\n    var caret = this._caret();\n\n    var enteredChar = this._lastKeyName === MINUS_KEY ? \"\" : this._lastKey;\n\n    var newValue = this._tryParse(normalizedText, caret, enteredChar);\n\n    if (this._shouldMoveCaret(normalizedText, caret)) {\n      this._moveCaret(1);\n\n      e.originalEvent.preventDefault();\n    }\n\n    if (void 0 === newValue) {\n      if (this._lastKeyName !== MINUS_KEY) {\n        e.originalEvent.preventDefault();\n      }\n    } else {\n      this._parsedValue = newValue;\n    }\n\n    return this.callBase(e);\n  },\n  _keyPressHandler: function (e) {\n    if (!this._useMaskBehavior()) {\n      this.callBase(e);\n    }\n  },\n  _removeHandler: function (e) {\n    var caret = this._caret();\n\n    var text = this._getInputVal();\n\n    var start = caret.start;\n    var end = caret.end;\n    this._lastKey = getChar(e);\n    this._lastKeyName = normalizeKeyName(e);\n\n    var isDeleteKey = this._isDeleteKey(this._lastKeyName);\n\n    var isBackspaceKey = !isDeleteKey;\n\n    if (start === end) {\n      var caretPosition = start;\n      var canDelete = isBackspaceKey && caretPosition > 0 || isDeleteKey && caretPosition < text.length;\n\n      if (canDelete) {\n        isDeleteKey && end++;\n        isBackspaceKey && start--;\n      } else {\n        e.preventDefault();\n        return;\n      }\n    }\n\n    var char = text.slice(start, end);\n\n    if (this._isStub(char)) {\n      this._moveCaret(isDeleteKey ? 1 : -1);\n\n      if (this._parsedValue < 0 || 1 / this._parsedValue === -1 / 0) {\n        this._revertSign(e);\n\n        this._setTextByParsedValue();\n      }\n\n      e.preventDefault();\n      return;\n    }\n\n    var decimalSeparator = number.getDecimalSeparator();\n\n    if (char === decimalSeparator) {\n      var decimalSeparatorIndex = text.indexOf(decimalSeparator);\n\n      if (this._isNonStubAfter(decimalSeparatorIndex + 1)) {\n        this._moveCaret(isDeleteKey ? 1 : -1);\n\n        e.preventDefault();\n      }\n\n      return;\n    }\n\n    if (end - start < text.length) {\n      var editedText = this._replaceSelectedText(text, {\n        start: start,\n        end: end\n      }, \"\");\n\n      var noDigits = editedText.search(/[0-9]/) < 0;\n\n      if (noDigits && this._isValueInRange(0)) {\n        this._parsedValue = this._parsedValue < 0 || 1 / this._parsedValue === -1 / 0 ? -0 : 0;\n        return;\n      }\n    }\n\n    var valueAfterRemoving = this._tryParse(text, {\n      start: start,\n      end: end\n    }, \"\");\n\n    if (void 0 === valueAfterRemoving) {\n      e.preventDefault();\n    } else {\n      this._parsedValue = valueAfterRemoving;\n    }\n  },\n  _isPercentFormat: function () {\n    var format = this._getFormatPattern();\n\n    var noEscapedFormat = format.replace(/'[^']+'/g, \"\");\n    return -1 !== noEscapedFormat.indexOf(\"%\");\n  },\n  _parse: function (text, format) {\n    var formatOption = this.option(\"format\");\n    var isCustomParser = isFunction(formatOption.parser);\n    var parser = isCustomParser ? formatOption.parser : number.parse;\n    var integerPartStartIndex = 0;\n\n    if (!isCustomParser) {\n      var formatPointIndex = getRealSeparatorIndex(format).index;\n\n      var textPointIndex = this._getTextSeparatorIndex(text);\n\n      var formatIntegerPartLength = -1 !== formatPointIndex ? formatPointIndex : format.length;\n      var textIntegerPartLength = -1 !== textPointIndex ? textPointIndex : text.length;\n\n      if (textIntegerPartLength > formatIntegerPartLength && -1 === format.indexOf(\"#\")) {\n        integerPartStartIndex = textIntegerPartLength - formatIntegerPartLength;\n      }\n    }\n\n    text = text.substr(integerPartStartIndex);\n    return parser(text, format);\n  },\n  _format: function (value, format) {\n    var formatOption = this.option(\"format\");\n    var customFormatter = (null === formatOption || void 0 === formatOption ? void 0 : formatOption.formatter) || formatOption;\n    var formatter = isFunction(customFormatter) ? customFormatter : number.format;\n    var formattedValue = null === value ? \"\" : formatter(value, format);\n    return formattedValue;\n  },\n  _getFormatPattern: function () {\n    if (!this._currentFormat) {\n      this._updateFormat();\n    }\n\n    return this._currentFormat;\n  },\n  _updateFormat: function () {\n    var format = this.option(\"format\");\n    var isCustomParser = isFunction(null === format || void 0 === format ? void 0 : format.parser);\n    var isLDMLPattern = isString(format) && (format.indexOf(\"0\") >= 0 || format.indexOf(\"#\") >= 0);\n    var isExponentialFormat = \"exponential\" === format || \"exponential\" === (null === format || void 0 === format ? void 0 : format.type);\n    var shouldUseFormatAsIs = isCustomParser || isLDMLPattern || isExponentialFormat;\n    this._currentFormat = shouldUseFormatAsIs ? format : getLDMLFormat(value => {\n      var text = this._format(value, format);\n\n      return number.convertDigits(text, true);\n    });\n  },\n  _getFormatForSign: function (text) {\n    var format = this._getFormatPattern();\n\n    if (isString(format)) {\n      var signParts = format.split(\";\");\n      var sign = number.getSign(text, format);\n      signParts[1] = signParts[1] || \"-\" + signParts[0];\n      return sign < 0 ? signParts[1] : signParts[0];\n    } else {\n      var _sign = number.getSign(text);\n\n      return _sign < 0 ? \"-\" : \"\";\n    }\n  },\n  _removeStubs: function (text, excludeComma) {\n    var format = this._getFormatForSign(text);\n\n    var thousandsSeparator = number.getThousandsSeparator();\n\n    var stubs = this._getStubs(format);\n\n    var result = text;\n\n    if (stubs.length) {\n      var prefixStubs = stubs[0];\n      var postfixRegex = new RegExp(\"(\" + escapeRegExp(stubs[1] || \"\") + \")$\", \"g\");\n      var decoratorsRegex = new RegExp(\"[-\" + escapeRegExp(excludeComma ? \"\" : thousandsSeparator) + \"]\", \"g\");\n      result = result.replace(prefixStubs, \"\").replace(postfixRegex, \"\").replace(decoratorsRegex, \"\");\n    }\n\n    return result;\n  },\n  _getStubs: function (format) {\n    var regExpResult = /[^']([#0.,]+)/g.exec(format);\n    var pattern = regExpResult && regExpResult[0].trim();\n    return format.split(pattern).map(function (stub) {\n      return stub.replace(/'/g, \"\");\n    });\n  },\n  _truncateToPrecision: function (value, maxPrecision) {\n    if (isDefined(value)) {\n      var strValue = value.toString();\n      var decimalSeparatorIndex = strValue.indexOf(\".\");\n\n      if (strValue && decimalSeparatorIndex > -1) {\n        var parsedValue = parseFloat(strValue.substr(0, decimalSeparatorIndex + maxPrecision + 1));\n        return isNaN(parsedValue) ? value : parsedValue;\n      }\n    }\n\n    return value;\n  },\n  _tryParse: function (text, selection, char) {\n    var editedText = this._replaceSelectedText(text, selection, char);\n\n    var format = this._getFormatPattern();\n\n    var isTextSelected = selection.start !== selection.end;\n\n    var parsedValue = this._getParsedValue(editedText, format);\n\n    var maxPrecision = !format.parser && this._getPrecisionLimits(editedText).max;\n\n    var isValueChanged = parsedValue !== this._parsedValue;\n    var decimalSeparator = number.getDecimalSeparator();\n    var isDecimalPointRestricted = char === decimalSeparator && 0 === maxPrecision;\n\n    var isUselessCharRestricted = !isTextSelected && !isValueChanged && char !== MINUS && !this._isValueIncomplete(editedText) && this._isStub(char);\n\n    if (isDecimalPointRestricted || isUselessCharRestricted) {\n      return;\n    }\n\n    if (\"\" === this._removeStubs(editedText)) {\n      parsedValue = Math.abs(0 * this._parsedValue);\n    }\n\n    if (isNaN(parsedValue)) {\n      return;\n    }\n\n    var value = null === parsedValue ? this._parsedValue : parsedValue;\n    parsedValue = maxPrecision ? this._truncateToPrecision(value, maxPrecision) : parsedValue;\n    return !format.parser && this._isPercentFormat() ? adjustPercentValue(parsedValue, maxPrecision) : parsedValue;\n  },\n  _getParsedValue: function (text, format) {\n    var sign = number.getSign(text, (null === format || void 0 === format ? void 0 : format.formatter) || format);\n\n    var textWithoutStubs = this._removeStubs(text, true);\n\n    var parsedValue = this._parse(textWithoutStubs, format);\n\n    var parsedValueSign = parsedValue < 0 ? -1 : 1;\n    var parsedValueWithSign = isNumeric(parsedValue) && sign !== parsedValueSign ? sign * parsedValue : parsedValue;\n    return parsedValueWithSign;\n  },\n  _isValueIncomplete: function (text) {\n    if (!this._useMaskBehavior()) {\n      return this.callBase(text);\n    }\n\n    var caret = this._caret();\n\n    var point = number.getDecimalSeparator();\n\n    var pointIndex = this._getTextSeparatorIndex(text);\n\n    var isCaretOnFloat = pointIndex >= 0 && pointIndex < caret.start;\n\n    var textParts = this._removeStubs(text, true).split(point);\n\n    if (!isCaretOnFloat || 2 !== textParts.length) {\n      return false;\n    }\n\n    var floatLength = textParts[1].length;\n\n    var format = this._getFormatPattern();\n\n    var isCustomParser = !!format.parser;\n\n    var precision = !isCustomParser && this._getPrecisionLimits(this._getFormatPattern(), text);\n\n    var isPrecisionInRange = isCustomParser ? true : inRange(floatLength, precision.min, precision.max);\n    var endsWithZero = \"0\" === textParts[1].charAt(floatLength - 1);\n    return isPrecisionInRange && (endsWithZero || !floatLength);\n  },\n  _isValueInRange: function (value) {\n    var min = ensureDefined(this.option(\"min\"), -1 / 0);\n    var max = ensureDefined(this.option(\"max\"), 1 / 0);\n    return inRange(value, min, max);\n  },\n  _setInputText: function (text) {\n    var normalizedText = number.convertDigits(text, true);\n    var newCaret = getCaretAfterFormat(this._getInputVal(), normalizedText, this._caret(), this._getFormatPattern());\n\n    this._input().val(text);\n\n    this._toggleEmptinessEventHandler();\n\n    this._formattedValue = text;\n\n    if (!this._focusOutOccurs) {\n      this._caret(newCaret);\n    }\n  },\n  _useMaskBehavior: function () {\n    return !!this.option(\"format\") && this.option(\"useMaskBehavior\");\n  },\n  _renderInputType: function () {\n    var isNumberType = \"number\" === this.option(\"mode\");\n    var isDesktop = \"desktop\" === devices.real().deviceType;\n\n    if (this._useMaskBehavior() && isNumberType) {\n      this._setInputType(isDesktop || this._isSupportInputMode() ? \"text\" : \"tel\");\n    } else {\n      this.callBase();\n    }\n  },\n  _isChar: function (str) {\n    return isString(str) && 1 === str.length;\n  },\n  _moveCaret: function (offset) {\n    if (!offset) {\n      return;\n    }\n\n    var newCaret = getCaretWithOffset(this._caret(), offset);\n    var adjustedCaret = getCaretInBoundaries(newCaret, this._getInputVal(), this._getFormatPattern());\n\n    this._caret(adjustedCaret);\n  },\n  _shouldHandleKey: function (e) {\n    var keyName = normalizeKeyName(e);\n    var isSpecialChar = isCommandKeyPressed(e) || e.altKey || e.shiftKey || !this._isChar(keyName);\n    var isMinusKey = keyName === MINUS_KEY;\n\n    var useMaskBehavior = this._useMaskBehavior();\n\n    return useMaskBehavior && !isSpecialChar && !isMinusKey;\n  },\n  _renderInput: function () {\n    this.callBase();\n\n    this._renderFormatter();\n  },\n  _renderFormatter: function () {\n    this._clearCache();\n\n    this._detachFormatterEvents();\n\n    if (this._useMaskBehavior()) {\n      this._attachFormatterEvents();\n    }\n  },\n  _detachFormatterEvents: function () {\n    eventsEngine.off(this._input(), \".\" + NUMBER_FORMATTER_NAMESPACE);\n  },\n  _isInputFromPaste: function (e) {\n    var inputType = e.originalEvent && e.originalEvent.inputType;\n\n    if (isDefined(inputType)) {\n      return \"insertFromPaste\" === inputType;\n    } else {\n      return this._isValuePasted;\n    }\n  },\n  _attachFormatterEvents: function () {\n    var $input = this._input();\n\n    eventsEngine.on($input, addNamespace(INPUT_EVENT, NUMBER_FORMATTER_NAMESPACE), function (e) {\n      this._formatValue(e);\n\n      this._isValuePasted = false;\n    }.bind(this));\n    eventsEngine.on($input, addNamespace(\"dxclick\", NUMBER_FORMATTER_NAMESPACE), function () {\n      if (!this._caretTimeout) {\n        this._caretTimeout = setTimeout(function () {\n          this._caretTimeout = void 0;\n\n          this._caret(getCaretInBoundaries(this._caret(), this._getInputVal(), this._getFormatPattern()));\n        }.bind(this), CARET_TIMEOUT_DURATION);\n      }\n    }.bind(this));\n    eventsEngine.on($input, \"dxdblclick\", function () {\n      this.clearCaretTimeout();\n    }.bind(this));\n  },\n  clearCaretTimeout: function () {\n    clearTimeout(this._caretTimeout);\n    this._caretTimeout = void 0;\n  },\n  _forceRefreshInputValue: function () {\n    if (!this._useMaskBehavior()) {\n      return this.callBase();\n    }\n  },\n  _isNonStubAfter: function (index) {\n    var text = this._getInputVal().slice(index);\n\n    return text && !this._isStub(text, true);\n  },\n  _isStub: function (str, isString) {\n    var escapedDecimalSeparator = escapeRegExp(number.getDecimalSeparator());\n    var regExpString = \"^[^0-9\" + escapedDecimalSeparator + \"]+$\";\n    var stubRegExp = new RegExp(regExpString, \"g\");\n    return stubRegExp.test(str) && (isString || this._isChar(str));\n  },\n  _parseValue: function (text) {\n    if (!this._useMaskBehavior()) {\n      return this.callBase(text);\n    }\n\n    return this._parsedValue;\n  },\n  _getPrecisionLimits: function (text) {\n    var currentFormat = this._getFormatForSign(text);\n\n    var realSeparatorIndex = getRealSeparatorIndex(currentFormat).index;\n    var floatPart = (splitByIndex(currentFormat, realSeparatorIndex)[1] || \"\").replace(/[^#0]/g, \"\");\n    var minPrecision = floatPart.replace(/^(0*)#*/, \"$1\").length;\n    var maxPrecision = floatPart.length;\n    return {\n      min: minPrecision,\n      max: maxPrecision\n    };\n  },\n  _revertSign: function (e) {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n\n    var caret = this._caret();\n\n    if (caret.start !== caret.end) {\n      if (normalizeKeyName(e) === MINUS_KEY) {\n        this._applyRevertedSign(e, caret, true);\n\n        return;\n      } else {\n        this._caret(getCaretInBoundaries(0, this._getInputVal(), this._getFormatPattern()));\n      }\n    }\n\n    this._applyRevertedSign(e, caret);\n  },\n  _applyRevertedSign: function (e, caret, preserveSelectedText) {\n    var newValue = -1 * ensureDefined(this._parsedValue, null);\n\n    if (this._isValueInRange(newValue)) {\n      this._parsedValue = newValue;\n\n      if (preserveSelectedText) {\n        var format = this._getFormatPattern();\n\n        var previousText = this._getInputVal();\n\n        this._setTextByParsedValue();\n\n        e.preventDefault();\n\n        var currentText = this._getInputVal();\n\n        var offset = getCaretOffset(previousText, currentText, format);\n        caret = getCaretWithOffset(caret, offset);\n        var caretInBoundaries = getCaretInBoundaries(caret, currentText, format);\n\n        this._caret(caretInBoundaries);\n      }\n    }\n  },\n  _removeMinusFromText: function (text, caret) {\n    var isMinusPressed = this._lastKeyName === MINUS_KEY && text.charAt(caret.start - 1) === MINUS;\n    return isMinusPressed ? this._replaceSelectedText(text, {\n      start: caret.start - 1,\n      end: caret.start\n    }, \"\") : text;\n  },\n  _setTextByParsedValue: function () {\n    var format = this._getFormatPattern();\n\n    var parsed = this._parseValue();\n\n    var formatted = this._format(parsed, format) || \"\";\n\n    this._setInputText(formatted);\n  },\n  _formatValue: function (e) {\n    var normalizedText = this._getInputVal();\n\n    var caret = this._caret();\n\n    var textWithoutMinus = this._removeMinusFromText(normalizedText, caret);\n\n    var wasMinusRemoved = textWithoutMinus !== normalizedText;\n    normalizedText = textWithoutMinus;\n\n    if (!this._isInputFromPaste(e) && this._isValueIncomplete(textWithoutMinus)) {\n      this._formattedValue = normalizedText;\n\n      if (wasMinusRemoved) {\n        this._setTextByParsedValue();\n      }\n\n      return;\n    }\n\n    var textWasChanged = number.convertDigits(this._formattedValue, true) !== normalizedText;\n\n    if (textWasChanged) {\n      var value = this._tryParse(normalizedText, caret, \"\");\n\n      if (isDefined(value)) {\n        this._parsedValue = value;\n      }\n    }\n\n    this._setTextByParsedValue();\n  },\n  _renderDisplayText: function () {\n    if (this._useMaskBehavior()) {\n      this._toggleEmptinessEventHandler();\n    } else {\n      this.callBase.apply(this, arguments);\n    }\n  },\n  _renderValue: function () {\n    if (this._useMaskBehavior()) {\n      this._parsedValue = this.option(\"value\");\n\n      this._setTextByParsedValue();\n    }\n\n    return this.callBase();\n  },\n  _updateParsedValue: function () {\n    var inputValue = this._getInputVal();\n\n    this._parsedValue = this._tryParse(inputValue, this._caret());\n  },\n  _adjustParsedValue: function () {\n    if (!this._useMaskBehavior()) {\n      return;\n    }\n\n    var clearedText = this._removeStubs(this._getInputVal());\n\n    var parsedValue = clearedText ? this._parseValue() : null;\n\n    if (!isNumeric(parsedValue)) {\n      this._parsedValue = parsedValue;\n      return;\n    }\n\n    this._parsedValue = fitIntoRange(parsedValue, this.option(\"min\"), this.option(\"max\"));\n  },\n  _valueChangeEventHandler: function (e) {\n    if (!this._useMaskBehavior()) {\n      return this.callBase(e);\n    }\n\n    var caret = this._caret();\n\n    this._saveValueChangeEvent(e);\n\n    this._lastKey = null;\n    this._lastKeyName = null;\n\n    this._updateParsedValue();\n\n    this._adjustParsedValue();\n\n    this.option(\"value\", this._parsedValue);\n\n    if (caret) {\n      this._caret(caret);\n    }\n  },\n  _optionChanged: function (args) {\n    switch (args.name) {\n      case \"format\":\n      case \"useMaskBehavior\":\n        this._renderInputType();\n\n        this._updateFormat();\n\n        this._renderFormatter();\n\n        this._renderValue();\n\n        this._refreshValueChangeEvent();\n\n        this._refreshEvents();\n\n        break;\n\n      case \"min\":\n      case \"max\":\n        this._adjustParsedValue();\n\n        this.callBase(args);\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _clearCache: function () {\n    delete this._formattedValue;\n    delete this._lastKey;\n    delete this._lastKeyName;\n    delete this._parsedValue;\n    delete this._focusOutOccurs;\n    clearTimeout(this._caretTimeout);\n    delete this._caretTimeout;\n  },\n  _clean: function () {\n    this._clearCache();\n\n    this.callBase();\n  }\n});\nexport default NumberBoxMask;","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/number_box/number_box.mask.js"],"names":["eventsEngine","extend","isNumeric","isDefined","isFunction","isString","devices","fitIntoRange","inRange","number","getCaretWithOffset","isCaretInBoundaries","getCaretInBoundaries","getCaretBoundaries","getCaretAfterFormat","getCaretOffset","getFormat","getLDMLFormat","NumberBoxBase","addNamespace","getChar","normalizeKeyName","isCommandKeyPressed","ensureDefined","escapeRegExp","getRealSeparatorIndex","getNthOccurrence","splitByIndex","adjustPercentValue","NUMBER_FORMATTER_NAMESPACE","MOVE_FORWARD","MOVE_BACKWARD","MINUS","MINUS_KEY","INPUT_EVENT","CARET_TIMEOUT_DURATION","NumberBoxMask","inherit","_getDefaultOptions","callBase","useMaskBehavior","format","_isDeleteKey","key","_supportedKeys","_useMaskBehavior","minus","_revertSign","bind","del","_removeHandler","backspace","leftArrow","_arrowHandler","rightArrow","home","_moveCaretToBoundaryEventHandler","enter","_updateFormattedValue","end","_getTextSeparatorIndex","text","decimalSeparator","getDecimalSeparator","realSeparatorOccurrenceIndex","option","occurrence","_focusInHandler","e","_preventNestedFocusEvent","clearCaretTimeout","_caretTimeout","setTimeout","caret","_caret","start","_getInputVal","decimalSeparatorIndex","_focusOutHandler","shouldHandleEvent","_focusOutOccurs","_hasValueBeenChanged","inputValue","_getFormatPattern","value","formatted","_format","_updateParsedValue","_adjustParsedValue","_setTextByParsedValue","_parsedValue","trigger","_input","step","nextCaret","preventDefault","_moveCaretToBoundary","direction","boundaries","newCaret","shiftKey","_shouldMoveCaret","isDecimalSeparatorNext","charAt","moveToFloat","_lastKey","convertDigits","val","_keyboardHandler","_lastKeyName","_shouldHandleKey","originalEvent","normalizedText","enteredChar","newValue","_tryParse","_moveCaret","_keyPressHandler","isDeleteKey","isBackspaceKey","caretPosition","canDelete","length","char","slice","_isStub","indexOf","_isNonStubAfter","editedText","_replaceSelectedText","noDigits","search","_isValueInRange","valueAfterRemoving","_isPercentFormat","noEscapedFormat","replace","_parse","formatOption","isCustomParser","parser","parse","integerPartStartIndex","formatPointIndex","index","textPointIndex","formatIntegerPartLength","textIntegerPartLength","substr","customFormatter","formatter","formattedValue","_currentFormat","_updateFormat","isLDMLPattern","isExponentialFormat","type","shouldUseFormatAsIs","_getFormatForSign","signParts","split","sign","getSign","_sign","_removeStubs","excludeComma","thousandsSeparator","getThousandsSeparator","stubs","_getStubs","result","prefixStubs","postfixRegex","RegExp","decoratorsRegex","regExpResult","exec","pattern","trim","map","stub","_truncateToPrecision","maxPrecision","strValue","toString","parsedValue","parseFloat","isNaN","selection","isTextSelected","_getParsedValue","_getPrecisionLimits","max","isValueChanged","isDecimalPointRestricted","isUselessCharRestricted","_isValueIncomplete","Math","abs","textWithoutStubs","parsedValueSign","parsedValueWithSign","point","pointIndex","isCaretOnFloat","textParts","floatLength","precision","isPrecisionInRange","min","endsWithZero","_setInputText","_toggleEmptinessEventHandler","_formattedValue","_renderInputType","isNumberType","isDesktop","real","deviceType","_setInputType","_isSupportInputMode","_isChar","str","offset","adjustedCaret","keyName","isSpecialChar","altKey","isMinusKey","_renderInput","_renderFormatter","_clearCache","_detachFormatterEvents","_attachFormatterEvents","off","_isInputFromPaste","inputType","_isValuePasted","$input","on","_formatValue","clearTimeout","_forceRefreshInputValue","escapedDecimalSeparator","regExpString","stubRegExp","test","_parseValue","currentFormat","realSeparatorIndex","floatPart","minPrecision","_applyRevertedSign","preserveSelectedText","previousText","currentText","caretInBoundaries","_removeMinusFromText","isMinusPressed","parsed","textWithoutMinus","wasMinusRemoved","textWasChanged","_renderDisplayText","apply","arguments","_renderValue","clearedText","_valueChangeEventHandler","_saveValueChangeEvent","_optionChanged","args","name","_refreshValueChangeEvent","_refreshEvents","_clean"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/number_box/number_box.mask.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    isNumeric,\r\n    isDefined,\r\n    isFunction,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nimport devices from \"../../core/devices\";\r\nimport {\r\n    fitIntoRange,\r\n    inRange\r\n} from \"../../core/utils/math\";\r\nimport number from \"../../localization/number\";\r\nimport {\r\n    getCaretWithOffset,\r\n    isCaretInBoundaries,\r\n    getCaretInBoundaries,\r\n    getCaretBoundaries,\r\n    getCaretAfterFormat,\r\n    getCaretOffset\r\n} from \"./number_box.caret\";\r\nimport {\r\n    getFormat as getLDMLFormat\r\n} from \"../../localization/ldml/number\";\r\nimport NumberBoxBase from \"./number_box.base\";\r\nimport {\r\n    addNamespace,\r\n    getChar,\r\n    normalizeKeyName,\r\n    isCommandKeyPressed\r\n} from \"../../events/utils/index\";\r\nimport {\r\n    ensureDefined,\r\n    escapeRegExp\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    getRealSeparatorIndex,\r\n    getNthOccurrence,\r\n    splitByIndex,\r\n    adjustPercentValue\r\n} from \"./utils\";\r\nvar NUMBER_FORMATTER_NAMESPACE = \"dxNumberFormatter\";\r\nvar MOVE_FORWARD = 1;\r\nvar MOVE_BACKWARD = -1;\r\nvar MINUS = \"-\";\r\nvar MINUS_KEY = \"minus\";\r\nvar INPUT_EVENT = \"input\";\r\nvar CARET_TIMEOUT_DURATION = 0;\r\nvar NumberBoxMask = NumberBoxBase.inherit({\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            useMaskBehavior: true,\r\n            format: null\r\n        })\r\n    },\r\n    _isDeleteKey: function(key) {\r\n        return \"del\" === key\r\n    },\r\n    _supportedKeys: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase()\r\n        }\r\n        return extend(this.callBase(), {\r\n            minus: this._revertSign.bind(this),\r\n            del: this._removeHandler.bind(this),\r\n            backspace: this._removeHandler.bind(this),\r\n            leftArrow: this._arrowHandler.bind(this, MOVE_BACKWARD),\r\n            rightArrow: this._arrowHandler.bind(this, MOVE_FORWARD),\r\n            home: this._moveCaretToBoundaryEventHandler.bind(this, MOVE_FORWARD),\r\n            enter: this._updateFormattedValue.bind(this),\r\n            end: this._moveCaretToBoundaryEventHandler.bind(this, MOVE_BACKWARD)\r\n        })\r\n    },\r\n    _getTextSeparatorIndex: function(text) {\r\n        var decimalSeparator = number.getDecimalSeparator();\r\n        var realSeparatorOccurrenceIndex = getRealSeparatorIndex(this.option(\"format\")).occurrence;\r\n        return getNthOccurrence(text, decimalSeparator, realSeparatorOccurrenceIndex)\r\n    },\r\n    _focusInHandler: function(e) {\r\n        if (!this._preventNestedFocusEvent(e)) {\r\n            this.clearCaretTimeout();\r\n            this._caretTimeout = setTimeout(function() {\r\n                this._caretTimeout = void 0;\r\n                var caret = this._caret();\r\n                if (caret.start === caret.end && this._useMaskBehavior()) {\r\n                    var text = this._getInputVal();\r\n                    var decimalSeparatorIndex = this._getTextSeparatorIndex(text);\r\n                    if (decimalSeparatorIndex >= 0) {\r\n                        this._caret({\r\n                            start: decimalSeparatorIndex,\r\n                            end: decimalSeparatorIndex\r\n                        })\r\n                    } else {\r\n                        this._moveCaretToBoundaryEventHandler(MOVE_BACKWARD, e)\r\n                    }\r\n                }\r\n            }.bind(this), CARET_TIMEOUT_DURATION)\r\n        }\r\n        this.callBase(e)\r\n    },\r\n    _focusOutHandler: function(e) {\r\n        var shouldHandleEvent = !this._preventNestedFocusEvent(e);\r\n        if (shouldHandleEvent) {\r\n            this._focusOutOccurs = true;\r\n            if (this._useMaskBehavior()) {\r\n                this._updateFormattedValue()\r\n            }\r\n        }\r\n        this.callBase(e);\r\n        if (shouldHandleEvent) {\r\n            this._focusOutOccurs = false\r\n        }\r\n    },\r\n    _hasValueBeenChanged(inputValue) {\r\n        var format = this._getFormatPattern();\r\n        var value = this.option(\"value\");\r\n        var formatted = this._format(value, format) || \"\";\r\n        return formatted !== inputValue\r\n    },\r\n    _updateFormattedValue: function() {\r\n        var inputValue = this._getInputVal();\r\n        if (this._hasValueBeenChanged(inputValue)) {\r\n            this._updateParsedValue();\r\n            this._adjustParsedValue();\r\n            this._setTextByParsedValue();\r\n            if (this._parsedValue !== this.option(\"value\")) {\r\n                eventsEngine.trigger(this._input(), \"change\")\r\n            }\r\n        }\r\n    },\r\n    _arrowHandler: function(step, e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var text = this._getInputVal();\r\n        var format = this._getFormatPattern();\r\n        var nextCaret = getCaretWithOffset(this._caret(), step);\r\n        if (!isCaretInBoundaries(nextCaret, text, format)) {\r\n            nextCaret = step === MOVE_FORWARD ? nextCaret.end : nextCaret.start;\r\n            e.preventDefault();\r\n            this._caret(getCaretInBoundaries(nextCaret, text, format))\r\n        }\r\n    },\r\n    _moveCaretToBoundary: function(direction) {\r\n        var boundaries = getCaretBoundaries(this._getInputVal(), this._getFormatPattern());\r\n        var newCaret = getCaretWithOffset(direction === MOVE_FORWARD ? boundaries.start : boundaries.end, 0);\r\n        this._caret(newCaret)\r\n    },\r\n    _moveCaretToBoundaryEventHandler: function(direction, e) {\r\n        if (!this._useMaskBehavior() || e && e.shiftKey) {\r\n            return\r\n        }\r\n        this._moveCaretToBoundary(direction);\r\n        e && e.preventDefault()\r\n    },\r\n    _shouldMoveCaret: function(text, caret) {\r\n        var decimalSeparator = number.getDecimalSeparator();\r\n        var isDecimalSeparatorNext = text.charAt(caret.end) === decimalSeparator;\r\n        var moveToFloat = (this._lastKey === decimalSeparator || \".\" === this._lastKey || \",\" === this._lastKey) && isDecimalSeparatorNext;\r\n        return moveToFloat\r\n    },\r\n    _getInputVal: function() {\r\n        return number.convertDigits(this._input().val(), true)\r\n    },\r\n    _keyboardHandler: function(e) {\r\n        this.clearCaretTimeout();\r\n        this._lastKey = number.convertDigits(getChar(e), true);\r\n        this._lastKeyName = normalizeKeyName(e);\r\n        if (!this._shouldHandleKey(e.originalEvent)) {\r\n            return this.callBase(e)\r\n        }\r\n        var normalizedText = this._getInputVal();\r\n        var caret = this._caret();\r\n        var enteredChar = this._lastKeyName === MINUS_KEY ? \"\" : this._lastKey;\r\n        var newValue = this._tryParse(normalizedText, caret, enteredChar);\r\n        if (this._shouldMoveCaret(normalizedText, caret)) {\r\n            this._moveCaret(1);\r\n            e.originalEvent.preventDefault()\r\n        }\r\n        if (void 0 === newValue) {\r\n            if (this._lastKeyName !== MINUS_KEY) {\r\n                e.originalEvent.preventDefault()\r\n            }\r\n        } else {\r\n            this._parsedValue = newValue\r\n        }\r\n        return this.callBase(e)\r\n    },\r\n    _keyPressHandler: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            this.callBase(e)\r\n        }\r\n    },\r\n    _removeHandler: function(e) {\r\n        var caret = this._caret();\r\n        var text = this._getInputVal();\r\n        var start = caret.start;\r\n        var end = caret.end;\r\n        this._lastKey = getChar(e);\r\n        this._lastKeyName = normalizeKeyName(e);\r\n        var isDeleteKey = this._isDeleteKey(this._lastKeyName);\r\n        var isBackspaceKey = !isDeleteKey;\r\n        if (start === end) {\r\n            var caretPosition = start;\r\n            var canDelete = isBackspaceKey && caretPosition > 0 || isDeleteKey && caretPosition < text.length;\r\n            if (canDelete) {\r\n                isDeleteKey && end++;\r\n                isBackspaceKey && start--\r\n            } else {\r\n                e.preventDefault();\r\n                return\r\n            }\r\n        }\r\n        var char = text.slice(start, end);\r\n        if (this._isStub(char)) {\r\n            this._moveCaret(isDeleteKey ? 1 : -1);\r\n            if (this._parsedValue < 0 || 1 / this._parsedValue === -1 / 0) {\r\n                this._revertSign(e);\r\n                this._setTextByParsedValue()\r\n            }\r\n            e.preventDefault();\r\n            return\r\n        }\r\n        var decimalSeparator = number.getDecimalSeparator();\r\n        if (char === decimalSeparator) {\r\n            var decimalSeparatorIndex = text.indexOf(decimalSeparator);\r\n            if (this._isNonStubAfter(decimalSeparatorIndex + 1)) {\r\n                this._moveCaret(isDeleteKey ? 1 : -1);\r\n                e.preventDefault()\r\n            }\r\n            return\r\n        }\r\n        if (end - start < text.length) {\r\n            var editedText = this._replaceSelectedText(text, {\r\n                start: start,\r\n                end: end\r\n            }, \"\");\r\n            var noDigits = editedText.search(/[0-9]/) < 0;\r\n            if (noDigits && this._isValueInRange(0)) {\r\n                this._parsedValue = this._parsedValue < 0 || 1 / this._parsedValue === -1 / 0 ? -0 : 0;\r\n                return\r\n            }\r\n        }\r\n        var valueAfterRemoving = this._tryParse(text, {\r\n            start: start,\r\n            end: end\r\n        }, \"\");\r\n        if (void 0 === valueAfterRemoving) {\r\n            e.preventDefault()\r\n        } else {\r\n            this._parsedValue = valueAfterRemoving\r\n        }\r\n    },\r\n    _isPercentFormat: function() {\r\n        var format = this._getFormatPattern();\r\n        var noEscapedFormat = format.replace(/'[^']+'/g, \"\");\r\n        return -1 !== noEscapedFormat.indexOf(\"%\")\r\n    },\r\n    _parse: function(text, format) {\r\n        var formatOption = this.option(\"format\");\r\n        var isCustomParser = isFunction(formatOption.parser);\r\n        var parser = isCustomParser ? formatOption.parser : number.parse;\r\n        var integerPartStartIndex = 0;\r\n        if (!isCustomParser) {\r\n            var formatPointIndex = getRealSeparatorIndex(format).index;\r\n            var textPointIndex = this._getTextSeparatorIndex(text);\r\n            var formatIntegerPartLength = -1 !== formatPointIndex ? formatPointIndex : format.length;\r\n            var textIntegerPartLength = -1 !== textPointIndex ? textPointIndex : text.length;\r\n            if (textIntegerPartLength > formatIntegerPartLength && -1 === format.indexOf(\"#\")) {\r\n                integerPartStartIndex = textIntegerPartLength - formatIntegerPartLength\r\n            }\r\n        }\r\n        text = text.substr(integerPartStartIndex);\r\n        return parser(text, format)\r\n    },\r\n    _format: function(value, format) {\r\n        var formatOption = this.option(\"format\");\r\n        var customFormatter = (null === formatOption || void 0 === formatOption ? void 0 : formatOption.formatter) || formatOption;\r\n        var formatter = isFunction(customFormatter) ? customFormatter : number.format;\r\n        var formattedValue = null === value ? \"\" : formatter(value, format);\r\n        return formattedValue\r\n    },\r\n    _getFormatPattern: function() {\r\n        if (!this._currentFormat) {\r\n            this._updateFormat()\r\n        }\r\n        return this._currentFormat\r\n    },\r\n    _updateFormat: function() {\r\n        var format = this.option(\"format\");\r\n        var isCustomParser = isFunction(null === format || void 0 === format ? void 0 : format.parser);\r\n        var isLDMLPattern = isString(format) && (format.indexOf(\"0\") >= 0 || format.indexOf(\"#\") >= 0);\r\n        var isExponentialFormat = \"exponential\" === format || \"exponential\" === (null === format || void 0 === format ? void 0 : format.type);\r\n        var shouldUseFormatAsIs = isCustomParser || isLDMLPattern || isExponentialFormat;\r\n        this._currentFormat = shouldUseFormatAsIs ? format : getLDMLFormat(value => {\r\n            var text = this._format(value, format);\r\n            return number.convertDigits(text, true)\r\n        })\r\n    },\r\n    _getFormatForSign: function(text) {\r\n        var format = this._getFormatPattern();\r\n        if (isString(format)) {\r\n            var signParts = format.split(\";\");\r\n            var sign = number.getSign(text, format);\r\n            signParts[1] = signParts[1] || \"-\" + signParts[0];\r\n            return sign < 0 ? signParts[1] : signParts[0]\r\n        } else {\r\n            var _sign = number.getSign(text);\r\n            return _sign < 0 ? \"-\" : \"\"\r\n        }\r\n    },\r\n    _removeStubs: function(text, excludeComma) {\r\n        var format = this._getFormatForSign(text);\r\n        var thousandsSeparator = number.getThousandsSeparator();\r\n        var stubs = this._getStubs(format);\r\n        var result = text;\r\n        if (stubs.length) {\r\n            var prefixStubs = stubs[0];\r\n            var postfixRegex = new RegExp(\"(\" + escapeRegExp(stubs[1] || \"\") + \")$\", \"g\");\r\n            var decoratorsRegex = new RegExp(\"[-\" + escapeRegExp(excludeComma ? \"\" : thousandsSeparator) + \"]\", \"g\");\r\n            result = result.replace(prefixStubs, \"\").replace(postfixRegex, \"\").replace(decoratorsRegex, \"\")\r\n        }\r\n        return result\r\n    },\r\n    _getStubs: function(format) {\r\n        var regExpResult = /[^']([#0.,]+)/g.exec(format);\r\n        var pattern = regExpResult && regExpResult[0].trim();\r\n        return format.split(pattern).map((function(stub) {\r\n            return stub.replace(/'/g, \"\")\r\n        }))\r\n    },\r\n    _truncateToPrecision: function(value, maxPrecision) {\r\n        if (isDefined(value)) {\r\n            var strValue = value.toString();\r\n            var decimalSeparatorIndex = strValue.indexOf(\".\");\r\n            if (strValue && decimalSeparatorIndex > -1) {\r\n                var parsedValue = parseFloat(strValue.substr(0, decimalSeparatorIndex + maxPrecision + 1));\r\n                return isNaN(parsedValue) ? value : parsedValue\r\n            }\r\n        }\r\n        return value\r\n    },\r\n    _tryParse: function(text, selection, char) {\r\n        var editedText = this._replaceSelectedText(text, selection, char);\r\n        var format = this._getFormatPattern();\r\n        var isTextSelected = selection.start !== selection.end;\r\n        var parsedValue = this._getParsedValue(editedText, format);\r\n        var maxPrecision = !format.parser && this._getPrecisionLimits(editedText).max;\r\n        var isValueChanged = parsedValue !== this._parsedValue;\r\n        var decimalSeparator = number.getDecimalSeparator();\r\n        var isDecimalPointRestricted = char === decimalSeparator && 0 === maxPrecision;\r\n        var isUselessCharRestricted = !isTextSelected && !isValueChanged && char !== MINUS && !this._isValueIncomplete(editedText) && this._isStub(char);\r\n        if (isDecimalPointRestricted || isUselessCharRestricted) {\r\n            return\r\n        }\r\n        if (\"\" === this._removeStubs(editedText)) {\r\n            parsedValue = Math.abs(0 * this._parsedValue)\r\n        }\r\n        if (isNaN(parsedValue)) {\r\n            return\r\n        }\r\n        var value = null === parsedValue ? this._parsedValue : parsedValue;\r\n        parsedValue = maxPrecision ? this._truncateToPrecision(value, maxPrecision) : parsedValue;\r\n        return !format.parser && this._isPercentFormat() ? adjustPercentValue(parsedValue, maxPrecision) : parsedValue\r\n    },\r\n    _getParsedValue: function(text, format) {\r\n        var sign = number.getSign(text, (null === format || void 0 === format ? void 0 : format.formatter) || format);\r\n        var textWithoutStubs = this._removeStubs(text, true);\r\n        var parsedValue = this._parse(textWithoutStubs, format);\r\n        var parsedValueSign = parsedValue < 0 ? -1 : 1;\r\n        var parsedValueWithSign = isNumeric(parsedValue) && sign !== parsedValueSign ? sign * parsedValue : parsedValue;\r\n        return parsedValueWithSign\r\n    },\r\n    _isValueIncomplete: function(text) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(text)\r\n        }\r\n        var caret = this._caret();\r\n        var point = number.getDecimalSeparator();\r\n        var pointIndex = this._getTextSeparatorIndex(text);\r\n        var isCaretOnFloat = pointIndex >= 0 && pointIndex < caret.start;\r\n        var textParts = this._removeStubs(text, true).split(point);\r\n        if (!isCaretOnFloat || 2 !== textParts.length) {\r\n            return false\r\n        }\r\n        var floatLength = textParts[1].length;\r\n        var format = this._getFormatPattern();\r\n        var isCustomParser = !!format.parser;\r\n        var precision = !isCustomParser && this._getPrecisionLimits(this._getFormatPattern(), text);\r\n        var isPrecisionInRange = isCustomParser ? true : inRange(floatLength, precision.min, precision.max);\r\n        var endsWithZero = \"0\" === textParts[1].charAt(floatLength - 1);\r\n        return isPrecisionInRange && (endsWithZero || !floatLength)\r\n    },\r\n    _isValueInRange: function(value) {\r\n        var min = ensureDefined(this.option(\"min\"), -1 / 0);\r\n        var max = ensureDefined(this.option(\"max\"), 1 / 0);\r\n        return inRange(value, min, max)\r\n    },\r\n    _setInputText: function(text) {\r\n        var normalizedText = number.convertDigits(text, true);\r\n        var newCaret = getCaretAfterFormat(this._getInputVal(), normalizedText, this._caret(), this._getFormatPattern());\r\n        this._input().val(text);\r\n        this._toggleEmptinessEventHandler();\r\n        this._formattedValue = text;\r\n        if (!this._focusOutOccurs) {\r\n            this._caret(newCaret)\r\n        }\r\n    },\r\n    _useMaskBehavior: function() {\r\n        return !!this.option(\"format\") && this.option(\"useMaskBehavior\")\r\n    },\r\n    _renderInputType: function() {\r\n        var isNumberType = \"number\" === this.option(\"mode\");\r\n        var isDesktop = \"desktop\" === devices.real().deviceType;\r\n        if (this._useMaskBehavior() && isNumberType) {\r\n            this._setInputType(isDesktop || this._isSupportInputMode() ? \"text\" : \"tel\")\r\n        } else {\r\n            this.callBase()\r\n        }\r\n    },\r\n    _isChar: function(str) {\r\n        return isString(str) && 1 === str.length\r\n    },\r\n    _moveCaret: function(offset) {\r\n        if (!offset) {\r\n            return\r\n        }\r\n        var newCaret = getCaretWithOffset(this._caret(), offset);\r\n        var adjustedCaret = getCaretInBoundaries(newCaret, this._getInputVal(), this._getFormatPattern());\r\n        this._caret(adjustedCaret)\r\n    },\r\n    _shouldHandleKey: function(e) {\r\n        var keyName = normalizeKeyName(e);\r\n        var isSpecialChar = isCommandKeyPressed(e) || e.altKey || e.shiftKey || !this._isChar(keyName);\r\n        var isMinusKey = keyName === MINUS_KEY;\r\n        var useMaskBehavior = this._useMaskBehavior();\r\n        return useMaskBehavior && !isSpecialChar && !isMinusKey\r\n    },\r\n    _renderInput: function() {\r\n        this.callBase();\r\n        this._renderFormatter()\r\n    },\r\n    _renderFormatter: function() {\r\n        this._clearCache();\r\n        this._detachFormatterEvents();\r\n        if (this._useMaskBehavior()) {\r\n            this._attachFormatterEvents()\r\n        }\r\n    },\r\n    _detachFormatterEvents: function() {\r\n        eventsEngine.off(this._input(), \".\" + NUMBER_FORMATTER_NAMESPACE)\r\n    },\r\n    _isInputFromPaste: function(e) {\r\n        var inputType = e.originalEvent && e.originalEvent.inputType;\r\n        if (isDefined(inputType)) {\r\n            return \"insertFromPaste\" === inputType\r\n        } else {\r\n            return this._isValuePasted\r\n        }\r\n    },\r\n    _attachFormatterEvents: function() {\r\n        var $input = this._input();\r\n        eventsEngine.on($input, addNamespace(INPUT_EVENT, NUMBER_FORMATTER_NAMESPACE), function(e) {\r\n            this._formatValue(e);\r\n            this._isValuePasted = false\r\n        }.bind(this));\r\n        eventsEngine.on($input, addNamespace(\"dxclick\", NUMBER_FORMATTER_NAMESPACE), function() {\r\n            if (!this._caretTimeout) {\r\n                this._caretTimeout = setTimeout(function() {\r\n                    this._caretTimeout = void 0;\r\n                    this._caret(getCaretInBoundaries(this._caret(), this._getInputVal(), this._getFormatPattern()))\r\n                }.bind(this), CARET_TIMEOUT_DURATION)\r\n            }\r\n        }.bind(this));\r\n        eventsEngine.on($input, \"dxdblclick\", function() {\r\n            this.clearCaretTimeout()\r\n        }.bind(this))\r\n    },\r\n    clearCaretTimeout: function() {\r\n        clearTimeout(this._caretTimeout);\r\n        this._caretTimeout = void 0\r\n    },\r\n    _forceRefreshInputValue: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase()\r\n        }\r\n    },\r\n    _isNonStubAfter: function(index) {\r\n        var text = this._getInputVal().slice(index);\r\n        return text && !this._isStub(text, true)\r\n    },\r\n    _isStub: function(str, isString) {\r\n        var escapedDecimalSeparator = escapeRegExp(number.getDecimalSeparator());\r\n        var regExpString = \"^[^0-9\" + escapedDecimalSeparator + \"]+$\";\r\n        var stubRegExp = new RegExp(regExpString, \"g\");\r\n        return stubRegExp.test(str) && (isString || this._isChar(str))\r\n    },\r\n    _parseValue: function(text) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(text)\r\n        }\r\n        return this._parsedValue\r\n    },\r\n    _getPrecisionLimits: function(text) {\r\n        var currentFormat = this._getFormatForSign(text);\r\n        var realSeparatorIndex = getRealSeparatorIndex(currentFormat).index;\r\n        var floatPart = (splitByIndex(currentFormat, realSeparatorIndex)[1] || \"\").replace(/[^#0]/g, \"\");\r\n        var minPrecision = floatPart.replace(/^(0*)#*/, \"$1\").length;\r\n        var maxPrecision = floatPart.length;\r\n        return {\r\n            min: minPrecision,\r\n            max: maxPrecision\r\n        }\r\n    },\r\n    _revertSign: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var caret = this._caret();\r\n        if (caret.start !== caret.end) {\r\n            if (normalizeKeyName(e) === MINUS_KEY) {\r\n                this._applyRevertedSign(e, caret, true);\r\n                return\r\n            } else {\r\n                this._caret(getCaretInBoundaries(0, this._getInputVal(), this._getFormatPattern()))\r\n            }\r\n        }\r\n        this._applyRevertedSign(e, caret)\r\n    },\r\n    _applyRevertedSign: function(e, caret, preserveSelectedText) {\r\n        var newValue = -1 * ensureDefined(this._parsedValue, null);\r\n        if (this._isValueInRange(newValue)) {\r\n            this._parsedValue = newValue;\r\n            if (preserveSelectedText) {\r\n                var format = this._getFormatPattern();\r\n                var previousText = this._getInputVal();\r\n                this._setTextByParsedValue();\r\n                e.preventDefault();\r\n                var currentText = this._getInputVal();\r\n                var offset = getCaretOffset(previousText, currentText, format);\r\n                caret = getCaretWithOffset(caret, offset);\r\n                var caretInBoundaries = getCaretInBoundaries(caret, currentText, format);\r\n                this._caret(caretInBoundaries)\r\n            }\r\n        }\r\n    },\r\n    _removeMinusFromText: function(text, caret) {\r\n        var isMinusPressed = this._lastKeyName === MINUS_KEY && text.charAt(caret.start - 1) === MINUS;\r\n        return isMinusPressed ? this._replaceSelectedText(text, {\r\n            start: caret.start - 1,\r\n            end: caret.start\r\n        }, \"\") : text\r\n    },\r\n    _setTextByParsedValue: function() {\r\n        var format = this._getFormatPattern();\r\n        var parsed = this._parseValue();\r\n        var formatted = this._format(parsed, format) || \"\";\r\n        this._setInputText(formatted)\r\n    },\r\n    _formatValue: function(e) {\r\n        var normalizedText = this._getInputVal();\r\n        var caret = this._caret();\r\n        var textWithoutMinus = this._removeMinusFromText(normalizedText, caret);\r\n        var wasMinusRemoved = textWithoutMinus !== normalizedText;\r\n        normalizedText = textWithoutMinus;\r\n        if (!this._isInputFromPaste(e) && this._isValueIncomplete(textWithoutMinus)) {\r\n            this._formattedValue = normalizedText;\r\n            if (wasMinusRemoved) {\r\n                this._setTextByParsedValue()\r\n            }\r\n            return\r\n        }\r\n        var textWasChanged = number.convertDigits(this._formattedValue, true) !== normalizedText;\r\n        if (textWasChanged) {\r\n            var value = this._tryParse(normalizedText, caret, \"\");\r\n            if (isDefined(value)) {\r\n                this._parsedValue = value\r\n            }\r\n        }\r\n        this._setTextByParsedValue()\r\n    },\r\n    _renderDisplayText: function() {\r\n        if (this._useMaskBehavior()) {\r\n            this._toggleEmptinessEventHandler()\r\n        } else {\r\n            this.callBase.apply(this, arguments)\r\n        }\r\n    },\r\n    _renderValue: function() {\r\n        if (this._useMaskBehavior()) {\r\n            this._parsedValue = this.option(\"value\");\r\n            this._setTextByParsedValue()\r\n        }\r\n        return this.callBase()\r\n    },\r\n    _updateParsedValue: function() {\r\n        var inputValue = this._getInputVal();\r\n        this._parsedValue = this._tryParse(inputValue, this._caret())\r\n    },\r\n    _adjustParsedValue: function() {\r\n        if (!this._useMaskBehavior()) {\r\n            return\r\n        }\r\n        var clearedText = this._removeStubs(this._getInputVal());\r\n        var parsedValue = clearedText ? this._parseValue() : null;\r\n        if (!isNumeric(parsedValue)) {\r\n            this._parsedValue = parsedValue;\r\n            return\r\n        }\r\n        this._parsedValue = fitIntoRange(parsedValue, this.option(\"min\"), this.option(\"max\"))\r\n    },\r\n    _valueChangeEventHandler: function(e) {\r\n        if (!this._useMaskBehavior()) {\r\n            return this.callBase(e)\r\n        }\r\n        var caret = this._caret();\r\n        this._saveValueChangeEvent(e);\r\n        this._lastKey = null;\r\n        this._lastKeyName = null;\r\n        this._updateParsedValue();\r\n        this._adjustParsedValue();\r\n        this.option(\"value\", this._parsedValue);\r\n        if (caret) {\r\n            this._caret(caret)\r\n        }\r\n    },\r\n    _optionChanged: function(args) {\r\n        switch (args.name) {\r\n            case \"format\":\r\n            case \"useMaskBehavior\":\r\n                this._renderInputType();\r\n                this._updateFormat();\r\n                this._renderFormatter();\r\n                this._renderValue();\r\n                this._refreshValueChangeEvent();\r\n                this._refreshEvents();\r\n                break;\r\n            case \"min\":\r\n            case \"max\":\r\n                this._adjustParsedValue();\r\n                this.callBase(args);\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    _clearCache: function() {\r\n        delete this._formattedValue;\r\n        delete this._lastKey;\r\n        delete this._lastKeyName;\r\n        delete this._parsedValue;\r\n        delete this._focusOutOccurs;\r\n        clearTimeout(this._caretTimeout);\r\n        delete this._caretTimeout\r\n    },\r\n    _clean: function() {\r\n        this._clearCache();\r\n        this.callBase()\r\n    }\r\n});\r\nexport default NumberBoxMask;\r\n"]},"metadata":{},"sourceType":"module"}