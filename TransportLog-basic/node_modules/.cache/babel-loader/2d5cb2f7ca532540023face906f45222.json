{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments/rendering_strategies/strategy_horizontal.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport BaseAppointmentsStrategy from \"./strategy.base\";\nimport dateUtils from \"../../../../core/utils/date\";\nimport { ExpressionUtils } from \"../../expressionUtils\";\nimport getSkippedHoursInRange from \"../../../../renovation/ui/scheduler/view_model/appointments/utils/getSkippedHoursInRange\";\nvar DEFAULT_APPOINTMENT_HEIGHT = 60;\nvar MIN_APPOINTMENT_HEIGHT = 35;\nvar DROP_DOWN_BUTTON_OFFSET = 2;\nvar toMs = dateUtils.dateToMilliseconds;\n\nclass HorizontalRenderingStrategy extends BaseAppointmentsStrategy {\n  _needVerifyItemSize() {\n    return true;\n  }\n\n  calculateAppointmentWidth(appointment, position) {\n    var cellWidth = this.cellWidth || this.getAppointmentMinSize();\n    var allDay = ExpressionUtils.getField(this.dataAccessors, \"allDay\", appointment);\n    var startDate = position.info.appointment.startDate;\n    var endDate = position.info.appointment.endDate;\n    var {\n      normalizedEndDate: normalizedEndDate\n    } = position.info.appointment;\n    var duration = this.getAppointmentDurationInMs(startDate, normalizedEndDate, allDay);\n    duration = this._adjustDurationByDaylightDiff(duration, startDate, normalizedEndDate);\n    var cellDuration = this.cellDurationInMinutes * toMs(\"minute\");\n    var skippedHours = getSkippedHoursInRange(startDate, endDate, this.viewDataProvider);\n    var durationInCells = (duration - skippedHours * toMs(\"hour\")) / cellDuration;\n    var width = this.cropAppointmentWidth(durationInCells * cellWidth, cellWidth);\n    return width;\n  }\n\n  _needAdjustDuration(diff) {\n    return diff < 0;\n  }\n\n  getAppointmentGeometry(coordinates) {\n    var result = this._customizeAppointmentGeometry(coordinates);\n\n    return super.getAppointmentGeometry(result);\n  }\n\n  _customizeAppointmentGeometry(coordinates) {\n    var config = this._calculateGeometryConfig(coordinates);\n\n    return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset);\n  }\n\n  _getOffsets() {\n    return {\n      unlimited: 0,\n      auto: 0\n    };\n  }\n\n  _getCompactLeftCoordinate(itemLeft, index) {\n    var cellWidth = this.cellWidth || this.getAppointmentMinSize();\n    return itemLeft + cellWidth * index;\n  }\n\n  _getMaxHeight() {\n    return this.cellHeight || this.getAppointmentMinSize();\n  }\n\n  _getAppointmentCount(overlappingMode, coordinates) {\n    return this._getMaxAppointmentCountPerCellByType(false);\n  }\n\n  _getAppointmentDefaultHeight() {\n    return DEFAULT_APPOINTMENT_HEIGHT;\n  }\n\n  _getAppointmentMinHeight() {\n    return MIN_APPOINTMENT_HEIGHT;\n  }\n\n  _sortCondition(a, b) {\n    return this._columnCondition(a, b);\n  }\n\n  _getOrientation() {\n    return [\"left\", \"right\", \"top\"];\n  }\n\n  getDropDownAppointmentWidth() {\n    return this.cellWidth - 2 * DROP_DOWN_BUTTON_OFFSET;\n  }\n\n  getDeltaTime(args, initialSize) {\n    var deltaTime;\n    var deltaWidth = args.width - initialSize.width;\n    deltaTime = toMs(\"minute\") * Math.round(deltaWidth / this.cellWidth * this.cellDurationInMinutes);\n    return deltaTime;\n  }\n\n  isAllDay(appointmentData) {\n    return ExpressionUtils.getField(this.dataAccessors, \"allDay\", appointmentData);\n  }\n\n  _isItemsCross(firstItem, secondItem) {\n    var orientation = this._getOrientation();\n\n    return this._checkItemsCrossing(firstItem, secondItem, orientation);\n  }\n\n  getPositionShift(timeShift) {\n    var positionShift = super.getPositionShift(timeShift);\n    var left = this.cellWidth * timeShift;\n\n    if (this.rtlEnabled) {\n      left *= -1;\n    }\n\n    left += positionShift.left;\n    return {\n      top: 0,\n      left: left,\n      cellPosition: left\n    };\n  }\n\n  supportCompactDropDownAppointments() {\n    return false;\n  }\n\n}\n\nexport default HorizontalRenderingStrategy;","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/scheduler/appointments/rendering_strategies/strategy_horizontal.js"],"names":["BaseAppointmentsStrategy","dateUtils","ExpressionUtils","getSkippedHoursInRange","DEFAULT_APPOINTMENT_HEIGHT","MIN_APPOINTMENT_HEIGHT","DROP_DOWN_BUTTON_OFFSET","toMs","dateToMilliseconds","HorizontalRenderingStrategy","_needVerifyItemSize","calculateAppointmentWidth","appointment","position","cellWidth","getAppointmentMinSize","allDay","getField","dataAccessors","startDate","info","endDate","normalizedEndDate","duration","getAppointmentDurationInMs","_adjustDurationByDaylightDiff","cellDuration","cellDurationInMinutes","skippedHours","viewDataProvider","durationInCells","width","cropAppointmentWidth","_needAdjustDuration","diff","getAppointmentGeometry","coordinates","result","_customizeAppointmentGeometry","config","_calculateGeometryConfig","_customizeCoordinates","height","appointmentCountPerCell","offset","_getOffsets","unlimited","auto","_getCompactLeftCoordinate","itemLeft","index","_getMaxHeight","cellHeight","_getAppointmentCount","overlappingMode","_getMaxAppointmentCountPerCellByType","_getAppointmentDefaultHeight","_getAppointmentMinHeight","_sortCondition","a","b","_columnCondition","_getOrientation","getDropDownAppointmentWidth","getDeltaTime","args","initialSize","deltaTime","deltaWidth","Math","round","isAllDay","appointmentData","_isItemsCross","firstItem","secondItem","orientation","_checkItemsCrossing","getPositionShift","timeShift","positionShift","left","rtlEnabled","top","cellPosition","supportCompactDropDownAppointments"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/appointments/rendering_strategies/strategy_horizontal.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport BaseAppointmentsStrategy from \"./strategy.base\";\r\nimport dateUtils from \"../../../../core/utils/date\";\r\nimport {\r\n    ExpressionUtils\r\n} from \"../../expressionUtils\";\r\nimport getSkippedHoursInRange from \"../../../../renovation/ui/scheduler/view_model/appointments/utils/getSkippedHoursInRange\";\r\nvar DEFAULT_APPOINTMENT_HEIGHT = 60;\r\nvar MIN_APPOINTMENT_HEIGHT = 35;\r\nvar DROP_DOWN_BUTTON_OFFSET = 2;\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nclass HorizontalRenderingStrategy extends BaseAppointmentsStrategy {\r\n    _needVerifyItemSize() {\r\n        return true\r\n    }\r\n    calculateAppointmentWidth(appointment, position) {\r\n        var cellWidth = this.cellWidth || this.getAppointmentMinSize();\r\n        var allDay = ExpressionUtils.getField(this.dataAccessors, \"allDay\", appointment);\r\n        var startDate = position.info.appointment.startDate;\r\n        var endDate = position.info.appointment.endDate;\r\n        var {\r\n            normalizedEndDate: normalizedEndDate\r\n        } = position.info.appointment;\r\n        var duration = this.getAppointmentDurationInMs(startDate, normalizedEndDate, allDay);\r\n        duration = this._adjustDurationByDaylightDiff(duration, startDate, normalizedEndDate);\r\n        var cellDuration = this.cellDurationInMinutes * toMs(\"minute\");\r\n        var skippedHours = getSkippedHoursInRange(startDate, endDate, this.viewDataProvider);\r\n        var durationInCells = (duration - skippedHours * toMs(\"hour\")) / cellDuration;\r\n        var width = this.cropAppointmentWidth(durationInCells * cellWidth, cellWidth);\r\n        return width\r\n    }\r\n    _needAdjustDuration(diff) {\r\n        return diff < 0\r\n    }\r\n    getAppointmentGeometry(coordinates) {\r\n        var result = this._customizeAppointmentGeometry(coordinates);\r\n        return super.getAppointmentGeometry(result)\r\n    }\r\n    _customizeAppointmentGeometry(coordinates) {\r\n        var config = this._calculateGeometryConfig(coordinates);\r\n        return this._customizeCoordinates(coordinates, config.height, config.appointmentCountPerCell, config.offset)\r\n    }\r\n    _getOffsets() {\r\n        return {\r\n            unlimited: 0,\r\n            auto: 0\r\n        }\r\n    }\r\n    _getCompactLeftCoordinate(itemLeft, index) {\r\n        var cellWidth = this.cellWidth || this.getAppointmentMinSize();\r\n        return itemLeft + cellWidth * index\r\n    }\r\n    _getMaxHeight() {\r\n        return this.cellHeight || this.getAppointmentMinSize()\r\n    }\r\n    _getAppointmentCount(overlappingMode, coordinates) {\r\n        return this._getMaxAppointmentCountPerCellByType(false)\r\n    }\r\n    _getAppointmentDefaultHeight() {\r\n        return DEFAULT_APPOINTMENT_HEIGHT\r\n    }\r\n    _getAppointmentMinHeight() {\r\n        return MIN_APPOINTMENT_HEIGHT\r\n    }\r\n    _sortCondition(a, b) {\r\n        return this._columnCondition(a, b)\r\n    }\r\n    _getOrientation() {\r\n        return [\"left\", \"right\", \"top\"]\r\n    }\r\n    getDropDownAppointmentWidth() {\r\n        return this.cellWidth - 2 * DROP_DOWN_BUTTON_OFFSET\r\n    }\r\n    getDeltaTime(args, initialSize) {\r\n        var deltaTime;\r\n        var deltaWidth = args.width - initialSize.width;\r\n        deltaTime = toMs(\"minute\") * Math.round(deltaWidth / this.cellWidth * this.cellDurationInMinutes);\r\n        return deltaTime\r\n    }\r\n    isAllDay(appointmentData) {\r\n        return ExpressionUtils.getField(this.dataAccessors, \"allDay\", appointmentData)\r\n    }\r\n    _isItemsCross(firstItem, secondItem) {\r\n        var orientation = this._getOrientation();\r\n        return this._checkItemsCrossing(firstItem, secondItem, orientation)\r\n    }\r\n    getPositionShift(timeShift) {\r\n        var positionShift = super.getPositionShift(timeShift);\r\n        var left = this.cellWidth * timeShift;\r\n        if (this.rtlEnabled) {\r\n            left *= -1\r\n        }\r\n        left += positionShift.left;\r\n        return {\r\n            top: 0,\r\n            left: left,\r\n            cellPosition: left\r\n        }\r\n    }\r\n    supportCompactDropDownAppointments() {\r\n        return false\r\n    }\r\n}\r\nexport default HorizontalRenderingStrategy;\r\n"]},"metadata":{},"sourceType":"module"}