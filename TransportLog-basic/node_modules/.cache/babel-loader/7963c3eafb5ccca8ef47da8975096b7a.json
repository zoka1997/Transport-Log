{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/text_box/ui.text_editor.mask.strategy.base.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport EventsEngine from \"../../events/core/events_engine\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport browser from \"../../core/utils/browser\";\nimport { clipboardText as getClipboardText } from \"../../core/utils/dom\";\nvar MASK_EVENT_NAMESPACE = \"dxMask\";\nvar BLUR_EVENT = \"blur beforedeactivate\";\nvar EMPTY_CHAR = \" \";\nexport default class BaseMaskStrategy {\n  constructor(editor) {\n    this.editor = editor;\n    this.DIRECTION = {\n      FORWARD: \"forward\",\n      BACKWARD: \"backward\"\n    };\n    this.NAME = this._getStrategyName();\n  }\n\n  _getStrategyName() {\n    return \"base\";\n  }\n\n  editorOption() {\n    return this.editor.option(...arguments);\n  }\n\n  editorInput() {\n    return this.editor._input();\n  }\n\n  editorCaret(newCaret) {\n    if (!newCaret) {\n      return this.editor._caret();\n    }\n\n    this.editor._caret(newCaret);\n  }\n\n  getHandler(handlerName) {\n    var handler = this[\"_\".concat(handlerName, \"Handler\")] || function () {};\n\n    return handler.bind(this);\n  }\n\n  attachEvents() {\n    var $input = this.editorInput();\n    this.getHandleEventNames().forEach(eventName => {\n      var subscriptionName = addNamespace(eventName.toLowerCase(), MASK_EVENT_NAMESPACE);\n      EventsEngine.on($input, subscriptionName, this.getEventHandler(eventName));\n    });\n\n    this._attachChangeEventHandlers();\n  }\n\n  getHandleEventNames() {\n    return [\"focusIn\", \"focusOut\", \"keyDown\", \"input\", \"paste\", \"cut\", \"drop\"];\n  }\n\n  getEventHandler(eventName) {\n    return this[\"_\".concat(eventName, \"Handler\")].bind(this);\n  }\n\n  detachEvents() {\n    EventsEngine.off(this.editorInput(), \".\".concat(MASK_EVENT_NAMESPACE));\n  }\n\n  _attachChangeEventHandlers() {\n    if (!this.editorOption(\"valueChangeEvent\").split(\" \").includes(\"change\")) {\n      return;\n    }\n\n    EventsEngine.on(this.editorInput(), addNamespace(BLUR_EVENT, MASK_EVENT_NAMESPACE), function (e) {\n      this._suppressCaretChanging(this._changeHandler, [e]);\n\n      this._changeHandler(e);\n    }.bind(this.editor));\n  }\n\n  _focusInHandler() {\n    this.editor._showMaskPlaceholder();\n\n    this.editor._direction(this.DIRECTION.FORWARD);\n\n    if (!this.editor._isValueEmpty() && this.editorOption(\"isValid\")) {\n      this.editor._adjustCaret();\n    } else {\n      var caret = this.editor._maskRulesChain.first();\n\n      this._caretTimeout = setTimeout(function () {\n        this._caret({\n          start: caret,\n          end: caret\n        });\n      }.bind(this.editor), 0);\n    }\n  }\n\n  _focusOutHandler(event) {\n    this.editor._changeHandler(event);\n\n    if (\"onFocus\" === this.editorOption(\"showMaskMode\") && this.editor._isValueEmpty()) {\n      this.editorOption(\"text\", \"\");\n\n      this.editor._renderDisplayText(\"\");\n    }\n  }\n\n  _cutHandler(event) {\n    var caret = this.editorCaret();\n    var selectedText = this.editorInput().val().substring(caret.start, caret.end);\n\n    this.editor._maskKeyHandler(event, () => getClipboardText(event, selectedText));\n  }\n\n  _dropHandler() {\n    this._clearDragTimer();\n\n    this._dragTimer = setTimeout(function () {\n      this.option(\"value\", this._convertToValue(this._input().val()));\n    }.bind(this.editor));\n  }\n\n  _clearDragTimer() {\n    clearTimeout(this._dragTimer);\n  }\n\n  _keyDownHandler() {\n    this._keyPressHandled = false;\n  }\n\n  _pasteHandler(event) {\n    var {\n      editor: editor\n    } = this;\n    this._keyPressHandled = true;\n    var caret = this.editorCaret();\n\n    editor._maskKeyHandler(event, () => {\n      var pastedText = getClipboardText(event);\n\n      var restText = editor._maskRulesChain.text().substring(caret.end);\n\n      var accepted = editor._handleChain({\n        text: pastedText,\n        start: caret.start,\n        length: pastedText.length\n      });\n\n      var newCaret = caret.start + accepted;\n\n      editor._handleChain({\n        text: restText,\n        start: newCaret,\n        length: restText.length\n      });\n\n      editor._caret({\n        start: newCaret,\n        end: newCaret\n      });\n    });\n  }\n\n  _autoFillHandler(event) {\n    var {\n      editor: editor\n    } = this;\n    var inputVal = this.editorInput().val();\n    this._inputHandlerTimer = setTimeout(() => {\n      this._keyPressHandled = true;\n\n      if (this._isAutoFill()) {\n        this._keyPressHandled = true;\n\n        editor._maskKeyHandler(event, () => {\n          editor._handleChain({\n            text: inputVal,\n            start: 0,\n            length: inputVal.length\n          });\n        });\n\n        editor._validateMask();\n      }\n    });\n  }\n\n  _isAutoFill() {\n    var $input = this.editor._input();\n\n    var result = false;\n\n    if (browser.webkit) {\n      var input = $input.get(0);\n      result = input && input.matches(\":-webkit-autofill\");\n    }\n\n    return result;\n  }\n\n  runWithoutEventProcessing(action) {\n    var keyPressHandled = this._keyPressHandled;\n    this._keyPressHandled = true;\n    action();\n    this._keyPressHandled = keyPressHandled;\n  }\n\n  _backspaceHandler() {}\n\n  _delHandler(event) {\n    var {\n      editor: editor\n    } = this;\n    this._keyPressHandled = true;\n\n    editor._maskKeyHandler(event, () => !editor._hasSelection() && editor._handleKey(EMPTY_CHAR));\n  }\n\n  clean() {\n    this._clearDragTimer();\n\n    clearTimeout(this._backspaceHandlerTimeout);\n    clearTimeout(this._caretTimeout);\n    clearTimeout(this._inputHandlerTimer);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/text_box/ui.text_editor.mask.strategy.base.js"],"names":["EventsEngine","addNamespace","browser","clipboardText","getClipboardText","MASK_EVENT_NAMESPACE","BLUR_EVENT","EMPTY_CHAR","BaseMaskStrategy","constructor","editor","DIRECTION","FORWARD","BACKWARD","NAME","_getStrategyName","editorOption","option","arguments","editorInput","_input","editorCaret","newCaret","_caret","getHandler","handlerName","handler","concat","bind","attachEvents","$input","getHandleEventNames","forEach","eventName","subscriptionName","toLowerCase","on","getEventHandler","_attachChangeEventHandlers","detachEvents","off","split","includes","e","_suppressCaretChanging","_changeHandler","_focusInHandler","_showMaskPlaceholder","_direction","_isValueEmpty","_adjustCaret","caret","_maskRulesChain","first","_caretTimeout","setTimeout","start","end","_focusOutHandler","event","_renderDisplayText","_cutHandler","selectedText","val","substring","_maskKeyHandler","_dropHandler","_clearDragTimer","_dragTimer","_convertToValue","clearTimeout","_keyDownHandler","_keyPressHandled","_pasteHandler","pastedText","restText","text","accepted","_handleChain","length","_autoFillHandler","inputVal","_inputHandlerTimer","_isAutoFill","_validateMask","result","webkit","input","get","matches","runWithoutEventProcessing","action","keyPressHandled","_backspaceHandler","_delHandler","_hasSelection","_handleKey","clean","_backspaceHandlerTimeout"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/text_box/ui.text_editor.mask.strategy.base.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport EventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    addNamespace\r\n} from \"../../events/utils/index\";\r\nimport browser from \"../../core/utils/browser\";\r\nimport {\r\n    clipboardText as getClipboardText\r\n} from \"../../core/utils/dom\";\r\nvar MASK_EVENT_NAMESPACE = \"dxMask\";\r\nvar BLUR_EVENT = \"blur beforedeactivate\";\r\nvar EMPTY_CHAR = \" \";\r\nexport default class BaseMaskStrategy {\r\n    constructor(editor) {\r\n        this.editor = editor;\r\n        this.DIRECTION = {\r\n            FORWARD: \"forward\",\r\n            BACKWARD: \"backward\"\r\n        };\r\n        this.NAME = this._getStrategyName()\r\n    }\r\n    _getStrategyName() {\r\n        return \"base\"\r\n    }\r\n    editorOption() {\r\n        return this.editor.option(...arguments)\r\n    }\r\n    editorInput() {\r\n        return this.editor._input()\r\n    }\r\n    editorCaret(newCaret) {\r\n        if (!newCaret) {\r\n            return this.editor._caret()\r\n        }\r\n        this.editor._caret(newCaret)\r\n    }\r\n    getHandler(handlerName) {\r\n        var handler = this[\"_\".concat(handlerName, \"Handler\")] || function() {};\r\n        return handler.bind(this)\r\n    }\r\n    attachEvents() {\r\n        var $input = this.editorInput();\r\n        this.getHandleEventNames().forEach(eventName => {\r\n            var subscriptionName = addNamespace(eventName.toLowerCase(), MASK_EVENT_NAMESPACE);\r\n            EventsEngine.on($input, subscriptionName, this.getEventHandler(eventName))\r\n        });\r\n        this._attachChangeEventHandlers()\r\n    }\r\n    getHandleEventNames() {\r\n        return [\"focusIn\", \"focusOut\", \"keyDown\", \"input\", \"paste\", \"cut\", \"drop\"]\r\n    }\r\n    getEventHandler(eventName) {\r\n        return this[\"_\".concat(eventName, \"Handler\")].bind(this)\r\n    }\r\n    detachEvents() {\r\n        EventsEngine.off(this.editorInput(), \".\".concat(MASK_EVENT_NAMESPACE))\r\n    }\r\n    _attachChangeEventHandlers() {\r\n        if (!this.editorOption(\"valueChangeEvent\").split(\" \").includes(\"change\")) {\r\n            return\r\n        }\r\n        EventsEngine.on(this.editorInput(), addNamespace(BLUR_EVENT, MASK_EVENT_NAMESPACE), function(e) {\r\n            this._suppressCaretChanging(this._changeHandler, [e]);\r\n            this._changeHandler(e)\r\n        }.bind(this.editor))\r\n    }\r\n    _focusInHandler() {\r\n        this.editor._showMaskPlaceholder();\r\n        this.editor._direction(this.DIRECTION.FORWARD);\r\n        if (!this.editor._isValueEmpty() && this.editorOption(\"isValid\")) {\r\n            this.editor._adjustCaret()\r\n        } else {\r\n            var caret = this.editor._maskRulesChain.first();\r\n            this._caretTimeout = setTimeout(function() {\r\n                this._caret({\r\n                    start: caret,\r\n                    end: caret\r\n                })\r\n            }.bind(this.editor), 0)\r\n        }\r\n    }\r\n    _focusOutHandler(event) {\r\n        this.editor._changeHandler(event);\r\n        if (\"onFocus\" === this.editorOption(\"showMaskMode\") && this.editor._isValueEmpty()) {\r\n            this.editorOption(\"text\", \"\");\r\n            this.editor._renderDisplayText(\"\")\r\n        }\r\n    }\r\n    _cutHandler(event) {\r\n        var caret = this.editorCaret();\r\n        var selectedText = this.editorInput().val().substring(caret.start, caret.end);\r\n        this.editor._maskKeyHandler(event, () => getClipboardText(event, selectedText))\r\n    }\r\n    _dropHandler() {\r\n        this._clearDragTimer();\r\n        this._dragTimer = setTimeout(function() {\r\n            this.option(\"value\", this._convertToValue(this._input().val()))\r\n        }.bind(this.editor))\r\n    }\r\n    _clearDragTimer() {\r\n        clearTimeout(this._dragTimer)\r\n    }\r\n    _keyDownHandler() {\r\n        this._keyPressHandled = false\r\n    }\r\n    _pasteHandler(event) {\r\n        var {\r\n            editor: editor\r\n        } = this;\r\n        this._keyPressHandled = true;\r\n        var caret = this.editorCaret();\r\n        editor._maskKeyHandler(event, () => {\r\n            var pastedText = getClipboardText(event);\r\n            var restText = editor._maskRulesChain.text().substring(caret.end);\r\n            var accepted = editor._handleChain({\r\n                text: pastedText,\r\n                start: caret.start,\r\n                length: pastedText.length\r\n            });\r\n            var newCaret = caret.start + accepted;\r\n            editor._handleChain({\r\n                text: restText,\r\n                start: newCaret,\r\n                length: restText.length\r\n            });\r\n            editor._caret({\r\n                start: newCaret,\r\n                end: newCaret\r\n            })\r\n        })\r\n    }\r\n    _autoFillHandler(event) {\r\n        var {\r\n            editor: editor\r\n        } = this;\r\n        var inputVal = this.editorInput().val();\r\n        this._inputHandlerTimer = setTimeout(() => {\r\n            this._keyPressHandled = true;\r\n            if (this._isAutoFill()) {\r\n                this._keyPressHandled = true;\r\n                editor._maskKeyHandler(event, () => {\r\n                    editor._handleChain({\r\n                        text: inputVal,\r\n                        start: 0,\r\n                        length: inputVal.length\r\n                    })\r\n                });\r\n                editor._validateMask()\r\n            }\r\n        })\r\n    }\r\n    _isAutoFill() {\r\n        var $input = this.editor._input();\r\n        var result = false;\r\n        if (browser.webkit) {\r\n            var input = $input.get(0);\r\n            result = input && input.matches(\":-webkit-autofill\")\r\n        }\r\n        return result\r\n    }\r\n    runWithoutEventProcessing(action) {\r\n        var keyPressHandled = this._keyPressHandled;\r\n        this._keyPressHandled = true;\r\n        action();\r\n        this._keyPressHandled = keyPressHandled\r\n    }\r\n    _backspaceHandler() {}\r\n    _delHandler(event) {\r\n        var {\r\n            editor: editor\r\n        } = this;\r\n        this._keyPressHandled = true;\r\n        editor._maskKeyHandler(event, () => !editor._hasSelection() && editor._handleKey(EMPTY_CHAR))\r\n    }\r\n    clean() {\r\n        this._clearDragTimer();\r\n        clearTimeout(this._backspaceHandlerTimeout);\r\n        clearTimeout(this._caretTimeout);\r\n        clearTimeout(this._inputHandlerTimer)\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}