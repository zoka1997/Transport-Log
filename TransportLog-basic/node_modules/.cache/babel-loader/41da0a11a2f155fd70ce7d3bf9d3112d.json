{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.adaptivity.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { addNamespace } from \"../../events/utils/index\";\nimport { name as clickEventName } from \"../../events/click\";\nimport { isDefined, isString } from \"../../core/utils/type\";\nimport Guid from \"../../core/guid\";\nimport modules from \"./ui.grid_core.modules\";\nimport Form from \"../form\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { isMaterial } from \"../themes\";\nimport { getWindow } from \"../../core/utils/window\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { Deferred, when } from \"../../core/utils/deferred\";\nimport messageLocalization from \"../../localization/message\";\nvar COLUMN_HEADERS_VIEW = \"columnHeadersView\";\nvar ROWS_VIEW = \"rowsView\";\nvar FOOTER_VIEW = \"footerView\";\nvar COLUMN_VIEWS = [COLUMN_HEADERS_VIEW, ROWS_VIEW, FOOTER_VIEW];\nvar ADAPTIVE_NAMESPACE = \"dxDataGridAdaptivity\";\nvar HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\nvar ADAPTIVE_ROW_TYPE = \"detailAdaptive\";\nvar FORM_ITEM_CONTENT_CLASS = \"dx-field-item-content\";\nvar FORM_ITEM_MODIFIED = \"dx-item-modified\";\nvar HIDDEN_COLUMN_CLASS = \"hidden-column\";\nvar ADAPTIVE_COLUMN_BUTTON_CLASS = \"adaptive-more\";\nvar ADAPTIVE_COLUMN_NAME_CLASS = \"dx-command-adaptive\";\nvar COMMAND_ADAPTIVE_HIDDEN_CLASS = \"dx-command-adaptive-hidden\";\nvar ADAPTIVE_DETAIL_ROW_CLASS = \"dx-adaptive-detail-row\";\nvar ADAPTIVE_ITEM_TEXT_CLASS = \"dx-adaptive-item-text\";\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\nvar LAST_DATA_CELL_CLASS = \"dx-last-data-cell\";\nvar ADAPTIVE_COLUMN_NAME = \"adaptive\";\nvar EDIT_MODE_BATCH = \"batch\";\nvar EDIT_MODE_ROW = \"row\";\nvar EDIT_MODE_FORM = \"form\";\nvar EDIT_MODE_POPUP = \"popup\";\nvar REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\nvar GROUP_ROW_CLASS = \"dx-group-row\";\nvar EXPAND_ARIA_NAME = \"dxDataGrid-ariaAdaptiveExpand\";\nvar COLLAPSE_ARIA_NAME = \"dxDataGrid-ariaAdaptiveCollapse\";\nvar LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\n\nfunction getColumnId(that, column) {\n  return that._columnsController.getColumnId(column);\n}\n\nfunction getDataCellElements($row) {\n  return $row.find(\"td:not(.dx-datagrid-hidden-column):not([class*='dx-command-'])\");\n}\n\nfunction adaptiveCellTemplate(container, options) {\n  var $adaptiveColumnButton;\n  var $container = $(container);\n  var adaptiveColumnsController = options.component.getController(\"adaptiveColumns\");\n\n  if (\"data\" === options.rowType) {\n    $adaptiveColumnButton = $(\"<span>\").addClass(adaptiveColumnsController.addWidgetPrefix(ADAPTIVE_COLUMN_BUTTON_CLASS));\n    eventsEngine.on($adaptiveColumnButton, addNamespace(clickEventName, ADAPTIVE_NAMESPACE), adaptiveColumnsController.createAction(function () {\n      adaptiveColumnsController.toggleExpandAdaptiveDetailRow(options.key);\n    }));\n    $adaptiveColumnButton.appendTo($container);\n  } else {\n    gridCoreUtils.setEmptyText($container);\n  }\n}\n\nvar AdaptiveColumnsController = modules.ViewController.inherit({\n  _isRowEditMode: function () {\n    var editMode = this._getEditMode();\n\n    return editMode === EDIT_MODE_ROW;\n  },\n  _isItemModified: function (item, cellOptions) {\n    var columnIndex = this._columnsController.getVisibleIndex(item.column.index);\n\n    var rowIndex = this._dataController.getRowIndexByKey(cellOptions.key);\n\n    var row = this._dataController.items()[rowIndex + 1];\n\n    return row && row.modifiedValues && isDefined(row.modifiedValues[columnIndex]);\n  },\n  _renderFormViewTemplate: function (item, cellOptions, $container) {\n    var column = item.column;\n    var focusAction = this.createAction(function () {\n      eventsEngine.trigger($container, clickEventName);\n    });\n    var rowData = cellOptions.row.data;\n    var value = column.calculateCellValue(rowData);\n    var displayValue = gridCoreUtils.getDisplayValue(column, value, rowData, cellOptions.rowType);\n    var text = gridCoreUtils.formatValue(displayValue, column);\n\n    var isCellOrBatchEditMode = this._editingController.isCellOrBatchEditMode();\n\n    var rowsView = this._rowsView;\n\n    if (column.allowEditing && this.getController(\"keyboardNavigation\").isKeyboardEnabled()) {\n      $container.attr(\"tabIndex\", this.option(\"tabIndex\"));\n\n      if (isCellOrBatchEditMode) {\n        eventsEngine.off($container, \"focus\", focusAction);\n        eventsEngine.on($container, \"focus\", focusAction);\n      }\n    }\n\n    if (column.cellTemplate) {\n      var templateOptions = extend({}, cellOptions, {\n        value: value,\n        displayValue: displayValue,\n        text: text,\n        column: column\n      });\n      var isDomElement = !!$container.closest(getWindow().document).length;\n      rowsView.renderTemplate($container, column.cellTemplate, templateOptions, isDomElement).done(() => {\n        rowsView._cellPrepared($container, cellOptions);\n      });\n    } else {\n      var container = $container.get(0);\n\n      if (column.encodeHtml) {\n        container.textContent = text;\n      } else {\n        container.innerHTML = text;\n      }\n\n      $container.addClass(ADAPTIVE_ITEM_TEXT_CLASS);\n\n      if (!isDefined(text) || \"\" === text) {\n        $container.html(\"&nbsp;\");\n      }\n\n      if (!this._isRowEditMode()) {\n        if (this._isItemModified(item, cellOptions)) {\n          $container.addClass(FORM_ITEM_MODIFIED);\n        }\n      }\n\n      rowsView._cellPrepared($container, cellOptions);\n    }\n  },\n  _getTemplate: function (item, cellOptions) {\n    var that = this;\n    var column = item.column;\n    var editingController = this.getController(\"editing\");\n    return function (options, container) {\n      var $container = $(container);\n\n      var columnIndex = that._columnsController.getVisibleIndex(column.index);\n\n      var templateOptions = extend({}, cellOptions);\n\n      var renderFormTemplate = function () {\n        var isItemEdited = that._isItemEdited(item);\n\n        templateOptions.value = cellOptions.row.values[columnIndex];\n\n        if (isItemEdited || column.showEditorAlways) {\n          editingController.renderFormEditTemplate(templateOptions, item, options, $container, !isItemEdited);\n        } else {\n          templateOptions.column = column;\n          templateOptions.columnIndex = columnIndex;\n\n          that._renderFormViewTemplate(item, templateOptions, $container);\n        }\n      };\n\n      renderFormTemplate();\n      templateOptions.watch && templateOptions.watch(function () {\n        return {\n          isItemEdited: that._isItemEdited(item),\n          value: cellOptions.row.values[columnIndex]\n        };\n      }, function () {\n        $container.contents().remove();\n        $container.removeClass(ADAPTIVE_ITEM_TEXT_CLASS);\n        renderFormTemplate();\n      });\n    };\n  },\n  _isVisibleColumnsValid: function (visibleColumns) {\n    if (visibleColumns < 2) {\n      return false;\n    }\n\n    if (visibleColumns.length - function () {\n      var result = 0;\n\n      for (var j = 0; j < visibleColumns.length; j++) {\n        var visibleColumn = visibleColumns[j];\n\n        if (visibleColumn.command) {\n          result++;\n        }\n      }\n\n      return result;\n    }() <= 1) {\n      return false;\n    }\n\n    return true;\n  },\n  _calculatePercentWidths: function (widths, visibleColumns) {\n    var that = this;\n    var percentWidths = 0;\n    visibleColumns.forEach(function (item, index) {\n      if (widths[index] !== HIDDEN_COLUMNS_WIDTH) {\n        percentWidths += that._getItemPercentWidth(item);\n      }\n    });\n    return percentWidths;\n  },\n  _isPercentWidth: function (width) {\n    return isString(width) && \"%\" === width.slice(-1);\n  },\n  _isColumnHidden: function (column) {\n    return this._hiddenColumns.filter(function (hiddenColumn) {\n      return hiddenColumn.index === column.index;\n    }).length > 0;\n  },\n  _getAverageColumnsWidth: function (containerWidth, columns, columnsCanFit) {\n    var that = this;\n    var fixedColumnsWidth = 0;\n    var columnsWithoutFixedWidthCount = 0;\n    columns.forEach(function (column) {\n      if (!that._isColumnHidden(column)) {\n        var width = column.width;\n\n        if (isDefined(width) && !isNaN(parseFloat(width))) {\n          fixedColumnsWidth += that._isPercentWidth(width) ? that._calculatePercentWidth({\n            visibleIndex: column.visibleIndex,\n            columnsCount: columns.length,\n            columnsCanFit: columnsCanFit,\n            bestFitWidth: column.bestFitWidth,\n            columnWidth: width,\n            containerWidth: containerWidth\n          }) : parseFloat(width);\n        } else {\n          columnsWithoutFixedWidthCount++;\n        }\n      }\n    });\n    return (containerWidth - fixedColumnsWidth) / columnsWithoutFixedWidthCount;\n  },\n  _calculateColumnWidth: function (column, containerWidth, contentColumns, columnsCanFit) {\n    var columnId = getColumnId(this, column);\n\n    var widthOption = this._columnsController.columnOption(columnId, \"width\");\n\n    var bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\n\n    var columnsCount = contentColumns.length;\n    var colWidth;\n\n    if (widthOption && \"auto\" !== widthOption) {\n      if (this._isPercentWidth(widthOption)) {\n        colWidth = this._calculatePercentWidth({\n          visibleIndex: column.visibleIndex,\n          columnsCount: columnsCount,\n          columnsCanFit: columnsCanFit,\n          bestFitWidth: bestFitWidth,\n          columnWidth: widthOption,\n          containerWidth: containerWidth\n        });\n      } else {\n        return parseFloat(widthOption);\n      }\n    } else {\n      var columnAutoWidth = this.option(\"columnAutoWidth\");\n      colWidth = columnAutoWidth || !!column.command ? bestFitWidth : this._getAverageColumnsWidth(containerWidth, contentColumns, columnsCanFit);\n    }\n\n    return colWidth;\n  },\n  _calculatePercentWidth: function (options) {\n    var columnFitted = options.visibleIndex < options.columnsCount - 1 && options.columnsCanFit;\n    var partialWidth = options.containerWidth * parseFloat(options.columnWidth) / 100;\n    var resultWidth = options.columnsCanFit && partialWidth < options.bestFitWidth ? options.bestFitWidth : partialWidth;\n    return columnFitted ? options.containerWidth * parseFloat(options.columnWidth) / 100 : resultWidth;\n  },\n  _getNotTruncatedColumnWidth: function (column, containerWidth, contentColumns, columnsCanFit) {\n    var columnId = getColumnId(this, column);\n\n    var widthOption = this._columnsController.columnOption(columnId, \"width\");\n\n    var bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\n\n    if (widthOption && \"auto\" !== widthOption && !this._isPercentWidth(widthOption)) {\n      return parseFloat(widthOption);\n    }\n\n    var colWidth = this._calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit);\n\n    return colWidth < bestFitWidth ? null : colWidth;\n  },\n  _getItemPercentWidth: function (item) {\n    var result = 0;\n\n    if (item.width && this._isPercentWidth(item.width)) {\n      result = parseFloat(item.width);\n    }\n\n    return result;\n  },\n  _getCommandColumnsWidth: function () {\n    var that = this;\n\n    var columns = that._columnsController.getVisibleColumns();\n\n    var colWidth = 0;\n    each(columns, function (index, column) {\n      if (column.index < 0 || column.command) {\n        colWidth += that._columnsController.columnOption(getColumnId(that, column), \"bestFitWidth\") || 0;\n      }\n    });\n    return colWidth;\n  },\n  _isItemEdited: function (item) {\n    if (this.isFormOrPopupEditMode()) {\n      return false;\n    }\n\n    if (this._isRowEditMode()) {\n      var editRowKey = this.option(\"editing.editRowKey\");\n\n      if (equalByValue(editRowKey, this._dataController.adaptiveExpandedKey())) {\n        return true;\n      }\n    } else {\n      var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\n\n      var columnIndex = this._columnsController.getVisibleIndex(item.column.index);\n\n      return this._editingController.isEditCell(rowIndex, columnIndex);\n    }\n  },\n  _getFormItemsByHiddenColumns: function (hiddenColumns) {\n    var items = [];\n    each(hiddenColumns, function (_, column) {\n      items.push({\n        column: column,\n        name: column.name,\n        dataField: column.dataField,\n        visibleIndex: column.visibleIndex\n      });\n    });\n    return items;\n  },\n  _getAdaptiveColumnVisibleIndex: function (visibleColumns) {\n    for (var i = 0; i < visibleColumns.length; i++) {\n      var column = visibleColumns[i];\n\n      if (column.command === ADAPTIVE_COLUMN_NAME) {\n        return i;\n      }\n    }\n  },\n  _hideAdaptiveColumn: function (resultWidths, visibleColumns) {\n    var visibleIndex = this._getAdaptiveColumnVisibleIndex(visibleColumns);\n\n    if (isDefined(visibleIndex)) {\n      resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH;\n\n      this._hideVisibleColumn({\n        isCommandColumn: true,\n        visibleIndex: visibleIndex\n      });\n    }\n  },\n  _showHiddenCellsInView: function (_ref) {\n    var {\n      $cells: $cells,\n      isCommandColumn: isCommandColumn\n    } = _ref;\n    var cssClassNameToRemove = this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);\n\n    if (isCommandColumn) {\n      cssClassNameToRemove = COMMAND_ADAPTIVE_HIDDEN_CLASS;\n      $cells.attr({\n        tabIndex: 0,\n        \"aria-hidden\": null\n      }).removeClass(cssClassNameToRemove);\n    } else {\n      $cells.removeClass(cssClassNameToRemove);\n    }\n  },\n  _showHiddenColumns: function () {\n    for (var i = 0; i < COLUMN_VIEWS.length; i++) {\n      var view = this.getView(COLUMN_VIEWS[i]);\n\n      if (view && view.isVisible() && view.element()) {\n        var viewName = view.name;\n        var $hiddenCommandCells = view.element().find(\".\" + COMMAND_ADAPTIVE_HIDDEN_CLASS);\n\n        this._showHiddenCellsInView({\n          viewName: viewName,\n          $cells: $hiddenCommandCells,\n          isCommandColumn: true\n        });\n\n        var $hiddenCells = view.element().find(\".\" + this.addWidgetPrefix(HIDDEN_COLUMN_CLASS));\n\n        this._showHiddenCellsInView({\n          viewName: viewName,\n          $cells: $hiddenCells\n        });\n      }\n    }\n  },\n  _isCellValid: function ($cell) {\n    return $cell && $cell.length && !$cell.hasClass(MASTER_DETAIL_CELL_CLASS) && !$cell.hasClass(GROUP_CELL_CLASS);\n  },\n  _hideVisibleColumn: function (_ref2) {\n    var {\n      isCommandColumn: isCommandColumn,\n      visibleIndex: visibleIndex\n    } = _ref2;\n    var that = this;\n    COLUMN_VIEWS.forEach(function (viewName) {\n      var view = that.getView(viewName);\n      view && that._hideVisibleColumnInView({\n        view: view,\n        isCommandColumn: isCommandColumn,\n        visibleIndex: visibleIndex\n      });\n    });\n  },\n  _hideVisibleColumnInView: function (_ref3) {\n    var {\n      view: view,\n      isCommandColumn: isCommandColumn,\n      visibleIndex: visibleIndex\n    } = _ref3;\n    var viewName = view.name;\n    var $cellElement;\n\n    var column = this._columnsController.getVisibleColumns()[visibleIndex];\n\n    var editFormRowIndex = this._editingController && this._editingController.getEditFormRowIndex();\n\n    if (view && view.isVisible() && column) {\n      var rowsCount = view.getRowsCount();\n\n      var $rowElements = view._getRowElements();\n\n      for (var rowIndex = 0; rowIndex < rowsCount; rowIndex++) {\n        var cancelClassAdding = rowIndex === editFormRowIndex && viewName === ROWS_VIEW && \"popup\" !== this.option(\"editing.mode\");\n\n        if (!cancelClassAdding) {\n          var currentVisibleIndex = viewName === COLUMN_HEADERS_VIEW ? this._columnsController.getVisibleIndex(column.index, rowIndex) : visibleIndex;\n\n          if (currentVisibleIndex >= 0) {\n            var $rowElement = $rowElements.eq(rowIndex);\n            $cellElement = this._findCellElementInRow($rowElement, currentVisibleIndex);\n            this._isCellValid($cellElement) && this._hideVisibleCellInView({\n              viewName: viewName,\n              isCommandColumn: isCommandColumn,\n              $cell: $cellElement\n            });\n          }\n        }\n      }\n    }\n  },\n\n  _findCellElementInRow($rowElement, visibleColumnIndex) {\n    var $rowCells = $rowElement.children();\n    var visibleIndex = visibleColumnIndex;\n    var cellIsInsideGroup = false;\n\n    if ($rowElement.hasClass(GROUP_ROW_CLASS)) {\n      var $groupCell = $rowElement.find(\".\".concat(GROUP_CELL_CLASS));\n      var colSpan = $groupCell.attr(\"colspan\");\n\n      if ($groupCell.length && isDefined(colSpan)) {\n        var groupCellLength = parseInt(colSpan);\n        var endGroupIndex = $groupCell.index() + groupCellLength - 1;\n\n        if (visibleColumnIndex > endGroupIndex) {\n          visibleIndex = visibleColumnIndex - groupCellLength + 1;\n        } else {\n          cellIsInsideGroup = true;\n        }\n      }\n    }\n\n    var $cellElement = !cellIsInsideGroup ? $rowCells.eq(visibleIndex) : void 0;\n    return $cellElement;\n  },\n\n  _hideVisibleCellInView: function (_ref4) {\n    var {\n      $cell: $cell,\n      isCommandColumn: isCommandColumn\n    } = _ref4;\n    var cssClassNameToAdd = isCommandColumn ? COMMAND_ADAPTIVE_HIDDEN_CLASS : this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);\n    $cell.attr({\n      tabIndex: -1,\n      \"aria-hidden\": true\n    }).addClass(cssClassNameToAdd);\n  },\n  _getEditMode: function () {\n    return this._editingController.getEditMode();\n  },\n  isFormOrPopupEditMode: function () {\n    var editMode = this._getEditMode();\n\n    return editMode === EDIT_MODE_FORM || editMode === EDIT_MODE_POPUP;\n  },\n  hideRedundantColumns: function (resultWidths, visibleColumns, hiddenQueue) {\n    this._hiddenColumns = [];\n\n    if (this._isVisibleColumnsValid(visibleColumns) && hiddenQueue.length) {\n      var totalWidth = 0;\n      var $rootElement = this.component.$element();\n\n      var rootElementWidth = getWidth($rootElement) - this._getCommandColumnsWidth();\n\n      var getVisibleContentColumns = function () {\n        return visibleColumns.filter(item => !item.command && 0 === this._hiddenColumns.filter(i => i.index === item.index).length);\n      }.bind(this);\n\n      var visibleContentColumns = getVisibleContentColumns();\n      var contentColumnsCount = visibleContentColumns.length;\n      var i;\n      var hasHiddenColumns;\n      var needHideColumn;\n\n      do {\n        needHideColumn = false;\n        totalWidth = 0;\n\n        var percentWidths = this._calculatePercentWidths(resultWidths, visibleColumns);\n\n        var columnsCanFit = percentWidths < 100 && 0 !== percentWidths;\n\n        for (i = 0; i < visibleColumns.length; i++) {\n          var visibleColumn = visibleColumns[i];\n\n          var columnWidth = this._getNotTruncatedColumnWidth(visibleColumn, rootElementWidth, visibleContentColumns, columnsCanFit);\n\n          var columnId = getColumnId(this, visibleColumn);\n\n          var widthOption = this._columnsController.columnOption(columnId, \"width\");\n\n          var minWidth = this._columnsController.columnOption(columnId, \"minWidth\");\n\n          var columnBestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\n\n          if (resultWidths[i] === HIDDEN_COLUMNS_WIDTH) {\n            hasHiddenColumns = true;\n            continue;\n          }\n\n          if (!columnWidth && !visibleColumn.command && !visibleColumn.fixed) {\n            needHideColumn = true;\n            break;\n          }\n\n          if (!widthOption || \"auto\" === widthOption) {\n            columnWidth = Math.max(columnBestFitWidth || 0, minWidth || 0);\n          }\n\n          if (visibleColumn.command !== ADAPTIVE_COLUMN_NAME || hasHiddenColumns) {\n            totalWidth += columnWidth;\n          }\n        }\n\n        needHideColumn = needHideColumn || totalWidth > getWidth($rootElement);\n\n        if (needHideColumn) {\n          var column = hiddenQueue.pop();\n\n          var visibleIndex = this._columnsController.getVisibleIndex(column.index);\n\n          rootElementWidth += this._calculateColumnWidth(column, rootElementWidth, visibleContentColumns, columnsCanFit);\n\n          this._hideVisibleColumn({\n            visibleIndex: visibleIndex\n          });\n\n          resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH;\n\n          this._hiddenColumns.push(column);\n\n          visibleContentColumns = getVisibleContentColumns();\n        }\n      } while (needHideColumn && visibleContentColumns.length > 1 && hiddenQueue.length);\n\n      if (contentColumnsCount === visibleContentColumns.length) {\n        this._hideAdaptiveColumn(resultWidths, visibleColumns);\n      }\n    } else {\n      this._hideAdaptiveColumn(resultWidths, visibleColumns);\n    }\n  },\n  getItemContentByColumnIndex: function (visibleColumnIndex) {\n    var $itemContent;\n\n    for (var i = 0; i < this._$itemContents.length; i++) {\n      $itemContent = this._$itemContents.eq(i);\n      var item = $itemContent.data(\"dx-form-item\");\n\n      if (item && item.column && this._columnsController.getVisibleIndex(item.column.index) === visibleColumnIndex) {\n        return $itemContent;\n      }\n    }\n  },\n  toggleExpandAdaptiveDetailRow: function (key, alwaysExpanded) {\n    if (!(this.isFormOrPopupEditMode() && this._editingController.isEditing())) {\n      this.getController(\"data\").toggleExpandAdaptiveDetailRow(key, alwaysExpanded);\n    }\n  },\n  createFormByHiddenColumns: function (container, options) {\n    var that = this;\n    var $container = $(container);\n    var userFormOptions = {\n      items: that._getFormItemsByHiddenColumns(that._hiddenColumns),\n      formID: \"dx-\" + new Guid()\n    };\n    var defaultFormOptions = isMaterial() ? {\n      colCount: 2\n    } : {};\n    this.executeAction(\"onAdaptiveDetailRowPreparing\", {\n      formOptions: userFormOptions\n    });\n    that._$itemContents = null;\n    that._form = that._createComponent($(\"<div>\").appendTo($container), Form, extend(defaultFormOptions, userFormOptions, {\n      customizeItem: function (item) {\n        var column = item.column || that._columnsController.columnOption(item.name || item.dataField);\n\n        if (column) {\n          item.label = item.label || {};\n          item.label.text = item.label.text || column.caption;\n          item.column = column;\n          item.template = that._getTemplate(item, options, that.updateForm.bind(that));\n        }\n\n        userFormOptions.customizeItem && userFormOptions.customizeItem.call(this, item);\n      },\n      onContentReady: function (e) {\n        userFormOptions.onContentReady && userFormOptions.onContentReady.call(this, e);\n        that._$itemContents = $container.find(\".\" + FORM_ITEM_CONTENT_CLASS);\n      }\n    }));\n  },\n  hasAdaptiveDetailRowExpanded: function () {\n    return isDefined(this._dataController.adaptiveExpandedKey());\n  },\n  updateForm: function (hiddenColumns) {\n    if (this.hasAdaptiveDetailRowExpanded()) {\n      if (this._form && isDefined(this._form._contentReadyAction)) {\n        if (hiddenColumns && hiddenColumns.length) {\n          this._form.option(\"items\", this._getFormItemsByHiddenColumns(hiddenColumns));\n        } else {\n          this._form.repaint();\n        }\n      }\n    }\n  },\n  updateHidingQueue: function (columns) {\n    var hideableColumns = columns.filter(function (column) {\n      return column.visible && !column.type && !column.fixed && !(isDefined(column.groupIndex) && column.groupIndex >= 0);\n    });\n    var columnsHasHidingPriority;\n    var i;\n    this._hidingColumnsQueue = [];\n\n    if (this.option(\"allowColumnResizing\") && \"widget\" === this.option(\"columnResizingMode\")) {\n      return this._hidingColumnsQueue;\n    }\n\n    for (i = 0; i < hideableColumns.length; i++) {\n      if (isDefined(hideableColumns[i].hidingPriority) && hideableColumns[i].hidingPriority >= 0) {\n        columnsHasHidingPriority = true;\n        this._hidingColumnsQueue[hideableColumns[i].hidingPriority] = hideableColumns[i];\n      }\n    }\n\n    if (columnsHasHidingPriority) {\n      this._hidingColumnsQueue.reverse();\n    } else if (this.option(\"columnHidingEnabled\")) {\n      for (i = 0; i < hideableColumns.length; i++) {\n        var visibleIndex = this._columnsController.getVisibleIndex(hideableColumns[i].index);\n\n        this._hidingColumnsQueue[visibleIndex] = hideableColumns[i];\n      }\n    }\n\n    this._hidingColumnsQueue = this._hidingColumnsQueue.filter(Object);\n    return this._hidingColumnsQueue;\n  },\n  getHiddenColumns: function () {\n    return this._hiddenColumns;\n  },\n  hasHiddenColumns: function () {\n    return this._hiddenColumns.length > 0;\n  },\n  getHidingColumnsQueue: function () {\n    return this._hidingColumnsQueue;\n  },\n  init: function () {\n    var that = this;\n    that._columnsController = that.getController(\"columns\");\n    that._dataController = that.getController(\"data\");\n    that._rowsView = that.getView(\"rowsView\");\n\n    that._columnsController.addCommandColumn({\n      type: ADAPTIVE_COLUMN_NAME,\n      command: ADAPTIVE_COLUMN_NAME,\n      visible: true,\n      adaptiveHidden: true,\n      cssClass: ADAPTIVE_COLUMN_NAME_CLASS,\n      alignment: \"center\",\n      width: \"auto\",\n      cellTemplate: adaptiveCellTemplate,\n      fixedPosition: \"right\"\n    });\n\n    that._columnsController.columnsChanged.add(function () {\n      var isAdaptiveVisible = !!that.updateHidingQueue(that._columnsController.getColumns()).length;\n\n      that._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !isAdaptiveVisible, true);\n    });\n\n    that._editingController = that.getController(\"editing\");\n    that._hidingColumnsQueue = [];\n    that._hiddenColumns = [];\n    that.createAction(\"onAdaptiveDetailRowPreparing\");\n    that.callBase();\n  },\n  optionChanged: function (args) {\n    if (\"columnHidingEnabled\" === args.name) {\n      this._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !args.value);\n    }\n\n    this.callBase(args);\n  },\n  publicMethods: function () {\n    return [\"isAdaptiveDetailRowExpanded\", \"expandAdaptiveDetailRow\", \"collapseAdaptiveDetailRow\"];\n  },\n  isAdaptiveDetailRowExpanded: function (key) {\n    return this._dataController.adaptiveExpandedKey() && equalByValue(this._dataController.adaptiveExpandedKey(), key);\n  },\n  expandAdaptiveDetailRow: function (key) {\n    if (!this.hasAdaptiveDetailRowExpanded()) {\n      this.toggleExpandAdaptiveDetailRow(key);\n    }\n  },\n  collapseAdaptiveDetailRow: function () {\n    if (this.hasAdaptiveDetailRowExpanded()) {\n      this.toggleExpandAdaptiveDetailRow();\n    }\n  },\n  updateCommandAdaptiveAriaLabel: function (key, label) {\n    var rowIndex = this._dataController.getRowIndexByKey(key);\n\n    if (-1 === rowIndex) {\n      return;\n    }\n\n    var $row = $(this.component.getRowElement(rowIndex));\n    this.setCommandAdaptiveAriaLabel($row, label);\n  },\n  setCommandAdaptiveAriaLabel: function ($row, labelName) {\n    var $adaptiveCommand = $row.find(\".dx-command-adaptive\");\n    $adaptiveCommand.attr(\"aria-label\", messageLocalization.format(labelName));\n  }\n});\nexport var adaptivityModule = {\n  defaultOptions: function () {\n    return {\n      columnHidingEnabled: false,\n      onAdaptiveDetailRowPreparing: null\n    };\n  },\n  controllers: {\n    adaptiveColumns: AdaptiveColumnsController\n  },\n  extenders: {\n    views: {\n      rowsView: {\n        _getCellTemplate: function (options) {\n          var that = this;\n          var column = options.column;\n\n          if (options.rowType === ADAPTIVE_ROW_TYPE && \"detail\" === column.command) {\n            return function (container, options) {\n              that._adaptiveColumnsController.createFormByHiddenColumns($(container), options);\n            };\n          }\n\n          return that.callBase(options);\n        },\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n\n          if (row && row.rowType === ADAPTIVE_ROW_TYPE && row.key === this._dataController.adaptiveExpandedKey()) {\n            $row.addClass(ADAPTIVE_DETAIL_ROW_CLASS);\n          }\n\n          return $row;\n        },\n        _renderCells: function ($row, options) {\n          this.callBase($row, options);\n          var adaptiveColumnsController = this._adaptiveColumnsController;\n          var hidingColumnsQueueLength = adaptiveColumnsController.getHidingColumnsQueue().length;\n          var hiddenColumnsLength = adaptiveColumnsController.getHiddenColumns().length;\n\n          if (hidingColumnsQueueLength && !hiddenColumnsLength) {\n            getDataCellElements($row).last().addClass(LAST_DATA_CELL_CLASS);\n          }\n\n          if (\"data\" === options.row.rowType) {\n            adaptiveColumnsController.setCommandAdaptiveAriaLabel($row, EXPAND_ARIA_NAME);\n          }\n        },\n        _getColumnIndexByElementCore: function ($element) {\n          var $itemContent = $element.closest(\".\" + FORM_ITEM_CONTENT_CLASS);\n\n          if ($itemContent.length && $itemContent.closest(this.component.$element()).length) {\n            var formItem = $itemContent.length ? $itemContent.first().data(\"dx-form-item\") : null;\n            return formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);\n          } else {\n            return this.callBase($element);\n          }\n        },\n        _cellPrepared: function ($cell, options) {\n          this.callBase.apply(this, arguments);\n\n          if (options.row.rowType !== ADAPTIVE_ROW_TYPE && options.column.visibleWidth === HIDDEN_COLUMNS_WIDTH) {\n            $cell.addClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS));\n          }\n        },\n        _getCellElement: function (rowIndex, columnIdentifier) {\n          var item = this._dataController.items()[rowIndex];\n\n          if (item && item.rowType === ADAPTIVE_ROW_TYPE) {\n            return this._adaptiveColumnsController.getItemContentByColumnIndex(columnIdentifier);\n          } else {\n            return this.callBase.apply(this, arguments);\n          }\n        },\n        getContextMenuItems: function (options) {\n          if (options.row && \"detailAdaptive\" === options.row.rowType) {\n            var view = this.component.getView(\"columnHeadersView\");\n            var formItem = $(options.targetElement).closest(\".dx-field-item-label\").next().data(\"dx-form-item\");\n            options.column = formItem ? formItem.column : options.column;\n            return view.getContextMenuItems && view.getContextMenuItems(options);\n          }\n\n          return this.callBase && this.callBase(options);\n        },\n        isClickableElement: function ($target) {\n          var isClickable = this.callBase ? this.callBase($target) : false;\n          return isClickable || !!$target.closest(\".\" + ADAPTIVE_COLUMN_NAME_CLASS).length;\n        },\n        init: function () {\n          this.callBase();\n          this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\n        }\n      }\n    },\n    controllers: {\n      export: {\n        _updateColumnWidth: function (column, width) {\n          this.callBase(column, column.visibleWidth === HIDDEN_COLUMNS_WIDTH ? column.bestFitWidth : width);\n        }\n      },\n      columnsResizer: {\n        _pointCreated: function (point, cellsLength, columns) {\n          var result = this.callBase(point, cellsLength, columns);\n          var currentColumn = columns[point.columnIndex] || {};\n\n          var nextColumnIndex = this._getNextColumnIndex(point.columnIndex);\n\n          var nextColumn = columns[nextColumnIndex] || {};\n          var hasHiddenColumnsOnly = nextColumnIndex !== point.columnIndex + 1 && nextColumn.command;\n          var hasAdaptiveHiddenWidth = currentColumn.visibleWidth === HIDDEN_COLUMNS_WIDTH || hasHiddenColumnsOnly;\n          return result || hasAdaptiveHiddenWidth;\n        },\n        _getNextColumnIndex: function (currentColumnIndex) {\n          var visibleColumns = this._columnsController.getVisibleColumns();\n\n          var index = this.callBase(currentColumnIndex);\n\n          while (visibleColumns[index] && visibleColumns[index].visibleWidth === HIDDEN_COLUMNS_WIDTH) {\n            index++;\n          }\n\n          return index;\n        }\n      },\n      draggingHeader: {\n        _pointCreated: function (point, columns, location, sourceColumn) {\n          var result = this.callBase(point, columns, location, sourceColumn);\n          var column = columns[point.columnIndex - 1] || {};\n          var hasAdaptiveHiddenWidth = column.visibleWidth === HIDDEN_COLUMNS_WIDTH;\n          return result || hasAdaptiveHiddenWidth;\n        }\n      },\n      editing: {\n        _isRowEditMode: function () {\n          return this.getEditMode() === EDIT_MODE_ROW;\n        },\n        _getFormEditItemTemplate: function (cellOptions, column) {\n          if (this.getEditMode() !== EDIT_MODE_ROW && \"detailAdaptive\" === cellOptions.rowType) {\n            cellOptions.columnIndex = this._columnsController.getVisibleIndex(column.index);\n            return this.getColumnTemplate(cellOptions);\n          }\n\n          return this.callBase(cellOptions, column);\n        },\n        _closeEditItem: function ($targetElement) {\n          var $itemContents = $targetElement.closest(\".\" + FORM_ITEM_CONTENT_CLASS);\n          var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\n          var formItem = $itemContents.length ? $itemContents.first().data(\"dx-form-item\") : null;\n\n          var columnIndex = formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);\n\n          if (!this.isEditCell(rowIndex, columnIndex)) {\n            this.callBase($targetElement);\n          }\n        },\n        _beforeUpdateItems: function (rowIndices, rowIndex) {\n          if (!this._adaptiveController.isFormOrPopupEditMode() && this._adaptiveController.hasHiddenColumns()) {\n            var items = this._dataController.items();\n\n            var item = items[rowIndex];\n            var oldExpandRowIndex = gridCoreUtils.getIndexByKey(this._dataController.adaptiveExpandedKey(), items);\n            this._isForceRowAdaptiveExpand = !this._adaptiveController.hasAdaptiveDetailRowExpanded();\n\n            if (oldExpandRowIndex >= 0) {\n              rowIndices.push(oldExpandRowIndex + 1);\n            }\n\n            rowIndices.push(rowIndex + 1);\n\n            this._dataController.adaptiveExpandedKey(item.key);\n          }\n        },\n        _afterInsertRow: function (key) {\n          this.callBase.apply(this, arguments);\n\n          if (this._adaptiveController.hasHiddenColumns()) {\n            this._adaptiveController.toggleExpandAdaptiveDetailRow(key, this.isRowEditMode());\n\n            this._isForceRowAdaptiveExpand = true;\n          }\n        },\n        _collapseAdaptiveDetailRow: function () {\n          if (this._isRowEditMode() && this._isForceRowAdaptiveExpand) {\n            this._adaptiveController.collapseAdaptiveDetailRow();\n\n            this._isForceRowAdaptiveExpand = false;\n          }\n        },\n        _cancelEditAdaptiveDetailRow: function () {\n          if (this._adaptiveController.hasHiddenColumns()) {\n            this._collapseAdaptiveDetailRow();\n          }\n        },\n        _afterSaveEditData: function () {\n          this.callBase.apply(this, arguments);\n          var deferred = new Deferred();\n\n          if (this._isRowEditMode() && this._adaptiveController.hasHiddenColumns()) {\n            when(this.getController(\"validating\").validate(true)).done(isValid => {\n              if (isValid) {\n                this._cancelEditAdaptiveDetailRow();\n              }\n\n              deferred.resolve();\n            });\n          } else {\n            deferred.resolve();\n          }\n\n          return deferred.promise();\n        },\n        _beforeCancelEditData: function () {\n          this.callBase();\n\n          this._cancelEditAdaptiveDetailRow();\n        },\n        _getRowIndicesForCascadeUpdating: function (row) {\n          var rowIndices = this.callBase.apply(this, arguments);\n\n          if (this._adaptiveController.isAdaptiveDetailRowExpanded(row.key)) {\n            rowIndices.push(row.rowType === ADAPTIVE_ROW_TYPE ? row.rowIndex - 1 : row.rowIndex + 1);\n          }\n\n          return rowIndices;\n        },\n        _beforeCloseEditCellInBatchMode: function (rowIndices) {\n          var expandedKey = this._dataController._adaptiveExpandedKey;\n\n          if (expandedKey) {\n            var rowIndex = gridCoreUtils.getIndexByKey(expandedKey, this._dataController.items());\n\n            if (rowIndex > -1) {\n              rowIndices.unshift(rowIndex);\n            }\n          }\n        },\n        editRow: function (rowIndex) {\n          if (this._adaptiveController.isFormOrPopupEditMode()) {\n            this._adaptiveController.collapseAdaptiveDetailRow();\n          }\n\n          this.callBase(rowIndex);\n        },\n        deleteRow: function (rowIndex) {\n          var rowKey = this._dataController.getKeyByRowIndex(rowIndex);\n\n          if (this.getEditMode() === EDIT_MODE_BATCH && this._adaptiveController.isAdaptiveDetailRowExpanded(rowKey)) {\n            this._adaptiveController.collapseAdaptiveDetailRow();\n          }\n\n          this.callBase(rowIndex);\n        },\n        init: function () {\n          this.callBase();\n          this._adaptiveController = this.getController(\"adaptiveColumns\");\n        }\n      },\n      resizing: {\n        _needBestFit: function () {\n          return this.callBase() || !!this._adaptiveColumnsController.getHidingColumnsQueue().length;\n        },\n        _correctColumnWidths: function (resultWidths, visibleColumns) {\n          var adaptiveController = this._adaptiveColumnsController;\n          var oldHiddenColumns = adaptiveController.getHiddenColumns();\n          var hidingColumnsQueue = adaptiveController.updateHidingQueue(this._columnsController.getColumns());\n          adaptiveController.hideRedundantColumns(resultWidths, visibleColumns, hidingColumnsQueue);\n          var hiddenColumns = adaptiveController.getHiddenColumns();\n\n          if (adaptiveController.hasAdaptiveDetailRowExpanded()) {\n            if (oldHiddenColumns.length !== hiddenColumns.length) {\n              adaptiveController.updateForm(hiddenColumns);\n            }\n          }\n\n          !hiddenColumns.length && adaptiveController.collapseAdaptiveDetailRow();\n          return this.callBase.apply(this, arguments);\n        },\n        _toggleBestFitMode: function (isBestFit) {\n          isBestFit && this._adaptiveColumnsController._showHiddenColumns();\n          this.callBase(isBestFit);\n        },\n        _needStretch: function () {\n          var adaptiveColumnsController = this._adaptiveColumnsController;\n          return this.callBase.apply(this, arguments) || adaptiveColumnsController.getHidingColumnsQueue().length || adaptiveColumnsController.hasHiddenColumns();\n        },\n        init: function () {\n          this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\n          this.callBase();\n        },\n        dispose: function () {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._updateScrollableTimeoutID);\n        }\n      },\n      data: {\n        _processItems: function (items, change) {\n          var changeType = change.changeType;\n          items = this.callBase.apply(this, arguments);\n\n          if (\"loadingAll\" === changeType || !isDefined(this._adaptiveExpandedKey)) {\n            return items;\n          }\n\n          var expandRowIndex = gridCoreUtils.getIndexByKey(this._adaptiveExpandedKey, items);\n          var newMode = false === this.option(LEGACY_SCROLLING_MODE);\n\n          if (expandRowIndex >= 0) {\n            var item = items[expandRowIndex];\n            items.splice(expandRowIndex + 1, 0, {\n              visible: true,\n              rowType: ADAPTIVE_ROW_TYPE,\n              key: item.key,\n              data: item.data,\n              node: item.node,\n              modifiedValues: item.modifiedValues,\n              isNewRow: item.isNewRow,\n              values: item.values\n            });\n          } else if (\"refresh\" === changeType && !(newMode && change.repaintChangesOnly)) {\n            this._adaptiveExpandedKey = void 0;\n          }\n\n          return items;\n        },\n        _getRowIndicesForExpand: function (key) {\n          var rowIndices = this.callBase.apply(this, arguments);\n\n          if (this.getController(\"adaptiveColumns\").isAdaptiveDetailRowExpanded(key)) {\n            var lastRowIndex = rowIndices[rowIndices.length - 1];\n            rowIndices.push(lastRowIndex + 1);\n          }\n\n          return rowIndices;\n        },\n        adaptiveExpandedKey: function (value) {\n          if (isDefined(value)) {\n            this._adaptiveExpandedKey = value;\n          } else {\n            return this._adaptiveExpandedKey;\n          }\n        },\n        toggleExpandAdaptiveDetailRow: function (key, alwaysExpanded) {\n          var oldExpandLoadedRowIndex = gridCoreUtils.getIndexByKey(this._adaptiveExpandedKey, this._items);\n          var newExpandLoadedRowIndex = gridCoreUtils.getIndexByKey(key, this._items);\n\n          if (oldExpandLoadedRowIndex >= 0 && oldExpandLoadedRowIndex === newExpandLoadedRowIndex && !alwaysExpanded) {\n            key = void 0;\n            newExpandLoadedRowIndex = -1;\n          }\n\n          var oldKey = this._adaptiveExpandedKey;\n          this._adaptiveExpandedKey = key;\n\n          if (oldExpandLoadedRowIndex >= 0) {\n            oldExpandLoadedRowIndex++;\n          }\n\n          if (newExpandLoadedRowIndex >= 0) {\n            newExpandLoadedRowIndex++;\n          }\n\n          var rowIndexDelta = this.getRowIndexDelta();\n          this.updateItems({\n            allowInvisibleRowIndices: true,\n            changeType: \"update\",\n            rowIndices: [oldExpandLoadedRowIndex - rowIndexDelta, newExpandLoadedRowIndex - rowIndexDelta]\n          });\n          var adaptiveColumnsController = this.getController(\"adaptiveColumns\");\n          adaptiveColumnsController.updateCommandAdaptiveAriaLabel(key, COLLAPSE_ARIA_NAME);\n          adaptiveColumnsController.updateCommandAdaptiveAriaLabel(oldKey, EXPAND_ARIA_NAME);\n        },\n        init: function () {\n          this.callBase();\n          this._adaptiveExpandedKey = void 0;\n        }\n      },\n      editorFactory: {\n        _getFocusCellSelector: function () {\n          return this.callBase() + \", .dx-adaptive-detail-row .dx-field-item > .dx-field-item-content\";\n        },\n        _getTooltipsSelector: function () {\n          return this.callBase() + \", .dx-field-item-content .\" + this.addWidgetPrefix(REVERT_TOOLTIP_CLASS);\n        }\n      },\n      columns: {\n        _isColumnVisible: function (column) {\n          return this.callBase(column) && !column.adaptiveHidden;\n        }\n      },\n      keyboardNavigation: {\n        _isCellValid: function ($cell) {\n          return this.callBase.apply(this, arguments) && !$cell.hasClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS)) && !$cell.hasClass(COMMAND_ADAPTIVE_HIDDEN_CLASS);\n        },\n        _processNextCellInMasterDetail: function ($nextCell) {\n          this.callBase($nextCell);\n\n          var isCellOrBatchMode = this._editingController.isCellOrBatchEditMode();\n\n          if (!this._isInsideEditForm($nextCell) && $nextCell && isCellOrBatchMode) {\n            eventsEngine.on($nextCell, \"focus\", function focusHandler() {\n              eventsEngine.off($nextCell, \"focus\", focusHandler);\n              eventsEngine.trigger($nextCell, \"dxclick\");\n            });\n          }\n        },\n        _handleTabKeyOnMasterDetailCell: function (eventTarget, direction) {\n          var result = this.callBase(eventTarget, direction);\n\n          var $currentCell = this._getFocusedCell();\n\n          var $row = $currentCell && $currentCell.parent();\n\n          if (!result && $row && $row.length) {\n            var $dataCells = getDataCellElements($row);\n            var $targetCell = \"next\" === direction ? $dataCells.last() : $dataCells.first();\n            var rowIndex = $row.get(0).rowIndex;\n            var adaptiveController = this._adaptiveController;\n\n            var key = this._dataController.getKeyByRowIndex(\"next\" === direction ? rowIndex : rowIndex - 1);\n\n            var isCellElementsEquals = $currentCell && $targetCell && $currentCell.get(0) === $targetCell.get(0);\n            return adaptiveController.isAdaptiveDetailRowExpanded(key) && isCellElementsEquals;\n          }\n\n          return result;\n        },\n        init: function () {\n          this.callBase();\n          this._adaptiveController = this.getController(\"adaptiveColumns\");\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.adaptivity.js"],"names":["getWidth","$","eventsEngine","addNamespace","name","clickEventName","isDefined","isString","Guid","modules","Form","gridCoreUtils","isMaterial","getWindow","equalByValue","each","extend","Deferred","when","messageLocalization","COLUMN_HEADERS_VIEW","ROWS_VIEW","FOOTER_VIEW","COLUMN_VIEWS","ADAPTIVE_NAMESPACE","HIDDEN_COLUMNS_WIDTH","ADAPTIVE_ROW_TYPE","FORM_ITEM_CONTENT_CLASS","FORM_ITEM_MODIFIED","HIDDEN_COLUMN_CLASS","ADAPTIVE_COLUMN_BUTTON_CLASS","ADAPTIVE_COLUMN_NAME_CLASS","COMMAND_ADAPTIVE_HIDDEN_CLASS","ADAPTIVE_DETAIL_ROW_CLASS","ADAPTIVE_ITEM_TEXT_CLASS","MASTER_DETAIL_CELL_CLASS","LAST_DATA_CELL_CLASS","ADAPTIVE_COLUMN_NAME","EDIT_MODE_BATCH","EDIT_MODE_ROW","EDIT_MODE_FORM","EDIT_MODE_POPUP","REVERT_TOOLTIP_CLASS","GROUP_CELL_CLASS","GROUP_ROW_CLASS","EXPAND_ARIA_NAME","COLLAPSE_ARIA_NAME","LEGACY_SCROLLING_MODE","getColumnId","that","column","_columnsController","getDataCellElements","$row","find","adaptiveCellTemplate","container","options","$adaptiveColumnButton","$container","adaptiveColumnsController","component","getController","rowType","addClass","addWidgetPrefix","on","createAction","toggleExpandAdaptiveDetailRow","key","appendTo","setEmptyText","AdaptiveColumnsController","ViewController","inherit","_isRowEditMode","editMode","_getEditMode","_isItemModified","item","cellOptions","columnIndex","getVisibleIndex","index","rowIndex","_dataController","getRowIndexByKey","row","items","modifiedValues","_renderFormViewTemplate","focusAction","trigger","rowData","data","value","calculateCellValue","displayValue","getDisplayValue","text","formatValue","isCellOrBatchEditMode","_editingController","rowsView","_rowsView","allowEditing","isKeyboardEnabled","attr","option","off","cellTemplate","templateOptions","isDomElement","closest","document","length","renderTemplate","done","_cellPrepared","get","encodeHtml","textContent","innerHTML","html","_getTemplate","editingController","renderFormTemplate","isItemEdited","_isItemEdited","values","showEditorAlways","renderFormEditTemplate","watch","contents","remove","removeClass","_isVisibleColumnsValid","visibleColumns","result","j","visibleColumn","command","_calculatePercentWidths","widths","percentWidths","forEach","_getItemPercentWidth","_isPercentWidth","width","slice","_isColumnHidden","_hiddenColumns","filter","hiddenColumn","_getAverageColumnsWidth","containerWidth","columns","columnsCanFit","fixedColumnsWidth","columnsWithoutFixedWidthCount","isNaN","parseFloat","_calculatePercentWidth","visibleIndex","columnsCount","bestFitWidth","columnWidth","_calculateColumnWidth","contentColumns","columnId","widthOption","columnOption","colWidth","columnAutoWidth","columnFitted","partialWidth","resultWidth","_getNotTruncatedColumnWidth","_getCommandColumnsWidth","getVisibleColumns","isFormOrPopupEditMode","editRowKey","adaptiveExpandedKey","isEditCell","_getFormItemsByHiddenColumns","hiddenColumns","_","push","dataField","_getAdaptiveColumnVisibleIndex","i","_hideAdaptiveColumn","resultWidths","_hideVisibleColumn","isCommandColumn","_showHiddenCellsInView","_ref","$cells","cssClassNameToRemove","tabIndex","_showHiddenColumns","view","getView","isVisible","element","viewName","$hiddenCommandCells","$hiddenCells","_isCellValid","$cell","hasClass","_ref2","_hideVisibleColumnInView","_ref3","$cellElement","editFormRowIndex","getEditFormRowIndex","rowsCount","getRowsCount","$rowElements","_getRowElements","cancelClassAdding","currentVisibleIndex","$rowElement","eq","_findCellElementInRow","_hideVisibleCellInView","visibleColumnIndex","$rowCells","children","cellIsInsideGroup","$groupCell","concat","colSpan","groupCellLength","parseInt","endGroupIndex","_ref4","cssClassNameToAdd","getEditMode","hideRedundantColumns","hiddenQueue","totalWidth","$rootElement","$element","rootElementWidth","getVisibleContentColumns","bind","visibleContentColumns","contentColumnsCount","hasHiddenColumns","needHideColumn","minWidth","columnBestFitWidth","fixed","Math","max","pop","getItemContentByColumnIndex","$itemContent","_$itemContents","alwaysExpanded","isEditing","createFormByHiddenColumns","userFormOptions","formID","defaultFormOptions","colCount","executeAction","formOptions","_form","_createComponent","customizeItem","label","caption","template","updateForm","call","onContentReady","e","hasAdaptiveDetailRowExpanded","_contentReadyAction","repaint","updateHidingQueue","hideableColumns","visible","type","groupIndex","columnsHasHidingPriority","_hidingColumnsQueue","hidingPriority","reverse","Object","getHiddenColumns","getHidingColumnsQueue","init","addCommandColumn","adaptiveHidden","cssClass","alignment","fixedPosition","columnsChanged","add","isAdaptiveVisible","getColumns","callBase","optionChanged","args","publicMethods","isAdaptiveDetailRowExpanded","expandAdaptiveDetailRow","collapseAdaptiveDetailRow","updateCommandAdaptiveAriaLabel","getRowElement","setCommandAdaptiveAriaLabel","labelName","$adaptiveCommand","format","adaptivityModule","defaultOptions","columnHidingEnabled","onAdaptiveDetailRowPreparing","controllers","adaptiveColumns","extenders","views","_getCellTemplate","_adaptiveColumnsController","_createRow","apply","arguments","_renderCells","hidingColumnsQueueLength","hiddenColumnsLength","last","_getColumnIndexByElementCore","formItem","first","visibleWidth","_getCellElement","columnIdentifier","getContextMenuItems","targetElement","next","isClickableElement","$target","isClickable","export","_updateColumnWidth","columnsResizer","_pointCreated","point","cellsLength","currentColumn","nextColumnIndex","_getNextColumnIndex","nextColumn","hasHiddenColumnsOnly","hasAdaptiveHiddenWidth","currentColumnIndex","draggingHeader","location","sourceColumn","editing","_getFormEditItemTemplate","getColumnTemplate","_closeEditItem","$targetElement","$itemContents","_beforeUpdateItems","rowIndices","_adaptiveController","oldExpandRowIndex","getIndexByKey","_isForceRowAdaptiveExpand","_afterInsertRow","isRowEditMode","_collapseAdaptiveDetailRow","_cancelEditAdaptiveDetailRow","_afterSaveEditData","deferred","validate","isValid","resolve","promise","_beforeCancelEditData","_getRowIndicesForCascadeUpdating","_beforeCloseEditCellInBatchMode","expandedKey","_adaptiveExpandedKey","unshift","editRow","deleteRow","rowKey","getKeyByRowIndex","resizing","_needBestFit","_correctColumnWidths","adaptiveController","oldHiddenColumns","hidingColumnsQueue","_toggleBestFitMode","isBestFit","_needStretch","dispose","clearTimeout","_updateScrollableTimeoutID","_processItems","change","changeType","expandRowIndex","newMode","splice","node","isNewRow","repaintChangesOnly","_getRowIndicesForExpand","lastRowIndex","oldExpandLoadedRowIndex","_items","newExpandLoadedRowIndex","oldKey","rowIndexDelta","getRowIndexDelta","updateItems","allowInvisibleRowIndices","editorFactory","_getFocusCellSelector","_getTooltipsSelector","_isColumnVisible","keyboardNavigation","_processNextCellInMasterDetail","$nextCell","isCellOrBatchMode","_isInsideEditForm","focusHandler","_handleTabKeyOnMasterDetailCell","eventTarget","direction","$currentCell","_getFocusedCell","parent","$dataCells","$targetCell","isCellElementsEquals"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.adaptivity.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getWidth\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    addNamespace\r\n} from \"../../events/utils/index\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../events/click\";\r\nimport {\r\n    isDefined,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nimport Guid from \"../../core/guid\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport Form from \"../form\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    isMaterial\r\n} from \"../themes\";\r\nimport {\r\n    getWindow\r\n} from \"../../core/utils/window\";\r\nimport {\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    Deferred,\r\n    when\r\n} from \"../../core/utils/deferred\";\r\nimport messageLocalization from \"../../localization/message\";\r\nvar COLUMN_HEADERS_VIEW = \"columnHeadersView\";\r\nvar ROWS_VIEW = \"rowsView\";\r\nvar FOOTER_VIEW = \"footerView\";\r\nvar COLUMN_VIEWS = [COLUMN_HEADERS_VIEW, ROWS_VIEW, FOOTER_VIEW];\r\nvar ADAPTIVE_NAMESPACE = \"dxDataGridAdaptivity\";\r\nvar HIDDEN_COLUMNS_WIDTH = \"adaptiveHidden\";\r\nvar ADAPTIVE_ROW_TYPE = \"detailAdaptive\";\r\nvar FORM_ITEM_CONTENT_CLASS = \"dx-field-item-content\";\r\nvar FORM_ITEM_MODIFIED = \"dx-item-modified\";\r\nvar HIDDEN_COLUMN_CLASS = \"hidden-column\";\r\nvar ADAPTIVE_COLUMN_BUTTON_CLASS = \"adaptive-more\";\r\nvar ADAPTIVE_COLUMN_NAME_CLASS = \"dx-command-adaptive\";\r\nvar COMMAND_ADAPTIVE_HIDDEN_CLASS = \"dx-command-adaptive-hidden\";\r\nvar ADAPTIVE_DETAIL_ROW_CLASS = \"dx-adaptive-detail-row\";\r\nvar ADAPTIVE_ITEM_TEXT_CLASS = \"dx-adaptive-item-text\";\r\nvar MASTER_DETAIL_CELL_CLASS = \"dx-master-detail-cell\";\r\nvar LAST_DATA_CELL_CLASS = \"dx-last-data-cell\";\r\nvar ADAPTIVE_COLUMN_NAME = \"adaptive\";\r\nvar EDIT_MODE_BATCH = \"batch\";\r\nvar EDIT_MODE_ROW = \"row\";\r\nvar EDIT_MODE_FORM = \"form\";\r\nvar EDIT_MODE_POPUP = \"popup\";\r\nvar REVERT_TOOLTIP_CLASS = \"revert-tooltip\";\r\nvar GROUP_CELL_CLASS = \"dx-group-cell\";\r\nvar GROUP_ROW_CLASS = \"dx-group-row\";\r\nvar EXPAND_ARIA_NAME = \"dxDataGrid-ariaAdaptiveExpand\";\r\nvar COLLAPSE_ARIA_NAME = \"dxDataGrid-ariaAdaptiveCollapse\";\r\nvar LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\r\n\r\nfunction getColumnId(that, column) {\r\n    return that._columnsController.getColumnId(column)\r\n}\r\n\r\nfunction getDataCellElements($row) {\r\n    return $row.find(\"td:not(.dx-datagrid-hidden-column):not([class*='dx-command-'])\")\r\n}\r\n\r\nfunction adaptiveCellTemplate(container, options) {\r\n    var $adaptiveColumnButton;\r\n    var $container = $(container);\r\n    var adaptiveColumnsController = options.component.getController(\"adaptiveColumns\");\r\n    if (\"data\" === options.rowType) {\r\n        $adaptiveColumnButton = $(\"<span>\").addClass(adaptiveColumnsController.addWidgetPrefix(ADAPTIVE_COLUMN_BUTTON_CLASS));\r\n        eventsEngine.on($adaptiveColumnButton, addNamespace(clickEventName, ADAPTIVE_NAMESPACE), adaptiveColumnsController.createAction((function() {\r\n            adaptiveColumnsController.toggleExpandAdaptiveDetailRow(options.key)\r\n        })));\r\n        $adaptiveColumnButton.appendTo($container)\r\n    } else {\r\n        gridCoreUtils.setEmptyText($container)\r\n    }\r\n}\r\nvar AdaptiveColumnsController = modules.ViewController.inherit({\r\n    _isRowEditMode: function() {\r\n        var editMode = this._getEditMode();\r\n        return editMode === EDIT_MODE_ROW\r\n    },\r\n    _isItemModified: function(item, cellOptions) {\r\n        var columnIndex = this._columnsController.getVisibleIndex(item.column.index);\r\n        var rowIndex = this._dataController.getRowIndexByKey(cellOptions.key);\r\n        var row = this._dataController.items()[rowIndex + 1];\r\n        return row && row.modifiedValues && isDefined(row.modifiedValues[columnIndex])\r\n    },\r\n    _renderFormViewTemplate: function(item, cellOptions, $container) {\r\n        var column = item.column;\r\n        var focusAction = this.createAction((function() {\r\n            eventsEngine.trigger($container, clickEventName)\r\n        }));\r\n        var rowData = cellOptions.row.data;\r\n        var value = column.calculateCellValue(rowData);\r\n        var displayValue = gridCoreUtils.getDisplayValue(column, value, rowData, cellOptions.rowType);\r\n        var text = gridCoreUtils.formatValue(displayValue, column);\r\n        var isCellOrBatchEditMode = this._editingController.isCellOrBatchEditMode();\r\n        var rowsView = this._rowsView;\r\n        if (column.allowEditing && this.getController(\"keyboardNavigation\").isKeyboardEnabled()) {\r\n            $container.attr(\"tabIndex\", this.option(\"tabIndex\"));\r\n            if (isCellOrBatchEditMode) {\r\n                eventsEngine.off($container, \"focus\", focusAction);\r\n                eventsEngine.on($container, \"focus\", focusAction)\r\n            }\r\n        }\r\n        if (column.cellTemplate) {\r\n            var templateOptions = extend({}, cellOptions, {\r\n                value: value,\r\n                displayValue: displayValue,\r\n                text: text,\r\n                column: column\r\n            });\r\n            var isDomElement = !!$container.closest(getWindow().document).length;\r\n            rowsView.renderTemplate($container, column.cellTemplate, templateOptions, isDomElement).done(() => {\r\n                rowsView._cellPrepared($container, cellOptions)\r\n            })\r\n        } else {\r\n            var container = $container.get(0);\r\n            if (column.encodeHtml) {\r\n                container.textContent = text\r\n            } else {\r\n                container.innerHTML = text\r\n            }\r\n            $container.addClass(ADAPTIVE_ITEM_TEXT_CLASS);\r\n            if (!isDefined(text) || \"\" === text) {\r\n                $container.html(\"&nbsp;\")\r\n            }\r\n            if (!this._isRowEditMode()) {\r\n                if (this._isItemModified(item, cellOptions)) {\r\n                    $container.addClass(FORM_ITEM_MODIFIED)\r\n                }\r\n            }\r\n            rowsView._cellPrepared($container, cellOptions)\r\n        }\r\n    },\r\n    _getTemplate: function(item, cellOptions) {\r\n        var that = this;\r\n        var column = item.column;\r\n        var editingController = this.getController(\"editing\");\r\n        return function(options, container) {\r\n            var $container = $(container);\r\n            var columnIndex = that._columnsController.getVisibleIndex(column.index);\r\n            var templateOptions = extend({}, cellOptions);\r\n            var renderFormTemplate = function() {\r\n                var isItemEdited = that._isItemEdited(item);\r\n                templateOptions.value = cellOptions.row.values[columnIndex];\r\n                if (isItemEdited || column.showEditorAlways) {\r\n                    editingController.renderFormEditTemplate(templateOptions, item, options, $container, !isItemEdited)\r\n                } else {\r\n                    templateOptions.column = column;\r\n                    templateOptions.columnIndex = columnIndex;\r\n                    that._renderFormViewTemplate(item, templateOptions, $container)\r\n                }\r\n            };\r\n            renderFormTemplate();\r\n            templateOptions.watch && templateOptions.watch((function() {\r\n                return {\r\n                    isItemEdited: that._isItemEdited(item),\r\n                    value: cellOptions.row.values[columnIndex]\r\n                }\r\n            }), (function() {\r\n                $container.contents().remove();\r\n                $container.removeClass(ADAPTIVE_ITEM_TEXT_CLASS);\r\n                renderFormTemplate()\r\n            }))\r\n        }\r\n    },\r\n    _isVisibleColumnsValid: function(visibleColumns) {\r\n        if (visibleColumns < 2) {\r\n            return false\r\n        }\r\n        if (visibleColumns.length - function() {\r\n                var result = 0;\r\n                for (var j = 0; j < visibleColumns.length; j++) {\r\n                    var visibleColumn = visibleColumns[j];\r\n                    if (visibleColumn.command) {\r\n                        result++\r\n                    }\r\n                }\r\n                return result\r\n            }() <= 1) {\r\n            return false\r\n        }\r\n        return true\r\n    },\r\n    _calculatePercentWidths: function(widths, visibleColumns) {\r\n        var that = this;\r\n        var percentWidths = 0;\r\n        visibleColumns.forEach((function(item, index) {\r\n            if (widths[index] !== HIDDEN_COLUMNS_WIDTH) {\r\n                percentWidths += that._getItemPercentWidth(item)\r\n            }\r\n        }));\r\n        return percentWidths\r\n    },\r\n    _isPercentWidth: function(width) {\r\n        return isString(width) && \"%\" === width.slice(-1)\r\n    },\r\n    _isColumnHidden: function(column) {\r\n        return this._hiddenColumns.filter((function(hiddenColumn) {\r\n            return hiddenColumn.index === column.index\r\n        })).length > 0\r\n    },\r\n    _getAverageColumnsWidth: function(containerWidth, columns, columnsCanFit) {\r\n        var that = this;\r\n        var fixedColumnsWidth = 0;\r\n        var columnsWithoutFixedWidthCount = 0;\r\n        columns.forEach((function(column) {\r\n            if (!that._isColumnHidden(column)) {\r\n                var width = column.width;\r\n                if (isDefined(width) && !isNaN(parseFloat(width))) {\r\n                    fixedColumnsWidth += that._isPercentWidth(width) ? that._calculatePercentWidth({\r\n                        visibleIndex: column.visibleIndex,\r\n                        columnsCount: columns.length,\r\n                        columnsCanFit: columnsCanFit,\r\n                        bestFitWidth: column.bestFitWidth,\r\n                        columnWidth: width,\r\n                        containerWidth: containerWidth\r\n                    }) : parseFloat(width)\r\n                } else {\r\n                    columnsWithoutFixedWidthCount++\r\n                }\r\n            }\r\n        }));\r\n        return (containerWidth - fixedColumnsWidth) / columnsWithoutFixedWidthCount\r\n    },\r\n    _calculateColumnWidth: function(column, containerWidth, contentColumns, columnsCanFit) {\r\n        var columnId = getColumnId(this, column);\r\n        var widthOption = this._columnsController.columnOption(columnId, \"width\");\r\n        var bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\r\n        var columnsCount = contentColumns.length;\r\n        var colWidth;\r\n        if (widthOption && \"auto\" !== widthOption) {\r\n            if (this._isPercentWidth(widthOption)) {\r\n                colWidth = this._calculatePercentWidth({\r\n                    visibleIndex: column.visibleIndex,\r\n                    columnsCount: columnsCount,\r\n                    columnsCanFit: columnsCanFit,\r\n                    bestFitWidth: bestFitWidth,\r\n                    columnWidth: widthOption,\r\n                    containerWidth: containerWidth\r\n                })\r\n            } else {\r\n                return parseFloat(widthOption)\r\n            }\r\n        } else {\r\n            var columnAutoWidth = this.option(\"columnAutoWidth\");\r\n            colWidth = columnAutoWidth || !!column.command ? bestFitWidth : this._getAverageColumnsWidth(containerWidth, contentColumns, columnsCanFit)\r\n        }\r\n        return colWidth\r\n    },\r\n    _calculatePercentWidth: function(options) {\r\n        var columnFitted = options.visibleIndex < options.columnsCount - 1 && options.columnsCanFit;\r\n        var partialWidth = options.containerWidth * parseFloat(options.columnWidth) / 100;\r\n        var resultWidth = options.columnsCanFit && partialWidth < options.bestFitWidth ? options.bestFitWidth : partialWidth;\r\n        return columnFitted ? options.containerWidth * parseFloat(options.columnWidth) / 100 : resultWidth\r\n    },\r\n    _getNotTruncatedColumnWidth: function(column, containerWidth, contentColumns, columnsCanFit) {\r\n        var columnId = getColumnId(this, column);\r\n        var widthOption = this._columnsController.columnOption(columnId, \"width\");\r\n        var bestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\r\n        if (widthOption && \"auto\" !== widthOption && !this._isPercentWidth(widthOption)) {\r\n            return parseFloat(widthOption)\r\n        }\r\n        var colWidth = this._calculateColumnWidth(column, containerWidth, contentColumns, columnsCanFit);\r\n        return colWidth < bestFitWidth ? null : colWidth\r\n    },\r\n    _getItemPercentWidth: function(item) {\r\n        var result = 0;\r\n        if (item.width && this._isPercentWidth(item.width)) {\r\n            result = parseFloat(item.width)\r\n        }\r\n        return result\r\n    },\r\n    _getCommandColumnsWidth: function() {\r\n        var that = this;\r\n        var columns = that._columnsController.getVisibleColumns();\r\n        var colWidth = 0;\r\n        each(columns, (function(index, column) {\r\n            if (column.index < 0 || column.command) {\r\n                colWidth += that._columnsController.columnOption(getColumnId(that, column), \"bestFitWidth\") || 0\r\n            }\r\n        }));\r\n        return colWidth\r\n    },\r\n    _isItemEdited: function(item) {\r\n        if (this.isFormOrPopupEditMode()) {\r\n            return false\r\n        }\r\n        if (this._isRowEditMode()) {\r\n            var editRowKey = this.option(\"editing.editRowKey\");\r\n            if (equalByValue(editRowKey, this._dataController.adaptiveExpandedKey())) {\r\n                return true\r\n            }\r\n        } else {\r\n            var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\r\n            var columnIndex = this._columnsController.getVisibleIndex(item.column.index);\r\n            return this._editingController.isEditCell(rowIndex, columnIndex)\r\n        }\r\n    },\r\n    _getFormItemsByHiddenColumns: function(hiddenColumns) {\r\n        var items = [];\r\n        each(hiddenColumns, (function(_, column) {\r\n            items.push({\r\n                column: column,\r\n                name: column.name,\r\n                dataField: column.dataField,\r\n                visibleIndex: column.visibleIndex\r\n            })\r\n        }));\r\n        return items\r\n    },\r\n    _getAdaptiveColumnVisibleIndex: function(visibleColumns) {\r\n        for (var i = 0; i < visibleColumns.length; i++) {\r\n            var column = visibleColumns[i];\r\n            if (column.command === ADAPTIVE_COLUMN_NAME) {\r\n                return i\r\n            }\r\n        }\r\n    },\r\n    _hideAdaptiveColumn: function(resultWidths, visibleColumns) {\r\n        var visibleIndex = this._getAdaptiveColumnVisibleIndex(visibleColumns);\r\n        if (isDefined(visibleIndex)) {\r\n            resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH;\r\n            this._hideVisibleColumn({\r\n                isCommandColumn: true,\r\n                visibleIndex: visibleIndex\r\n            })\r\n        }\r\n    },\r\n    _showHiddenCellsInView: function(_ref) {\r\n        var {\r\n            $cells: $cells,\r\n            isCommandColumn: isCommandColumn\r\n        } = _ref;\r\n        var cssClassNameToRemove = this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);\r\n        if (isCommandColumn) {\r\n            cssClassNameToRemove = COMMAND_ADAPTIVE_HIDDEN_CLASS;\r\n            $cells.attr({\r\n                tabIndex: 0,\r\n                \"aria-hidden\": null\r\n            }).removeClass(cssClassNameToRemove)\r\n        } else {\r\n            $cells.removeClass(cssClassNameToRemove)\r\n        }\r\n    },\r\n    _showHiddenColumns: function() {\r\n        for (var i = 0; i < COLUMN_VIEWS.length; i++) {\r\n            var view = this.getView(COLUMN_VIEWS[i]);\r\n            if (view && view.isVisible() && view.element()) {\r\n                var viewName = view.name;\r\n                var $hiddenCommandCells = view.element().find(\".\" + COMMAND_ADAPTIVE_HIDDEN_CLASS);\r\n                this._showHiddenCellsInView({\r\n                    viewName: viewName,\r\n                    $cells: $hiddenCommandCells,\r\n                    isCommandColumn: true\r\n                });\r\n                var $hiddenCells = view.element().find(\".\" + this.addWidgetPrefix(HIDDEN_COLUMN_CLASS));\r\n                this._showHiddenCellsInView({\r\n                    viewName: viewName,\r\n                    $cells: $hiddenCells\r\n                })\r\n            }\r\n        }\r\n    },\r\n    _isCellValid: function($cell) {\r\n        return $cell && $cell.length && !$cell.hasClass(MASTER_DETAIL_CELL_CLASS) && !$cell.hasClass(GROUP_CELL_CLASS)\r\n    },\r\n    _hideVisibleColumn: function(_ref2) {\r\n        var {\r\n            isCommandColumn: isCommandColumn,\r\n            visibleIndex: visibleIndex\r\n        } = _ref2;\r\n        var that = this;\r\n        COLUMN_VIEWS.forEach((function(viewName) {\r\n            var view = that.getView(viewName);\r\n            view && that._hideVisibleColumnInView({\r\n                view: view,\r\n                isCommandColumn: isCommandColumn,\r\n                visibleIndex: visibleIndex\r\n            })\r\n        }))\r\n    },\r\n    _hideVisibleColumnInView: function(_ref3) {\r\n        var {\r\n            view: view,\r\n            isCommandColumn: isCommandColumn,\r\n            visibleIndex: visibleIndex\r\n        } = _ref3;\r\n        var viewName = view.name;\r\n        var $cellElement;\r\n        var column = this._columnsController.getVisibleColumns()[visibleIndex];\r\n        var editFormRowIndex = this._editingController && this._editingController.getEditFormRowIndex();\r\n        if (view && view.isVisible() && column) {\r\n            var rowsCount = view.getRowsCount();\r\n            var $rowElements = view._getRowElements();\r\n            for (var rowIndex = 0; rowIndex < rowsCount; rowIndex++) {\r\n                var cancelClassAdding = rowIndex === editFormRowIndex && viewName === ROWS_VIEW && \"popup\" !== this.option(\"editing.mode\");\r\n                if (!cancelClassAdding) {\r\n                    var currentVisibleIndex = viewName === COLUMN_HEADERS_VIEW ? this._columnsController.getVisibleIndex(column.index, rowIndex) : visibleIndex;\r\n                    if (currentVisibleIndex >= 0) {\r\n                        var $rowElement = $rowElements.eq(rowIndex);\r\n                        $cellElement = this._findCellElementInRow($rowElement, currentVisibleIndex);\r\n                        this._isCellValid($cellElement) && this._hideVisibleCellInView({\r\n                            viewName: viewName,\r\n                            isCommandColumn: isCommandColumn,\r\n                            $cell: $cellElement\r\n                        })\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _findCellElementInRow($rowElement, visibleColumnIndex) {\r\n        var $rowCells = $rowElement.children();\r\n        var visibleIndex = visibleColumnIndex;\r\n        var cellIsInsideGroup = false;\r\n        if ($rowElement.hasClass(GROUP_ROW_CLASS)) {\r\n            var $groupCell = $rowElement.find(\".\".concat(GROUP_CELL_CLASS));\r\n            var colSpan = $groupCell.attr(\"colspan\");\r\n            if ($groupCell.length && isDefined(colSpan)) {\r\n                var groupCellLength = parseInt(colSpan);\r\n                var endGroupIndex = $groupCell.index() + groupCellLength - 1;\r\n                if (visibleColumnIndex > endGroupIndex) {\r\n                    visibleIndex = visibleColumnIndex - groupCellLength + 1\r\n                } else {\r\n                    cellIsInsideGroup = true\r\n                }\r\n            }\r\n        }\r\n        var $cellElement = !cellIsInsideGroup ? $rowCells.eq(visibleIndex) : void 0;\r\n        return $cellElement\r\n    },\r\n    _hideVisibleCellInView: function(_ref4) {\r\n        var {\r\n            $cell: $cell,\r\n            isCommandColumn: isCommandColumn\r\n        } = _ref4;\r\n        var cssClassNameToAdd = isCommandColumn ? COMMAND_ADAPTIVE_HIDDEN_CLASS : this.addWidgetPrefix(HIDDEN_COLUMN_CLASS);\r\n        $cell.attr({\r\n            tabIndex: -1,\r\n            \"aria-hidden\": true\r\n        }).addClass(cssClassNameToAdd)\r\n    },\r\n    _getEditMode: function() {\r\n        return this._editingController.getEditMode()\r\n    },\r\n    isFormOrPopupEditMode: function() {\r\n        var editMode = this._getEditMode();\r\n        return editMode === EDIT_MODE_FORM || editMode === EDIT_MODE_POPUP\r\n    },\r\n    hideRedundantColumns: function(resultWidths, visibleColumns, hiddenQueue) {\r\n        this._hiddenColumns = [];\r\n        if (this._isVisibleColumnsValid(visibleColumns) && hiddenQueue.length) {\r\n            var totalWidth = 0;\r\n            var $rootElement = this.component.$element();\r\n            var rootElementWidth = getWidth($rootElement) - this._getCommandColumnsWidth();\r\n            var getVisibleContentColumns = function() {\r\n                return visibleColumns.filter(item => !item.command && 0 === this._hiddenColumns.filter(i => i.index === item.index).length)\r\n            }.bind(this);\r\n            var visibleContentColumns = getVisibleContentColumns();\r\n            var contentColumnsCount = visibleContentColumns.length;\r\n            var i;\r\n            var hasHiddenColumns;\r\n            var needHideColumn;\r\n            do {\r\n                needHideColumn = false;\r\n                totalWidth = 0;\r\n                var percentWidths = this._calculatePercentWidths(resultWidths, visibleColumns);\r\n                var columnsCanFit = percentWidths < 100 && 0 !== percentWidths;\r\n                for (i = 0; i < visibleColumns.length; i++) {\r\n                    var visibleColumn = visibleColumns[i];\r\n                    var columnWidth = this._getNotTruncatedColumnWidth(visibleColumn, rootElementWidth, visibleContentColumns, columnsCanFit);\r\n                    var columnId = getColumnId(this, visibleColumn);\r\n                    var widthOption = this._columnsController.columnOption(columnId, \"width\");\r\n                    var minWidth = this._columnsController.columnOption(columnId, \"minWidth\");\r\n                    var columnBestFitWidth = this._columnsController.columnOption(columnId, \"bestFitWidth\");\r\n                    if (resultWidths[i] === HIDDEN_COLUMNS_WIDTH) {\r\n                        hasHiddenColumns = true;\r\n                        continue\r\n                    }\r\n                    if (!columnWidth && !visibleColumn.command && !visibleColumn.fixed) {\r\n                        needHideColumn = true;\r\n                        break\r\n                    }\r\n                    if (!widthOption || \"auto\" === widthOption) {\r\n                        columnWidth = Math.max(columnBestFitWidth || 0, minWidth || 0)\r\n                    }\r\n                    if (visibleColumn.command !== ADAPTIVE_COLUMN_NAME || hasHiddenColumns) {\r\n                        totalWidth += columnWidth\r\n                    }\r\n                }\r\n                needHideColumn = needHideColumn || totalWidth > getWidth($rootElement);\r\n                if (needHideColumn) {\r\n                    var column = hiddenQueue.pop();\r\n                    var visibleIndex = this._columnsController.getVisibleIndex(column.index);\r\n                    rootElementWidth += this._calculateColumnWidth(column, rootElementWidth, visibleContentColumns, columnsCanFit);\r\n                    this._hideVisibleColumn({\r\n                        visibleIndex: visibleIndex\r\n                    });\r\n                    resultWidths[visibleIndex] = HIDDEN_COLUMNS_WIDTH;\r\n                    this._hiddenColumns.push(column);\r\n                    visibleContentColumns = getVisibleContentColumns()\r\n                }\r\n            } while (needHideColumn && visibleContentColumns.length > 1 && hiddenQueue.length);\r\n            if (contentColumnsCount === visibleContentColumns.length) {\r\n                this._hideAdaptiveColumn(resultWidths, visibleColumns)\r\n            }\r\n        } else {\r\n            this._hideAdaptiveColumn(resultWidths, visibleColumns)\r\n        }\r\n    },\r\n    getItemContentByColumnIndex: function(visibleColumnIndex) {\r\n        var $itemContent;\r\n        for (var i = 0; i < this._$itemContents.length; i++) {\r\n            $itemContent = this._$itemContents.eq(i);\r\n            var item = $itemContent.data(\"dx-form-item\");\r\n            if (item && item.column && this._columnsController.getVisibleIndex(item.column.index) === visibleColumnIndex) {\r\n                return $itemContent\r\n            }\r\n        }\r\n    },\r\n    toggleExpandAdaptiveDetailRow: function(key, alwaysExpanded) {\r\n        if (!(this.isFormOrPopupEditMode() && this._editingController.isEditing())) {\r\n            this.getController(\"data\").toggleExpandAdaptiveDetailRow(key, alwaysExpanded)\r\n        }\r\n    },\r\n    createFormByHiddenColumns: function(container, options) {\r\n        var that = this;\r\n        var $container = $(container);\r\n        var userFormOptions = {\r\n            items: that._getFormItemsByHiddenColumns(that._hiddenColumns),\r\n            formID: \"dx-\" + new Guid\r\n        };\r\n        var defaultFormOptions = isMaterial() ? {\r\n            colCount: 2\r\n        } : {};\r\n        this.executeAction(\"onAdaptiveDetailRowPreparing\", {\r\n            formOptions: userFormOptions\r\n        });\r\n        that._$itemContents = null;\r\n        that._form = that._createComponent($(\"<div>\").appendTo($container), Form, extend(defaultFormOptions, userFormOptions, {\r\n            customizeItem: function(item) {\r\n                var column = item.column || that._columnsController.columnOption(item.name || item.dataField);\r\n                if (column) {\r\n                    item.label = item.label || {};\r\n                    item.label.text = item.label.text || column.caption;\r\n                    item.column = column;\r\n                    item.template = that._getTemplate(item, options, that.updateForm.bind(that))\r\n                }\r\n                userFormOptions.customizeItem && userFormOptions.customizeItem.call(this, item)\r\n            },\r\n            onContentReady: function(e) {\r\n                userFormOptions.onContentReady && userFormOptions.onContentReady.call(this, e);\r\n                that._$itemContents = $container.find(\".\" + FORM_ITEM_CONTENT_CLASS)\r\n            }\r\n        }))\r\n    },\r\n    hasAdaptiveDetailRowExpanded: function() {\r\n        return isDefined(this._dataController.adaptiveExpandedKey())\r\n    },\r\n    updateForm: function(hiddenColumns) {\r\n        if (this.hasAdaptiveDetailRowExpanded()) {\r\n            if (this._form && isDefined(this._form._contentReadyAction)) {\r\n                if (hiddenColumns && hiddenColumns.length) {\r\n                    this._form.option(\"items\", this._getFormItemsByHiddenColumns(hiddenColumns))\r\n                } else {\r\n                    this._form.repaint()\r\n                }\r\n            }\r\n        }\r\n    },\r\n    updateHidingQueue: function(columns) {\r\n        var hideableColumns = columns.filter((function(column) {\r\n            return column.visible && !column.type && !column.fixed && !(isDefined(column.groupIndex) && column.groupIndex >= 0)\r\n        }));\r\n        var columnsHasHidingPriority;\r\n        var i;\r\n        this._hidingColumnsQueue = [];\r\n        if (this.option(\"allowColumnResizing\") && \"widget\" === this.option(\"columnResizingMode\")) {\r\n            return this._hidingColumnsQueue\r\n        }\r\n        for (i = 0; i < hideableColumns.length; i++) {\r\n            if (isDefined(hideableColumns[i].hidingPriority) && hideableColumns[i].hidingPriority >= 0) {\r\n                columnsHasHidingPriority = true;\r\n                this._hidingColumnsQueue[hideableColumns[i].hidingPriority] = hideableColumns[i]\r\n            }\r\n        }\r\n        if (columnsHasHidingPriority) {\r\n            this._hidingColumnsQueue.reverse()\r\n        } else if (this.option(\"columnHidingEnabled\")) {\r\n            for (i = 0; i < hideableColumns.length; i++) {\r\n                var visibleIndex = this._columnsController.getVisibleIndex(hideableColumns[i].index);\r\n                this._hidingColumnsQueue[visibleIndex] = hideableColumns[i]\r\n            }\r\n        }\r\n        this._hidingColumnsQueue = this._hidingColumnsQueue.filter(Object);\r\n        return this._hidingColumnsQueue\r\n    },\r\n    getHiddenColumns: function() {\r\n        return this._hiddenColumns\r\n    },\r\n    hasHiddenColumns: function() {\r\n        return this._hiddenColumns.length > 0\r\n    },\r\n    getHidingColumnsQueue: function() {\r\n        return this._hidingColumnsQueue\r\n    },\r\n    init: function() {\r\n        var that = this;\r\n        that._columnsController = that.getController(\"columns\");\r\n        that._dataController = that.getController(\"data\");\r\n        that._rowsView = that.getView(\"rowsView\");\r\n        that._columnsController.addCommandColumn({\r\n            type: ADAPTIVE_COLUMN_NAME,\r\n            command: ADAPTIVE_COLUMN_NAME,\r\n            visible: true,\r\n            adaptiveHidden: true,\r\n            cssClass: ADAPTIVE_COLUMN_NAME_CLASS,\r\n            alignment: \"center\",\r\n            width: \"auto\",\r\n            cellTemplate: adaptiveCellTemplate,\r\n            fixedPosition: \"right\"\r\n        });\r\n        that._columnsController.columnsChanged.add((function() {\r\n            var isAdaptiveVisible = !!that.updateHidingQueue(that._columnsController.getColumns()).length;\r\n            that._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !isAdaptiveVisible, true)\r\n        }));\r\n        that._editingController = that.getController(\"editing\");\r\n        that._hidingColumnsQueue = [];\r\n        that._hiddenColumns = [];\r\n        that.createAction(\"onAdaptiveDetailRowPreparing\");\r\n        that.callBase()\r\n    },\r\n    optionChanged: function(args) {\r\n        if (\"columnHidingEnabled\" === args.name) {\r\n            this._columnsController.columnOption(\"command:adaptive\", \"adaptiveHidden\", !args.value)\r\n        }\r\n        this.callBase(args)\r\n    },\r\n    publicMethods: function() {\r\n        return [\"isAdaptiveDetailRowExpanded\", \"expandAdaptiveDetailRow\", \"collapseAdaptiveDetailRow\"]\r\n    },\r\n    isAdaptiveDetailRowExpanded: function(key) {\r\n        return this._dataController.adaptiveExpandedKey() && equalByValue(this._dataController.adaptiveExpandedKey(), key)\r\n    },\r\n    expandAdaptiveDetailRow: function(key) {\r\n        if (!this.hasAdaptiveDetailRowExpanded()) {\r\n            this.toggleExpandAdaptiveDetailRow(key)\r\n        }\r\n    },\r\n    collapseAdaptiveDetailRow: function() {\r\n        if (this.hasAdaptiveDetailRowExpanded()) {\r\n            this.toggleExpandAdaptiveDetailRow()\r\n        }\r\n    },\r\n    updateCommandAdaptiveAriaLabel: function(key, label) {\r\n        var rowIndex = this._dataController.getRowIndexByKey(key);\r\n        if (-1 === rowIndex) {\r\n            return\r\n        }\r\n        var $row = $(this.component.getRowElement(rowIndex));\r\n        this.setCommandAdaptiveAriaLabel($row, label)\r\n    },\r\n    setCommandAdaptiveAriaLabel: function($row, labelName) {\r\n        var $adaptiveCommand = $row.find(\".dx-command-adaptive\");\r\n        $adaptiveCommand.attr(\"aria-label\", messageLocalization.format(labelName))\r\n    }\r\n});\r\nexport var adaptivityModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            columnHidingEnabled: false,\r\n            onAdaptiveDetailRowPreparing: null\r\n        }\r\n    },\r\n    controllers: {\r\n        adaptiveColumns: AdaptiveColumnsController\r\n    },\r\n    extenders: {\r\n        views: {\r\n            rowsView: {\r\n                _getCellTemplate: function(options) {\r\n                    var that = this;\r\n                    var column = options.column;\r\n                    if (options.rowType === ADAPTIVE_ROW_TYPE && \"detail\" === column.command) {\r\n                        return function(container, options) {\r\n                            that._adaptiveColumnsController.createFormByHiddenColumns($(container), options)\r\n                        }\r\n                    }\r\n                    return that.callBase(options)\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    if (row && row.rowType === ADAPTIVE_ROW_TYPE && row.key === this._dataController.adaptiveExpandedKey()) {\r\n                        $row.addClass(ADAPTIVE_DETAIL_ROW_CLASS)\r\n                    }\r\n                    return $row\r\n                },\r\n                _renderCells: function($row, options) {\r\n                    this.callBase($row, options);\r\n                    var adaptiveColumnsController = this._adaptiveColumnsController;\r\n                    var hidingColumnsQueueLength = adaptiveColumnsController.getHidingColumnsQueue().length;\r\n                    var hiddenColumnsLength = adaptiveColumnsController.getHiddenColumns().length;\r\n                    if (hidingColumnsQueueLength && !hiddenColumnsLength) {\r\n                        getDataCellElements($row).last().addClass(LAST_DATA_CELL_CLASS)\r\n                    }\r\n                    if (\"data\" === options.row.rowType) {\r\n                        adaptiveColumnsController.setCommandAdaptiveAriaLabel($row, EXPAND_ARIA_NAME)\r\n                    }\r\n                },\r\n                _getColumnIndexByElementCore: function($element) {\r\n                    var $itemContent = $element.closest(\".\" + FORM_ITEM_CONTENT_CLASS);\r\n                    if ($itemContent.length && $itemContent.closest(this.component.$element()).length) {\r\n                        var formItem = $itemContent.length ? $itemContent.first().data(\"dx-form-item\") : null;\r\n                        return formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index)\r\n                    } else {\r\n                        return this.callBase($element)\r\n                    }\r\n                },\r\n                _cellPrepared: function($cell, options) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (options.row.rowType !== ADAPTIVE_ROW_TYPE && options.column.visibleWidth === HIDDEN_COLUMNS_WIDTH) {\r\n                        $cell.addClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS))\r\n                    }\r\n                },\r\n                _getCellElement: function(rowIndex, columnIdentifier) {\r\n                    var item = this._dataController.items()[rowIndex];\r\n                    if (item && item.rowType === ADAPTIVE_ROW_TYPE) {\r\n                        return this._adaptiveColumnsController.getItemContentByColumnIndex(columnIdentifier)\r\n                    } else {\r\n                        return this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                getContextMenuItems: function(options) {\r\n                    if (options.row && \"detailAdaptive\" === options.row.rowType) {\r\n                        var view = this.component.getView(\"columnHeadersView\");\r\n                        var formItem = $(options.targetElement).closest(\".dx-field-item-label\").next().data(\"dx-form-item\");\r\n                        options.column = formItem ? formItem.column : options.column;\r\n                        return view.getContextMenuItems && view.getContextMenuItems(options)\r\n                    }\r\n                    return this.callBase && this.callBase(options)\r\n                },\r\n                isClickableElement: function($target) {\r\n                    var isClickable = this.callBase ? this.callBase($target) : false;\r\n                    return isClickable || !!$target.closest(\".\" + ADAPTIVE_COLUMN_NAME_CLASS).length\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._adaptiveColumnsController = this.getController(\"adaptiveColumns\")\r\n                }\r\n            }\r\n        },\r\n        controllers: {\r\n            export: {\r\n                _updateColumnWidth: function(column, width) {\r\n                    this.callBase(column, column.visibleWidth === HIDDEN_COLUMNS_WIDTH ? column.bestFitWidth : width)\r\n                }\r\n            },\r\n            columnsResizer: {\r\n                _pointCreated: function(point, cellsLength, columns) {\r\n                    var result = this.callBase(point, cellsLength, columns);\r\n                    var currentColumn = columns[point.columnIndex] || {};\r\n                    var nextColumnIndex = this._getNextColumnIndex(point.columnIndex);\r\n                    var nextColumn = columns[nextColumnIndex] || {};\r\n                    var hasHiddenColumnsOnly = nextColumnIndex !== point.columnIndex + 1 && nextColumn.command;\r\n                    var hasAdaptiveHiddenWidth = currentColumn.visibleWidth === HIDDEN_COLUMNS_WIDTH || hasHiddenColumnsOnly;\r\n                    return result || hasAdaptiveHiddenWidth\r\n                },\r\n                _getNextColumnIndex: function(currentColumnIndex) {\r\n                    var visibleColumns = this._columnsController.getVisibleColumns();\r\n                    var index = this.callBase(currentColumnIndex);\r\n                    while (visibleColumns[index] && visibleColumns[index].visibleWidth === HIDDEN_COLUMNS_WIDTH) {\r\n                        index++\r\n                    }\r\n                    return index\r\n                }\r\n            },\r\n            draggingHeader: {\r\n                _pointCreated: function(point, columns, location, sourceColumn) {\r\n                    var result = this.callBase(point, columns, location, sourceColumn);\r\n                    var column = columns[point.columnIndex - 1] || {};\r\n                    var hasAdaptiveHiddenWidth = column.visibleWidth === HIDDEN_COLUMNS_WIDTH;\r\n                    return result || hasAdaptiveHiddenWidth\r\n                }\r\n            },\r\n            editing: {\r\n                _isRowEditMode: function() {\r\n                    return this.getEditMode() === EDIT_MODE_ROW\r\n                },\r\n                _getFormEditItemTemplate: function(cellOptions, column) {\r\n                    if (this.getEditMode() !== EDIT_MODE_ROW && \"detailAdaptive\" === cellOptions.rowType) {\r\n                        cellOptions.columnIndex = this._columnsController.getVisibleIndex(column.index);\r\n                        return this.getColumnTemplate(cellOptions)\r\n                    }\r\n                    return this.callBase(cellOptions, column)\r\n                },\r\n                _closeEditItem: function($targetElement) {\r\n                    var $itemContents = $targetElement.closest(\".\" + FORM_ITEM_CONTENT_CLASS);\r\n                    var rowIndex = this._dataController.getRowIndexByKey(this._dataController.adaptiveExpandedKey()) + 1;\r\n                    var formItem = $itemContents.length ? $itemContents.first().data(\"dx-form-item\") : null;\r\n                    var columnIndex = formItem && formItem.column && this._columnsController.getVisibleIndex(formItem.column.index);\r\n                    if (!this.isEditCell(rowIndex, columnIndex)) {\r\n                        this.callBase($targetElement)\r\n                    }\r\n                },\r\n                _beforeUpdateItems: function(rowIndices, rowIndex) {\r\n                    if (!this._adaptiveController.isFormOrPopupEditMode() && this._adaptiveController.hasHiddenColumns()) {\r\n                        var items = this._dataController.items();\r\n                        var item = items[rowIndex];\r\n                        var oldExpandRowIndex = gridCoreUtils.getIndexByKey(this._dataController.adaptiveExpandedKey(), items);\r\n                        this._isForceRowAdaptiveExpand = !this._adaptiveController.hasAdaptiveDetailRowExpanded();\r\n                        if (oldExpandRowIndex >= 0) {\r\n                            rowIndices.push(oldExpandRowIndex + 1)\r\n                        }\r\n                        rowIndices.push(rowIndex + 1);\r\n                        this._dataController.adaptiveExpandedKey(item.key)\r\n                    }\r\n                },\r\n                _afterInsertRow: function(key) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (this._adaptiveController.hasHiddenColumns()) {\r\n                        this._adaptiveController.toggleExpandAdaptiveDetailRow(key, this.isRowEditMode());\r\n                        this._isForceRowAdaptiveExpand = true\r\n                    }\r\n                },\r\n                _collapseAdaptiveDetailRow: function() {\r\n                    if (this._isRowEditMode() && this._isForceRowAdaptiveExpand) {\r\n                        this._adaptiveController.collapseAdaptiveDetailRow();\r\n                        this._isForceRowAdaptiveExpand = false\r\n                    }\r\n                },\r\n                _cancelEditAdaptiveDetailRow: function() {\r\n                    if (this._adaptiveController.hasHiddenColumns()) {\r\n                        this._collapseAdaptiveDetailRow()\r\n                    }\r\n                },\r\n                _afterSaveEditData: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    var deferred = new Deferred;\r\n                    if (this._isRowEditMode() && this._adaptiveController.hasHiddenColumns()) {\r\n                        when(this.getController(\"validating\").validate(true)).done(isValid => {\r\n                            if (isValid) {\r\n                                this._cancelEditAdaptiveDetailRow()\r\n                            }\r\n                            deferred.resolve()\r\n                        })\r\n                    } else {\r\n                        deferred.resolve()\r\n                    }\r\n                    return deferred.promise()\r\n                },\r\n                _beforeCancelEditData: function() {\r\n                    this.callBase();\r\n                    this._cancelEditAdaptiveDetailRow()\r\n                },\r\n                _getRowIndicesForCascadeUpdating: function(row) {\r\n                    var rowIndices = this.callBase.apply(this, arguments);\r\n                    if (this._adaptiveController.isAdaptiveDetailRowExpanded(row.key)) {\r\n                        rowIndices.push(row.rowType === ADAPTIVE_ROW_TYPE ? row.rowIndex - 1 : row.rowIndex + 1)\r\n                    }\r\n                    return rowIndices\r\n                },\r\n                _beforeCloseEditCellInBatchMode: function(rowIndices) {\r\n                    var expandedKey = this._dataController._adaptiveExpandedKey;\r\n                    if (expandedKey) {\r\n                        var rowIndex = gridCoreUtils.getIndexByKey(expandedKey, this._dataController.items());\r\n                        if (rowIndex > -1) {\r\n                            rowIndices.unshift(rowIndex)\r\n                        }\r\n                    }\r\n                },\r\n                editRow: function(rowIndex) {\r\n                    if (this._adaptiveController.isFormOrPopupEditMode()) {\r\n                        this._adaptiveController.collapseAdaptiveDetailRow()\r\n                    }\r\n                    this.callBase(rowIndex)\r\n                },\r\n                deleteRow: function(rowIndex) {\r\n                    var rowKey = this._dataController.getKeyByRowIndex(rowIndex);\r\n                    if (this.getEditMode() === EDIT_MODE_BATCH && this._adaptiveController.isAdaptiveDetailRowExpanded(rowKey)) {\r\n                        this._adaptiveController.collapseAdaptiveDetailRow()\r\n                    }\r\n                    this.callBase(rowIndex)\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._adaptiveController = this.getController(\"adaptiveColumns\")\r\n                }\r\n            },\r\n            resizing: {\r\n                _needBestFit: function() {\r\n                    return this.callBase() || !!this._adaptiveColumnsController.getHidingColumnsQueue().length\r\n                },\r\n                _correctColumnWidths: function(resultWidths, visibleColumns) {\r\n                    var adaptiveController = this._adaptiveColumnsController;\r\n                    var oldHiddenColumns = adaptiveController.getHiddenColumns();\r\n                    var hidingColumnsQueue = adaptiveController.updateHidingQueue(this._columnsController.getColumns());\r\n                    adaptiveController.hideRedundantColumns(resultWidths, visibleColumns, hidingColumnsQueue);\r\n                    var hiddenColumns = adaptiveController.getHiddenColumns();\r\n                    if (adaptiveController.hasAdaptiveDetailRowExpanded()) {\r\n                        if (oldHiddenColumns.length !== hiddenColumns.length) {\r\n                            adaptiveController.updateForm(hiddenColumns)\r\n                        }\r\n                    }!hiddenColumns.length && adaptiveController.collapseAdaptiveDetailRow();\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _toggleBestFitMode: function(isBestFit) {\r\n                    isBestFit && this._adaptiveColumnsController._showHiddenColumns();\r\n                    this.callBase(isBestFit)\r\n                },\r\n                _needStretch: function() {\r\n                    var adaptiveColumnsController = this._adaptiveColumnsController;\r\n                    return this.callBase.apply(this, arguments) || adaptiveColumnsController.getHidingColumnsQueue().length || adaptiveColumnsController.hasHiddenColumns()\r\n                },\r\n                init: function() {\r\n                    this._adaptiveColumnsController = this.getController(\"adaptiveColumns\");\r\n                    this.callBase()\r\n                },\r\n                dispose: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    clearTimeout(this._updateScrollableTimeoutID)\r\n                }\r\n            },\r\n            data: {\r\n                _processItems: function(items, change) {\r\n                    var changeType = change.changeType;\r\n                    items = this.callBase.apply(this, arguments);\r\n                    if (\"loadingAll\" === changeType || !isDefined(this._adaptiveExpandedKey)) {\r\n                        return items\r\n                    }\r\n                    var expandRowIndex = gridCoreUtils.getIndexByKey(this._adaptiveExpandedKey, items);\r\n                    var newMode = false === this.option(LEGACY_SCROLLING_MODE);\r\n                    if (expandRowIndex >= 0) {\r\n                        var item = items[expandRowIndex];\r\n                        items.splice(expandRowIndex + 1, 0, {\r\n                            visible: true,\r\n                            rowType: ADAPTIVE_ROW_TYPE,\r\n                            key: item.key,\r\n                            data: item.data,\r\n                            node: item.node,\r\n                            modifiedValues: item.modifiedValues,\r\n                            isNewRow: item.isNewRow,\r\n                            values: item.values\r\n                        })\r\n                    } else if (\"refresh\" === changeType && !(newMode && change.repaintChangesOnly)) {\r\n                        this._adaptiveExpandedKey = void 0\r\n                    }\r\n                    return items\r\n                },\r\n                _getRowIndicesForExpand: function(key) {\r\n                    var rowIndices = this.callBase.apply(this, arguments);\r\n                    if (this.getController(\"adaptiveColumns\").isAdaptiveDetailRowExpanded(key)) {\r\n                        var lastRowIndex = rowIndices[rowIndices.length - 1];\r\n                        rowIndices.push(lastRowIndex + 1)\r\n                    }\r\n                    return rowIndices\r\n                },\r\n                adaptiveExpandedKey: function(value) {\r\n                    if (isDefined(value)) {\r\n                        this._adaptiveExpandedKey = value\r\n                    } else {\r\n                        return this._adaptiveExpandedKey\r\n                    }\r\n                },\r\n                toggleExpandAdaptiveDetailRow: function(key, alwaysExpanded) {\r\n                    var oldExpandLoadedRowIndex = gridCoreUtils.getIndexByKey(this._adaptiveExpandedKey, this._items);\r\n                    var newExpandLoadedRowIndex = gridCoreUtils.getIndexByKey(key, this._items);\r\n                    if (oldExpandLoadedRowIndex >= 0 && oldExpandLoadedRowIndex === newExpandLoadedRowIndex && !alwaysExpanded) {\r\n                        key = void 0;\r\n                        newExpandLoadedRowIndex = -1\r\n                    }\r\n                    var oldKey = this._adaptiveExpandedKey;\r\n                    this._adaptiveExpandedKey = key;\r\n                    if (oldExpandLoadedRowIndex >= 0) {\r\n                        oldExpandLoadedRowIndex++\r\n                    }\r\n                    if (newExpandLoadedRowIndex >= 0) {\r\n                        newExpandLoadedRowIndex++\r\n                    }\r\n                    var rowIndexDelta = this.getRowIndexDelta();\r\n                    this.updateItems({\r\n                        allowInvisibleRowIndices: true,\r\n                        changeType: \"update\",\r\n                        rowIndices: [oldExpandLoadedRowIndex - rowIndexDelta, newExpandLoadedRowIndex - rowIndexDelta]\r\n                    });\r\n                    var adaptiveColumnsController = this.getController(\"adaptiveColumns\");\r\n                    adaptiveColumnsController.updateCommandAdaptiveAriaLabel(key, COLLAPSE_ARIA_NAME);\r\n                    adaptiveColumnsController.updateCommandAdaptiveAriaLabel(oldKey, EXPAND_ARIA_NAME)\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._adaptiveExpandedKey = void 0\r\n                }\r\n            },\r\n            editorFactory: {\r\n                _getFocusCellSelector: function() {\r\n                    return this.callBase() + \", .dx-adaptive-detail-row .dx-field-item > .dx-field-item-content\"\r\n                },\r\n                _getTooltipsSelector: function() {\r\n                    return this.callBase() + \", .dx-field-item-content .\" + this.addWidgetPrefix(REVERT_TOOLTIP_CLASS)\r\n                }\r\n            },\r\n            columns: {\r\n                _isColumnVisible: function(column) {\r\n                    return this.callBase(column) && !column.adaptiveHidden\r\n                }\r\n            },\r\n            keyboardNavigation: {\r\n                _isCellValid: function($cell) {\r\n                    return this.callBase.apply(this, arguments) && !$cell.hasClass(this.addWidgetPrefix(HIDDEN_COLUMN_CLASS)) && !$cell.hasClass(COMMAND_ADAPTIVE_HIDDEN_CLASS)\r\n                },\r\n                _processNextCellInMasterDetail: function($nextCell) {\r\n                    this.callBase($nextCell);\r\n                    var isCellOrBatchMode = this._editingController.isCellOrBatchEditMode();\r\n                    if (!this._isInsideEditForm($nextCell) && $nextCell && isCellOrBatchMode) {\r\n                        eventsEngine.on($nextCell, \"focus\", (function focusHandler() {\r\n                            eventsEngine.off($nextCell, \"focus\", focusHandler);\r\n                            eventsEngine.trigger($nextCell, \"dxclick\")\r\n                        }))\r\n                    }\r\n                },\r\n                _handleTabKeyOnMasterDetailCell: function(eventTarget, direction) {\r\n                    var result = this.callBase(eventTarget, direction);\r\n                    var $currentCell = this._getFocusedCell();\r\n                    var $row = $currentCell && $currentCell.parent();\r\n                    if (!result && $row && $row.length) {\r\n                        var $dataCells = getDataCellElements($row);\r\n                        var $targetCell = \"next\" === direction ? $dataCells.last() : $dataCells.first();\r\n                        var rowIndex = $row.get(0).rowIndex;\r\n                        var adaptiveController = this._adaptiveController;\r\n                        var key = this._dataController.getKeyByRowIndex(\"next\" === direction ? rowIndex : rowIndex - 1);\r\n                        var isCellElementsEquals = $currentCell && $targetCell && $currentCell.get(0) === $targetCell.get(0);\r\n                        return adaptiveController.isAdaptiveDetailRowExpanded(key) && isCellElementsEquals\r\n                    }\r\n                    return result\r\n                },\r\n                init: function() {\r\n                    this.callBase();\r\n                    this._adaptiveController = this.getController(\"adaptiveColumns\")\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}