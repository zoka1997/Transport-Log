{"ast":null,"code":"/**\r\n * DevExtreme (esm/exporter/excel_format_converter.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { format as stringFormat } from \"../core/utils/string\";\nimport numberFormatter from \"../localization/number\";\nimport dateLocalization from \"../localization/date\";\nimport { isDefined, isString } from \"../core/utils/type\";\nimport { getFormat } from \"../localization/ldml/date.format\";\nimport { getLanguageId } from \"../localization/language_codes\";\nimport \"../localization/currency\";\nvar ARABIC_ZERO_CODE = 1632;\nvar DEFINED_NUMBER_FORMTATS = {\n  thousands: \"#,##0{0},&quot;K&quot;\",\n  millions: \"#,##0{0},,&quot;M&quot;\",\n  billions: \"#,##0{0},,,&quot;B&quot;\",\n  trillions: \"#,##0{0},,,,&quot;T&quot;\",\n  percent: \"0{0}%\",\n  decimal: \"#{0}\",\n  fixedpoint: \"#,##0{0}\",\n  exponential: \"0{0}E+00\",\n  currency: \" \"\n};\nvar PERIOD_REGEXP = /a+/g;\nvar DAY_REGEXP = /E/g;\nvar DO_REGEXP = /dE+/g;\nvar STANDALONE_MONTH_REGEXP = /L/g;\nvar HOUR_REGEXP = /h/g;\nvar ANY_REGEXP = /./g;\nvar excelFormatConverter = {\n  _applyPrecision: function (format, precision) {\n    var result;\n    var i;\n\n    if (precision > 0) {\n      result = \"decimal\" !== format ? \".\" : \"\";\n\n      for (i = 0; i < precision; i++) {\n        result += \"0\";\n      }\n\n      return result;\n    }\n\n    return \"\";\n  },\n  _hasArabicDigits: function (text) {\n    var code;\n\n    for (var i = 0; i < text.length; i++) {\n      code = text.charCodeAt(i);\n\n      if (code >= ARABIC_ZERO_CODE && code < ARABIC_ZERO_CODE + 10) {\n        return true;\n      }\n    }\n\n    return false;\n  },\n  _convertDateFormatToOpenXml: function (format) {\n    return format.split(\"/\").join(\"\\\\/\").split(\"'\").map(function (datePart, index) {\n      if (index % 2 === 0) {\n        return datePart.replace(PERIOD_REGEXP, \"AM/PM\").replace(DO_REGEXP, \"d\").replace(DAY_REGEXP, \"d\").replace(STANDALONE_MONTH_REGEXP, \"M\").replace(HOUR_REGEXP, \"H\").split(\"[\").join(\"\\\\[\").split(\"]\").join(\"\\\\]\");\n      }\n\n      if (datePart) {\n        return datePart.replace(ANY_REGEXP, \"\\\\$&\");\n      }\n\n      return \"'\";\n    }).join(\"\");\n  },\n  _convertDateFormat: function (format) {\n    var formattedValue = (dateLocalization.format(new Date(2009, 8, 8, 6, 5, 4), format) || \"\").toString();\n    var result = getFormat(value => dateLocalization.format(value, format));\n\n    if (result) {\n      result = this._convertDateFormatToOpenXml(result);\n      result = this._getLanguageInfo(formattedValue) + result;\n    }\n\n    return result;\n  },\n  _getLanguageInfo: function (defaultPattern) {\n    var languageID = getLanguageId();\n    var languageIDStr = languageID ? languageID.toString(16) : \"\";\n    var languageInfo = \"\";\n\n    if (this._hasArabicDigits(defaultPattern)) {\n      while (languageIDStr.length < 3) {\n        languageIDStr = \"0\" + languageIDStr;\n      }\n\n      languageInfo = \"[$-2010\" + languageIDStr + \"]\";\n    } else if (languageIDStr) {\n      languageInfo = \"[$-\" + languageIDStr + \"]\";\n    }\n\n    return languageInfo;\n  },\n  _convertNumberFormat: function (format, precision, currency) {\n    var result;\n    var excelFormat;\n\n    if (\"currency\" === format) {\n      excelFormat = numberFormatter.getOpenXmlCurrencyFormat(currency);\n    } else {\n      excelFormat = DEFINED_NUMBER_FORMTATS[format.toLowerCase()];\n    }\n\n    if (excelFormat) {\n      result = stringFormat(excelFormat, this._applyPrecision(format, precision));\n    }\n\n    return result;\n  },\n  convertFormat: function (format, precision, type, currency) {\n    if (isDefined(format)) {\n      if (\"date\" === type) {\n        return excelFormatConverter._convertDateFormat(format);\n      } else if (isString(format) && DEFINED_NUMBER_FORMTATS[format.toLowerCase()]) {\n        return excelFormatConverter._convertNumberFormat(format, precision, currency);\n      }\n    }\n  }\n};\nexport default excelFormatConverter;","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/exporter/excel_format_converter.js"],"names":["format","stringFormat","numberFormatter","dateLocalization","isDefined","isString","getFormat","getLanguageId","ARABIC_ZERO_CODE","DEFINED_NUMBER_FORMTATS","thousands","millions","billions","trillions","percent","decimal","fixedpoint","exponential","currency","PERIOD_REGEXP","DAY_REGEXP","DO_REGEXP","STANDALONE_MONTH_REGEXP","HOUR_REGEXP","ANY_REGEXP","excelFormatConverter","_applyPrecision","precision","result","i","_hasArabicDigits","text","code","length","charCodeAt","_convertDateFormatToOpenXml","split","join","map","datePart","index","replace","_convertDateFormat","formattedValue","Date","toString","value","_getLanguageInfo","defaultPattern","languageID","languageIDStr","languageInfo","_convertNumberFormat","excelFormat","getOpenXmlCurrencyFormat","toLowerCase","convertFormat","type"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,MAAM,IAAIC,YADd,QAEO,sBAFP;AAGA,OAAOC,eAAP,MAA4B,wBAA5B;AACA,OAAOC,gBAAP,MAA6B,sBAA7B;AACA,SACIC,SADJ,EAEIC,QAFJ,QAGO,oBAHP;AAIA,SACIC,SADJ,QAEO,kCAFP;AAGA,SACIC,aADJ,QAEO,gCAFP;AAGA,OAAO,0BAAP;AACA,IAAIC,gBAAgB,GAAG,IAAvB;AACA,IAAIC,uBAAuB,GAAG;AAC1BC,EAAAA,SAAS,EAAE,wBADe;AAE1BC,EAAAA,QAAQ,EAAE,yBAFgB;AAG1BC,EAAAA,QAAQ,EAAE,0BAHgB;AAI1BC,EAAAA,SAAS,EAAE,2BAJe;AAK1BC,EAAAA,OAAO,EAAE,OALiB;AAM1BC,EAAAA,OAAO,EAAE,MANiB;AAO1BC,EAAAA,UAAU,EAAE,UAPc;AAQ1BC,EAAAA,WAAW,EAAE,UARa;AAS1BC,EAAAA,QAAQ,EAAE;AATgB,CAA9B;AAWA,IAAIC,aAAa,GAAG,KAApB;AACA,IAAIC,UAAU,GAAG,IAAjB;AACA,IAAIC,SAAS,GAAG,MAAhB;AACA,IAAIC,uBAAuB,GAAG,IAA9B;AACA,IAAIC,WAAW,GAAG,IAAlB;AACA,IAAIC,UAAU,GAAG,IAAjB;AACA,IAAIC,oBAAoB,GAAG;AACvBC,EAAAA,eAAe,EAAE,UAAS1B,MAAT,EAAiB2B,SAAjB,EAA4B;AACzC,QAAIC,MAAJ;AACA,QAAIC,CAAJ;;AACA,QAAIF,SAAS,GAAG,CAAhB,EAAmB;AACfC,MAAAA,MAAM,GAAG,cAAc5B,MAAd,GAAuB,GAAvB,GAA6B,EAAtC;;AACA,WAAK6B,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGF,SAAhB,EAA2BE,CAAC,EAA5B,EAAgC;AAC5BD,QAAAA,MAAM,IAAI,GAAV;AACH;;AACD,aAAOA,MAAP;AACH;;AACD,WAAO,EAAP;AACH,GAZsB;AAavBE,EAAAA,gBAAgB,EAAE,UAASC,IAAT,EAAe;AAC7B,QAAIC,IAAJ;;AACA,SAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGE,IAAI,CAACE,MAAzB,EAAiCJ,CAAC,EAAlC,EAAsC;AAClCG,MAAAA,IAAI,GAAGD,IAAI,CAACG,UAAL,CAAgBL,CAAhB,CAAP;;AACA,UAAIG,IAAI,IAAIxB,gBAAR,IAA4BwB,IAAI,GAAGxB,gBAAgB,GAAG,EAA1D,EAA8D;AAC1D,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH,GAtBsB;AAuBvB2B,EAAAA,2BAA2B,EAAE,UAASnC,MAAT,EAAiB;AAC1C,WAAOA,MAAM,CAACoC,KAAP,CAAa,GAAb,EAAkBC,IAAlB,CAAuB,KAAvB,EAA8BD,KAA9B,CAAoC,GAApC,EAAyCE,GAAzC,CAA8C,UAASC,QAAT,EAAmBC,KAAnB,EAA0B;AAC3E,UAAIA,KAAK,GAAG,CAAR,KAAc,CAAlB,EAAqB;AACjB,eAAOD,QAAQ,CAACE,OAAT,CAAiBtB,aAAjB,EAAgC,OAAhC,EAAyCsB,OAAzC,CAAiDpB,SAAjD,EAA4D,GAA5D,EAAiEoB,OAAjE,CAAyErB,UAAzE,EAAqF,GAArF,EAA0FqB,OAA1F,CAAkGnB,uBAAlG,EAA2H,GAA3H,EAAgImB,OAAhI,CAAwIlB,WAAxI,EAAqJ,GAArJ,EAA0Ja,KAA1J,CAAgK,GAAhK,EAAqKC,IAArK,CAA0K,KAA1K,EAAiLD,KAAjL,CAAuL,GAAvL,EAA4LC,IAA5L,CAAiM,KAAjM,CAAP;AACH;;AACD,UAAIE,QAAJ,EAAc;AACV,eAAOA,QAAQ,CAACE,OAAT,CAAiBjB,UAAjB,EAA6B,MAA7B,CAAP;AACH;;AACD,aAAO,GAAP;AACH,KARM,EAQHa,IARG,CAQE,EARF,CAAP;AASH,GAjCsB;AAkCvBK,EAAAA,kBAAkB,EAAE,UAAS1C,MAAT,EAAiB;AACjC,QAAI2C,cAAc,GAAG,CAACxC,gBAAgB,CAACH,MAAjB,CAAwB,IAAI4C,IAAJ,CAAS,IAAT,EAAe,CAAf,EAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,CAAxB,EAAuD5C,MAAvD,KAAkE,EAAnE,EAAuE6C,QAAvE,EAArB;AACA,QAAIjB,MAAM,GAAGtB,SAAS,CAACwC,KAAK,IAAI3C,gBAAgB,CAACH,MAAjB,CAAwB8C,KAAxB,EAA+B9C,MAA/B,CAAV,CAAtB;;AACA,QAAI4B,MAAJ,EAAY;AACRA,MAAAA,MAAM,GAAG,KAAKO,2BAAL,CAAiCP,MAAjC,CAAT;AACAA,MAAAA,MAAM,GAAG,KAAKmB,gBAAL,CAAsBJ,cAAtB,IAAwCf,MAAjD;AACH;;AACD,WAAOA,MAAP;AACH,GA1CsB;AA2CvBmB,EAAAA,gBAAgB,EAAE,UAASC,cAAT,EAAyB;AACvC,QAAIC,UAAU,GAAG1C,aAAa,EAA9B;AACA,QAAI2C,aAAa,GAAGD,UAAU,GAAGA,UAAU,CAACJ,QAAX,CAAoB,EAApB,CAAH,GAA6B,EAA3D;AACA,QAAIM,YAAY,GAAG,EAAnB;;AACA,QAAI,KAAKrB,gBAAL,CAAsBkB,cAAtB,CAAJ,EAA2C;AACvC,aAAOE,aAAa,CAACjB,MAAd,GAAuB,CAA9B,EAAiC;AAC7BiB,QAAAA,aAAa,GAAG,MAAMA,aAAtB;AACH;;AACDC,MAAAA,YAAY,GAAG,YAAYD,aAAZ,GAA4B,GAA3C;AACH,KALD,MAKO,IAAIA,aAAJ,EAAmB;AACtBC,MAAAA,YAAY,GAAG,QAAQD,aAAR,GAAwB,GAAvC;AACH;;AACD,WAAOC,YAAP;AACH,GAxDsB;AAyDvBC,EAAAA,oBAAoB,EAAE,UAASpD,MAAT,EAAiB2B,SAAjB,EAA4BT,QAA5B,EAAsC;AACxD,QAAIU,MAAJ;AACA,QAAIyB,WAAJ;;AACA,QAAI,eAAerD,MAAnB,EAA2B;AACvBqD,MAAAA,WAAW,GAAGnD,eAAe,CAACoD,wBAAhB,CAAyCpC,QAAzC,CAAd;AACH,KAFD,MAEO;AACHmC,MAAAA,WAAW,GAAG5C,uBAAuB,CAACT,MAAM,CAACuD,WAAP,EAAD,CAArC;AACH;;AACD,QAAIF,WAAJ,EAAiB;AACbzB,MAAAA,MAAM,GAAG3B,YAAY,CAACoD,WAAD,EAAc,KAAK3B,eAAL,CAAqB1B,MAArB,EAA6B2B,SAA7B,CAAd,CAArB;AACH;;AACD,WAAOC,MAAP;AACH,GArEsB;AAsEvB4B,EAAAA,aAAa,EAAE,UAASxD,MAAT,EAAiB2B,SAAjB,EAA4B8B,IAA5B,EAAkCvC,QAAlC,EAA4C;AACvD,QAAId,SAAS,CAACJ,MAAD,CAAb,EAAuB;AACnB,UAAI,WAAWyD,IAAf,EAAqB;AACjB,eAAOhC,oBAAoB,CAACiB,kBAArB,CAAwC1C,MAAxC,CAAP;AACH,OAFD,MAEO,IAAIK,QAAQ,CAACL,MAAD,CAAR,IAAoBS,uBAAuB,CAACT,MAAM,CAACuD,WAAP,EAAD,CAA/C,EAAuE;AAC1E,eAAO9B,oBAAoB,CAAC2B,oBAArB,CAA0CpD,MAA1C,EAAkD2B,SAAlD,EAA6DT,QAA7D,CAAP;AACH;AACJ;AACJ;AA9EsB,CAA3B;AAgFA,eAAeO,oBAAf","sourcesContent":["/**\r\n * DevExtreme (esm/exporter/excel_format_converter.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    format as stringFormat\r\n} from \"../core/utils/string\";\r\nimport numberFormatter from \"../localization/number\";\r\nimport dateLocalization from \"../localization/date\";\r\nimport {\r\n    isDefined,\r\n    isString\r\n} from \"../core/utils/type\";\r\nimport {\r\n    getFormat\r\n} from \"../localization/ldml/date.format\";\r\nimport {\r\n    getLanguageId\r\n} from \"../localization/language_codes\";\r\nimport \"../localization/currency\";\r\nvar ARABIC_ZERO_CODE = 1632;\r\nvar DEFINED_NUMBER_FORMTATS = {\r\n    thousands: \"#,##0{0},&quot;K&quot;\",\r\n    millions: \"#,##0{0},,&quot;M&quot;\",\r\n    billions: \"#,##0{0},,,&quot;B&quot;\",\r\n    trillions: \"#,##0{0},,,,&quot;T&quot;\",\r\n    percent: \"0{0}%\",\r\n    decimal: \"#{0}\",\r\n    fixedpoint: \"#,##0{0}\",\r\n    exponential: \"0{0}E+00\",\r\n    currency: \" \"\r\n};\r\nvar PERIOD_REGEXP = /a+/g;\r\nvar DAY_REGEXP = /E/g;\r\nvar DO_REGEXP = /dE+/g;\r\nvar STANDALONE_MONTH_REGEXP = /L/g;\r\nvar HOUR_REGEXP = /h/g;\r\nvar ANY_REGEXP = /./g;\r\nvar excelFormatConverter = {\r\n    _applyPrecision: function(format, precision) {\r\n        var result;\r\n        var i;\r\n        if (precision > 0) {\r\n            result = \"decimal\" !== format ? \".\" : \"\";\r\n            for (i = 0; i < precision; i++) {\r\n                result += \"0\"\r\n            }\r\n            return result\r\n        }\r\n        return \"\"\r\n    },\r\n    _hasArabicDigits: function(text) {\r\n        var code;\r\n        for (var i = 0; i < text.length; i++) {\r\n            code = text.charCodeAt(i);\r\n            if (code >= ARABIC_ZERO_CODE && code < ARABIC_ZERO_CODE + 10) {\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    },\r\n    _convertDateFormatToOpenXml: function(format) {\r\n        return format.split(\"/\").join(\"\\\\/\").split(\"'\").map((function(datePart, index) {\r\n            if (index % 2 === 0) {\r\n                return datePart.replace(PERIOD_REGEXP, \"AM/PM\").replace(DO_REGEXP, \"d\").replace(DAY_REGEXP, \"d\").replace(STANDALONE_MONTH_REGEXP, \"M\").replace(HOUR_REGEXP, \"H\").split(\"[\").join(\"\\\\[\").split(\"]\").join(\"\\\\]\")\r\n            }\r\n            if (datePart) {\r\n                return datePart.replace(ANY_REGEXP, \"\\\\$&\")\r\n            }\r\n            return \"'\"\r\n        })).join(\"\")\r\n    },\r\n    _convertDateFormat: function(format) {\r\n        var formattedValue = (dateLocalization.format(new Date(2009, 8, 8, 6, 5, 4), format) || \"\").toString();\r\n        var result = getFormat(value => dateLocalization.format(value, format));\r\n        if (result) {\r\n            result = this._convertDateFormatToOpenXml(result);\r\n            result = this._getLanguageInfo(formattedValue) + result\r\n        }\r\n        return result\r\n    },\r\n    _getLanguageInfo: function(defaultPattern) {\r\n        var languageID = getLanguageId();\r\n        var languageIDStr = languageID ? languageID.toString(16) : \"\";\r\n        var languageInfo = \"\";\r\n        if (this._hasArabicDigits(defaultPattern)) {\r\n            while (languageIDStr.length < 3) {\r\n                languageIDStr = \"0\" + languageIDStr\r\n            }\r\n            languageInfo = \"[$-2010\" + languageIDStr + \"]\"\r\n        } else if (languageIDStr) {\r\n            languageInfo = \"[$-\" + languageIDStr + \"]\"\r\n        }\r\n        return languageInfo\r\n    },\r\n    _convertNumberFormat: function(format, precision, currency) {\r\n        var result;\r\n        var excelFormat;\r\n        if (\"currency\" === format) {\r\n            excelFormat = numberFormatter.getOpenXmlCurrencyFormat(currency)\r\n        } else {\r\n            excelFormat = DEFINED_NUMBER_FORMTATS[format.toLowerCase()]\r\n        }\r\n        if (excelFormat) {\r\n            result = stringFormat(excelFormat, this._applyPrecision(format, precision))\r\n        }\r\n        return result\r\n    },\r\n    convertFormat: function(format, precision, type, currency) {\r\n        if (isDefined(format)) {\r\n            if (\"date\" === type) {\r\n                return excelFormatConverter._convertDateFormat(format)\r\n            } else if (isString(format) && DEFINED_NUMBER_FORMTATS[format.toLowerCase()]) {\r\n                return excelFormatConverter._convertNumberFormat(format, precision, currency)\r\n            }\r\n        }\r\n    }\r\n};\r\nexport default excelFormatConverter;\r\n"]},"metadata":{},"sourceType":"module"}