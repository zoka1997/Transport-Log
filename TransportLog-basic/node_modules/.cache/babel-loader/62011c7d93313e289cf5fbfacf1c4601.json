{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.vertical.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setHeight, setWidth } from \"../../../core/utils/size\";\nimport $ from \"../../../core/renderer\";\nimport CurrentTimeShader from \"../shaders/ui.scheduler.current_time_shader\";\nvar DATE_TIME_SHADER_ALL_DAY_CLASS = \"dx-scheduler-date-time-shader-all-day\";\nvar DATE_TIME_SHADER_TOP_CLASS = \"dx-scheduler-date-time-shader-top\";\nvar DATE_TIME_SHADER_BOTTOM_CLASS = \"dx-scheduler-date-time-shader-bottom\";\n\nclass VerticalCurrentTimeShader extends CurrentTimeShader {\n  renderShader() {\n    var shaderHeight = this._getShaderHeight();\n\n    var maxHeight = this._getShaderMaxHeight();\n\n    var isSolidShader = shaderHeight > maxHeight;\n\n    if (shaderHeight > maxHeight) {\n      shaderHeight = maxHeight;\n    }\n\n    setHeight(this._$shader, shaderHeight);\n    var groupCount = this._workSpace._getGroupCount() || 1;\n\n    if (this._workSpace.isGroupedByDate()) {\n      this._renderGroupedByDateShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader);\n    } else {\n      this._renderShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader);\n    }\n  }\n\n  _renderShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader) {\n    for (var i = 0; i < groupCount; i++) {\n      var shaderWidth = this._getShaderWidth(i);\n\n      this._renderTopShader(this._$shader, shaderHeight, shaderWidth, i);\n\n      !isSolidShader && this._renderBottomShader(this._$shader, maxHeight, shaderHeight, shaderWidth, i);\n\n      this._renderAllDayShader(shaderWidth, i);\n    }\n  }\n\n  _renderGroupedByDateShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader) {\n    var shaderWidth = this._getShaderWidth(0);\n\n    var bottomShaderWidth = shaderWidth - this._workSpace.getCellWidth();\n\n    if (shaderHeight < 0) {\n      shaderHeight = 0;\n      bottomShaderWidth = shaderWidth;\n    }\n\n    this._renderTopShader(this._$shader, shaderHeight, shaderWidth * groupCount, 0);\n\n    !isSolidShader && this._renderBottomShader(this._$shader, maxHeight, shaderHeight, bottomShaderWidth * groupCount + this._workSpace.getCellWidth(), 0);\n\n    this._renderAllDayShader(shaderWidth * groupCount, 0);\n  }\n\n  _renderTopShader($shader, height, width, i) {\n    this._$topShader = $(\"<div>\").addClass(DATE_TIME_SHADER_TOP_CLASS);\n\n    if (width) {\n      setWidth(this._$topShader, width);\n    }\n\n    if (height) {\n      setHeight(this._$topShader, height);\n    }\n\n    this._$topShader.css(\"marginTop\", this._getShaderTopOffset(i));\n\n    this._$topShader.css(\"left\", this._getShaderOffset(i, width));\n\n    $shader.append(this._$topShader);\n  }\n\n  _renderBottomShader($shader, maxHeight, height, width, i) {\n    this._$bottomShader = $(\"<div>\").addClass(DATE_TIME_SHADER_BOTTOM_CLASS);\n    var shaderWidth = height < 0 ? width : width - this._workSpace.getCellWidth();\n    var shaderHeight = height < 0 ? maxHeight : maxHeight - height;\n    setWidth(this._$bottomShader, shaderWidth);\n    setHeight(this._$bottomShader, shaderHeight);\n\n    this._$bottomShader.css(\"left\", this._getShaderOffset(i, width - this._workSpace.getCellWidth()));\n\n    $shader.append(this._$bottomShader);\n  }\n\n  _renderAllDayShader(shaderWidth, i) {\n    if (this._workSpace.option(\"showAllDayPanel\")) {\n      this._$allDayIndicator = $(\"<div>\").addClass(DATE_TIME_SHADER_ALL_DAY_CLASS);\n      setHeight(this._$allDayIndicator, this._workSpace.getAllDayHeight());\n      setWidth(this._$allDayIndicator, shaderWidth);\n\n      this._$allDayIndicator.css(\"left\", this._getShaderOffset(i, shaderWidth));\n\n      this._workSpace._$allDayPanel.prepend(this._$allDayIndicator);\n    }\n  }\n\n  _getShaderOffset(i, width) {\n    return this._workSpace.getGroupedStrategy().getShaderOffset(i, width);\n  }\n\n  _getShaderTopOffset(i) {\n    return this._workSpace.getGroupedStrategy().getShaderTopOffset(i);\n  }\n\n  _getShaderHeight(i, width) {\n    return this._workSpace.getGroupedStrategy().getShaderHeight();\n  }\n\n  _getShaderMaxHeight(i, width) {\n    return this._workSpace.getGroupedStrategy().getShaderMaxHeight();\n  }\n\n  _getShaderWidth(i) {\n    return this._workSpace.getGroupedStrategy().getShaderWidth(i);\n  }\n\n  clean() {\n    super.clean();\n    this._workSpace && this._workSpace._$allDayPanel && this._workSpace._$allDayPanel.find(\".\" + DATE_TIME_SHADER_ALL_DAY_CLASS).remove();\n  }\n\n}\n\nexport default VerticalCurrentTimeShader;","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.vertical.js"],"names":["setHeight","setWidth","$","CurrentTimeShader","DATE_TIME_SHADER_ALL_DAY_CLASS","DATE_TIME_SHADER_TOP_CLASS","DATE_TIME_SHADER_BOTTOM_CLASS","VerticalCurrentTimeShader","renderShader","shaderHeight","_getShaderHeight","maxHeight","_getShaderMaxHeight","isSolidShader","_$shader","groupCount","_workSpace","_getGroupCount","isGroupedByDate","_renderGroupedByDateShaderParts","_renderShaderParts","i","shaderWidth","_getShaderWidth","_renderTopShader","_renderBottomShader","_renderAllDayShader","bottomShaderWidth","getCellWidth","$shader","height","width","_$topShader","addClass","css","_getShaderTopOffset","_getShaderOffset","append","_$bottomShader","option","_$allDayIndicator","getAllDayHeight","_$allDayPanel","prepend","getGroupedStrategy","getShaderOffset","getShaderTopOffset","getShaderHeight","getShaderMaxHeight","getShaderWidth","clean","find","remove"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SACIA,SADJ,EAEIC,QAFJ,QAGO,0BAHP;AAIA,OAAOC,CAAP,MAAc,wBAAd;AACA,OAAOC,iBAAP,MAA8B,6CAA9B;AACA,IAAIC,8BAA8B,GAAG,uCAArC;AACA,IAAIC,0BAA0B,GAAG,mCAAjC;AACA,IAAIC,6BAA6B,GAAG,sCAApC;;AACA,MAAMC,yBAAN,SAAwCJ,iBAAxC,CAA0D;AACtDK,EAAAA,YAAY,GAAG;AACX,QAAIC,YAAY,GAAG,KAAKC,gBAAL,EAAnB;;AACA,QAAIC,SAAS,GAAG,KAAKC,mBAAL,EAAhB;;AACA,QAAIC,aAAa,GAAGJ,YAAY,GAAGE,SAAnC;;AACA,QAAIF,YAAY,GAAGE,SAAnB,EAA8B;AAC1BF,MAAAA,YAAY,GAAGE,SAAf;AACH;;AACDX,IAAAA,SAAS,CAAC,KAAKc,QAAN,EAAgBL,YAAhB,CAAT;AACA,QAAIM,UAAU,GAAG,KAAKC,UAAL,CAAgBC,cAAhB,MAAoC,CAArD;;AACA,QAAI,KAAKD,UAAL,CAAgBE,eAAhB,EAAJ,EAAuC;AACnC,WAAKC,+BAAL,CAAqCJ,UAArC,EAAiDN,YAAjD,EAA+DE,SAA/D,EAA0EE,aAA1E;AACH,KAFD,MAEO;AACH,WAAKO,kBAAL,CAAwBL,UAAxB,EAAoCN,YAApC,EAAkDE,SAAlD,EAA6DE,aAA7D;AACH;AACJ;;AACDO,EAAAA,kBAAkB,CAACL,UAAD,EAAaN,YAAb,EAA2BE,SAA3B,EAAsCE,aAAtC,EAAqD;AACnE,SAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,UAApB,EAAgCM,CAAC,EAAjC,EAAqC;AACjC,UAAIC,WAAW,GAAG,KAAKC,eAAL,CAAqBF,CAArB,CAAlB;;AACA,WAAKG,gBAAL,CAAsB,KAAKV,QAA3B,EAAqCL,YAArC,EAAmDa,WAAnD,EAAgED,CAAhE;;AACA,OAACR,aAAD,IAAkB,KAAKY,mBAAL,CAAyB,KAAKX,QAA9B,EAAwCH,SAAxC,EAAmDF,YAAnD,EAAiEa,WAAjE,EAA8ED,CAA9E,CAAlB;;AACA,WAAKK,mBAAL,CAAyBJ,WAAzB,EAAsCD,CAAtC;AACH;AACJ;;AACDF,EAAAA,+BAA+B,CAACJ,UAAD,EAAaN,YAAb,EAA2BE,SAA3B,EAAsCE,aAAtC,EAAqD;AAChF,QAAIS,WAAW,GAAG,KAAKC,eAAL,CAAqB,CAArB,CAAlB;;AACA,QAAII,iBAAiB,GAAGL,WAAW,GAAG,KAAKN,UAAL,CAAgBY,YAAhB,EAAtC;;AACA,QAAInB,YAAY,GAAG,CAAnB,EAAsB;AAClBA,MAAAA,YAAY,GAAG,CAAf;AACAkB,MAAAA,iBAAiB,GAAGL,WAApB;AACH;;AACD,SAAKE,gBAAL,CAAsB,KAAKV,QAA3B,EAAqCL,YAArC,EAAmDa,WAAW,GAAGP,UAAjE,EAA6E,CAA7E;;AACA,KAACF,aAAD,IAAkB,KAAKY,mBAAL,CAAyB,KAAKX,QAA9B,EAAwCH,SAAxC,EAAmDF,YAAnD,EAAiEkB,iBAAiB,GAAGZ,UAApB,GAAiC,KAAKC,UAAL,CAAgBY,YAAhB,EAAlG,EAAkI,CAAlI,CAAlB;;AACA,SAAKF,mBAAL,CAAyBJ,WAAW,GAAGP,UAAvC,EAAmD,CAAnD;AACH;;AACDS,EAAAA,gBAAgB,CAACK,OAAD,EAAUC,MAAV,EAAkBC,KAAlB,EAAyBV,CAAzB,EAA4B;AACxC,SAAKW,WAAL,GAAmB9B,CAAC,CAAC,OAAD,CAAD,CAAW+B,QAAX,CAAoB5B,0BAApB,CAAnB;;AACA,QAAI0B,KAAJ,EAAW;AACP9B,MAAAA,QAAQ,CAAC,KAAK+B,WAAN,EAAmBD,KAAnB,CAAR;AACH;;AACD,QAAID,MAAJ,EAAY;AACR9B,MAAAA,SAAS,CAAC,KAAKgC,WAAN,EAAmBF,MAAnB,CAAT;AACH;;AACD,SAAKE,WAAL,CAAiBE,GAAjB,CAAqB,WAArB,EAAkC,KAAKC,mBAAL,CAAyBd,CAAzB,CAAlC;;AACA,SAAKW,WAAL,CAAiBE,GAAjB,CAAqB,MAArB,EAA6B,KAAKE,gBAAL,CAAsBf,CAAtB,EAAyBU,KAAzB,CAA7B;;AACAF,IAAAA,OAAO,CAACQ,MAAR,CAAe,KAAKL,WAApB;AACH;;AACDP,EAAAA,mBAAmB,CAACI,OAAD,EAAUlB,SAAV,EAAqBmB,MAArB,EAA6BC,KAA7B,EAAoCV,CAApC,EAAuC;AACtD,SAAKiB,cAAL,GAAsBpC,CAAC,CAAC,OAAD,CAAD,CAAW+B,QAAX,CAAoB3B,6BAApB,CAAtB;AACA,QAAIgB,WAAW,GAAGQ,MAAM,GAAG,CAAT,GAAaC,KAAb,GAAqBA,KAAK,GAAG,KAAKf,UAAL,CAAgBY,YAAhB,EAA/C;AACA,QAAInB,YAAY,GAAGqB,MAAM,GAAG,CAAT,GAAanB,SAAb,GAAyBA,SAAS,GAAGmB,MAAxD;AACA7B,IAAAA,QAAQ,CAAC,KAAKqC,cAAN,EAAsBhB,WAAtB,CAAR;AACAtB,IAAAA,SAAS,CAAC,KAAKsC,cAAN,EAAsB7B,YAAtB,CAAT;;AACA,SAAK6B,cAAL,CAAoBJ,GAApB,CAAwB,MAAxB,EAAgC,KAAKE,gBAAL,CAAsBf,CAAtB,EAAyBU,KAAK,GAAG,KAAKf,UAAL,CAAgBY,YAAhB,EAAjC,CAAhC;;AACAC,IAAAA,OAAO,CAACQ,MAAR,CAAe,KAAKC,cAApB;AACH;;AACDZ,EAAAA,mBAAmB,CAACJ,WAAD,EAAcD,CAAd,EAAiB;AAChC,QAAI,KAAKL,UAAL,CAAgBuB,MAAhB,CAAuB,iBAAvB,CAAJ,EAA+C;AAC3C,WAAKC,iBAAL,GAAyBtC,CAAC,CAAC,OAAD,CAAD,CAAW+B,QAAX,CAAoB7B,8BAApB,CAAzB;AACAJ,MAAAA,SAAS,CAAC,KAAKwC,iBAAN,EAAyB,KAAKxB,UAAL,CAAgByB,eAAhB,EAAzB,CAAT;AACAxC,MAAAA,QAAQ,CAAC,KAAKuC,iBAAN,EAAyBlB,WAAzB,CAAR;;AACA,WAAKkB,iBAAL,CAAuBN,GAAvB,CAA2B,MAA3B,EAAmC,KAAKE,gBAAL,CAAsBf,CAAtB,EAAyBC,WAAzB,CAAnC;;AACA,WAAKN,UAAL,CAAgB0B,aAAhB,CAA8BC,OAA9B,CAAsC,KAAKH,iBAA3C;AACH;AACJ;;AACDJ,EAAAA,gBAAgB,CAACf,CAAD,EAAIU,KAAJ,EAAW;AACvB,WAAO,KAAKf,UAAL,CAAgB4B,kBAAhB,GAAqCC,eAArC,CAAqDxB,CAArD,EAAwDU,KAAxD,CAAP;AACH;;AACDI,EAAAA,mBAAmB,CAACd,CAAD,EAAI;AACnB,WAAO,KAAKL,UAAL,CAAgB4B,kBAAhB,GAAqCE,kBAArC,CAAwDzB,CAAxD,CAAP;AACH;;AACDX,EAAAA,gBAAgB,CAACW,CAAD,EAAIU,KAAJ,EAAW;AACvB,WAAO,KAAKf,UAAL,CAAgB4B,kBAAhB,GAAqCG,eAArC,EAAP;AACH;;AACDnC,EAAAA,mBAAmB,CAACS,CAAD,EAAIU,KAAJ,EAAW;AAC1B,WAAO,KAAKf,UAAL,CAAgB4B,kBAAhB,GAAqCI,kBAArC,EAAP;AACH;;AACDzB,EAAAA,eAAe,CAACF,CAAD,EAAI;AACf,WAAO,KAAKL,UAAL,CAAgB4B,kBAAhB,GAAqCK,cAArC,CAAoD5B,CAApD,CAAP;AACH;;AACD6B,EAAAA,KAAK,GAAG;AACJ,UAAMA,KAAN;AACA,SAAKlC,UAAL,IAAmB,KAAKA,UAAL,CAAgB0B,aAAnC,IAAoD,KAAK1B,UAAL,CAAgB0B,aAAhB,CAA8BS,IAA9B,CAAmC,MAAM/C,8BAAzC,EAAyEgD,MAAzE,EAApD;AACH;;AAnFqD;;AAqF1D,eAAe7C,yBAAf","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/shaders/ui.scheduler.current_time_shader.vertical.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    setHeight,\r\n    setWidth\r\n} from \"../../../core/utils/size\";\r\nimport $ from \"../../../core/renderer\";\r\nimport CurrentTimeShader from \"../shaders/ui.scheduler.current_time_shader\";\r\nvar DATE_TIME_SHADER_ALL_DAY_CLASS = \"dx-scheduler-date-time-shader-all-day\";\r\nvar DATE_TIME_SHADER_TOP_CLASS = \"dx-scheduler-date-time-shader-top\";\r\nvar DATE_TIME_SHADER_BOTTOM_CLASS = \"dx-scheduler-date-time-shader-bottom\";\r\nclass VerticalCurrentTimeShader extends CurrentTimeShader {\r\n    renderShader() {\r\n        var shaderHeight = this._getShaderHeight();\r\n        var maxHeight = this._getShaderMaxHeight();\r\n        var isSolidShader = shaderHeight > maxHeight;\r\n        if (shaderHeight > maxHeight) {\r\n            shaderHeight = maxHeight\r\n        }\r\n        setHeight(this._$shader, shaderHeight);\r\n        var groupCount = this._workSpace._getGroupCount() || 1;\r\n        if (this._workSpace.isGroupedByDate()) {\r\n            this._renderGroupedByDateShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader)\r\n        } else {\r\n            this._renderShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader)\r\n        }\r\n    }\r\n    _renderShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader) {\r\n        for (var i = 0; i < groupCount; i++) {\r\n            var shaderWidth = this._getShaderWidth(i);\r\n            this._renderTopShader(this._$shader, shaderHeight, shaderWidth, i);\r\n            !isSolidShader && this._renderBottomShader(this._$shader, maxHeight, shaderHeight, shaderWidth, i);\r\n            this._renderAllDayShader(shaderWidth, i)\r\n        }\r\n    }\r\n    _renderGroupedByDateShaderParts(groupCount, shaderHeight, maxHeight, isSolidShader) {\r\n        var shaderWidth = this._getShaderWidth(0);\r\n        var bottomShaderWidth = shaderWidth - this._workSpace.getCellWidth();\r\n        if (shaderHeight < 0) {\r\n            shaderHeight = 0;\r\n            bottomShaderWidth = shaderWidth\r\n        }\r\n        this._renderTopShader(this._$shader, shaderHeight, shaderWidth * groupCount, 0);\r\n        !isSolidShader && this._renderBottomShader(this._$shader, maxHeight, shaderHeight, bottomShaderWidth * groupCount + this._workSpace.getCellWidth(), 0);\r\n        this._renderAllDayShader(shaderWidth * groupCount, 0)\r\n    }\r\n    _renderTopShader($shader, height, width, i) {\r\n        this._$topShader = $(\"<div>\").addClass(DATE_TIME_SHADER_TOP_CLASS);\r\n        if (width) {\r\n            setWidth(this._$topShader, width)\r\n        }\r\n        if (height) {\r\n            setHeight(this._$topShader, height)\r\n        }\r\n        this._$topShader.css(\"marginTop\", this._getShaderTopOffset(i));\r\n        this._$topShader.css(\"left\", this._getShaderOffset(i, width));\r\n        $shader.append(this._$topShader)\r\n    }\r\n    _renderBottomShader($shader, maxHeight, height, width, i) {\r\n        this._$bottomShader = $(\"<div>\").addClass(DATE_TIME_SHADER_BOTTOM_CLASS);\r\n        var shaderWidth = height < 0 ? width : width - this._workSpace.getCellWidth();\r\n        var shaderHeight = height < 0 ? maxHeight : maxHeight - height;\r\n        setWidth(this._$bottomShader, shaderWidth);\r\n        setHeight(this._$bottomShader, shaderHeight);\r\n        this._$bottomShader.css(\"left\", this._getShaderOffset(i, width - this._workSpace.getCellWidth()));\r\n        $shader.append(this._$bottomShader)\r\n    }\r\n    _renderAllDayShader(shaderWidth, i) {\r\n        if (this._workSpace.option(\"showAllDayPanel\")) {\r\n            this._$allDayIndicator = $(\"<div>\").addClass(DATE_TIME_SHADER_ALL_DAY_CLASS);\r\n            setHeight(this._$allDayIndicator, this._workSpace.getAllDayHeight());\r\n            setWidth(this._$allDayIndicator, shaderWidth);\r\n            this._$allDayIndicator.css(\"left\", this._getShaderOffset(i, shaderWidth));\r\n            this._workSpace._$allDayPanel.prepend(this._$allDayIndicator)\r\n        }\r\n    }\r\n    _getShaderOffset(i, width) {\r\n        return this._workSpace.getGroupedStrategy().getShaderOffset(i, width)\r\n    }\r\n    _getShaderTopOffset(i) {\r\n        return this._workSpace.getGroupedStrategy().getShaderTopOffset(i)\r\n    }\r\n    _getShaderHeight(i, width) {\r\n        return this._workSpace.getGroupedStrategy().getShaderHeight()\r\n    }\r\n    _getShaderMaxHeight(i, width) {\r\n        return this._workSpace.getGroupedStrategy().getShaderMaxHeight()\r\n    }\r\n    _getShaderWidth(i) {\r\n        return this._workSpace.getGroupedStrategy().getShaderWidth(i)\r\n    }\r\n    clean() {\r\n        super.clean();\r\n        this._workSpace && this._workSpace._$allDayPanel && this._workSpace._$allDayPanel.find(\".\" + DATE_TIME_SHADER_ALL_DAY_CLASS).remove()\r\n    }\r\n}\r\nexport default VerticalCurrentTimeShader;\r\n"]},"metadata":{},"sourceType":"module"}