{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, isUndefined, Browser, compile, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Property, NotifyPropertyChanges, ChildProperty, Complex } from '@syncfusion/ej2-base';\nimport { Event, EventHandler, KeyboardEvents } from '@syncfusion/ej2-base';\nimport { rippleEffect, Animation, remove } from '@syncfusion/ej2-base';\nimport { Draggable, Droppable } from '@syncfusion/ej2-base';\nimport { getElement } from '@syncfusion/ej2-base';\nimport { addClass, removeClass, closest, matches, detach, select, selectAll, isVisible, append } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { isNullOrUndefined as isNOU, Touch, getValue, setValue, extend, merge, attributes } from '@syncfusion/ej2-base';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { createCheckBox, rippleMouseHandler } from '@syncfusion/ej2-buttons';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nvar ROOT = 'e-treeview';\nvar CONTROL = 'e-control';\nvar COLLAPSIBLE = 'e-icon-collapsible';\nvar EXPANDABLE = 'e-icon-expandable';\nvar LISTITEM = 'e-list-item';\nvar LISTTEXT = 'e-list-text';\nvar LISTWRAP = 'e-text-wrap';\nvar IELISTWRAP = 'e-ie-wrap';\nvar PARENTITEM = 'e-list-parent';\nvar HOVER = 'e-hover';\nvar ACTIVE = 'e-active';\nvar LOAD = 'e-icons-spinner';\nvar PROCESS = 'e-process';\nvar ICON = 'e-icons';\nvar TEXTWRAP = 'e-text-content';\nvar INPUT = 'e-input';\nvar INPUTGROUP = 'e-input-group';\nvar TREEINPUT = 'e-tree-input';\nvar EDITING = 'e-editing';\nvar RTL = 'e-rtl';\nvar INTERACTION = 'e-interaction';\nvar DRAGITEM = 'e-drag-item';\nvar DROPPABLE = 'e-droppable';\nvar DRAGGING = 'e-dragging';\nvar SIBLING = 'e-sibling';\nvar DROPIN = 'e-drop-in';\nvar DROPNEXT = 'e-drop-next';\nvar DROPOUT = 'e-drop-out';\nvar NODROP = 'e-no-drop';\nvar FULLROWWRAP = 'e-fullrow-wrap';\nvar FULLROW = 'e-fullrow';\nvar SELECTED = 'e-selected';\nvar EXPANDED = 'e-expanded';\nvar NODECOLLAPSED = 'e-node-collapsed';\nvar DISABLE = 'e-disable';\nvar DROPCOUNT = 'e-drop-count';\nvar CHECK = 'e-check';\nvar INDETERMINATE = 'e-stop';\nvar CHECKBOXWRAP = 'e-checkbox-wrapper';\nvar CHECKBOXFRAME = 'e-frame';\nvar CHECKBOXRIPPLE = 'e-ripple-container';\nvar RIPPLE = 'e-ripple';\nvar RIPPLEELMENT = 'e-ripple-element';\nvar FOCUS = 'e-node-focus';\nvar IMAGE = 'e-list-img';\nvar BIGGER = 'e-bigger';\nvar SMALL = 'e-small';\nvar CHILD = 'e-has-child';\nvar ITEM_ANIMATION_ACTIVE = 'e-animation-active';\nvar DISABLED = 'e-disabled';\nvar treeAriaAttr = {\n  treeRole: 'tree',\n  itemRole: 'treeitem',\n  listRole: 'group',\n  itemText: '',\n  wrapperRole: ''\n};\n/**\n * Configures the fields to bind to the properties of node in the TreeView component.\n */\n\nvar FieldsSettings =\n/** @class */\nfunction (_super) {\n  __extends(FieldsSettings, _super);\n\n  function FieldsSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('child')], FieldsSettings.prototype, \"child\", void 0);\n\n  __decorate([Property([])], FieldsSettings.prototype, \"dataSource\", void 0);\n\n  __decorate([Property('expanded')], FieldsSettings.prototype, \"expanded\", void 0);\n\n  __decorate([Property('hasChildren')], FieldsSettings.prototype, \"hasChildren\", void 0);\n\n  __decorate([Property('htmlAttributes')], FieldsSettings.prototype, \"htmlAttributes\", void 0);\n\n  __decorate([Property('iconCss')], FieldsSettings.prototype, \"iconCss\", void 0);\n\n  __decorate([Property('id')], FieldsSettings.prototype, \"id\", void 0);\n\n  __decorate([Property('imageUrl')], FieldsSettings.prototype, \"imageUrl\", void 0);\n\n  __decorate([Property('isChecked')], FieldsSettings.prototype, \"isChecked\", void 0);\n\n  __decorate([Property('parentID')], FieldsSettings.prototype, \"parentID\", void 0);\n\n  __decorate([Property(null)], FieldsSettings.prototype, \"query\", void 0);\n\n  __decorate([Property('selected')], FieldsSettings.prototype, \"selected\", void 0);\n\n  __decorate([Property(null)], FieldsSettings.prototype, \"tableName\", void 0);\n\n  __decorate([Property('text')], FieldsSettings.prototype, \"text\", void 0);\n\n  __decorate([Property('tooltip')], FieldsSettings.prototype, \"tooltip\", void 0);\n\n  __decorate([Property('navigateUrl')], FieldsSettings.prototype, \"navigateUrl\", void 0);\n\n  return FieldsSettings;\n}(ChildProperty);\n\nexport { FieldsSettings };\n/**\n * Configures animation settings for the TreeView component.\n */\n\nvar ActionSettings =\n/** @class */\nfunction (_super) {\n  __extends(ActionSettings, _super);\n\n  function ActionSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Property('SlideDown')], ActionSettings.prototype, \"effect\", void 0);\n\n  __decorate([Property(400)], ActionSettings.prototype, \"duration\", void 0);\n\n  __decorate([Property('linear')], ActionSettings.prototype, \"easing\", void 0);\n\n  return ActionSettings;\n}(ChildProperty);\n\nexport { ActionSettings };\n/**\n * Configures the animation settings for expanding and collapsing nodes in TreeView.\n */\n\nvar NodeAnimationSettings =\n/** @class */\nfunction (_super) {\n  __extends(NodeAnimationSettings, _super);\n\n  function NodeAnimationSettings() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  __decorate([Complex({\n    effect: 'SlideUp',\n    duration: 400,\n    easing: 'linear'\n  }, ActionSettings)], NodeAnimationSettings.prototype, \"collapse\", void 0);\n\n  __decorate([Complex({\n    effect: 'SlideDown',\n    duration: 400,\n    easing: 'linear'\n  }, ActionSettings)], NodeAnimationSettings.prototype, \"expand\", void 0);\n\n  return NodeAnimationSettings;\n}(ChildProperty);\n\nexport { NodeAnimationSettings };\n/**\n * The TreeView component is used to represent hierarchical data in a tree like structure with advanced\n * functions to perform edit, drag and drop, selection with check-box, and more.\n * ```html\n *  <div id=\"tree\"></div>\n * ```\n * ```typescript\n *  let treeObj: TreeView = new TreeView();\n *  treeObj.appendTo('#tree');\n * ```\n */\n\nvar TreeView =\n/** @class */\nfunction (_super) {\n  __extends(TreeView, _super);\n\n  function TreeView(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.isRefreshed = false;\n    _this.preventExpand = false;\n    _this.checkedElement = [];\n    _this.disableNode = []; // eslint-disable-next-line\n\n    _this.validArr = [];\n    _this.validNodes = [];\n    _this.expandChildren = [];\n    _this.isFieldChange = false;\n    _this.changeDataSource = false;\n    _this.hasTemplate = false;\n    _this.isFirstRender = false; // Specifies whether the node is dropped or not \n\n    _this.isNodeDropped = false;\n    _this.mouseDownStatus = false;\n    return _this;\n  }\n\n  TreeView_1 = TreeView;\n  /**\n   * Get component name.\n   *\n   * @returns {string} - returns module name.\n   * @private\n   */\n\n  TreeView.prototype.getModuleName = function () {\n    return 'treeview';\n  };\n  /**\n   * Initialize the event handler\n   *\n   * @returns {void}\n   */\n\n\n  TreeView.prototype.preRender = function () {\n    var _this = this;\n\n    this.checkActionNodes = [];\n    this.parentNodeCheck = [];\n    this.dragStartAction = false;\n    this.isAnimate = false;\n    this.keyConfigs = {\n      escape: 'escape',\n      end: 'end',\n      enter: 'enter',\n      f2: 'f2',\n      home: 'home',\n      moveDown: 'downarrow',\n      moveLeft: 'leftarrow',\n      moveRight: 'rightarrow',\n      moveUp: 'uparrow',\n      ctrlDown: 'ctrl+downarrow',\n      ctrlUp: 'ctrl+uparrow',\n      ctrlEnter: 'ctrl+enter',\n      ctrlHome: 'ctrl+home',\n      ctrlEnd: 'ctrl+end',\n      ctrlA: 'ctrl+A',\n      shiftDown: 'shift+downarrow',\n      shiftUp: 'shift+uparrow',\n      shiftEnter: 'shift+enter',\n      shiftHome: 'shift+home',\n      shiftEnd: 'shift+end',\n      csDown: 'ctrl+shift+downarrow',\n      csUp: 'ctrl+shift+uparrow',\n      csEnter: 'ctrl+shift+enter',\n      csHome: 'ctrl+shift+home',\n      csEnd: 'ctrl+shift+end',\n      space: 'space'\n    };\n    this.listBaseOption = {\n      expandCollapse: true,\n      showIcon: true,\n      expandIconClass: EXPANDABLE,\n      ariaAttributes: treeAriaAttr,\n      expandIconPosition: 'Left',\n      itemCreated: function (e) {\n        _this.beforeNodeCreate(e);\n      },\n      enableHtmlSanitizer: this.enableHtmlSanitizer,\n      itemNavigable: this.fullRowNavigable\n    };\n    this.updateListProp(this.fields);\n    this.aniObj = new Animation({});\n    this.treeList = [];\n    this.isLoaded = false;\n    this.isInitalExpand = false;\n    this.expandChildren = [];\n    this.index = 0;\n    this.setTouchClass();\n\n    if (isNOU(this.selectedNodes)) {\n      this.setProperties({\n        selectedNodes: []\n      }, true);\n    }\n\n    if (isNOU(this.checkedNodes)) {\n      this.setProperties({\n        checkedNodes: []\n      }, true);\n    }\n\n    if (isNOU(this.expandedNodes)) {\n      this.setProperties({\n        expandedNodes: []\n      }, true);\n    } else {\n      this.isInitalExpand = true;\n    }\n  };\n  /**\n   * Get the properties to be maintained in the persisted state.\n   *\n   * @returns {string} - returns the persisted data\n   * @hidden\n   */\n\n\n  TreeView.prototype.getPersistData = function () {\n    var keyEntity = ['selectedNodes', 'checkedNodes', 'expandedNodes'];\n    return this.addOnPersist(keyEntity);\n  };\n  /**\n   * To Initialize the control rendering\n   *\n   * @private\n   * @returns {void}\n   */\n\n\n  TreeView.prototype.render = function () {\n    this.initialRender = true;\n    this.initialize();\n    this.setDataBinding(false);\n    this.setDisabledMode();\n    this.setExpandOnType();\n\n    if (!this.disabled) {\n      this.setRipple();\n    }\n\n    this.wireEditingEvents(this.allowEditing);\n    this.setDragAndDrop(this.allowDragAndDrop);\n\n    if (!this.disabled) {\n      this.wireEvents();\n    }\n\n    this.initialRender = false;\n    this.renderComplete();\n  };\n\n  TreeView.prototype.initialize = function () {\n    this.element.setAttribute('role', 'tree');\n    this.element.setAttribute('tabindex', '0');\n    this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n    this.setCssClass(null, this.cssClass);\n    this.setEnableRtl();\n    this.setFullRow(this.fullRowSelect);\n    this.setTextWrap();\n    this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n  };\n\n  TreeView.prototype.setDisabledMode = function () {\n    if (this.disabled) {\n      this.element.classList.add(DISABLED);\n    } else {\n      this.element.classList.remove(DISABLED);\n    }\n  };\n\n  TreeView.prototype.setEnableRtl = function () {\n    (this.enableRtl ? addClass : removeClass)([this.element], RTL);\n  };\n\n  TreeView.prototype.setRipple = function () {\n    var tempStr = '.' + FULLROW + ',.' + TEXTWRAP;\n    var rippleModel = {\n      selector: tempStr,\n      ignore: '.' + TEXTWRAP + ' > .' + ICON + ',.' + INPUTGROUP + ',.' + INPUT + ', .' + CHECKBOXWRAP\n    };\n    this.rippleFn = rippleEffect(this.element, rippleModel);\n    var iconModel = {\n      selector: '.' + TEXTWRAP + ' > .' + ICON,\n      isCenterRipple: true\n    };\n    this.rippleIconFn = rippleEffect(this.element, iconModel);\n  };\n\n  TreeView.prototype.setFullRow = function (isEnabled) {\n    (isEnabled ? addClass : removeClass)([this.element], FULLROWWRAP);\n  };\n\n  TreeView.prototype.setMultiSelect = function (isEnabled) {\n    var firstUl = select('.' + PARENTITEM, this.element);\n\n    if (isEnabled) {\n      firstUl.setAttribute('aria-multiselectable', 'true');\n    } else {\n      firstUl.removeAttribute('aria-multiselectable');\n    }\n  }; // eslint-disable-next-line\n\n\n  TreeView.prototype.templateComplier = function (template) {\n    if (template) {\n      this.hasTemplate = true; // eslint-disable-next-line\n\n      var e = void 0;\n      this.element.classList.add(INTERACTION);\n\n      try {\n        if (document.querySelectorAll(template).length) {\n          return compile(document.querySelector(template).innerHTML.trim());\n        } else {\n          return compile(template);\n        }\n      } catch (e) {\n        return compile(template);\n      }\n    }\n\n    this.element.classList.remove(INTERACTION);\n    return undefined;\n  };\n\n  TreeView.prototype.setDataBinding = function (changeDataSource) {\n    var _this = this;\n\n    this.treeList.push('false');\n\n    if (this.fields.dataSource instanceof DataManager) {\n      /* eslint-disable */\n      this.isOffline = this.fields.dataSource.dataSource.offline;\n\n      if (this.fields.dataSource.ready) {\n        this.fields.dataSource.ready.then(function (e) {\n          /* eslint-disable */\n          _this.isOffline = _this.fields.dataSource.dataSource.offline;\n\n          if (_this.fields.dataSource instanceof DataManager && _this.isOffline) {\n            _this.treeList.pop();\n\n            _this.treeData = e.result;\n            _this.isNumberTypeId = _this.getType();\n\n            _this.setRootData();\n\n            _this.renderItems(true);\n\n            if (_this.treeList.length === 0 && !_this.isLoaded) {\n              _this.finalize();\n            }\n          }\n        }).catch(function (e) {\n          _this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      } else {\n        this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function (e) {\n          _this.treeList.pop();\n\n          _this.treeData = e.result;\n          _this.isNumberTypeId = _this.getType();\n\n          _this.setRootData();\n\n          if (changeDataSource) {\n            _this.changeDataSource = true;\n          }\n\n          _this.renderItems(true);\n\n          _this.changeDataSource = false;\n\n          if (_this.treeList.length === 0 && !_this.isLoaded) {\n            _this.finalize();\n          }\n        }).catch(function (e) {\n          _this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      }\n    } else {\n      this.treeList.pop();\n\n      if (isNOU(this.fields.dataSource)) {\n        this.rootData = this.treeData = [];\n      } else {\n        this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));\n        this.setRootData();\n      }\n\n      this.isNumberTypeId = this.getType();\n      this.renderItems(false);\n    }\n\n    if (this.treeList.length === 0 && !this.isLoaded) {\n      this.finalize();\n    }\n  };\n\n  TreeView.prototype.getQuery = function (mapper, value) {\n    if (value === void 0) {\n      value = null;\n    }\n\n    var columns = [];\n    var query;\n\n    if (!mapper.query) {\n      query = new Query();\n      var prop = this.getActualProperties(mapper);\n\n      for (var _i = 0, _a = Object.keys(prop); _i < _a.length; _i++) {\n        var col = _a[_i];\n\n        if (col !== 'dataSource' && col !== 'tableName' && col !== 'child' && !!mapper[col] && col !== 'url' && columns.indexOf(mapper[col]) === -1) {\n          columns.push(mapper[col]);\n        }\n      }\n\n      query.select(columns);\n\n      if (prop.hasOwnProperty('tableName')) {\n        query.from(mapper.tableName);\n      }\n    } else {\n      query = mapper.query.clone();\n    }\n\n    ListBase.addSorting(this.sortOrder, mapper.text, query);\n\n    if (!isNOU(value) && !isNOU(mapper.parentID)) {\n      query.where(mapper.parentID, 'equal', this.isNumberTypeId ? parseFloat(value) : value);\n    }\n\n    return query;\n  };\n\n  TreeView.prototype.getType = function () {\n    return this.treeData[0] ? typeof getValue(this.fields.id, this.treeData[0]) === 'number' ? true : false : false;\n  };\n\n  TreeView.prototype.setRootData = function () {\n    this.dataType = this.getDataType(this.treeData, this.fields);\n\n    if (this.dataType === 1) {\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n      var rootItems = this.getChildNodes(this.treeData, undefined, true);\n\n      if (isNOU(rootItems)) {\n        this.rootData = [];\n      } else {\n        this.rootData = rootItems;\n      }\n    } else {\n      this.rootData = this.treeData;\n    }\n  };\n\n  TreeView.prototype.renderItems = function (isSorted) {\n    /* eslint-disable */\n    this.listBaseOption.ariaAttributes.level = 1;\n    var sortedData = this.getSortedData(this.rootData);\n    this.ulElement = ListBase.createList(this.createElement, isSorted ? this.rootData : sortedData, this.listBaseOption);\n    this.element.appendChild(this.ulElement);\n    var rootNodes = this.ulElement.querySelectorAll('.e-list-item');\n\n    if (this.loadOnDemand === false) {\n      var i = 0;\n\n      while (i < rootNodes.length) {\n        this.renderChildNodes(rootNodes[i], true, null, true);\n        i++;\n      }\n    }\n\n    var parentEle = selectAll('.' + PARENTITEM, this.element);\n\n    if (parentEle.length === 1 && rootNodes && rootNodes.length !== 0 || this.loadOnDemand) {\n      this.finalizeNode(this.element);\n    }\n\n    this.parentNodeCheck = [];\n    this.parentCheckData = [];\n    this.updateCheckedStateFromDS();\n\n    if (this.autoCheck && this.showCheckBox && !this.isLoaded) {\n      this.updateParentCheckState();\n    }\n  };\n  /**\n   * Update the checkedNodes from datasource at initial rendering\n   */\n\n\n  TreeView.prototype.updateCheckedStateFromDS = function (id) {\n    this.validNodes = [];\n\n    if (this.treeData && this.showCheckBox) {\n      if (this.dataType === 1) {\n        var mapper = this.fields;\n        var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n\n        for (var i = 0; i < resultData.length; i++) {\n          var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n          var resultPId = resultData[i][this.fields.parentID] ? resultData[i][this.fields.parentID].toString() : null;\n\n          if (this.checkedNodes.indexOf(resultId) === -1 && !this.isLoaded) {\n            this.checkedNodes.push(resultId);\n          }\n\n          if (resultData[i][this.fields.hasChildren]) {\n            var id_1 = resultData[i][this.fields.id];\n            var childData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', id_1, false));\n\n            for (var child = 0; child < childData.length; child++) {\n              var childId = childData[child][this.fields.id] ? childData[child][this.fields.id].toString() : null;\n\n              if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {\n                this.checkedNodes.push(childId);\n              }\n            }\n          }\n        }\n\n        for (var i = 0; i < this.checkedNodes.length; i++) {\n          var mapper_1 = this.fields;\n          var checkState = new DataManager(this.treeData).executeLocal(new Query().where(mapper_1.id, 'equal', this.checkedNodes[i], true));\n\n          if (checkState[0] && this.autoCheck) {\n            this.getCheckedNodeDetails(mapper_1, checkState);\n            this.checkIndeterminateState(checkState[0]);\n          }\n\n          if (checkState.length > 0) {\n            var checkedId = checkState[0][this.fields.id] ? checkState[0][this.fields.id].toString() : null;\n\n            if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {\n              this.validNodes.push(checkedId);\n            }\n          }\n\n          var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper_1.parentID, 'equal', this.checkedNodes[i], true));\n\n          for (var index = 0; index < checkedData.length; index++) {\n            var checkedId = checkedData[index][this.fields.id] ? checkedData[index][this.fields.id].toString() : null;\n\n            if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {\n              this.checkedNodes.push(checkedId);\n            }\n\n            if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {\n              this.validNodes.push(checkedId);\n            }\n          }\n        }\n      } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.isOffline) {\n        for (var index = 0; index < this.treeData.length; index++) {\n          var fieldId = this.treeData[index][this.fields.id] ? this.treeData[index][this.fields.id].toString() : '';\n\n          if (this.treeData[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(fieldId) === -1) {\n            this.checkedNodes.push(fieldId);\n          }\n\n          if (this.checkedNodes.indexOf(fieldId) > -1 && this.validNodes.indexOf(fieldId) === -1) {\n            this.validNodes.push(fieldId);\n          }\n\n          var childItems = getValue(this.fields.child.toString(), this.treeData[index]);\n\n          if (childItems) {\n            this.updateChildCheckState(childItems, this.treeData[index]);\n          }\n        }\n\n        this.validNodes = this.enablePersistence ? this.checkedNodes : this.validNodes;\n      }\n\n      this.setProperties({\n        checkedNodes: this.validNodes\n      }, true);\n    }\n  };\n  /**\n   * To check whether the list data has sub child and to change the parent check state accordingly\n   */\n\n\n  TreeView.prototype.getCheckedNodeDetails = function (mapper, checkNodes) {\n    var id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;\n    var count = 0;\n    var element = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.id] + '\"]');\n    var parentEle = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.parentID] + '\"]');\n\n    if (!element && !parentEle) {\n      var len = this.parentNodeCheck.length;\n\n      if (this.parentNodeCheck.indexOf(id) === -1) {\n        this.parentNodeCheck.push(id);\n      }\n\n      var childNodes = this.getChildNodes(this.treeData, id);\n\n      for (var i = 0; i < childNodes.length; i++) {\n        var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n        if (this.checkedNodes.indexOf(childId) !== -1) {\n          count++;\n        }\n\n        if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {\n          this.checkedNodes.push(id);\n        }\n      }\n\n      var preElement = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', id, true));\n      this.getCheckedNodeDetails(mapper, preElement);\n    } else if (parentEle) {\n      var check = select('.' + CHECK, parentEle);\n\n      if (!check) {\n        this.changeState(parentEle, 'indeterminate', null, true, true);\n      }\n    }\n  };\n  /**\n   * Update the checkedNodes and parent state when all the child Nodes are in checkedstate at initial rendering\n   */\n\n\n  TreeView.prototype.updateParentCheckState = function () {\n    var indeterminate = selectAll('.' + INDETERMINATE, this.element);\n    var childCheckedElement;\n\n    for (var i = 0; i < indeterminate.length; i++) {\n      var node = closest(indeterminate[i], '.' + LISTITEM);\n      var nodeId = node.getAttribute('data-uid').toString();\n\n      if (this.dataType === 1) {\n        childCheckedElement = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.parentID, 'equal', nodeId, true));\n      } else {\n        childCheckedElement = this.getChildNodes(this.treeData, nodeId);\n      }\n\n      var count = 0;\n\n      if (childCheckedElement) {\n        for (var j = 0; j < childCheckedElement.length; j++) {\n          var childId = childCheckedElement[j][this.fields.id].toString();\n\n          if (this.checkedNodes.indexOf(childId) !== -1) {\n            count++;\n          }\n        }\n\n        if (count === childCheckedElement.length) {\n          var nodeCheck = node.getAttribute('data-uid');\n\n          if (this.checkedNodes.indexOf(nodeCheck) === -1) {\n            this.checkedNodes.push(nodeCheck);\n          }\n\n          this.changeState(node, 'check', null, true, true);\n        } else if (count === 0 && this.checkedNodes.length === 0) {\n          this.changeState(node, 'uncheck', null, true, true);\n        }\n      }\n    }\n  };\n  /**\n   * Change the parent to indeterminate state whenever the child is in checked state which is not rendered in DOM\n   */\n\n\n  TreeView.prototype.checkIndeterminateState = function (data) {\n    var element;\n\n    if (this.dataType === 1) {\n      element = this.element.querySelector('[data-uid=\"' + data[this.fields.parentID] + '\"]');\n    } else {\n      element = this.element.querySelector('[data-uid=\"' + data[this.fields.id] + '\"]');\n    }\n\n    if (element) {\n      var ariaChecked = element.querySelector('.' + CHECKBOXWRAP).getAttribute('aria-checked');\n\n      if (ariaChecked !== 'true') {\n        this.changeState(element, 'indeterminate', null, true, true);\n      }\n    } else if (this.dataType === 2) {\n      var len = this.parentNodeCheck.length;\n\n      if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {\n        this.parentNodeCheck.push(data[this.fields.id].toString());\n      }\n    }\n  };\n  /**\n   * Update the checkedNodes for child and subchild from datasource (hierarchical datasource) at initial rendering\n   */\n\n\n  TreeView.prototype.updateChildCheckState = function (childItems, treeData) {\n    var count = 0;\n    var checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n\n    for (var index = 0; index < childItems.length; index++) {\n      var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n\n      if (childItems[index][this.fields.isChecked] && !this.isLoaded && this.checkedNodes.indexOf(checkedChild) === -1) {\n        this.checkedNodes.push(checkedChild);\n      }\n\n      if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {\n        this.checkedNodes.push(checkedChild);\n      }\n\n      if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n        count++;\n      }\n\n      if (this.checkedNodes.indexOf(checkedChild) > -1 && this.validNodes.indexOf(checkedChild) === -1) {\n        this.validNodes.push(checkedChild);\n      }\n\n      var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n\n      if (subChildItems && subChildItems.length) {\n        if (this.parentCheckData.indexOf(treeData) === -1) this.parentCheckData.push(treeData);\n        this.updateChildCheckState(subChildItems, childItems[index]);\n      }\n\n      if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {\n        this.checkedNodes.push(checkedParent);\n      }\n    }\n\n    if (count !== 0 && this.autoCheck) {\n      this.checkIndeterminateState(treeData);\n\n      for (var len = 0; len < this.parentCheckData.length; len++) {\n        if (treeData !== this.parentCheckData[len] && this.parentCheckData[len]) {\n          this.checkIndeterminateState(this.parentCheckData[len]);\n        }\n      }\n    }\n\n    this.parentCheckData = [];\n  };\n\n  TreeView.prototype.beforeNodeCreate = function (e) {\n    if (this.showCheckBox) {\n      var checkboxEle = createCheckBox(this.createElement, true, {\n        cssClass: this.touchClass\n      });\n      checkboxEle.setAttribute('role', 'checkbox');\n      var icon = select('div.' + ICON, e.item);\n      var id = e.item.getAttribute('data-uid');\n      e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[isNOU(icon) ? 0 : 1]);\n      var checkValue = getValue(e.fields.isChecked, e.curData);\n\n      if (this.checkedNodes.indexOf(id) > -1) {\n        select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n        checkboxEle.setAttribute('aria-checked', 'true');\n        this.addCheck(e.item);\n      } else if (!isNOU(checkValue) && checkValue.toString() === 'true') {\n        select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n        checkboxEle.setAttribute('aria-checked', 'true');\n        this.addCheck(e.item);\n      } else {\n        checkboxEle.setAttribute('aria-checked', 'false');\n      }\n\n      var frame = select('.' + CHECKBOXFRAME, checkboxEle);\n      EventHandler.add(frame, 'mousedown', this.frameMouseHandler, this);\n      EventHandler.add(frame, 'mouseup', this.frameMouseHandler, this);\n    }\n\n    if (this.fullRowSelect) {\n      this.createFullRow(e.item);\n    }\n\n    if (this.allowMultiSelection && !e.item.classList.contains(SELECTED)) {\n      e.item.setAttribute('aria-selected', 'false');\n    }\n\n    var fields = e.fields;\n    this.addActionClass(e, fields.selected, SELECTED);\n    this.addActionClass(e, fields.expanded, EXPANDED);\n\n    if (!isNOU(this.nodeTemplateFn)) {\n      var textEle = e.item.querySelector('.' + LISTTEXT);\n      var dataId = e.item.getAttribute('data-uid');\n      textEle.innerHTML = '';\n      this.renderNodeTemplate(e.curData, textEle, dataId);\n    }\n\n    var eventArgs = {\n      node: e.item,\n      nodeData: e.curData,\n      text: e.text\n    };\n\n    if (!this.isRefreshed) {\n      this.trigger('drawNode', eventArgs);\n    }\n  };\n\n  TreeView.prototype.frameMouseHandler = function (e) {\n    var rippleSpan = select('.' + CHECKBOXRIPPLE, e.target.parentElement);\n    rippleMouseHandler(e, rippleSpan);\n  };\n\n  TreeView.prototype.addActionClass = function (e, action, cssClass) {\n    var data = e.curData;\n    var actionValue = getValue(action, data);\n\n    if (!isNOU(actionValue) && actionValue.toString() !== 'false') {\n      e.item.classList.add(cssClass);\n    }\n  };\n\n  TreeView.prototype.getDataType = function (ds, mapper) {\n    if (this.fields.dataSource instanceof DataManager) {\n      for (var i = 0; i < ds.length; i++) {\n        if (this.isOffline) {\n          if (typeof mapper.child === 'string' && isNOU(getValue(mapper.child, ds[i])) && !isNOU(getValue(mapper.parentID, ds[i]))) {\n            return 1;\n          }\n        } else if (typeof mapper.child === 'string' && isNOU(getValue(mapper.child, ds[i]))) {\n          return 1;\n        }\n      }\n\n      return 2;\n    }\n\n    for (var i = 0, len = ds.length; i < len; i++) {\n      if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, ds[i]))) {\n        return 2;\n      }\n\n      if (!isNOU(getValue(mapper.parentID, ds[i])) || !isNOU(getValue(mapper.hasChildren, ds[i]))) {\n        return 1;\n      }\n    }\n\n    return 1;\n  };\n\n  TreeView.prototype.getGroupedData = function (dataSource, groupBy) {\n    var cusQuery = new Query().group(groupBy);\n    var ds = ListBase.getDataSource(dataSource, cusQuery);\n    var grpItem = [];\n\n    for (var j = 0; j < ds.length; j++) {\n      var itemObj = ds[j].items;\n      grpItem.push(itemObj);\n    }\n\n    return grpItem;\n  };\n\n  TreeView.prototype.getSortedData = function (list) {\n    if (list && this.sortOrder !== 'None') {\n      list = ListBase.getDataSource(list, ListBase.addSorting(this.sortOrder, this.fields.text));\n    }\n\n    return list;\n  };\n\n  TreeView.prototype.finalizeNode = function (element) {\n    var iNodes = selectAll('.' + IMAGE, element);\n\n    for (var k = 0; k < iNodes.length; k++) {\n      iNodes[k].setAttribute('alt', IMAGE);\n    }\n\n    if (this.isLoaded) {\n      var sNodes = selectAll('.' + SELECTED, element);\n\n      for (var i = 0; i < sNodes.length; i++) {\n        this.selectNode(sNodes[i], null);\n        break;\n      }\n\n      removeClass(sNodes, SELECTED);\n    }\n\n    var cNodes = selectAll('.' + LISTITEM + ':not(.' + EXPANDED + ')', element);\n\n    for (var j = 0; j < cNodes.length; j++) {\n      var icon = select('div.' + ICON, cNodes[j]);\n\n      if (icon && icon.classList.contains(EXPANDABLE)) {\n        this.disableExpandAttr(cNodes[j]);\n      }\n    }\n\n    var eNodes = selectAll('.' + EXPANDED, element);\n\n    if (!this.isInitalExpand) {\n      for (var i = 0; i < eNodes.length; i++) {\n        this.renderChildNodes(eNodes[i]);\n      }\n    }\n\n    removeClass(eNodes, EXPANDED);\n    this.updateList();\n\n    if (this.isLoaded) {\n      this.updateCheckedProp();\n    }\n  };\n\n  TreeView.prototype.updateCheckedProp = function () {\n    if (this.showCheckBox) {\n      var nodes = [].concat([], this.checkedNodes);\n      this.setProperties({\n        checkedNodes: nodes\n      }, true);\n    }\n  };\n\n  TreeView.prototype.ensureIndeterminate = function () {\n    if (this.autoCheck) {\n      var liElement = selectAll('li', this.element);\n      var ulElement = void 0;\n\n      for (var i = 0; i < liElement.length; i++) {\n        if (liElement[i].classList.contains(LISTITEM)) {\n          ulElement = select('.' + PARENTITEM, liElement[i]);\n\n          if (ulElement) {\n            this.ensureParentCheckState(liElement[i]);\n          } else {\n            this.ensureChildCheckState(liElement[i]);\n          }\n        }\n      }\n    } else {\n      var indeterminate = selectAll('.' + INDETERMINATE, this.element);\n\n      for (var i = 0; i < indeterminate.length; i++) {\n        indeterminate[i].classList.remove(INDETERMINATE);\n      }\n    }\n  };\n\n  TreeView.prototype.ensureParentCheckState = function (element) {\n    if (!isNOU(element)) {\n      if (element.classList.contains(ROOT)) {\n        return;\n      }\n\n      var ulElement = element;\n\n      if (element.classList.contains(LISTITEM)) {\n        ulElement = select('.' + PARENTITEM, element);\n      }\n\n      var checkedNodes = selectAll('.' + CHECK, ulElement);\n      var indeterminateNodes = selectAll('.' + INDETERMINATE, ulElement);\n      var nodes = selectAll('.' + LISTITEM, ulElement);\n      var checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP)[0];\n\n      if (nodes.length === checkedNodes.length) {\n        this.changeState(checkBoxEle, 'check', null, true, true);\n      } else if (checkedNodes.length > 0 || indeterminateNodes.length > 0) {\n        this.changeState(checkBoxEle, 'indeterminate', null, true, true);\n      } else if (checkedNodes.length === 0) {\n        this.changeState(checkBoxEle, 'uncheck', null, true, true);\n      }\n\n      var parentUL = closest(element, '.' + PARENTITEM);\n\n      if (!isNOU(parentUL)) {\n        var currentParent = closest(parentUL, '.' + LISTITEM);\n        this.ensureParentCheckState(currentParent);\n      }\n    }\n  };\n\n  TreeView.prototype.ensureChildCheckState = function (element, e) {\n    if (!isNOU(element)) {\n      var childElement = select('.' + PARENTITEM, element);\n      var checkBoxes = void 0;\n\n      if (!isNOU(childElement)) {\n        checkBoxes = selectAll('.' + CHECKBOXWRAP, childElement);\n        var isChecked = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n        var parentCheck = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE);\n        var childCheck = childElement.querySelectorAll('li');\n        var expandState = childElement.parentElement.getAttribute('aria-expanded');\n        var checkedState = void 0;\n\n        for (var index = 0; index < checkBoxes.length; index++) {\n          var childId = childCheck[index].getAttribute('data-uid');\n\n          if (!isNOU(this.currentLoadData) && !isNOU(getValue(this.fields.isChecked, this.currentLoadData[index]))) {\n            checkedState = getValue(this.fields.isChecked, this.currentLoadData[index]) ? 'check' : 'uncheck';\n\n            if (this.ele !== -1) {\n              checkedState = isChecked ? 'check' : 'uncheck';\n            }\n\n            if (checkedState === 'uncheck' && !isUndefined(this.parentNodeCheck) && this.autoCheck && this.parentNodeCheck.indexOf(childId) !== -1) {\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n              checkedState = 'indeterminate';\n            }\n          } else {\n            var isNodeChecked = checkBoxes[index].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n\n            if (isChecked) {\n              checkedState = 'check';\n            } else if (isNodeChecked && !this.isLoaded) {\n              checkedState = 'check';\n            } else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {\n              checkedState = 'check';\n            } else if (childCheck[index].classList.contains(CHILD) && !isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {\n              checkedState = 'indeterminate';\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n            } else if (this.dataType === 1 && !isUndefined(this.parentNodeCheck) && this.autoCheck && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1) {\n              checkedState = 'indeterminate';\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n            } else {\n              checkedState = 'uncheck';\n            }\n          }\n\n          this.changeState(checkBoxes[index], checkedState, e, true, true);\n        }\n      }\n\n      if (this.autoCheck && this.isLoaded) {\n        this.updateParentCheckState();\n      }\n    }\n  };\n\n  TreeView.prototype.doCheckBoxAction = function (nodes, doCheck) {\n    var li = selectAll('.' + LISTITEM, this.element);\n\n    if (!isNOU(nodes)) {\n      for (var len = nodes.length; len >= 0; len--) {\n        var liEle = void 0;\n\n        if (nodes.length === 1) {\n          liEle = this.getElement(nodes[len - 1]);\n        } else {\n          liEle = this.getElement(nodes[len]);\n        }\n\n        if (isNOU(liEle)) {\n          var node = void 0;\n          node = nodes[len - nodes.length] ? nodes[len - nodes.length].toString() : nodes[len] ? nodes[len].toString() : null;\n\n          if (node !== '' && doCheck && node) {\n            this.setValidCheckedNode(node);\n            this.dynamicCheckState(node, doCheck);\n          } else if (this.checkedNodes.indexOf(node) !== -1 && node !== '' && !doCheck) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);\n            var childItems = this.getChildNodes(this.treeData, node);\n\n            if (childItems) {\n              for (var i = 0; i < childItems.length; i++) {\n                var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n\n                if (this.checkedNodes.indexOf(id) !== -1) {\n                  this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n                  var ele = this.element.querySelector('[data-uid=\"' + id + '\"]');\n\n                  if (ele) {\n                    this.changeState(ele, 'uncheck', null);\n                  }\n                }\n              }\n\n              if (this.parentNodeCheck.indexOf(node) !== -1) {\n                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);\n              }\n            }\n\n            if (node) {\n              this.dynamicCheckState(node, doCheck);\n            }\n\n            this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n          }\n\n          continue;\n        }\n\n        var checkBox = select('.' + PARENTITEM + ' .' + CHECKBOXWRAP, liEle);\n        this.validateCheckNode(checkBox, !doCheck, liEle, null);\n      }\n    } else {\n      var checkBoxes = selectAll('.' + CHECKBOXWRAP, this.element);\n\n      if (this.loadOnDemand) {\n        for (var index = 0; index < checkBoxes.length; index++) {\n          this.updateFieldChecked(checkBoxes[index], doCheck);\n          this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck', null, null, null, doCheck);\n        }\n      } else {\n        for (var index = 0; index < checkBoxes.length; index++) {\n          this.updateFieldChecked(checkBoxes[index], doCheck);\n          this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck');\n        }\n      }\n    }\n\n    if (nodes) {\n      for (var j = 0; j < nodes.length; j++) {\n        var node = nodes[j] ? nodes[j].toString() : '';\n\n        if (!doCheck) {\n          this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n        }\n      }\n    }\n\n    if (this.autoCheck) {\n      this.updateParentCheckState();\n    }\n  };\n\n  TreeView.prototype.updateFieldChecked = function (checkbox, doCheck) {\n    var currLi = closest(checkbox, '.' + LISTITEM);\n    var id = currLi.getAttribute('data-uid');\n    var nodeDetails = this.getNodeData(currLi);\n\n    if (nodeDetails.isChecked === 'true' && !doCheck) {\n      this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n    }\n  };\n  /**\n   * Changes the parent and child  check state while changing the checkedNodes via setmodel\n   */\n\n\n  TreeView.prototype.dynamicCheckState = function (node, doCheck) {\n    if (this.dataType === 1) {\n      var count = 0;\n      var resultId = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.id, 'equal', node, true));\n\n      if (resultId[0]) {\n        var id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;\n        var parent_1 = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;\n        var parentElement = this.element.querySelector('[data-uid=\"' + parent_1 + '\"]');\n        var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n        var check = parentElement ? select('.' + CHECK, parentElement) : null;\n        var element = this.element.querySelector('[data-uid=\"' + id + '\"]');\n        var childNodes = this.getChildNodes(this.treeData, parent_1);\n\n        if (childNodes) {\n          for (var i = 0; i < childNodes.length; i++) {\n            var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n            if (this.checkedNodes.indexOf(childId) !== -1) {\n              count++;\n            }\n          }\n        }\n\n        if (this.checkedNodes.indexOf(node) !== -1 && parentElement && id === node && this.autoCheck) {\n          this.changeState(parentElement, 'indeterminate', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && element && id === node && !doCheck) {\n          this.changeState(element, 'uncheck', null);\n        } else if (this.checkedNodes.indexOf(node) !== -1 && element && id === node && doCheck) {\n          this.changeState(element, 'check', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count !== 0) {\n          this.changeState(parentElement, 'indeterminate', null);\n        } else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && id === node && this.autoCheck && count === 0) {\n          this.changeState(parentElement, 'uncheck', null);\n        } else if (!element && !parentElement && id === node && this.autoCheck) {\n          this.updateIndeterminate(node, doCheck);\n        }\n      }\n    } else if (this.dataType === 2 || this.fields.dataSource instanceof DataManager && this.isOffline) {\n      var id = void 0;\n      var parentElement = void 0;\n      var check = void 0;\n\n      for (var i = 0; i < this.treeData.length; i++) {\n        id = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : '';\n        parentElement = this.element.querySelector('[data-uid=\"' + id + '\"]');\n        check = parentElement ? select('.' + CHECK, parentElement) : null;\n\n        if (this.checkedNodes.indexOf(id) === -1 && parentElement && check && !doCheck) {\n          this.changeState(parentElement, 'uncheck', null);\n        }\n\n        var subChild = getValue(this.fields.child.toString(), this.treeData[i]);\n\n        if (subChild) {\n          this.updateChildIndeterminate(subChild, id, node, doCheck, id);\n        }\n      }\n    }\n  };\n  /**\n   * updates the parent and child  check state while changing the checkedNodes via setmodel for listData\n   */\n\n\n  TreeView.prototype.updateIndeterminate = function (node, doCheck) {\n    var indeterminateData = this.getTreeData(node);\n    var count = 0;\n    var parent;\n\n    if (this.dataType === 1) {\n      parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;\n    }\n\n    var childNodes = this.getChildNodes(this.treeData, parent);\n\n    if (childNodes) {\n      for (var i = 0; i < childNodes.length; i++) {\n        var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n\n        if (this.checkedNodes.indexOf(childId) !== -1) {\n          count++;\n        }\n      }\n    }\n\n    var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n\n    if (parentElement && doCheck) {\n      this.changeState(parentElement, 'indeterminate', null);\n    } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\n      this.changeState(parentElement, 'indeterminate', null);\n    } else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {\n      this.changeState(parentElement, 'uncheck', null);\n    } else if (!parentElement) {\n      if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {\n        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);\n      } else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {\n        this.parentNodeCheck.push(parent);\n      } else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\n        this.parentNodeCheck.push(parent);\n      }\n\n      this.updateIndeterminate(parent, doCheck);\n\n      if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {\n        this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);\n      }\n    }\n  };\n  /**\n   * updates the parent and child  check state while changing the checkedNodes via setmodel for hierarchical data\n   */\n\n\n  TreeView.prototype.updateChildIndeterminate = function (subChild, parent, node, doCheck, child) {\n    var count = 0;\n\n    for (var j = 0; j < subChild.length; j++) {\n      var subId = subChild[j][this.fields.id] ? subChild[j][this.fields.id].toString() : '';\n\n      if (this.checkedNodes.indexOf(subId) !== -1) {\n        count++;\n      }\n\n      var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n      var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n      var check = parentElement ? select('.' + CHECK, parentElement) : null;\n      var element = this.element.querySelector('[data-uid=\"' + subId + '\"]');\n      var childElementCheck = element ? select('.' + CHECK, element) : null;\n\n      if (this.checkedNodes.indexOf(node) !== -1 && parentElement && subId === node && this.autoCheck) {\n        this.changeState(parentElement, 'indeterminate', null);\n      } else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element && subId === node && !doCheck) {\n        if (this.autoCheck) {\n          this.changeState(parentElement, 'uncheck', null);\n        } else {\n          if (count !== 0) {\n            this.changeState(parentElement, 'indeterminate', null);\n          } else {\n            this.changeState(parentElement, 'uncheck', null);\n          }\n        }\n      } else if (this.checkedNodes.indexOf(node) === -1 && element && subId === node && !doCheck) {\n        this.changeState(element, 'uncheck', null);\n      } else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && subId === node && this.autoCheck && count === 0 && !doCheck) {\n        indeterminate.classList.remove(INDETERMINATE);\n      } else if (this.checkedNodes.indexOf(node) === -1 && !element && check && subId === node && count === 0) {\n        this.changeState(parentElement, 'uncheck', null);\n      } else if (this.checkedNodes.indexOf(subId) === -1 && element && childElementCheck && count === 0) {\n        this.changeState(element, 'uncheck', null);\n      } else if (!element && !parentElement && subId === node || this.parentNodeCheck.indexOf(parent) !== -1 && this.autoCheck) {\n        var childElement = this.element.querySelector('[data-uid=\"' + child + '\"]');\n\n        if (doCheck && count !== 0) {\n          this.changeState(childElement, 'indeterminate', null);\n        } else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {\n          this.checkedNodes.push(parent);\n        } else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {\n          this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));\n        }\n\n        if (this.parentNodeCheck.indexOf(parent) === -1) {\n          this.parentNodeCheck.push(parent);\n        }\n      }\n\n      var innerChild = getValue(this.fields.child.toString(), subChild[j]);\n\n      if (innerChild) {\n        this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);\n      }\n    }\n  };\n\n  TreeView.prototype.changeState = function (wrapper, state, e, isPrevent, isAdd, doCheck) {\n    var _this = this;\n\n    var eventArgs;\n    var currLi = closest(wrapper, '.' + LISTITEM);\n\n    if (wrapper === currLi) {\n      wrapper = select('.' + CHECKBOXWRAP, currLi);\n    }\n\n    if (!isPrevent) {\n      this.checkActionNodes = [];\n      eventArgs = this.getCheckEvent(currLi, state, e);\n      this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          _this.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);\n        }\n      });\n    } else {\n      this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);\n    }\n  };\n\n  TreeView.prototype.nodeCheckAction = function (wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {\n    var ariaState;\n    var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\n\n    if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\n      frameSpan.classList.remove(INDETERMINATE);\n      frameSpan.classList.add(CHECK);\n      this.addCheck(currLi);\n      ariaState = 'true';\n    } else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {\n      removeClass([frameSpan], [CHECK, INDETERMINATE]);\n      this.removeCheck(currLi);\n      ariaState = 'false';\n    } else if (state === 'indeterminate' && this.autoCheck) {\n      frameSpan.classList.remove(CHECK);\n      frameSpan.classList.add(INDETERMINATE);\n      this.removeCheck(currLi);\n      ariaState = 'mixed';\n    }\n\n    ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;\n\n    if (!isNOU(ariaState)) {\n      wrapper.setAttribute('aria-checked', ariaState);\n    }\n\n    if (isAdd) {\n      var data = [].concat([], this.checkActionNodes);\n      eventArgs = this.getCheckEvent(currLi, state, e);\n\n      if (isUndefined(isPrevent)) {\n        eventArgs.data = data;\n      }\n    }\n\n    if (doCheck !== undefined) {\n      this.ensureStateChange(currLi, doCheck);\n    }\n\n    if (!isPrevent) {\n      if (!isNOU(ariaState)) {\n        wrapper.setAttribute('aria-checked', ariaState);\n        eventArgs.data[0].checked = ariaState;\n        this.trigger('nodeChecked', eventArgs);\n        this.checkActionNodes = [];\n      }\n    }\n  };\n\n  TreeView.prototype.addCheck = function (liEle) {\n    var id = liEle.getAttribute('data-uid');\n\n    if (!isNOU(id) && this.checkedNodes.indexOf(id) === -1) {\n      this.checkedNodes.push(id);\n    }\n  };\n\n  TreeView.prototype.removeCheck = function (liEle) {\n    var index = this.checkedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      this.checkedNodes.splice(index, 1);\n    }\n  };\n\n  TreeView.prototype.getCheckEvent = function (currLi, action, e) {\n    this.checkActionNodes.push(this.getNodeData(currLi));\n    var nodeData = this.checkActionNodes;\n    return {\n      action: action,\n      cancel: false,\n      isInteracted: isNOU(e) ? false : true,\n      node: currLi,\n      data: nodeData\n    };\n  };\n\n  TreeView.prototype.finalize = function () {\n    var firstUl = select('.' + PARENTITEM, this.element);\n\n    if (!isNullOrUndefined(firstUl)) {\n      firstUl.setAttribute('role', treeAriaAttr.treeRole);\n      this.setMultiSelect(this.allowMultiSelection);\n      var firstNode = select('.' + LISTITEM, this.element);\n\n      if (firstNode) {\n        addClass([firstNode], FOCUS);\n        this.updateIdAttr(null, firstNode);\n      }\n\n      if (this.allowTextWrap) {\n        this.updateWrap();\n      }\n\n      this.renderReactTemplates();\n      this.hasPid = this.rootData[0] ? this.rootData[0].hasOwnProperty(this.fields.parentID) : false;\n      this.doExpandAction();\n    }\n  };\n\n  TreeView.prototype.setTextWrap = function () {\n    (this.allowTextWrap ? addClass : removeClass)([this.element], LISTWRAP);\n\n    if (Browser.isIE) {\n      (this.allowTextWrap ? addClass : removeClass)([this.element], IELISTWRAP);\n    }\n  };\n\n  TreeView.prototype.updateWrap = function (ulEle) {\n    if (!this.fullRowSelect) {\n      return;\n    }\n\n    var liEle = ulEle ? selectAll('.' + LISTITEM, ulEle) : this.liList;\n    var length = liEle.length;\n\n    for (var i = 0; i < length; i++) {\n      this.calculateWrap(liEle[i]);\n    }\n  };\n\n  TreeView.prototype.calculateWrap = function (liEle) {\n    var element = select('.' + FULLROW, liEle);\n\n    if (element && element.nextElementSibling) {\n      element.style.height = this.allowTextWrap ? element.nextElementSibling.offsetHeight + 'px' : '';\n    }\n  };\n\n  TreeView.prototype.doExpandAction = function () {\n    var eUids = this.expandedNodes;\n\n    if (this.isInitalExpand && eUids.length > 0) {\n      this.setProperties({\n        expandedNodes: []\n      }, true);\n      /* eslint-disable */\n\n      if (this.fields.dataSource instanceof DataManager) {\n        this.expandGivenNodes(eUids);\n      } else {\n        for (var i = 0; i < eUids.length; i++) {\n          var eNode = select('[data-uid=\"' + eUids[i] + '\"]', this.element);\n\n          if (!isNOU(eNode)) {\n            var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n\n            if (!isNOU(icon)) {\n              this.expandAction(eNode, icon, null);\n            }\n          } else {\n            if (eUids[i] && this.expandChildren.indexOf(eUids[i]) === -1) {\n              this.expandChildren.push(eUids[i].toString());\n            }\n\n            continue;\n          }\n        }\n\n        this.afterFinalized();\n      }\n    } else {\n      this.afterFinalized();\n    }\n  };\n\n  TreeView.prototype.expandGivenNodes = function (arr) {\n    var proxy = this;\n    this.expandCallback(arr[this.index], function () {\n      proxy.index++;\n\n      if (proxy.index < arr.length) {\n        proxy.expandGivenNodes(arr);\n      } else {\n        proxy.afterFinalized();\n      }\n    });\n  };\n\n  TreeView.prototype.expandCallback = function (eUid, callback) {\n    var eNode = select('[data-uid=\"' + eUid + '\"]', this.element);\n\n    if (!isNOU(eNode)) {\n      var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n\n      if (!isNOU(icon)) {\n        this.expandAction(eNode, icon, null, false, callback);\n      } else {\n        callback();\n      }\n    } else {\n      callback();\n    }\n  };\n\n  TreeView.prototype.afterFinalized = function () {\n    this.doSelectionAction();\n    this.updateCheckedProp();\n    this.isAnimate = true;\n    this.isInitalExpand = false;\n\n    if ((!this.isLoaded || this.isFieldChange) && !this.isNodeDropped) {\n      var eventArgs = {\n        data: this.treeData\n      };\n      this.trigger('dataBound', eventArgs);\n    }\n\n    this.isLoaded = true;\n    this.isNodeDropped = false;\n  };\n\n  TreeView.prototype.doSelectionAction = function () {\n    var sNodes = selectAll('.' + SELECTED, this.element);\n    var sUids = this.selectedNodes;\n\n    if (sUids.length > 0) {\n      this.setProperties({\n        selectedNodes: []\n      }, true);\n\n      for (var i = 0; i < sUids.length; i++) {\n        var sNode = select('[data-uid=\"' + sUids[i] + '\"]', this.element);\n\n        if (sNode && !sNode.classList.contains('e-active')) {\n          this.selectNode(sNode, null, true);\n        } else {\n          this.selectedNodes.push(sUids[i]);\n        }\n\n        if (!this.allowMultiSelection) {\n          break;\n        }\n      }\n    } else {\n      this.selectGivenNodes(sNodes);\n    }\n\n    removeClass(sNodes, SELECTED);\n  };\n\n  TreeView.prototype.selectGivenNodes = function (sNodes) {\n    for (var i = 0; i < sNodes.length; i++) {\n      if (!sNodes[i].classList.contains('e-disable')) {\n        this.selectNode(sNodes[i], null, true);\n      }\n\n      if (!this.allowMultiSelection) {\n        break;\n      }\n    }\n  };\n\n  TreeView.prototype.clickHandler = function (event) {\n    var target = event.originalEvent.target;\n    EventHandler.remove(this.element, 'contextmenu', this.preventContextMenu);\n\n    if (!target || this.dragStartAction) {\n      return;\n    } else {\n      var classList = target.classList;\n      var li = closest(target, '.' + LISTITEM);\n\n      if (!li) {\n        return;\n      } else if (event.originalEvent.which !== 3) {\n        var rippleElement = select('.' + RIPPLEELMENT, li);\n        var rippleIcons = select('.' + ICON, li);\n        this.removeHover();\n        this.setFocusElement(li);\n\n        if (this.showCheckBox && !li.classList.contains('e-disable')) {\n          var checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n\n          if (!isNOU(checkWrapper)) {\n            var checkElement = select('.' + CHECKBOXFRAME, checkWrapper);\n            this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK), li, event.originalEvent);\n            this.triggerClickEvent(event.originalEvent, li);\n            return;\n          }\n        }\n\n        if (classList.contains(EXPANDABLE)) {\n          this.expandAction(li, target, event);\n        } else if (classList.contains(COLLAPSIBLE)) {\n          this.collapseNode(li, target, event);\n        } else if (rippleElement && rippleIcons) {\n          if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(EXPANDABLE)) {\n            this.expandAction(li, rippleIcons, event);\n          } else if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(COLLAPSIBLE)) {\n            this.collapseNode(li, rippleIcons, event);\n          } else if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\n            this.toggleSelect(li, event.originalEvent, false);\n          }\n        } else {\n          if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\n            this.toggleSelect(li, event.originalEvent, false);\n          }\n        }\n      }\n\n      this.triggerClickEvent(event.originalEvent, li);\n    }\n  };\n\n  TreeView.prototype.nodeCheckedEvent = function (wrapper, isCheck, e) {\n    var currLi = closest(wrapper, '.' + LISTITEM);\n    var eventArgs = this.getCheckEvent(wrapper, isCheck ? 'uncheck' : 'check', e);\n    eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);\n    this.trigger('nodeChecked', eventArgs);\n  };\n\n  TreeView.prototype.triggerClickEvent = function (e, li) {\n    var eventArgs = {\n      event: e,\n      node: li\n    };\n    this.trigger('nodeClicked', eventArgs);\n  };\n\n  TreeView.prototype.expandNode = function (currLi, icon, loaded) {\n    var _this = this;\n\n    this.renderReactTemplates();\n\n    if (icon.classList.contains(LOAD)) {\n      this.hideSpinner(icon);\n    }\n\n    if (!this.initialRender) {\n      icon.classList.add('interaction');\n    }\n\n    if (loaded !== true || loaded === true && currLi.classList.contains('e-expanded')) {\n      if (this.preventExpand !== true) {\n        removeClass([icon], EXPANDABLE);\n        addClass([icon], COLLAPSIBLE);\n        var start_1 = 0;\n        var end_1 = 0;\n        var proxy_1 = this;\n        var ul_1 = select('.' + PARENTITEM, currLi);\n        var liEle_1 = currLi;\n        this.setHeight(liEle_1, ul_1);\n        var activeElement_1 = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n\n        if (this.isAnimate && !this.isRefreshed) {\n          this.aniObj.animate(ul_1, {\n            name: this.animation.expand.effect,\n            duration: this.animation.expand.duration,\n            timingFunction: this.animation.expand.easing,\n            begin: function (args) {\n              liEle_1.style.overflow = 'hidden';\n\n              if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                activeElement_1.classList.add(ITEM_ANIMATION_ACTIVE);\n              }\n\n              start_1 = liEle_1.offsetHeight;\n              end_1 = select('.' + TEXTWRAP, currLi).offsetHeight;\n            },\n            progress: function (args) {\n              args.element.style.display = 'block';\n              proxy_1.animateHeight(args, start_1, end_1);\n            },\n            end: function (args) {\n              args.element.style.display = 'block';\n\n              if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                activeElement_1.classList.remove(ITEM_ANIMATION_ACTIVE);\n              }\n\n              _this.expandedNode(liEle_1, ul_1, icon);\n            }\n          });\n        } else {\n          this.expandedNode(liEle_1, ul_1, icon);\n        }\n      }\n    } else {\n      var ul = select('.' + PARENTITEM, currLi);\n      ul.style.display = 'none';\n\n      if (this.fields.dataSource instanceof DataManager === true) {\n        this.preventExpand = false;\n      }\n    }\n\n    if (this.initialRender) {\n      icon.classList.add('interaction');\n    }\n  };\n\n  TreeView.prototype.expandedNode = function (currLi, ul, icon) {\n    ul.style.display = 'block';\n    currLi.style.display = 'block';\n    currLi.style.overflow = '';\n    currLi.style.height = '';\n    removeClass([icon], PROCESS);\n    this.addExpand(currLi);\n\n    if (this.allowTextWrap && this.isLoaded && this.isFirstRender) {\n      this.updateWrap(currLi);\n      this.isFirstRender = false;\n    }\n\n    if (this.isLoaded && this.expandArgs && !this.isRefreshed) {\n      this.expandArgs = this.getExpandEvent(currLi, null);\n      this.trigger('nodeExpanded', this.expandArgs);\n    }\n  };\n\n  TreeView.prototype.addExpand = function (liEle) {\n    liEle.setAttribute('aria-expanded', 'true');\n    removeClass([liEle], NODECOLLAPSED);\n    var id = liEle.getAttribute('data-uid');\n\n    if (!isNOU(id) && this.expandedNodes.indexOf(id) === -1) {\n      this.expandedNodes.push(id);\n    }\n  };\n\n  TreeView.prototype.collapseNode = function (currLi, icon, e) {\n    var _this = this;\n\n    if (icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      addClass([icon], PROCESS);\n    }\n\n    var colArgs;\n\n    if (this.isLoaded) {\n      colArgs = this.getExpandEvent(currLi, e);\n      this.trigger('nodeCollapsing', colArgs, function (observedArgs) {\n        if (observedArgs.cancel) {\n          removeClass([icon], PROCESS);\n        } else {\n          _this.nodeCollapseAction(currLi, icon, observedArgs);\n        }\n      });\n    } else {\n      this.nodeCollapseAction(currLi, icon, colArgs);\n    }\n  };\n\n  TreeView.prototype.nodeCollapseAction = function (currLi, icon, colArgs) {\n    var _this = this;\n\n    removeClass([icon], COLLAPSIBLE);\n    addClass([icon], EXPANDABLE);\n    var start = 0;\n    var end = 0;\n    var proxy = this;\n    var ul = select('.' + PARENTITEM, currLi);\n    var liEle = currLi;\n    var activeElement = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n\n    if (this.isAnimate) {\n      this.aniObj.animate(ul, {\n        name: this.animation.collapse.effect,\n        duration: this.animation.collapse.duration,\n        timingFunction: this.animation.collapse.easing,\n        begin: function (args) {\n          liEle.style.overflow = 'hidden';\n\n          if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n            activeElement.classList.add(ITEM_ANIMATION_ACTIVE);\n          }\n\n          start = select('.' + TEXTWRAP, currLi).offsetHeight;\n          end = liEle.offsetHeight;\n        },\n        progress: function (args) {\n          proxy.animateHeight(args, start, end);\n        },\n        end: function (args) {\n          args.element.style.display = 'none';\n\n          if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n            activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);\n          }\n\n          _this.collapsedNode(liEle, ul, icon, colArgs);\n        }\n      });\n    } else {\n      this.collapsedNode(liEle, ul, icon, colArgs);\n    }\n  };\n\n  TreeView.prototype.collapsedNode = function (liEle, ul, icon, colArgs) {\n    ul.style.display = 'none';\n    liEle.style.overflow = '';\n    liEle.style.height = '';\n    removeClass([icon], PROCESS);\n    this.removeExpand(liEle);\n\n    if (this.isLoaded) {\n      colArgs = this.getExpandEvent(liEle, null);\n      this.trigger('nodeCollapsed', colArgs);\n    }\n  };\n\n  TreeView.prototype.removeExpand = function (liEle, toRemove) {\n    if (toRemove) {\n      liEle.removeAttribute('aria-expanded');\n    } else {\n      this.disableExpandAttr(liEle);\n    }\n\n    var index = this.expandedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      this.expandedNodes.splice(index, 1);\n    }\n  };\n\n  TreeView.prototype.disableExpandAttr = function (liEle) {\n    liEle.setAttribute('aria-expanded', 'false');\n    addClass([liEle], NODECOLLAPSED);\n  };\n\n  TreeView.prototype.setHeight = function (currLi, ul) {\n    ul.style.display = 'block';\n    ul.style.visibility = 'hidden';\n    currLi.style.height = currLi.offsetHeight + 'px';\n    ul.style.display = 'none';\n    ul.style.visibility = '';\n  };\n\n  TreeView.prototype.animateHeight = function (args, start, end) {\n    var remaining = (args.duration - args.timeStamp) / args.duration;\n    var currentHeight = (end - start) * remaining + start;\n    args.element.parentElement.style.height = currentHeight + 'px';\n  };\n\n  TreeView.prototype.renderChildNodes = function (parentLi, expandChild, callback, loaded) {\n    var _this = this;\n\n    var eicon = select('div.' + ICON, parentLi);\n\n    if (isNOU(eicon)) {\n      return;\n    }\n\n    this.showSpinner(eicon);\n    var childItems;\n    /* eslint-disable */\n\n    if (this.fields.dataSource instanceof DataManager) {\n      var level = this.parents(parentLi, '.' + PARENTITEM).length;\n      var mapper_2 = this.getChildFields(this.fields, level, 1);\n\n      if (isNOU(mapper_2) || isNOU(mapper_2.dataSource)) {\n        detach(eicon);\n        this.removeExpand(parentLi, true);\n        return;\n      }\n\n      this.treeList.push('false');\n\n      if (this.fields.dataSource instanceof DataManager && this.isOffline) {\n        this.treeList.pop();\n        childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n        this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n      } else {\n        mapper_2.dataSource.executeQuery(this.getQuery(mapper_2, parentLi.getAttribute('data-uid'))).then(function (e) {\n          _this.treeList.pop();\n\n          childItems = e.result;\n\n          if (_this.dataType === 1) {\n            _this.dataType = 2;\n          }\n\n          _this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n        }).catch(function (e) {\n          _this.trigger('actionFailure', {\n            error: e\n          });\n        });\n      }\n    } else {\n      childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n      this.currentLoadData = this.getSortedData(childItems);\n\n      if (isNOU(childItems) || childItems.length === 0) {\n        detach(eicon);\n        this.removeExpand(parentLi, true);\n        return;\n      } else {\n        this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n        parentLi.appendChild(ListBase.createList(this.createElement, this.currentLoadData, this.listBaseOption));\n        this.expandNode(parentLi, eicon, loaded);\n        this.setSelectionForChildNodes(childItems);\n        this.ensureCheckNode(parentLi);\n        this.finalizeNode(parentLi);\n        this.disableTreeNodes(childItems);\n        this.renderSubChild(parentLi, expandChild, loaded);\n      }\n    }\n  };\n\n  TreeView.prototype.loadChild = function (childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {\n    this.currentLoadData = childItems;\n\n    if (isNOU(childItems) || childItems.length === 0) {\n      detach(eicon);\n      this.removeExpand(parentLi, true);\n    } else {\n      this.updateListProp(mapper);\n\n      if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n        var id = parentLi.getAttribute('data-uid');\n        var nodeData = this.getNodeObject(id);\n        setValue('child', childItems, nodeData);\n      }\n\n      this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n      parentLi.appendChild(ListBase.createList(this.createElement, childItems, this.listBaseOption));\n      this.expandNode(parentLi, eicon, loaded);\n      this.setSelectionForChildNodes(childItems);\n      this.ensureCheckNode(parentLi);\n      this.finalizeNode(parentLi);\n      this.disableTreeNodes(childItems);\n      this.renderSubChild(parentLi, expandChild, loaded);\n    }\n\n    if (callback) {\n      callback();\n    }\n\n    if (this.treeList.length === 0 && !this.isLoaded) {\n      this.finalize();\n    }\n  };\n\n  TreeView.prototype.disableTreeNodes = function (childItems) {\n    var i = 0;\n\n    while (i < childItems.length) {\n      var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n\n      if (this.disableNode !== undefined && this.disableNode.indexOf(id) !== -1) {\n        this.doDisableAction([id]);\n      }\n\n      i++;\n    }\n  };\n  /**\n   * Sets the child Item in selectedState while rendering the child node\n   */\n\n\n  TreeView.prototype.setSelectionForChildNodes = function (nodes) {\n    var i;\n\n    for (i = 0; i < nodes.length; i++) {\n      var id = nodes[i][this.fields.id] ? nodes[i][this.fields.id].toString() : null;\n\n      if (this.selectedNodes !== undefined && this.selectedNodes.indexOf(id) !== -1) {\n        this.doSelectionAction();\n      }\n    }\n  };\n\n  TreeView.prototype.ensureCheckNode = function (element) {\n    if (this.showCheckBox) {\n      this.ele = this.checkedElement ? this.checkedElement.indexOf(element.getAttribute('data-uid')) : null;\n\n      if (this.autoCheck) {\n        this.ensureChildCheckState(element);\n        this.ensureParentCheckState(element);\n      }\n    }\n\n    this.currentLoadData = null;\n  };\n\n  TreeView.prototype.getFields = function (mapper, nodeLevel, dataLevel) {\n    if (nodeLevel === dataLevel) {\n      return mapper;\n    } else {\n      return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n    }\n  };\n\n  TreeView.prototype.getChildFields = function (mapper, nodeLevel, dataLevel) {\n    var childData;\n\n    if (nodeLevel === dataLevel) {\n      return this.getChildMapper(mapper);\n    } else {\n      return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n    }\n  };\n\n  TreeView.prototype.getChildMapper = function (mapper) {\n    return typeof mapper.child === 'string' || isNOU(mapper.child) ? mapper : mapper.child;\n  };\n\n  TreeView.prototype.getChildNodes = function (obj, parentId, isRoot) {\n    if (isRoot === void 0) {\n      isRoot = false;\n    }\n\n    var childNodes;\n\n    if (isNOU(obj)) {\n      return childNodes;\n    } else if (this.dataType === 1) {\n      return this.getChildGroup(this.groupedData, parentId, isRoot);\n    } else {\n      if (typeof this.fields.child === 'string') {\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n          var dataId = getValue(this.fields.id, obj[i]);\n\n          if (dataId && dataId.toString() === parentId) {\n            return getValue(this.fields.child, obj[i]);\n          } else if (!isNOU(getValue(this.fields.child, obj[i]))) {\n            childNodes = this.getChildNodes(getValue(this.fields.child, obj[i]), parentId);\n\n            if (childNodes !== undefined) {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    return childNodes;\n  };\n\n  TreeView.prototype.getChildGroup = function (data, parentId, isRoot) {\n    var childNodes;\n\n    if (isNOU(data)) {\n      return childNodes;\n    }\n\n    for (var i = 0, objlen = data.length; i < objlen; i++) {\n      if (!isNOU(data[i][0]) && !isNOU(getValue(this.fields.parentID, data[i][0]))) {\n        if (getValue(this.fields.parentID, data[i][0]).toString() === parentId) {\n          return data[i];\n        }\n      } else if (isRoot) {\n        return data[i];\n      } else {\n        return [];\n      }\n    }\n\n    return childNodes;\n  };\n\n  TreeView.prototype.renderSubChild = function (element, expandChild, loaded) {\n    if (expandChild) {\n      var cIcons = selectAll('.' + EXPANDABLE, element);\n\n      for (var i = 0, len = cIcons.length; i < len; i++) {\n        var icon = cIcons[i];\n\n        if (element.querySelector('.e-icons') !== cIcons[i]) {\n          var curLi = closest(icon, '.' + LISTITEM);\n          this.expandArgs = this.getExpandEvent(curLi, null);\n\n          if (loaded !== true) {\n            this.trigger('nodeExpanding', this.expandArgs);\n          }\n\n          this.renderChildNodes(curLi, expandChild, null, loaded);\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.toggleSelect = function (li, e, multiSelect) {\n    if (!li.classList.contains('e-disable')) {\n      if (this.allowMultiSelection && (e && e.ctrlKey || multiSelect) && this.isActive(li)) {\n        this.unselectNode(li, e);\n      } else {\n        this.selectNode(li, e, multiSelect);\n      }\n    }\n  };\n\n  TreeView.prototype.isActive = function (li) {\n    return li.classList.contains(ACTIVE) ? true : false;\n  };\n\n  TreeView.prototype.selectNode = function (li, e, multiSelect) {\n    var _this = this;\n\n    if (isNOU(li) || !this.allowMultiSelection && this.isActive(li) && !isNOU(e)) {\n      this.setFocusElement(li);\n      return;\n    }\n\n    var eventArgs;\n\n    if (this.isLoaded) {\n      eventArgs = this.getSelectEvent(li, 'select', e);\n      this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          _this.nodeSelectAction(li, e, observedArgs, multiSelect);\n        }\n      });\n    } else {\n      this.nodeSelectAction(li, e, eventArgs, multiSelect);\n    }\n  };\n\n  TreeView.prototype.nodeSelectAction = function (li, e, eventArgs, multiSelect) {\n    if (!this.allowMultiSelection || !multiSelect && (!e || e && !e.ctrlKey)) {\n      this.removeSelectAll();\n    }\n\n    if (this.allowMultiSelection && e && e.shiftKey) {\n      if (!this.startNode) {\n        this.startNode = li;\n      }\n\n      var startIndex = this.liList.indexOf(this.startNode);\n      var endIndex = this.liList.indexOf(li);\n\n      if (startIndex > endIndex) {\n        var temp = startIndex;\n        startIndex = endIndex;\n        endIndex = temp;\n      }\n\n      for (var i = startIndex; i <= endIndex; i++) {\n        var currNode = this.liList[i];\n\n        if (isVisible(currNode) && !currNode.classList.contains('e-disable')) {\n          this.addSelect(currNode);\n        }\n      }\n    } else {\n      this.startNode = li;\n      this.addSelect(li);\n    }\n\n    this.setFocusElement(li);\n\n    if (this.isLoaded) {\n      eventArgs.nodeData = this.getNodeData(li);\n      this.trigger('nodeSelected', eventArgs);\n    }\n  };\n\n  TreeView.prototype.unselectNode = function (li, e) {\n    var _this = this;\n\n    var eventArgs;\n\n    if (this.isLoaded) {\n      eventArgs = this.getSelectEvent(li, 'un-select', e);\n      this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n        if (!observedArgs.cancel) {\n          _this.nodeUnselectAction(li, observedArgs);\n        }\n      });\n    } else {\n      this.nodeUnselectAction(li, eventArgs);\n    }\n  };\n\n  TreeView.prototype.nodeUnselectAction = function (li, eventArgs) {\n    this.removeSelect(li);\n    this.setFocusElement(li);\n\n    if (this.isLoaded) {\n      eventArgs.nodeData = this.getNodeData(li);\n      this.trigger('nodeSelected', eventArgs);\n    }\n  };\n\n  TreeView.prototype.setFocusElement = function (li) {\n    if (!isNOU(li)) {\n      var focusedNode = this.getFocusedNode();\n\n      if (focusedNode) {\n        removeClass([focusedNode], FOCUS);\n      }\n\n      addClass([li], FOCUS);\n      this.updateIdAttr(focusedNode, li);\n    }\n  };\n\n  TreeView.prototype.addSelect = function (liEle) {\n    liEle.setAttribute('aria-selected', 'true');\n    addClass([liEle], ACTIVE);\n    var id = liEle.getAttribute('data-uid');\n\n    if (!isNOU(id) && this.selectedNodes.indexOf(id) === -1) {\n      this.selectedNodes.push(id);\n    }\n  };\n\n  TreeView.prototype.removeSelect = function (liEle) {\n    if (this.allowMultiSelection) {\n      liEle.setAttribute('aria-selected', 'false');\n    } else {\n      liEle.removeAttribute('aria-selected');\n    }\n\n    removeClass([liEle], ACTIVE);\n    var index = this.selectedNodes.indexOf(liEle.getAttribute('data-uid'));\n\n    if (index > -1) {\n      this.selectedNodes.splice(index, 1);\n    }\n  };\n\n  TreeView.prototype.removeSelectAll = function () {\n    var selectedLI = this.element.querySelectorAll('.' + ACTIVE);\n\n    for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {\n      var ele = selectedLI_1[_i];\n\n      if (this.allowMultiSelection) {\n        ele.setAttribute('aria-selected', 'false');\n      } else {\n        ele.removeAttribute('aria-selected');\n      }\n    }\n\n    removeClass(selectedLI, ACTIVE);\n    this.setProperties({\n      selectedNodes: []\n    }, true);\n  };\n\n  TreeView.prototype.getSelectEvent = function (currLi, action, e) {\n    var nodeData = this.getNodeData(currLi);\n    return {\n      action: action,\n      cancel: false,\n      isInteracted: isNOU(e) ? false : true,\n      node: currLi,\n      nodeData: nodeData\n    };\n  };\n\n  TreeView.prototype.setExpandOnType = function () {\n    this.expandOnType = this.expandOn === 'Auto' ? Browser.isDevice ? 'Click' : 'DblClick' : this.expandOn;\n  };\n\n  TreeView.prototype.expandHandler = function (e) {\n    var target = e.originalEvent.target;\n\n    if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || this.showCheckBox && closest(target, '.' + CHECKBOXWRAP)) {\n      return;\n    } else {\n      this.expandCollapseAction(closest(target, '.' + LISTITEM), e);\n    }\n  };\n\n  TreeView.prototype.expandCollapseAction = function (currLi, e) {\n    var icon = select('div.' + ICON, currLi);\n\n    if (!icon || icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      var classList = icon.classList;\n\n      if (classList.contains(EXPANDABLE)) {\n        this.expandAction(currLi, icon, e);\n      } else if (classList.contains(COLLAPSIBLE)) {\n        this.collapseNode(currLi, icon, e);\n      }\n    }\n  };\n\n  TreeView.prototype.expandAction = function (currLi, icon, e, expandChild, callback) {\n    var _this = this;\n\n    if (icon.classList.contains(PROCESS)) {\n      return;\n    } else {\n      addClass([icon], PROCESS);\n    }\n\n    if (this.isLoaded && !this.isRefreshed) {\n      this.expandArgs = this.getExpandEvent(currLi, e);\n      this.trigger('nodeExpanding', this.expandArgs, function (observedArgs) {\n        if (observedArgs.cancel) {\n          removeClass([icon], PROCESS);\n        } else {\n          _this.nodeExpandAction(currLi, icon, expandChild, callback);\n        }\n      });\n    } else {\n      this.nodeExpandAction(currLi, icon, expandChild, callback);\n    }\n  };\n\n  TreeView.prototype.nodeExpandAction = function (currLi, icon, expandChild, callback) {\n    var ul = select('.' + PARENTITEM, currLi);\n\n    if (ul && ul.nodeName === 'UL') {\n      this.expandNode(currLi, icon);\n    } else {\n      this.isFirstRender = true;\n      this.renderChildNodes(currLi, expandChild, callback);\n      var liEles = selectAll('.' + LISTITEM, currLi);\n\n      for (var i = 0; i < liEles.length; i++) {\n        var id = this.getId(liEles[i]);\n\n        if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== undefined) {\n          var icon_1 = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEles[i]));\n\n          if (!isNOU(icon_1)) {\n            this.expandAction(liEles[i], icon_1, null);\n          }\n\n          this.expandChildren.splice(this.expandChildren.indexOf(id), 1);\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.keyActionHandler = function (e) {\n    var _this = this;\n\n    var target = e.target;\n    var focusedNode = this.getFocusedNode();\n\n    if (target && target.classList.contains(INPUT)) {\n      var inpEle = target;\n\n      if (e.action === 'enter') {\n        inpEle.blur();\n        this.element.focus();\n        addClass([focusedNode], HOVER);\n      } else if (e.action === 'escape') {\n        inpEle.value = this.oldText;\n        inpEle.blur();\n        this.element.focus();\n        addClass([focusedNode], HOVER);\n      }\n\n      return;\n    }\n\n    e.preventDefault();\n    var eventArgs = {\n      cancel: false,\n      event: e,\n      node: focusedNode\n    };\n    this.trigger('keyPress', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        switch (e.action) {\n          case 'space':\n            if (_this.showCheckBox) {\n              _this.checkNode(e);\n            }\n\n            break;\n\n          case 'moveRight':\n            _this.openNode(_this.enableRtl ? false : true, e);\n\n            break;\n\n          case 'moveLeft':\n            _this.openNode(_this.enableRtl ? true : false, e);\n\n            break;\n\n          case 'shiftDown':\n            _this.shiftKeySelect(true, e);\n\n            break;\n\n          case 'moveDown':\n          case 'ctrlDown':\n          case 'csDown':\n            _this.navigateNode(true);\n\n            break;\n\n          case 'shiftUp':\n            _this.shiftKeySelect(false, e);\n\n            break;\n\n          case 'moveUp':\n          case 'ctrlUp':\n          case 'csUp':\n            _this.navigateNode(false);\n\n            break;\n\n          case 'home':\n          case 'shiftHome':\n          case 'ctrlHome':\n          case 'csHome':\n            _this.navigateRootNode(true);\n\n            break;\n\n          case 'end':\n          case 'shiftEnd':\n          case 'ctrlEnd':\n          case 'csEnd':\n            _this.navigateRootNode(false);\n\n            break;\n\n          case 'enter':\n          case 'ctrlEnter':\n          case 'shiftEnter':\n          case 'csEnter':\n            _this.toggleSelect(focusedNode, e);\n\n            break;\n\n          case 'f2':\n            if (_this.allowEditing && !focusedNode.classList.contains('e-disable')) {\n              _this.createTextbox(focusedNode, e);\n            }\n\n            break;\n\n          case 'ctrlA':\n            if (_this.allowMultiSelection) {\n              var sNodes = selectAll('.' + LISTITEM + ':not(.' + ACTIVE + ')', _this.element);\n\n              _this.selectGivenNodes(sNodes);\n            }\n\n            break;\n        }\n      }\n    });\n  };\n\n  TreeView.prototype.navigateToFocus = function (isUp) {\n    var focusNode = this.getFocusedNode().querySelector('.' + TEXTWRAP);\n    var pos = focusNode.getBoundingClientRect();\n    var parent = this.getScrollParent(this.element);\n\n    if (!isNOU(parent)) {\n      var parentPos = parent.getBoundingClientRect();\n\n      if (pos.bottom > parentPos.bottom) {\n        parent.scrollTop += pos.bottom - parentPos.bottom;\n      } else if (pos.top < parentPos.top) {\n        parent.scrollTop -= parentPos.top - pos.top;\n      }\n    }\n\n    var isVisible = this.isVisibleInViewport(focusNode);\n\n    if (!isVisible) {\n      focusNode.scrollIntoView(isUp);\n    }\n  };\n\n  TreeView.prototype.isVisibleInViewport = function (txtWrap) {\n    var pos = txtWrap.getBoundingClientRect();\n    return pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) && pos.right <= (window.innerWidth || document.documentElement.clientWidth);\n  };\n\n  TreeView.prototype.getScrollParent = function (node) {\n    if (isNOU(node)) {\n      return null;\n    }\n\n    return node.scrollHeight > node.clientHeight ? node : this.getScrollParent(node.parentElement);\n  };\n\n  TreeView.prototype.shiftKeySelect = function (isTowards, e) {\n    if (this.allowMultiSelection) {\n      var focusedNode = this.getFocusedNode();\n      var nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);\n      this.removeHover();\n      this.setFocusElement(nextNode);\n      this.toggleSelect(nextNode, e, false);\n      this.navigateToFocus(!isTowards);\n    } else {\n      this.navigateNode(isTowards);\n    }\n  };\n\n  TreeView.prototype.checkNode = function (e) {\n    var focusedNode = this.getFocusedNode();\n    var checkWrap = select('.' + CHECKBOXWRAP, focusedNode);\n    var isChecked = select(' .' + CHECKBOXFRAME, checkWrap).classList.contains(CHECK);\n\n    if (!focusedNode.classList.contains('e-disable')) {\n      if (focusedNode.getElementsByClassName(\"e-checkbox-disabled\").length == 0) {\n        this.validateCheckNode(checkWrap, isChecked, focusedNode, e);\n      }\n    }\n  };\n\n  TreeView.prototype.validateCheckNode = function (checkWrap, isCheck, li, e) {\n    var _this = this;\n\n    var currLi = closest(checkWrap, '.' + LISTITEM);\n    this.checkActionNodes = [];\n    var ariaState = !isCheck ? 'true' : 'false';\n\n    if (!isNOU(ariaState)) {\n      checkWrap.setAttribute('aria-checked', ariaState);\n    }\n\n    var eventArgs = this.getCheckEvent(currLi, isCheck ? 'uncheck' : 'check', e);\n    this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        _this.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);\n      }\n    });\n  };\n\n  TreeView.prototype.nodeCheckingAction = function (checkWrap, isCheck, li, eventArgs, e) {\n    if (this.checkedElement.indexOf(li.getAttribute('data-uid')) === -1) {\n      this.checkedElement.push(li.getAttribute('data-uid'));\n\n      if (this.autoCheck) {\n        var child = this.getChildNodes(this.treeData, li.getAttribute('data-uid'));\n        child !== null ? this.allCheckNode(child, this.checkedElement, null, null, false) : child = null;\n      }\n    }\n\n    this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true);\n\n    if (this.autoCheck) {\n      this.ensureChildCheckState(li);\n      this.ensureParentCheckState(closest(closest(li, '.' + PARENTITEM), '.' + LISTITEM));\n      var doCheck = void 0;\n\n      if (eventArgs.action === 'check') {\n        doCheck = true;\n      } else if (eventArgs.action === 'uncheck') {\n        doCheck = false;\n      }\n\n      this.ensureStateChange(li, doCheck);\n    }\n\n    this.nodeCheckedEvent(checkWrap, isCheck, e);\n  };\n  /**\n   * Update checkedNodes when UI interaction happens before the child node renders in DOM\n   */\n\n\n  TreeView.prototype.ensureStateChange = function (li, doCheck) {\n    var childElement = select('.' + PARENTITEM, li);\n    var parentIndex = li.getAttribute('data-uid');\n    var mapper = this.fields;\n\n    if (this.dataType === 1 && this.autoCheck) {\n      var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', parentIndex, true));\n\n      for (var i = 0; i < resultData.length; i++) {\n        var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n        var isCheck = resultData[i][this.fields.isChecked] ? resultData[i][this.fields.isChecked].toString() : null;\n\n        if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {\n          this.checkedNodes.push(resultId);\n          var childItems = this.getChildNodes(this.treeData, resultId);\n          this.getChildItems(childItems, doCheck);\n\n          if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n          }\n        } else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null && this.checkedNodes.indexOf(resultId) !== -1) {\n          this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);\n\n          if (isCheck === 'true') {\n            this.updateField(this.treeData, this.fields, resultId, 'isChecked', null);\n          }\n\n          if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null || this.parentNodeCheck.indexOf(resultId) !== -1) {\n            var childNodes = this.getChildNodes(this.treeData, resultId);\n            this.getChildItems(childNodes, doCheck);\n\n            if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n              this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n            }\n          }\n        } else {\n          var childItems = this.getChildNodes(this.treeData, resultId);\n          this.getChildItems(childItems, doCheck);\n        }\n      }\n    } else if (this.dataType === 1 && !this.autoCheck) {\n      if (!doCheck) {\n        var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n\n        for (var i = 0; i < checkedData.length; i++) {\n          var id = checkedData[i][this.fields.id] ? checkedData[i][this.fields.id].toString() : null;\n\n          if (this.checkedNodes.indexOf(id) !== -1) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n          }\n\n          this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n        }\n\n        this.checkedNodes = [];\n      } else {\n        for (var i = 0; i < this.treeData.length; i++) {\n          var checkedId = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : null;\n\n          if (this.checkedNodes.indexOf(checkedId) === -1) {\n            this.checkedNodes.push(checkedId);\n          }\n        }\n      }\n    } else {\n      var childItems = this.getChildNodes(this.treeData, parentIndex);\n\n      if (childItems) {\n        this.childStateChange(childItems, parentIndex, childElement, doCheck);\n      }\n    }\n  };\n\n  TreeView.prototype.getChildItems = function (childItems, doCheck) {\n    for (var i = 0; i < childItems.length; i++) {\n      var childId = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n      var childIsCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;\n\n      if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {\n        this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);\n      }\n\n      if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {\n        this.checkedNodes.push(childId);\n      }\n\n      if (childIsCheck === 'true' && !doCheck) {\n        this.updateField(this.treeData, this.fields, childId, 'isChecked', null);\n      }\n\n      var subChildItems = this.getChildNodes(this.treeData, childId);\n\n      if (subChildItems.length > 0) {\n        this.getChildItems(subChildItems, doCheck);\n      }\n    }\n  };\n  /**\n   * Update checkedNodes when UI interaction happens before the child node renders in DOM for hierarchical DS\n   */\n\n\n  TreeView.prototype.childStateChange = function (childItems, parent, childElement, doCheck) {\n    for (var i = 0; i < childItems.length; i++) {\n      var checkedChild = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : '';\n      var isCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;\n\n      if (this.autoCheck) {\n        if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n          this.checkedNodes.push(checkedChild);\n\n          if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {\n            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);\n          }\n        } else if (this.checkedNodes.indexOf(parent) === -1 && this.checkedNodes.indexOf(checkedChild) !== -1 && !doCheck) {\n          this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n\n          if (isCheck === 'true') {\n            this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n          }\n        }\n      } else if (!this.autoCheck) {\n        if (!doCheck) {\n          if (this.checkedNodes.indexOf(checkedChild) !== -1) {\n            this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n          }\n\n          this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n          this.checkedNodes = [];\n        } else {\n          if (this.checkedNodes.indexOf(checkedChild) === -1) {\n            this.checkedNodes.push(checkedChild);\n          }\n        }\n      }\n\n      var subChild = this.getChildNodes([childItems[i]], checkedChild);\n\n      if (subChild) {\n        this.childStateChange(subChild, parent, childElement, doCheck);\n      }\n    }\n  }; //This method can be used to get all child nodes of a parent by passing the children of a parent along with 'validateCheck' set to false\n\n\n  TreeView.prototype.allCheckNode = function (child, newCheck, checked, childCheck, validateCheck) {\n    if (child) {\n      for (var length_1 = 0; length_1 < child.length; length_1++) {\n        var childId = getValue(this.fields.id, child[length_1]);\n        var check = this.element.querySelector('[data-uid=\"' + childId + '\"]'); //Validates isChecked case while no UI interaction has been performed on the node or it's parent\n\n        if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {\n          if (check === null && !isNOU(child[length_1][this.fields.isChecked]) && newCheck.indexOf(childId.toString()) === -1 || childCheck === 0 || checked === 2) {\n            child[length_1][this.fields.isChecked] !== false || checked === 2 ? newCheck.push(childId.toString()) : childCheck = null;\n            childCheck = child[length_1][this.fields.isChecked] !== false || checked === 2 ? 0 : null;\n          }\n        } //Pushes child checked node done thro' UI interaction\n\n\n        if (newCheck.indexOf(childId.toString()) === -1 && isNOU(checked)) {\n          newCheck.push(childId.toString());\n        }\n\n        var hierChildId = getValue(this.fields.child.toString(), child[length_1]); //Gets if any next level children are available for child nodes\n\n        if (getValue(this.fields.hasChildren, child[length_1]) === true || hierChildId) {\n          var id = getValue(this.fields.id, child[length_1]);\n          var childId_1 = void 0;\n\n          if (this.dataType === 1) {\n            childId_1 = this.getChildNodes(this.treeData, id.toString());\n          } else {\n            childId_1 = hierChildId;\n          }\n\n          if (childId_1) {\n            isNOU(validateCheck) ? this.allCheckNode(childId_1, newCheck, checked, childCheck) : this.allCheckNode(childId_1, newCheck, checked, childCheck, validateCheck);\n            childCheck = null;\n          }\n        }\n\n        childCheck = null;\n      }\n    }\n  };\n\n  TreeView.prototype.openNode = function (toBeOpened, e) {\n    var focusedNode = this.getFocusedNode();\n    var icon = select('div.' + ICON, focusedNode);\n\n    if (toBeOpened) {\n      if (!icon) {\n        return;\n      } else if (icon.classList.contains(EXPANDABLE)) {\n        this.expandAction(focusedNode, icon, e);\n      } else {\n        this.focusNextNode(focusedNode, true);\n      }\n    } else {\n      if (icon && icon.classList.contains(COLLAPSIBLE)) {\n        this.collapseNode(focusedNode, icon, e);\n      } else {\n        var parentLi = closest(closest(focusedNode, '.' + PARENTITEM), '.' + LISTITEM);\n\n        if (!parentLi) {\n          return;\n        } else {\n          if (!parentLi.classList.contains('e-disable')) {\n            this.setFocus(focusedNode, parentLi);\n            this.navigateToFocus(true);\n          }\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.navigateNode = function (isTowards) {\n    var focusedNode = this.getFocusedNode();\n    this.focusNextNode(focusedNode, isTowards);\n  };\n\n  TreeView.prototype.navigateRootNode = function (isBackwards) {\n    var focusedNode = this.getFocusedNode();\n    var rootNode = isBackwards ? this.getRootNode() : this.getEndNode();\n\n    if (!rootNode.classList.contains('e-disable')) {\n      this.setFocus(focusedNode, rootNode);\n      this.navigateToFocus(isBackwards);\n    }\n  };\n\n  TreeView.prototype.getFocusedNode = function () {\n    var selectedItem;\n    var fNode = select('.' + LISTITEM + '.' + FOCUS, this.element);\n\n    if (isNOU(fNode)) {\n      selectedItem = select('.' + LISTITEM, this.element);\n    }\n\n    return isNOU(fNode) ? isNOU(selectedItem) ? this.element.firstElementChild : selectedItem : fNode;\n  };\n\n  TreeView.prototype.focusNextNode = function (li, isTowards) {\n    var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);\n    this.setFocus(li, nextNode);\n    this.navigateToFocus(!isTowards);\n\n    if (nextNode.classList.contains('e-disable')) {\n      var lastChild = nextNode.lastChild;\n\n      if (nextNode.previousSibling == null && nextNode.classList.contains('e-level-1')) {\n        this.focusNextNode(nextNode, true);\n      } else if (nextNode.nextSibling == null && nextNode.classList.contains('e-node-collapsed')) {\n        this.focusNextNode(nextNode, false);\n      } else if (nextNode.nextSibling == null && lastChild.classList.contains(TEXTWRAP)) {\n        this.focusNextNode(nextNode, false);\n      } else {\n        this.focusNextNode(nextNode, isTowards);\n      }\n    }\n  };\n\n  TreeView.prototype.getNextNode = function (li) {\n    var index = this.liList.indexOf(li);\n    var nextNode;\n\n    do {\n      index++;\n      nextNode = this.liList[index];\n\n      if (isNOU(nextNode)) {\n        return li;\n      }\n    } while (!isVisible(nextNode));\n\n    return nextNode;\n  };\n\n  TreeView.prototype.getPrevNode = function (li) {\n    var index = this.liList.indexOf(li);\n    var prevNode;\n\n    do {\n      index--;\n      prevNode = this.liList[index];\n\n      if (isNOU(prevNode)) {\n        return li;\n      }\n    } while (!isVisible(prevNode));\n\n    return prevNode;\n  };\n\n  TreeView.prototype.getRootNode = function () {\n    var index = 0;\n    var rootNode;\n\n    do {\n      rootNode = this.liList[index];\n      index++;\n    } while (!isVisible(rootNode));\n\n    return rootNode;\n  };\n\n  TreeView.prototype.getEndNode = function () {\n    var index = this.liList.length - 1;\n    var endNode;\n\n    do {\n      endNode = this.liList[index];\n      index--;\n    } while (!isVisible(endNode));\n\n    return endNode;\n  };\n\n  TreeView.prototype.setFocus = function (preNode, nextNode) {\n    removeClass([preNode], [HOVER, FOCUS]);\n\n    if (!nextNode.classList.contains('e-disable')) {\n      addClass([nextNode], [HOVER, FOCUS]);\n      this.updateIdAttr(preNode, nextNode);\n    }\n  };\n\n  TreeView.prototype.updateIdAttr = function (preNode, nextNode) {\n    this.element.removeAttribute('aria-activedescendant');\n\n    if (preNode) {\n      preNode.removeAttribute('id');\n    }\n\n    nextNode.setAttribute('id', this.element.id + '_active');\n    this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n  };\n\n  TreeView.prototype.focusIn = function () {\n    if (!this.mouseDownStatus) {\n      addClass([this.getFocusedNode()], HOVER);\n    }\n\n    this.mouseDownStatus = false;\n  };\n\n  TreeView.prototype.focusOut = function () {\n    removeClass([this.getFocusedNode()], HOVER);\n  };\n\n  TreeView.prototype.onMouseOver = function (e) {\n    var target = e.target;\n    var classList = target.classList;\n    var currentLi = closest(target, '.' + LISTITEM);\n\n    if (!currentLi || classList.contains(PARENTITEM) || classList.contains(LISTITEM)) {\n      this.removeHover();\n      return;\n    } else {\n      if (currentLi && !currentLi.classList.contains('e-disable')) {\n        this.setHover(currentLi);\n      }\n    }\n  };\n\n  TreeView.prototype.setHover = function (li) {\n    if (!li.classList.contains(HOVER)) {\n      this.removeHover();\n      addClass([li], HOVER);\n    }\n  };\n\n  ;\n\n  TreeView.prototype.onMouseLeave = function (e) {\n    this.removeHover();\n  };\n\n  TreeView.prototype.removeHover = function () {\n    var hoveredNode = selectAll('.' + HOVER, this.element);\n\n    if (hoveredNode && hoveredNode.length) {\n      removeClass(hoveredNode, HOVER);\n    }\n  };\n\n  ;\n\n  TreeView.prototype.getNodeData = function (currLi, fromDS) {\n    if (!isNOU(currLi) && currLi.classList.contains(LISTITEM) && !isNOU(closest(currLi, '.' + CONTROL)) && closest(currLi, '.' + CONTROL).classList.contains(ROOT)) {\n      var id = currLi.getAttribute('data-uid');\n      var text = this.getText(currLi, fromDS);\n      var pNode = closest(currLi.parentNode, '.' + LISTITEM);\n      var pid = pNode ? pNode.getAttribute('data-uid') : null;\n      var selected = currLi.classList.contains(ACTIVE);\n      var expanded = currLi.getAttribute('aria-expanded') === 'true' ? true : false;\n      var hasChildren = currLi.getAttribute('aria-expanded') !== null ? true : (select('.' + EXPANDABLE, currLi) || select('.' + COLLAPSIBLE, currLi)) != null ? true : false;\n      var checked = null;\n      var checkboxElement = select('.' + CHECKBOXWRAP, currLi);\n\n      if (this.showCheckBox && checkboxElement) {\n        checked = checkboxElement.getAttribute('aria-checked');\n      }\n\n      return {\n        id: id,\n        text: text,\n        parentID: pid,\n        selected: selected,\n        expanded: expanded,\n        isChecked: checked,\n        hasChildren: hasChildren\n      };\n    }\n\n    return {\n      id: '',\n      text: '',\n      parentID: '',\n      selected: false,\n      expanded: false,\n      isChecked: '',\n      hasChildren: false\n    };\n  };\n\n  TreeView.prototype.getText = function (currLi, fromDS) {\n    if (fromDS) {\n      var nodeData = this.getNodeObject(currLi.getAttribute('data-uid'));\n      var level = parseFloat(currLi.getAttribute('aria-level'));\n      var nodeFields = this.getFields(this.fields, level, 1);\n      return getValue(nodeFields.text, nodeData);\n    }\n\n    return select('.' + LISTTEXT, currLi).textContent;\n  };\n\n  TreeView.prototype.getExpandEvent = function (currLi, e) {\n    var nodeData = this.getNodeData(currLi);\n    return {\n      cancel: false,\n      isInteracted: isNOU(e) ? false : true,\n      node: currLi,\n      nodeData: nodeData,\n      event: e\n    };\n  };\n\n  TreeView.prototype.renderNodeTemplate = function (data, textEle, dataId) {\n    var tempArr = this.nodeTemplateFn(data, this, 'nodeTemplate' + dataId, this.element.id + 'nodeTemplate', this.isStringTemplate, undefined, textEle, this.root);\n\n    if (tempArr) {\n      tempArr = Array.prototype.slice.call(tempArr);\n      append(tempArr, textEle);\n    }\n  };\n\n  TreeView.prototype.destroyTemplate = function (liEle) {\n    this.clearTemplate(['nodeTemplate' + liEle.getAttribute('data-uid')]);\n  };\n\n  TreeView.prototype.reRenderNodes = function () {\n    this.updateListProp(this.fields);\n\n    if (Browser.isIE) {\n      this.ulElement = this.element.querySelector('.e-list-parent.e-ul');\n      this.ulElement.parentElement.removeChild(this.ulElement);\n    } else {\n      this.element.innerHTML = '';\n    }\n\n    if (!isNOU(this.nodeTemplateFn)) {\n      this.clearTemplate();\n    }\n\n    this.setTouchClass();\n    this.setProperties({\n      selectedNodes: [],\n      checkedNodes: [],\n      expandedNodes: []\n    }, true);\n    this.checkedElement = [];\n    this.isLoaded = false;\n    this.setDataBinding(true);\n  };\n\n  TreeView.prototype.setCssClass = function (oldClass, newClass) {\n    if (!isNOU(oldClass) && oldClass !== '') {\n      removeClass([this.element], oldClass.split(' '));\n    }\n\n    if (!isNOU(newClass) && newClass !== '') {\n      addClass([this.element], newClass.split(' '));\n    }\n  };\n\n  TreeView.prototype.editingHandler = function (e) {\n    var target = e.target;\n\n    if (!target || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) || target.classList.contains(ICON) || target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {\n      return;\n    } else {\n      var liEle = closest(target, '.' + LISTITEM);\n      this.createTextbox(liEle, e);\n    }\n  };\n\n  TreeView.prototype.createTextbox = function (liEle, e) {\n    var _this = this;\n\n    var oldInpEle = select('.' + TREEINPUT, this.element);\n\n    if (oldInpEle) {\n      oldInpEle.blur();\n    }\n\n    var textEle = select('.' + LISTTEXT, liEle);\n    this.updateOldText(liEle);\n    var innerEle = this.createElement('input', {\n      className: TREEINPUT,\n      attrs: {\n        value: this.oldText\n      }\n    });\n    var eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);\n    this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        var inpWidth = textEle.offsetWidth + 5;\n        var style_1 = 'width:' + inpWidth + 'px';\n        addClass([liEle], EDITING);\n\n        if (!isNOU(_this.nodeTemplateFn)) {\n          _this.destroyTemplate(liEle);\n        }\n\n        if (_this.isReact) {\n          setTimeout(function () {\n            _this.renderTextBox(eventArgs, textEle, style_1);\n          }, 5);\n        } else {\n          _this.renderTextBox(eventArgs, textEle, style_1);\n        }\n      }\n    });\n  };\n\n  TreeView.prototype.renderTextBox = function (eventArgs, textEle, style) {\n    textEle.innerHTML = eventArgs.innerHtml;\n    var inpEle = select('.' + TREEINPUT, textEle);\n    this.inputObj = Input.createInput({\n      element: inpEle,\n      properties: {\n        enableRtl: this.enableRtl\n      }\n    }, this.createElement);\n    this.inputObj.container.setAttribute('style', style);\n    inpEle.focus();\n    var inputEle = inpEle;\n    inputEle.setSelectionRange(0, inputEle.value.length);\n    this.wireInputEvents(inpEle);\n  };\n\n  TreeView.prototype.updateOldText = function (liEle) {\n    var id = liEle.getAttribute('data-uid');\n    this.editData = this.getNodeObject(id);\n    var level = parseFloat(liEle.getAttribute('aria-level'));\n    this.editFields = this.getFields(this.fields, level, 1);\n    this.oldText = getValue(this.editFields.text, this.editData);\n  };\n\n  TreeView.prototype.inputFocusOut = function (e) {\n    if (!select('.' + TREEINPUT, this.element)) {\n      return;\n    }\n\n    var target = e.target;\n    var newText = target.value;\n    var txtEle = closest(target, '.' + LISTTEXT);\n    var liEle = closest(target, '.' + LISTITEM);\n    detach(this.inputObj.container);\n\n    if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n      this.crudOperation('update', null, liEle, newText, null, null, true);\n    } else {\n      this.appendNewText(liEle, txtEle, newText, true);\n    }\n  };\n\n  TreeView.prototype.appendNewText = function (liEle, txtEle, newText, isInput) {\n    var _this = this;\n\n    var eventArgs = this.getEditEvent(liEle, newText, null);\n    this.trigger('nodeEdited', eventArgs, function (observedArgs) {\n      newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;\n\n      _this.updateText(liEle, txtEle, newText, isInput);\n\n      if (observedArgs.oldText !== newText) {\n        _this.triggerEvent();\n      }\n    });\n  };\n\n  TreeView.prototype.updateText = function (liEle, txtEle, newText, isInput) {\n    var newData = setValue(this.editFields.text, newText, this.editData);\n\n    if (!isNOU(this.nodeTemplateFn)) {\n      txtEle.innerText = '';\n      var dataId = liEle.getAttribute('data-uid');\n      this.renderNodeTemplate(newData, txtEle, dataId);\n      this.renderReactTemplates();\n    } else {\n      txtEle.innerText = newText;\n    }\n\n    if (isInput) {\n      removeClass([liEle], EDITING);\n      txtEle.focus();\n    }\n\n    if (this.allowTextWrap) {\n      this.calculateWrap(liEle);\n    }\n  };\n\n  TreeView.prototype.getElement = function (ele) {\n    if (isNOU(ele)) {\n      return null;\n    } else if (typeof ele === 'string') {\n      return this.element.querySelector('[data-uid=\"' + ele + '\"]');\n    } else if (typeof ele === 'object') {\n      return getElement(ele);\n    } else {\n      return null;\n    }\n  };\n\n  TreeView.prototype.getId = function (ele) {\n    if (isNOU(ele)) {\n      return null;\n    } else if (typeof ele === 'string') {\n      return ele;\n    } else if (typeof ele === 'object') {\n      return getElement(ele).getAttribute('data-uid');\n    } else {\n      return null;\n    }\n  };\n\n  TreeView.prototype.getEditEvent = function (liEle, newText, inpEle) {\n    var data = this.getNodeData(liEle);\n    return {\n      cancel: false,\n      newText: newText,\n      node: liEle,\n      nodeData: data,\n      oldText: this.oldText,\n      innerHtml: inpEle\n    };\n  };\n\n  TreeView.prototype.getNodeObject = function (id) {\n    var childNodes;\n\n    if (isNOU(id)) {\n      return childNodes;\n    } else if (this.dataType === 1) {\n      for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {\n        var dataId = getValue(this.fields.id, this.treeData[i]);\n\n        if (!isNOU(this.treeData[i]) && !isNOU(dataId) && dataId.toString() === id) {\n          return this.treeData[i];\n        }\n      }\n    } else {\n      return this.getChildNodeObject(this.treeData, this.fields, id);\n    }\n\n    return childNodes;\n  };\n\n  TreeView.prototype.getChildNodeObject = function (obj, mapper, id) {\n    var newList;\n\n    if (isNOU(obj)) {\n      return newList;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var dataId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && dataId && dataId.toString() === id) {\n        return obj[i];\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        var childData = getValue(mapper.child, obj[i]);\n        newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);\n\n        if (newList !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        var child = 'child';\n        newList = this.getChildNodeObject(getValue(child, obj[i]), this.getChildMapper(mapper), id);\n\n        if (newList !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return newList;\n  };\n\n  TreeView.prototype.setDragAndDrop = function (toBind) {\n    if (toBind && !this.disabled) {\n      this.initializeDrag();\n    } else {\n      this.destroyDrag();\n    }\n  };\n\n  TreeView.prototype.initializeDrag = function () {\n    var _this = this;\n\n    var virtualEle;\n    var proxy = this;\n    this.dragObj = new Draggable(this.element, {\n      enableTailMode: true,\n      enableAutoScroll: true,\n      dragArea: this.dragArea,\n      dragTarget: '.' + TEXTWRAP,\n      helper: function (e) {\n        _this.dragTarget = e.sender.target;\n        var dragRoot = closest(_this.dragTarget, '.' + ROOT);\n        var dragWrap = closest(_this.dragTarget, '.' + TEXTWRAP);\n        _this.dragLi = closest(_this.dragTarget, '.' + LISTITEM);\n\n        if (_this.fullRowSelect && !dragWrap && _this.dragTarget.classList.contains(FULLROW)) {\n          dragWrap = _this.dragTarget.nextElementSibling;\n        }\n\n        if (!_this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap || _this.dragTarget.classList.contains(ROOT) || _this.dragTarget.classList.contains(PARENTITEM) || _this.dragTarget.classList.contains(LISTITEM) || _this.dragLi.classList.contains('e-disable')) {\n          return false;\n        }\n\n        var cloneEle = dragWrap.cloneNode(true);\n\n        if (isNOU(select('div.' + ICON, cloneEle))) {\n          var icon = proxy.createElement('div', {\n            className: ICON + ' ' + EXPANDABLE\n          });\n          cloneEle.insertBefore(icon, cloneEle.children[0]);\n        }\n\n        var cssClass = DRAGITEM + ' ' + ROOT + ' ' + _this.cssClass + ' ' + (_this.enableRtl ? RTL : '');\n        virtualEle = proxy.createElement('div', {\n          className: cssClass\n        });\n        virtualEle.appendChild(cloneEle);\n        var nLen = _this.selectedNodes.length;\n\n        if (nLen > 1 && _this.allowMultiSelection && _this.dragLi.classList.contains(ACTIVE)) {\n          var cNode = proxy.createElement('span', {\n            className: DROPCOUNT,\n            innerHTML: '' + nLen\n          });\n          virtualEle.appendChild(cNode);\n        }\n\n        document.body.appendChild(virtualEle);\n        document.body.style.cursor = '';\n        _this.dragData = _this.getNodeData(_this.dragLi);\n        return virtualEle;\n      },\n      dragStart: function (e) {\n        addClass([_this.element], DRAGGING);\n        var listItem = closest(e.target, '.e-list-item');\n        var level;\n\n        if (listItem) {\n          level = parseInt(listItem.getAttribute('aria-level'), 10);\n        }\n\n        var eventArgs = _this.getDragEvent(e.event, _this, null, e.target, null, virtualEle, level);\n\n        if (eventArgs.draggedNode.classList.contains(EDITING)) {\n          _this.dragObj.intDestroy(e.event);\n\n          _this.dragCancelAction(virtualEle);\n        } else {\n          _this.trigger('nodeDragStart', eventArgs, function (observedArgs) {\n            if (observedArgs.cancel) {\n              _this.dragObj.intDestroy(e.event);\n\n              _this.dragCancelAction(virtualEle);\n            } else {\n              _this.dragStartAction = true;\n            }\n          });\n        }\n      },\n      drag: function (e) {\n        _this.dragObj.setProperties({\n          cursorAt: {\n            top: !isNOU(e.event.targetTouches) || Browser.isDevice ? 60 : -20\n          }\n        });\n\n        _this.dragAction(e, virtualEle);\n      },\n      dragStop: function (e) {\n        removeClass([_this.element], DRAGGING);\n\n        _this.removeVirtualEle();\n\n        var dropTarget = e.target;\n        var preventTargetExpand = false;\n        var dropRoot = closest(dropTarget, '.' + DROPPABLE);\n        var isHelperElement = true;\n\n        if (!dropTarget || !dropRoot) {\n          detach(e.helper);\n          document.body.style.cursor = '';\n          isHelperElement = false;\n        }\n\n        var listItem = closest(dropTarget, '.e-list-item');\n        var level;\n\n        if (listItem) {\n          level = parseInt(listItem.getAttribute('aria-level'), 10);\n        }\n\n        var eventArgs = _this.getDragEvent(e.event, _this, dropTarget, dropTarget, null, e.helper, level);\n\n        eventArgs.preventTargetExpand = preventTargetExpand;\n\n        _this.trigger('nodeDragStop', eventArgs, function (observedArgs) {\n          _this.dragParent = observedArgs.draggedParentNode;\n          _this.preventExpand = observedArgs.preventTargetExpand;\n\n          if (observedArgs.cancel) {\n            if (e.helper.parentNode) {\n              detach(e.helper);\n            }\n\n            document.body.style.cursor = '';\n            isHelperElement = false;\n          }\n\n          _this.dragStartAction = false;\n        });\n      }\n    });\n    this.dropObj = new Droppable(this.element, {\n      out: function (e) {\n        if (!isNOU(e) && !e.target.classList.contains(SIBLING)) {\n          document.body.style.cursor = 'not-allowed';\n        }\n      },\n      over: function (e) {\n        document.body.style.cursor = '';\n      },\n      drop: function (e) {\n        _this.dropAction(e);\n      }\n    });\n  };\n\n  TreeView.prototype.dragCancelAction = function (virtualEle) {\n    detach(virtualEle);\n    removeClass([this.element], DRAGGING);\n    this.dragStartAction = false;\n  };\n\n  TreeView.prototype.dragAction = function (e, virtualEle) {\n    var dropRoot = closest(e.target, '.' + DROPPABLE);\n    var dropWrap = closest(e.target, '.' + TEXTWRAP);\n    var icon = select('div.' + ICON, virtualEle);\n    removeClass([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);\n    this.removeVirtualEle();\n    document.body.style.cursor = '';\n    var classList = e.target.classList;\n\n    if (this.fullRowSelect && !dropWrap && !isNOU(classList) && classList.contains(FULLROW)) {\n      dropWrap = e.target.nextElementSibling;\n    }\n\n    if (dropRoot) {\n      var dropLi = closest(e.target, '.' + LISTITEM);\n      var checkWrapper = closest(e.target, '.' + CHECKBOXWRAP);\n      var collapse = closest(e.target, '.' + COLLAPSIBLE);\n      var expand = closest(e.target, '.' + EXPANDABLE);\n\n      if (!dropRoot.classList.contains(ROOT) || dropWrap && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {\n        if (this.hasTemplate && dropLi) {\n          var templateTarget = select(this.fullRowSelect ? '.' + FULLROW : '.' + TEXTWRAP, dropLi);\n\n          if (e && !expand && !collapse && e.event.offsetY < 7 && !checkWrapper || expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3) {\n            var index = this.fullRowSelect ? 1 : 0;\n            this.appendIndicator(dropLi, icon, index);\n          } else if (e && !expand && !collapse && !checkWrapper && templateTarget && e.event.offsetY > templateTarget.offsetHeight - 10 || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19) {\n            var index = this.fullRowSelect ? 2 : 1;\n            this.appendIndicator(dropLi, icon, index);\n          } else {\n            addClass([icon], DROPIN);\n          }\n        } else {\n          if (dropLi && e && !expand && !collapse && e.event.offsetY < 7 && !checkWrapper || expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3) {\n            var index = this.fullRowSelect ? 1 : 0;\n            this.appendIndicator(dropLi, icon, index);\n          } else if (dropLi && e && !expand && !collapse && e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 10 && !checkWrapper || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19) {\n            var index = this.fullRowSelect ? 2 : 1;\n            this.appendIndicator(dropLi, icon, index);\n          } else {\n            addClass([icon], DROPIN);\n          }\n        }\n      } else if (e.target.nodeName === 'LI' && !dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)) {\n        addClass([icon], DROPNEXT);\n        this.renderVirtualEle(e);\n      } else if (e.target.classList.contains(SIBLING)) {\n        addClass([icon], DROPNEXT);\n      } else {\n        addClass([icon], DROPOUT);\n      }\n    } else {\n      addClass([icon], NODROP);\n      document.body.style.cursor = 'not-allowed';\n    }\n\n    var listItem = closest(e.target, '.e-list-item');\n    var level;\n\n    if (listItem) {\n      level = parseInt(listItem.getAttribute('aria-level'), 10);\n    }\n\n    var eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);\n\n    if (eventArgs.dropIndicator) {\n      removeClass([icon], eventArgs.dropIndicator);\n    }\n\n    this.trigger('nodeDragging', eventArgs);\n\n    if (eventArgs.dropIndicator) {\n      addClass([icon], eventArgs.dropIndicator);\n    }\n  };\n\n  TreeView.prototype.appendIndicator = function (dropLi, icon, index) {\n    addClass([icon], DROPNEXT);\n    var virEle = this.createElement('div', {\n      className: SIBLING\n    });\n    dropLi.insertBefore(virEle, dropLi.children[index]);\n  };\n  /* eslint-disable */\n\n\n  TreeView.prototype.dropAction = function (e) {\n    var offsetY = e.event.offsetY;\n    var dropTarget = e.target;\n    var dragObj;\n    var level;\n    var drop = false;\n    var dragInstance;\n    dragInstance = e.dragData.draggable;\n\n    for (var i = 0; i < dragInstance.ej2_instances.length; i++) {\n      if (dragInstance.ej2_instances[i] instanceof TreeView_1) {\n        dragObj = dragInstance.ej2_instances[i];\n        break;\n      }\n    }\n\n    if (dragObj && dragObj.dragTarget) {\n      var dragTarget = dragObj.dragTarget;\n      var dragLi = closest(dragTarget, '.' + LISTITEM);\n      var dropLi = closest(dropTarget, '.' + LISTITEM);\n\n      if (dropLi == null && dropTarget.classList.contains(ROOT)) {\n        dropLi = dropTarget.firstElementChild;\n      }\n\n      detach(e.droppedElement);\n      document.body.style.cursor = '';\n\n      if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n        if (this.fields.dataSource instanceof DataManager === false) {\n          this.preventExpand = false;\n        }\n\n        return;\n      }\n\n      if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE)) {\n        var sNodes = selectAll('.' + ACTIVE, dragObj.element);\n\n        if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {\n          for (var i = sNodes.length - 1; i >= 0; i--) {\n            if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n              continue;\n            }\n\n            this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n          }\n        } else {\n          for (var i = 0; i < sNodes.length; i++) {\n            if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n              continue;\n            }\n\n            this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n          }\n        }\n      } else {\n        this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);\n      }\n\n      level = parseInt(dragLi.getAttribute('aria-level'), 10);\n      drop = true;\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false) {\n      this.preventExpand = false;\n    }\n\n    this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));\n\n    if (dragObj.element.id !== this.element.id) {\n      dragObj.triggerEvent();\n      this.isNodeDropped = true;\n      this.fields.dataSource = this.treeData;\n    }\n\n    this.triggerEvent();\n  };\n\n  TreeView.prototype.appendNode = function (dropTarget, dragLi, dropLi, e, dragObj, offsetY) {\n    var checkWrapper = closest(dropTarget, '.' + CHECKBOXWRAP);\n    var collapse = closest(e.target, '.' + COLLAPSIBLE);\n    var expand = closest(e.target, '.' + EXPANDABLE);\n\n    if (!dragLi.classList.contains('e-disable') && !checkWrapper && (expand && e.event.offsetY < 5 || collapse && e.event.offsetX < 3 || expand && e.event.offsetY > 19 || collapse && e.event.offsetX > 19 || !expand && !collapse)) {\n      if (dropTarget.nodeName === 'LI') {\n        this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n      } else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT)) {\n        if (dropTarget.firstElementChild.nodeName === 'UL') {\n          this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n        }\n      } else if (dropTarget.classList.contains('e-icon-collapsible') || dropTarget.classList.contains('e-icon-expandable')) {\n        this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n      } else {\n        this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY);\n      }\n    } else {\n      this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true);\n    }\n  };\n\n  TreeView.prototype.dropAsSiblingNode = function (dragLi, dropLi, e, dragObj) {\n    var dropUl = closest(dropLi, '.' + PARENTITEM);\n    var dragParentUl = closest(dragLi, '.' + PARENTITEM);\n    var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n    var pre;\n\n    if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {\n      pre = false;\n    } else if (e.event.offsetY < 2) {\n      pre = true;\n    } else if (e.target.classList.contains('e-icon-expandable') || e.target.classList.contains('e-icon-collapsible')) {\n      if (e.event.offsetY < 5 || e.event.offsetX < 3) {\n        pre = true;\n      } else if (e.event.offsetY > 15 || e.event.offsetX > 17) {\n        pre = false;\n      }\n    }\n\n    if (e.target.classList.contains('e-icon-expandable') || e.target.classList.contains('e-icon-collapsible')) {\n      var target = e.target.closest('li');\n      dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);\n    } else {\n      dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);\n    }\n\n    this.moveData(dragLi, dropLi, dropUl, pre, dragObj);\n    this.updateElement(dragParentUl, dragParentLi);\n    this.updateAriaLevel(dragLi);\n\n    if (dragObj.element.id === this.element.id) {\n      this.updateList();\n    } else {\n      dragObj.updateInstance();\n      this.updateInstance();\n    }\n  };\n\n  TreeView.prototype.dropAsChildNode = function (dragLi, dropLi, dragObj, index, e, pos, isCheck) {\n    var dragParentUl = closest(dragLi, '.' + PARENTITEM);\n    var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n    var dropParentUl = closest(dropLi, '.' + PARENTITEM);\n    var templateTarget;\n\n    if (e && e.target) {\n      templateTarget = select(this.fullRowSelect ? '.' + FULLROW : '.' + TEXTWRAP, dropLi);\n    }\n\n    if (e && pos < 7 && !isCheck) {\n      dropParentUl.insertBefore(dragLi, dropLi);\n      this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);\n    } else if (e && e.target.offsetHeight > 0 && pos > e.target.offsetHeight - 10 && !isCheck && !this.hasTemplate) {\n      dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n      this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n    } else if (this.hasTemplate && templateTarget && pos > templateTarget.offsetHeight - 10 && !isCheck) {\n      dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n      this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n    } else {\n      var dropUl = this.expandParent(dropLi);\n      var childLi = dropUl.childNodes[index];\n      dropUl.insertBefore(dragLi, childLi);\n      this.moveData(dragLi, childLi, dropUl, true, dragObj);\n    }\n\n    this.updateElement(dragParentUl, dragParentLi);\n    this.updateAriaLevel(dragLi);\n\n    if (dragObj.element.id === this.element.id) {\n      this.updateList();\n    } else {\n      dragObj.updateInstance();\n      this.updateInstance();\n    }\n  };\n\n  TreeView.prototype.moveData = function (dragLi, dropLi, dropUl, pre, dragObj) {\n    var dropParentLi = closest(dropUl, '.' + LISTITEM);\n    var id = this.getId(dragLi);\n    var removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);\n    var refId = this.getId(dropLi);\n    var index = this.getDataPos(this.treeData, this.fields, refId);\n    var parentId = this.getId(dropParentLi);\n\n    if (this.dataType === 1) {\n      this.updateField(this.treeData, this.fields, parentId, 'hasChildren', true);\n      var pos = isNOU(index) ? this.treeData.length : pre ? index : index + 1;\n\n      if (isNOU(parentId) && !this.hasPid) {\n        delete removedData[0][this.fields.parentID];\n      } else {\n        var currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;\n        setValue(this.fields.parentID, currPid, removedData[0]);\n      }\n\n      this.treeData.splice(pos, 0, removedData[0]);\n\n      if (dragObj.element.id !== this.element.id) {\n        var childData = dragObj.removeChildNodes(id);\n        pos++;\n\n        for (var i = 0, len = childData.length; i < len; i++) {\n          this.treeData.splice(pos, 0, childData[i]);\n          pos++;\n        }\n\n        dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    } else {\n      this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);\n    }\n  };\n\n  TreeView.prototype.expandParent = function (dropLi) {\n    var dropIcon = select('div.' + ICON, dropLi);\n\n    if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {\n      this.expandAction(dropLi, dropIcon, null);\n    }\n\n    var dropUl = select('.' + PARENTITEM, dropLi);\n\n    if (this.preventExpand === true && !dropUl && dropIcon) {\n      this.renderChildNodes(dropLi);\n    }\n\n    dropUl = select('.' + PARENTITEM, dropLi);\n\n    if (!isNOU(dropUl) && this.preventExpand === true) {\n      dropUl.style.display = 'none';\n    }\n\n    if (!isNOU(dropUl) && this.preventExpand === false) {\n      dropUl.style.display = 'block';\n    }\n\n    if (isNOU(dropUl) && this.preventExpand === true) {\n      if (isNOU(dropIcon)) {\n        ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n      }\n\n      var icon = select('div.' + ICON, dropLi);\n\n      if (icon) {\n        icon.classList.add('e-icon-expandable');\n      }\n\n      dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n      dropLi.appendChild(dropUl);\n\n      if (icon) {\n        removeClass([icon], COLLAPSIBLE);\n      } else {\n        ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n      }\n\n      dropLi.setAttribute('aria-expanded', 'false');\n      dropUl.style.display = 'none';\n    }\n\n    if (isNOU(dropUl)) {\n      this.trigger('nodeExpanding', this.getExpandEvent(dropLi, null));\n\n      if (isNOU(dropIcon)) {\n        ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n      }\n\n      var icon = select('div.' + ICON, dropLi);\n\n      if (icon) {\n        removeClass([icon], EXPANDABLE);\n      } else {\n        ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n        icon = select('div.' + ICON, dropLi);\n        removeClass([icon], EXPANDABLE);\n      }\n\n      dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n      dropLi.appendChild(dropUl);\n      this.addExpand(dropLi);\n      this.trigger('nodeExpanded', this.getExpandEvent(dropLi, null));\n    }\n\n    return dropUl;\n  };\n\n  TreeView.prototype.updateElement = function (dragParentUl, dragParentLi) {\n    if (dragParentLi && dragParentUl.childElementCount === 0) {\n      var dragIcon = select('div.' + ICON, dragParentLi);\n      detach(dragParentUl);\n      detach(dragIcon);\n      var parentId = this.getId(dragParentLi);\n      this.updateField(this.treeData, this.fields, parentId, 'hasChildren', false);\n      this.removeExpand(dragParentLi, true);\n    }\n  };\n\n  TreeView.prototype.updateAriaLevel = function (dragLi) {\n    var level = this.parents(dragLi, '.' + PARENTITEM).length;\n    dragLi.setAttribute('aria-level', '' + level);\n    this.updateChildAriaLevel(select('.' + PARENTITEM, dragLi), level + 1);\n  };\n\n  TreeView.prototype.updateChildAriaLevel = function (element, level) {\n    if (!isNOU(element)) {\n      var cNodes = element.childNodes;\n\n      for (var i = 0, len = cNodes.length; i < len; i++) {\n        var liEle = cNodes[i];\n        liEle.setAttribute('aria-level', '' + level);\n        this.updateChildAriaLevel(select('.' + PARENTITEM, liEle), level + 1);\n      }\n    }\n  };\n\n  TreeView.prototype.renderVirtualEle = function (e) {\n    var pre;\n\n    if (e.event.offsetY > e.target.offsetHeight - 2) {\n      pre = false;\n    } else if (e.event.offsetY < 2) {\n      pre = true;\n    }\n\n    var virEle = this.createElement('div', {\n      className: SIBLING\n    });\n    var index = this.fullRowSelect ? pre ? 1 : 2 : pre ? 0 : 1;\n    e.target.insertBefore(virEle, e.target.children[index]);\n  };\n\n  TreeView.prototype.removeVirtualEle = function () {\n    var sibEle = select('.' + SIBLING);\n\n    if (sibEle) {\n      detach(sibEle);\n    }\n  };\n\n  TreeView.prototype.destroyDrag = function () {\n    if (this.dragObj && this.dropObj) {\n      this.dragObj.destroy();\n      this.dropObj.destroy();\n    }\n  };\n\n  TreeView.prototype.getDragEvent = function (event, obj, dropTarget, target, dragNode, cloneEle, level, drop) {\n    var dropLi = dropTarget ? closest(dropTarget, '.' + LISTITEM) : null;\n    var dropData = dropLi ? this.getNodeData(dropLi) : null;\n    var draggedNode = obj ? obj.dragLi : dragNode;\n    var draggedNodeData = obj ? obj.dragData : null;\n    var newParent = dropTarget ? this.parents(dropTarget, '.' + LISTITEM) : null;\n    var dragLiParent = obj.dragLi.parentElement;\n    var dragParent = obj.dragLi ? closest(dragLiParent, '.' + LISTITEM) : null;\n    var targetParent = null;\n    var indexValue = null;\n    var iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];\n    var iconClass = null;\n    var node = drop === true ? draggedNode : dropLi;\n    var index = node ? closest(node, '.e-list-parent') : null;\n    var i = 0;\n    var position = null;\n    dragParent = obj.dragLi && dragParent === null ? closest(dragLiParent, '.' + ROOT) : dragParent;\n    dragParent = drop === true ? this.dragParent : dragParent;\n\n    if (cloneEle) {\n      while (i < 4) {\n        if (select('.' + ICON, cloneEle).classList.contains(iconCss[i])) {\n          iconClass = iconCss[i];\n          break;\n        }\n\n        i++;\n      }\n    }\n\n    if (index) {\n      var dropTar = 0;\n\n      for (i = 0; i < index.childElementCount; i++) {\n        dropTar = drop !== true && index.children[i] === draggedNode && dropLi !== draggedNode ? ++dropTar : dropTar;\n\n        if (drop !== true && index.children[i].classList.contains('e-hover')) {\n          indexValue = event.offsetY >= 23 ? i + 1 : i;\n          break;\n        } else if (index.children[i] === node) {\n          indexValue = event.offsetY >= 23 ? i : i;\n          break;\n        }\n      }\n\n      indexValue = dropTar !== 0 ? --indexValue : indexValue;\n      position = iconClass == \"e-drop-in\" ? \"Inside\" : event.offsetY < 7 ? \"Before\" : \"After\";\n    }\n\n    if (dropTarget) {\n      if (newParent.length === 0) {\n        targetParent = null;\n      } else if (dropTarget.classList.contains(LISTITEM)) {\n        targetParent = newParent[0];\n      } else {\n        targetParent = newParent[1];\n      }\n    }\n\n    if (dropLi === draggedNode) {\n      targetParent = dropLi;\n    }\n\n    if (dropTarget && target.offsetHeight <= 33 && event.offsetY < target.offsetHeight - 10 && event.offsetY > 6) {\n      targetParent = dropLi;\n\n      if (drop !== true) {\n        level = ++level;\n        var parent_2 = targetParent ? select('.e-list-parent', targetParent) : null;\n        indexValue = parent_2 ? parent_2.children.length : 0;\n\n        if (!(this.fields.dataSource instanceof DataManager) && parent_2 === null && targetParent) {\n          var parent_3 = targetParent.hasAttribute('data-uid') ? this.getChildNodes(this.fields.dataSource, targetParent.getAttribute('data-uid').toString()) : null;\n          indexValue = parent_3 ? parent_3.length : 0;\n        }\n      }\n    }\n\n    return {\n      cancel: false,\n      clonedNode: cloneEle,\n      event: event,\n      draggedNode: draggedNode,\n      draggedNodeData: draggedNodeData,\n      droppedNode: dropLi,\n      droppedNodeData: dropData,\n      dropIndex: indexValue,\n      dropLevel: level,\n      draggedParentNode: dragParent,\n      dropTarget: targetParent,\n      dropIndicator: iconClass,\n      target: target,\n      position: position\n    };\n  };\n\n  TreeView.prototype.addFullRow = function (toAdd) {\n    var len = this.liList.length;\n\n    if (toAdd) {\n      for (var i = 0; i < len; i++) {\n        this.createFullRow(this.liList[i]);\n      }\n    } else {\n      for (var i = 0; i < len; i++) {\n        var rowDiv = select('.' + FULLROW, this.liList[i]);\n        detach(rowDiv);\n      }\n    }\n  };\n\n  TreeView.prototype.createFullRow = function (item) {\n    var rowDiv = this.createElement('div', {\n      className: FULLROW\n    });\n    item.insertBefore(rowDiv, item.childNodes[0]);\n  };\n\n  TreeView.prototype.addMultiSelect = function (toAdd) {\n    if (toAdd) {\n      var liEles = selectAll('.' + LISTITEM + ':not([aria-selected=\"true\"])', this.element);\n\n      for (var _i = 0, liEles_1 = liEles; _i < liEles_1.length; _i++) {\n        var ele = liEles_1[_i];\n        ele.setAttribute('aria-selected', 'false');\n      }\n    } else {\n      var liEles = selectAll('.' + LISTITEM + '[aria-selected=\"false\"]', this.element);\n\n      for (var _a = 0, liEles_2 = liEles; _a < liEles_2.length; _a++) {\n        var ele = liEles_2[_a];\n        ele.removeAttribute('aria-selected');\n      }\n    }\n  };\n\n  TreeView.prototype.collapseByLevel = function (element, level, excludeHiddenNodes) {\n    if (level > 0 && !isNOU(element)) {\n      var cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n\n      for (var i = 0, len = cNodes.length; i < len; i++) {\n        var liEle = cNodes[i];\n        var icon = select('.' + COLLAPSIBLE, select('.' + TEXTWRAP, liEle));\n\n        if (!isNOU(icon)) {\n          this.collapseNode(liEle, icon, null);\n        }\n\n        this.collapseByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n      }\n    }\n  };\n\n  TreeView.prototype.collapseAllNodes = function (excludeHiddenNodes) {\n    var cIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + COLLAPSIBLE, this.element));\n\n    for (var i = 0, len = cIcons.length; i < len; i++) {\n      var icon = cIcons[i];\n      var liEle = closest(icon, '.' + LISTITEM);\n      this.collapseNode(liEle, icon, null);\n    }\n  };\n\n  TreeView.prototype.expandByLevel = function (element, level, excludeHiddenNodes) {\n    if (level > 0 && !isNOU(element)) {\n      var eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n\n      for (var i = 0, len = eNodes.length; i < len; i++) {\n        var liEle = eNodes[i];\n        var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEle));\n\n        if (!isNOU(icon)) {\n          this.expandAction(liEle, icon, null);\n        }\n\n        this.expandByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n      }\n    }\n  };\n\n  TreeView.prototype.expandAllNodes = function (excludeHiddenNodes) {\n    var eIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + EXPANDABLE, this.element));\n\n    for (var i = 0, len = eIcons.length; i < len; i++) {\n      var icon = eIcons[i];\n      var liEle = closest(icon, '.' + LISTITEM);\n      this.expandAction(liEle, icon, null, true);\n    }\n  };\n\n  TreeView.prototype.getVisibleNodes = function (excludeHiddenNodes, nodes) {\n    var vNodes = Array.prototype.slice.call(nodes);\n\n    if (excludeHiddenNodes) {\n      for (var i = 0; i < vNodes.length; i++) {\n        if (!isVisible(vNodes[i])) {\n          vNodes.splice(i, 1);\n          i--;\n        }\n      }\n    }\n\n    return vNodes;\n  };\n\n  TreeView.prototype.removeNode = function (node) {\n    var dragParentUl = closest(node, '.' + PARENTITEM);\n    var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n\n    if (!isNOU(this.nodeTemplateFn)) {\n      this.destroyTemplate(node);\n    }\n\n    detach(node);\n    this.updateElement(dragParentUl, dragParentLi);\n    this.removeData(node);\n  };\n\n  TreeView.prototype.updateInstance = function () {\n    this.updateList();\n    this.updateSelectedNodes();\n    this.updateExpandedNodes();\n  };\n\n  TreeView.prototype.updateList = function () {\n    this.liList = Array.prototype.slice.call(selectAll('.' + LISTITEM, this.element));\n  };\n\n  TreeView.prototype.updateSelectedNodes = function () {\n    this.setProperties({\n      selectedNodes: []\n    }, true);\n    var sNodes = selectAll('.' + ACTIVE, this.element);\n    this.selectGivenNodes(sNodes);\n  };\n\n  TreeView.prototype.updateExpandedNodes = function () {\n    this.setProperties({\n      expandedNodes: []\n    }, true);\n    var eNodes = selectAll('[aria-expanded=\"true\"]', this.element);\n\n    for (var i = 0, len = eNodes.length; i < len; i++) {\n      this.addExpand(eNodes[i]);\n    }\n  };\n\n  TreeView.prototype.removeData = function (node) {\n    if (this.dataType === 1) {\n      var dm = new DataManager(this.treeData);\n      var id = this.getId(node);\n      var data = {};\n      var newId = this.isNumberTypeId ? parseFloat(id) : id;\n      data[this.fields.id] = newId;\n      dm.remove(this.fields.id, data);\n      this.removeChildNodes(id);\n    } else {\n      var id = this.getId(node);\n      this.updateChildField(this.treeData, this.fields, id, null, null, true);\n    }\n  };\n\n  TreeView.prototype.removeChildNodes = function (parentId) {\n    var cNodes = this.getChildGroup(this.groupedData, parentId, false);\n    var childData = [];\n\n    if (cNodes) {\n      for (var i = 0, len = cNodes.length; i < len; i++) {\n        var dm = new DataManager(this.treeData);\n        var id = getValue(this.fields.id, cNodes[i]).toString();\n        var data = {};\n        var currId = this.isNumberTypeId ? parseFloat(id) : id;\n        data[this.fields.id] = currId;\n        var nodeData = dm.remove(this.fields.id, data);\n        childData.push(nodeData[0]);\n        this.removeChildNodes(id);\n      }\n    }\n\n    return childData;\n  };\n\n  TreeView.prototype.doGivenAction = function (nodes, selector, toExpand) {\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var liEle = this.getElement(nodes[i]);\n\n      if (isNOU(liEle)) {\n        continue;\n      }\n\n      var icon = select('.' + selector, select('.' + TEXTWRAP, liEle));\n\n      if (!isNOU(icon)) {\n        toExpand ? this.expandAction(liEle, icon, null) : this.collapseNode(liEle, icon, null);\n      }\n    }\n  };\n\n  TreeView.prototype.addGivenNodes = function (nodes, dropLi, index, isRemote, dropEle) {\n    if (nodes.length === 0) {\n      return;\n    }\n\n    var sNodes = this.getSortedData(nodes);\n    var level = dropLi ? parseFloat(dropLi.getAttribute('aria-level')) + 1 : 1;\n\n    if (isRemote) {\n      this.updateMapper(level);\n    }\n\n    var li = ListBase.createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);\n    var dropUl;\n\n    if (!dropEle) {\n      dropUl = dropLi ? this.expandParent(dropLi) : select('.' + PARENTITEM, this.element);\n    } else {\n      dropUl = dropEle;\n    }\n\n    var refNode = dropUl.childNodes[index];\n\n    if (refNode || this.sortOrder === 'None') {\n      for (var i = 0; i < li.length; i++) {\n        dropUl.insertBefore(li[i], refNode);\n      }\n    }\n\n    if (!refNode && (this.sortOrder === 'Ascending' || this.sortOrder === 'Descending')) {\n      var cNodes = dropUl.childNodes;\n\n      for (var i = 0; i < li.length; i++) {\n        for (var j = 0; j < cNodes.length; j++) {\n          var returnValue = this.sortOrder === 'Ascending' ? cNodes[j].textContent.toUpperCase() > li[i].innerText.toUpperCase() : cNodes[j].textContent.toUpperCase() < li[i].innerText.toUpperCase();\n\n          if (returnValue) {\n            dropUl.insertBefore(li[i], cNodes[j]);\n            break;\n          }\n\n          dropUl.insertBefore(li[i], cNodes[cNodes.length]);\n        }\n      }\n    }\n\n    var id = this.getId(dropLi);\n\n    if (this.dataType === 1) {\n      this.updateField(this.treeData, this.fields, id, 'hasChildren', true);\n      var refId = this.getId(refNode);\n      var pos = isNOU(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);\n\n      for (var j = 0; j < nodes.length; j++) {\n        if (!isNOU(id)) {\n          var currId = this.isNumberTypeId ? parseFloat(id) : id;\n          setValue(this.fields.parentID, currId, nodes[j]);\n        }\n\n        this.treeData.splice(pos, 0, nodes[j]);\n        pos++;\n      }\n    } else {\n      this.addChildData(this.treeData, this.fields, id, nodes, index);\n    }\n\n    this.finalizeNode(dropUl);\n  };\n\n  TreeView.prototype.updateMapper = function (level) {\n    var mapper = level === 1 ? this.fields : this.getChildFields(this.fields, level - 1, 1);\n    this.updateListProp(mapper);\n  };\n\n  TreeView.prototype.updateListProp = function (mapper) {\n    var prop = this.getActualProperties(mapper);\n    this.listBaseOption.fields = prop;\n    this.listBaseOption.fields.url = prop.hasOwnProperty('navigateUrl') ? prop.navigateUrl : 'navigateUrl';\n  };\n\n  TreeView.prototype.getDataPos = function (obj, mapper, id) {\n    var pos = null;\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        return i;\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        var data = getValue(mapper.child, obj[i]);\n        pos = this.getDataPos(data, this.getChildMapper(mapper), id);\n\n        if (pos !== null) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        var items = getValue('child', obj[i]);\n        pos = this.getDataPos(items, this.getChildMapper(mapper), id);\n\n        if (pos !== null) {\n          break;\n        }\n      }\n    }\n\n    return pos;\n  };\n\n  TreeView.prototype.addChildData = function (obj, mapper, id, data, index) {\n    var updated;\n\n    if (isNOU(id)) {\n      index = isNOU(index) ? obj.length : index;\n\n      for (var k = 0, len = data.length; k < len; k++) {\n        obj.splice(index, 0, data[k]);\n        index++;\n      }\n\n      return updated;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        if (typeof mapper.child === 'string' && obj[i].hasOwnProperty(mapper.child) && obj[i][mapper.child] !== null || this.fields.dataSource instanceof DataManager && obj[i].hasOwnProperty('child')) {\n          var key = typeof mapper.child === 'string' ? mapper.child : 'child';\n          var childData = getValue(key, obj[i]);\n\n          if (isNOU(childData)) {\n            childData = [];\n          }\n\n          index = isNOU(index) ? childData.length : index;\n\n          for (var k = 0, len = data.length; k < len; k++) {\n            childData.splice(index, 0, data[k]);\n            index++;\n          }\n        } else {\n          var key = typeof mapper.child === 'string' ? mapper.child : 'child';\n          obj[i][key] = data;\n        }\n\n        return true;\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        var childObj = getValue(mapper.child, obj[i]);\n        updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);\n\n        if (updated !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        var childData = getValue('child', obj[i]);\n        updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index);\n\n        if (updated !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return updated;\n  };\n\n  TreeView.prototype.doDisableAction = function (nodes) {\n    var validNodes = this.nodeType(nodes);\n    var validID = this.checkValidId(validNodes);\n    this.validArr = [];\n\n    for (var i = 0, len = validID.length; i < len; i++) {\n      var id = validID[i][this.fields.id].toString();\n\n      if (id && this.disableNode.indexOf(id) === -1) {\n        this.disableNode.push(id);\n      }\n\n      var liEle = this.getElement(id);\n\n      if (liEle) {\n        liEle.setAttribute('aria-disabled', 'true');\n        addClass([liEle], DISABLE);\n      }\n    }\n  };\n\n  TreeView.prototype.doEnableAction = function (nodes) {\n    var strNodes = this.nodeType(nodes);\n\n    for (var i = 0, len = strNodes.length; i < len; i++) {\n      var liEle = this.getElement(strNodes[i]);\n      var id = strNodes[i];\n\n      if (id && this.disableNode.indexOf(id) !== -1) {\n        this.disableNode.splice(this.disableNode.indexOf(id), 1);\n      }\n\n      if (liEle) {\n        liEle.removeAttribute('aria-disabled');\n        removeClass([liEle], DISABLE);\n      }\n    }\n  };\n\n  TreeView.prototype.nodeType = function (nodes) {\n    var validID = [];\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var id = void 0;\n\n      if (typeof nodes[i] == \"string\") {\n        id = nodes[i] ? nodes[i].toString() : null;\n      } else if (typeof nodes[i] === \"object\") {\n        id = nodes[i] ? nodes[i].getAttribute(\"data-uid\").toString() : null;\n      }\n\n      if (validID.indexOf(id) == -1) {\n        validID.push(id);\n      }\n    }\n\n    return validID;\n  };\n\n  TreeView.prototype.checkValidId = function (node) {\n    var _this = this;\n\n    if (this.dataType === 1) {\n      this.validArr = this.treeData.filter(function (data) {\n        return node.indexOf(data[_this.fields.id] ? data[_this.fields.id].toString() : null) !== -1;\n      });\n    } else if (this.dataType === 2) {\n      for (var k = 0; k < this.treeData.length; k++) {\n        var id = this.treeData[k][this.fields.id] ? this.treeData[k][this.fields.id].toString() : null;\n\n        if (node.indexOf(id) !== -1) {\n          this.validArr.push(this.treeData[k]);\n        }\n\n        var childItems = getValue(this.fields.child.toString(), this.treeData[k]);\n\n        if (childItems) {\n          this.filterNestedChild(childItems, node);\n        }\n      }\n    }\n\n    return this.validArr;\n  };\n\n  TreeView.prototype.filterNestedChild = function (treeData, nodes) {\n    for (var k = 0; k < treeData.length; k++) {\n      var id = treeData[k][this.fields.id] ? treeData[k][this.fields.id].toString() : null;\n\n      if (nodes.indexOf(id) !== -1) {\n        this.validArr.push(treeData[k]);\n      }\n\n      var childItems = getValue(this.fields.child.toString(), treeData[k]);\n\n      if (childItems) {\n        this.filterNestedChild(childItems, nodes);\n      }\n    }\n  };\n\n  TreeView.prototype.setTouchClass = function () {\n    var ele = closest(this.element, '.' + BIGGER);\n    this.touchClass = isNOU(ele) ? '' : SMALL;\n  };\n\n  TreeView.prototype.updatePersistProp = function () {\n    this.removeField(this.treeData, this.fields, ['selected', 'expanded']);\n    var sleNodes = this.selectedNodes;\n\n    for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {\n      this.updateField(this.treeData, this.fields, sleNodes[l], 'selected', true);\n    }\n\n    var enodes = this.expandedNodes;\n\n    for (var k = 0, nodelen = enodes.length; k < nodelen; k++) {\n      this.updateField(this.treeData, this.fields, enodes[k], 'expanded', true);\n    }\n\n    if (this.showCheckBox) {\n      this.removeField(this.treeData, this.fields, ['isChecked']);\n      var cnodes = this.checkedNodes;\n\n      for (var m = 0, nodelen = cnodes.length; m < nodelen; m++) {\n        this.updateField(this.treeData, this.fields, cnodes[m], 'isChecked', true);\n      }\n    }\n  };\n\n  TreeView.prototype.removeField = function (obj, mapper, names) {\n    if (isNOU(obj) || isNOU(mapper)) {\n      return;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      for (var j = 0; j < names.length; j++) {\n        var field = this.getMapperProp(mapper, names[j]);\n\n        if (!isNOU(obj[i][field])) {\n          delete obj[i][field];\n        }\n      }\n\n      if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        this.removeField(getValue(mapper.child, obj[i]), this.getChildMapper(mapper), names);\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        this.removeField(getValue('child', obj[i]), this.getChildMapper(mapper), names);\n      }\n    }\n  };\n\n  TreeView.prototype.getMapperProp = function (mapper, fieldName) {\n    switch (fieldName) {\n      case 'selected':\n        return !isNOU(mapper.selected) ? mapper.selected : 'selected';\n\n      case 'expanded':\n        return !isNOU(mapper.expanded) ? mapper.expanded : 'expanded';\n\n      case 'isChecked':\n        return !isNOU(mapper.isChecked) ? mapper.isChecked : 'isChecked';\n\n      case 'hasChildren':\n        return !isNOU(mapper.hasChildren) ? mapper.hasChildren : 'hasChildren';\n\n      default:\n        return fieldName;\n    }\n  };\n\n  TreeView.prototype.updateField = function (obj, mapper, id, key, value) {\n    var childNodes;\n\n    if (isNOU(id)) {\n      return;\n    } else if (this.dataType === 1) {\n      var newId = this.isNumberTypeId ? parseFloat(id) : id;\n      var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', newId, false));\n      setValue(this.getMapperProp(mapper, key), value, resultData[0]);\n    } else {\n      this.updateChildField(obj, mapper, id, key, value);\n    }\n  };\n\n  TreeView.prototype.updateChildField = function (obj, mapper, id, key, value, remove) {\n    var removedData;\n\n    if (isNOU(obj)) {\n      return removedData;\n    }\n\n    for (var i = 0, objlen = obj.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, obj[i]);\n\n      if (obj[i] && nodeId && nodeId.toString() === id) {\n        if (remove) {\n          removedData = obj.splice(i, 1);\n        } else {\n          setValue(this.getMapperProp(mapper, key), value, obj[i]);\n          removedData = [];\n        }\n\n        return removedData;\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n        var childData = getValue(mapper.child, obj[i]);\n        removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove);\n\n        if (removedData !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n        var childItems = getValue('child', obj[i]);\n        removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove);\n\n        if (removedData !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return removedData;\n  };\n\n  TreeView.prototype.triggerEvent = function () {\n    this.renderReactTemplates();\n    var eventArgs = {\n      data: this.treeData\n    };\n    this.trigger('dataSourceChanged', eventArgs);\n  };\n\n  TreeView.prototype.wireInputEvents = function (inpEle) {\n    EventHandler.add(inpEle, 'blur', this.inputFocusOut, this);\n  };\n\n  TreeView.prototype.wireEditingEvents = function (toBind) {\n    var _this = this;\n\n    if (toBind && !this.disabled) {\n      var proxy_2 = this;\n      this.touchEditObj = new Touch(this.element, {\n        tap: function (e) {\n          if (_this.isDoubleTapped(e) && e.tapCount === 2) {\n            e.originalEvent.preventDefault();\n            proxy_2.editingHandler(e.originalEvent);\n          }\n        }\n      });\n    } else {\n      if (this.touchEditObj) {\n        this.touchEditObj.destroy();\n      }\n    }\n  };\n\n  TreeView.prototype.wireClickEvent = function (toBind) {\n    if (toBind) {\n      var proxy_3 = this;\n      this.touchClickObj = new Touch(this.element, {\n        tap: function (e) {\n          proxy_3.clickHandler(e);\n        }\n      });\n    } else {\n      if (this.touchClickObj) {\n        this.touchClickObj.destroy();\n      }\n    }\n  };\n\n  TreeView.prototype.wireExpandOnEvent = function (toBind) {\n    var _this = this;\n\n    if (toBind) {\n      var proxy_4 = this;\n      this.touchExpandObj = new Touch(this.element, {\n        tap: function (e) {\n          if ((_this.expandOnType === 'Click' || _this.expandOnType === 'DblClick' && _this.isDoubleTapped(e) && e.tapCount === 2) && e.originalEvent.which !== 3) {\n            proxy_4.expandHandler(e);\n          }\n        }\n      });\n    } else {\n      if (this.touchExpandObj) {\n        this.touchExpandObj.destroy();\n      }\n    }\n  };\n\n  TreeView.prototype.mouseDownHandler = function (e) {\n    this.mouseDownStatus = true;\n\n    if (e.shiftKey || e.ctrlKey) {\n      e.preventDefault();\n    }\n\n    if (e.ctrlKey && this.allowMultiSelection) {\n      EventHandler.add(this.element, 'contextmenu', this.preventContextMenu, this);\n    }\n  };\n\n  ;\n\n  TreeView.prototype.preventContextMenu = function (e) {\n    e.preventDefault();\n  };\n\n  TreeView.prototype.wireEvents = function () {\n    EventHandler.add(this.element, 'mousedown', this.mouseDownHandler, this);\n    this.wireClickEvent(true);\n\n    if (this.expandOnType !== 'None') {\n      this.wireExpandOnEvent(true);\n    }\n\n    EventHandler.add(this.element, 'focus', this.focusIn, this);\n    EventHandler.add(this.element, 'blur', this.focusOut, this);\n    EventHandler.add(this.element, 'mouseover', this.onMouseOver, this);\n    EventHandler.add(this.element, 'mouseout', this.onMouseLeave, this);\n    this.keyboardModule = new KeyboardEvents(this.element, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n  };\n\n  TreeView.prototype.unWireEvents = function () {\n    EventHandler.remove(this.element, 'mousedown', this.mouseDownHandler);\n    this.wireClickEvent(false);\n    this.wireExpandOnEvent(false);\n    EventHandler.remove(this.element, 'focus', this.focusIn);\n    EventHandler.remove(this.element, 'blur', this.focusOut);\n    EventHandler.remove(this.element, 'mouseover', this.onMouseOver);\n    EventHandler.remove(this.element, 'mouseout', this.onMouseLeave);\n\n    if (!this.disabled) {\n      this.keyboardModule.destroy();\n    }\n  };\n\n  TreeView.prototype.parents = function (element, selector) {\n    var matched = [];\n    var el = element.parentNode;\n\n    while (!isNOU(el)) {\n      if (matches(el, selector)) {\n        matched.push(el);\n      }\n\n      el = el.parentNode;\n    }\n\n    return matched;\n  };\n\n  TreeView.prototype.isDoubleTapped = function (e) {\n    var target = e.originalEvent.target;\n    var secondTap;\n\n    if (target && e.tapCount) {\n      if (e.tapCount === 1) {\n        this.firstTap = closest(target, '.' + LISTITEM);\n      } else if (e.tapCount === 2) {\n        secondTap = closest(target, '.' + LISTITEM);\n      }\n    }\n\n    return this.firstTap === secondTap;\n  };\n\n  TreeView.prototype.isDescendant = function (parent, child) {\n    var node = child.parentNode;\n\n    while (!isNOU(node)) {\n      if (node === parent) {\n        return true;\n      }\n\n      node = node.parentNode;\n    }\n\n    return false;\n  };\n\n  TreeView.prototype.showSpinner = function (element) {\n    addClass([element], LOAD);\n    createSpinner({\n      target: element,\n      width: Browser.isDevice ? 16 : 14\n    }, this.createElement);\n    showSpinner(element);\n  };\n\n  TreeView.prototype.hideSpinner = function (element) {\n    hideSpinner(element);\n    element.innerHTML = '';\n    removeClass([element], LOAD);\n  };\n\n  TreeView.prototype.setCheckedNodes = function (nodes) {\n    nodes = JSON.parse(JSON.stringify(nodes));\n    this.uncheckAll(this.checkedNodes);\n    this.setIndeterminate(nodes);\n\n    if (nodes.length > 0) {\n      this.checkAll(nodes);\n    }\n  };\n  /**\n   * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel\n   */\n\n\n  TreeView.prototype.setValidCheckedNode = function (node) {\n    if (this.dataType === 1) {\n      var mapper = this.fields;\n      var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', node, true));\n\n      if (resultData[0]) {\n        this.setChildCheckState(resultData, node, resultData[0]);\n\n        if (this.autoCheck) {\n          var parent_4 = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;\n          var childNodes = this.getChildNodes(this.treeData, parent_4);\n          var count = 0;\n\n          for (var len = 0; len < childNodes.length; len++) {\n            var childId = childNodes[len][this.fields.id].toString();\n\n            if (this.checkedNodes.indexOf(childId) !== -1) {\n              count++;\n            }\n          }\n\n          if (count === childNodes.length && this.checkedNodes.indexOf(parent_4) === -1 && parent_4) {\n            this.checkedNodes.push(parent_4);\n          }\n        }\n      }\n    } else if (this.dataType === 2) {\n      for (var a = 0; a < this.treeData.length; a++) {\n        var index = this.treeData[a][this.fields.id] ? this.treeData[a][this.fields.id].toString() : '';\n\n        if (index === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n          break;\n        }\n\n        var childItems = getValue(this.fields.child.toString(), this.treeData[a]);\n\n        if (childItems) {\n          this.setChildCheckState(childItems, node, this.treeData[a]);\n        }\n      }\n    }\n  };\n  /**\n   * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel(for hierarchical DS)\n   */\n\n\n  TreeView.prototype.setChildCheckState = function (childItems, node, treeData) {\n    var checkedParent;\n    var count = 0;\n\n    if (this.dataType === 1) {\n      if (treeData) {\n        checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;\n      }\n\n      for (var index = 0; index < childItems.length; index++) {\n        var checkNode = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : null;\n\n        if (treeData && checkedParent && this.autoCheck) {\n          if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {\n            this.checkedNodes.push(checkNode);\n          }\n        }\n\n        if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n        }\n\n        var subChildItems = this.getChildNodes(this.treeData, checkNode);\n\n        if (subChildItems) {\n          this.setChildCheckState(subChildItems, node, treeData);\n        }\n      }\n    } else {\n      if (treeData) {\n        checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n      }\n\n      for (var index = 0; index < childItems.length; index++) {\n        var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n\n        if (treeData && checkedParent && this.autoCheck) {\n          if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n            this.checkedNodes.push(checkedChild);\n          }\n        }\n\n        if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {\n          this.checkedNodes.push(node);\n        }\n\n        var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n\n        if (subChildItems) {\n          this.setChildCheckState(subChildItems, node, childItems[index]);\n        }\n\n        if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n          count++;\n        }\n\n        if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {\n          this.checkedNodes.push(checkedParent);\n        }\n      }\n    }\n  };\n\n  TreeView.prototype.setIndeterminate = function (nodes) {\n    for (var i = 0; i < nodes.length; i++) {\n      this.setValidCheckedNode(nodes[i]);\n    }\n  };\n\n  TreeView.prototype.updatePosition = function (id, newData, isRefreshChild, childValue) {\n    if (this.dataType === 1) {\n      var pos = this.getDataPos(this.treeData, this.fields, id);\n      this.treeData.splice(pos, 1, newData);\n\n      if (isRefreshChild) {\n        this.removeChildNodes(id);\n\n        for (var j = 0; j < childValue.length; j++) {\n          this.treeData.splice(pos, 0, childValue[j]);\n          pos++;\n        }\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    } else {\n      this.updateChildPosition(this.treeData, this.fields, id, [newData], undefined);\n    }\n  };\n\n  TreeView.prototype.updateChildPosition = function (treeData, mapper, currID, newData, index) {\n    var found;\n\n    for (var i = 0, objlen = treeData.length; i < objlen; i++) {\n      var nodeId = getValue(mapper.id, treeData[i]);\n\n      if (treeData[i] && nodeId && nodeId.toString() === currID) {\n        treeData[i] = newData[0];\n        return true;\n      } else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, treeData[i]))) {\n        var childObj = getValue(mapper.child, treeData[i]);\n        found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);\n\n        if (found !== undefined) {\n          break;\n        }\n      } else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', treeData[i]))) {\n        var childData = getValue('child', treeData[i]);\n        found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);\n\n        if (found !== undefined) {\n          break;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  TreeView.prototype.dynamicState = function () {\n    this.setDragAndDrop(this.allowDragAndDrop);\n    this.wireEditingEvents(this.allowEditing);\n\n    if (!this.disabled) {\n      this.wireEvents();\n      this.setRipple();\n    } else {\n      this.unWireEvents();\n      this.rippleFn();\n      this.rippleIconFn();\n    }\n  };\n\n  TreeView.prototype.crudOperation = function (operation, nodes, target, newText, newNode, index, prevent) {\n    var _this = this;\n\n    var data = this.fields.dataSource;\n    var matchedArr = [];\n    var query = this.getQuery(this.fields);\n    var key = this.fields.id;\n    var crud;\n    var changes = {\n      addedRecords: [],\n      deletedRecords: [],\n      changedRecords: []\n    };\n    var nodesID = [];\n\n    if (nodes) {\n      nodesID = this.nodeType(nodes);\n    } else if (target) {\n      if (typeof target == \"string\") {\n        nodesID[0] = target.toString();\n      } else if (typeof target === \"object\") {\n        nodesID[0] = target.getAttribute(\"data-uid\").toString();\n      }\n    }\n\n    for (var i = 0, len = nodesID.length; i < len; i++) {\n      var liEle = this.getElement(nodesID[i]);\n\n      if (isNullOrUndefined(liEle)) {\n        continue;\n      }\n\n      var removedData = this.getNodeObject(nodesID[i]);\n      matchedArr.push(removedData);\n    }\n\n    switch (operation) {\n      case 'delete':\n        if (nodes.length == 1) {\n          crud = data.remove(key, matchedArr[0], query.fromTable, query);\n        } else {\n          changes.deletedRecords = matchedArr;\n          crud = data.saveChanges(changes, key, query.fromTable, query);\n        }\n\n        crud.then(function (e) {\n          return _this.deleteSuccess(nodesID);\n        }).catch(function (e) {\n          return _this.dmFailure(e);\n        });\n        break;\n\n      case 'update':\n        matchedArr[0][this.fields.text] = newText;\n        crud = data.update(key, matchedArr[0], query.fromTable, query);\n        crud.then(function (e) {\n          return _this.editSucess(target, newText, prevent);\n        }).catch(function (e) {\n          return _this.dmFailure(e, target, prevent);\n        });\n        break;\n\n      case 'insert':\n        if (newNode.length == 1) {\n          crud = data.insert(newNode[0], query.fromTable, query);\n        } else {\n          var arr = [];\n\n          for (var i = 0, len = newNode.length; i < len; i++) {\n            arr.push(newNode[i]);\n          }\n\n          changes.addedRecords = arr;\n          crud = data.saveChanges(changes, key, query.fromTable, query);\n        }\n\n        crud.then(function (e) {\n          var dropLi = _this.getElement(target);\n\n          _this.addSuccess(newNode, dropLi, index);\n\n          _this.preventExpand = false;\n        }).catch(function (e) {\n          return _this.dmFailure(e);\n        });\n        break;\n    }\n  };\n\n  TreeView.prototype.deleteSuccess = function (nodes) {\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      var liEle = this.getElement(nodes[i]);\n\n      if (isNOU(liEle)) {\n        continue;\n      }\n\n      this.removeNode(liEle);\n    }\n\n    this.updateInstance();\n\n    if (this.dataType === 1) {\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    }\n\n    this.triggerEvent();\n  };\n\n  TreeView.prototype.editSucess = function (target, newText, prevent) {\n    var liEle = this.getElement(target);\n    var txtEle = select('.' + LISTTEXT, liEle);\n    this.appendNewText(liEle, txtEle, newText, prevent);\n  };\n\n  TreeView.prototype.addSuccess = function (nodes, dropLi, index) {\n    var dropUl;\n    var icon = dropLi ? dropLi.querySelector('.' + ICON) : null;\n    var proxy = this;\n\n    if (dropLi && icon && icon.classList.contains(EXPANDABLE) && dropLi.querySelector('.' + PARENTITEM) === null) {\n      proxy.renderChildNodes(dropLi, null, function () {\n        dropUl = dropLi.querySelector('.' + PARENTITEM);\n        proxy.addGivenNodes(nodes, dropLi, index, true, dropUl);\n        proxy.triggerEvent();\n      });\n    } else {\n      this.addGivenNodes(nodes, dropLi, index, true);\n      this.triggerEvent();\n    }\n  };\n\n  TreeView.prototype.dmFailure = function (e, target, prevent) {\n    if (target) {\n      this.updatePreviousText(target, prevent);\n    }\n\n    this.trigger('actionFailure', {\n      error: e\n    });\n  };\n\n  TreeView.prototype.updatePreviousText = function (target, prevent) {\n    var liEle = this.getElement(target);\n    var txtEle = select('.' + LISTTEXT, liEle);\n    this.updateText(liEle, txtEle, this.oldText, prevent);\n  };\n  /**\n   * Called internally if any of the property value changed.\n   * @param  {TreeView} newProp\n   * @param  {TreeView} oldProp\n   * @returns void\n   * @private\n   */\n\n\n  TreeView.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'allowDragAndDrop':\n          this.setDragAndDrop(this.allowDragAndDrop);\n          break;\n\n        case 'dragArea':\n          if (this.allowDragAndDrop) {\n            this.dragObj.dragArea = this.dragArea;\n          }\n\n          break;\n\n        case 'allowEditing':\n          this.wireEditingEvents(this.allowEditing);\n          break;\n\n        case 'allowMultiSelection':\n          if (this.selectedNodes.length > 1) {\n            var sNode = this.getElement(this.selectedNodes[0]);\n            this.isLoaded = false;\n            this.removeSelectAll();\n            this.selectNode(sNode, null);\n            this.isLoaded = true;\n          }\n\n          this.setMultiSelect(this.allowMultiSelection);\n          this.addMultiSelect(this.allowMultiSelection);\n          break;\n\n        case 'allowTextWrap':\n          this.setTextWrap();\n          this.updateWrap();\n          break;\n\n        case 'checkedNodes':\n          if (this.showCheckBox) {\n            this.checkedNodes = oldProp.checkedNodes;\n            this.setCheckedNodes(newProp.checkedNodes);\n          }\n\n          break;\n\n        case 'autoCheck':\n          if (this.showCheckBox) {\n            this.autoCheck = newProp.autoCheck;\n            this.ensureIndeterminate();\n          }\n\n          break;\n\n        case 'cssClass':\n          this.setCssClass(oldProp.cssClass, newProp.cssClass);\n          break;\n\n        case 'enableRtl':\n          this.setEnableRtl();\n          break;\n\n        case 'expandedNodes':\n          this.isAnimate = false;\n          this.setProperties({\n            expandedNodes: []\n          }, true);\n          this.collapseAll();\n          this.isInitalExpand = true;\n          this.setProperties({\n            expandedNodes: isNOU(newProp.expandedNodes) ? [] : newProp.expandedNodes\n          }, true);\n          this.doExpandAction();\n          this.isInitalExpand = false;\n          this.isAnimate = true;\n          break;\n\n        case 'expandOn':\n          this.wireExpandOnEvent(false);\n          this.setExpandOnType();\n\n          if (this.expandOnType !== 'None' && !this.disabled) {\n            this.wireExpandOnEvent(true);\n          }\n\n          break;\n\n        case 'disabled':\n          this.setDisabledMode();\n          this.dynamicState();\n          break;\n\n        case 'fields':\n          this.isAnimate = false;\n          this.isFieldChange = true;\n          this.initialRender = true;\n          this.reRenderNodes();\n          this.initialRender = false;\n          this.isAnimate = true;\n          this.isFieldChange = false;\n          break;\n\n        case 'fullRowSelect':\n          this.setFullRow(this.fullRowSelect);\n          this.addFullRow(this.fullRowSelect);\n\n          if (this.allowTextWrap) {\n            this.setTextWrap();\n            this.updateWrap();\n          }\n\n          break;\n\n        case 'loadOnDemand':\n          if (this.loadOnDemand === false && !this.onLoaded) {\n            var nodes = this.element.querySelectorAll('li');\n            var i = 0;\n\n            while (i < nodes.length) {\n              if (nodes[i].getAttribute('aria-expanded') !== 'true') {\n                this.renderChildNodes(nodes[i], true, null, true);\n              }\n\n              i++;\n            }\n\n            this.onLoaded = true;\n          }\n\n          break;\n\n        case 'nodeTemplate':\n          this.hasTemplate = false;\n          this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n          this.reRenderNodes();\n          break;\n\n        case 'selectedNodes':\n          this.removeSelectAll();\n          this.setProperties({\n            selectedNodes: newProp.selectedNodes\n          }, true);\n          this.doSelectionAction();\n          break;\n\n        case 'showCheckBox':\n          this.reRenderNodes();\n          break;\n\n        case 'sortOrder':\n          this.reRenderNodes();\n          break;\n\n        case 'fullRowNavigable':\n          this.setProperties({\n            fullRowNavigable: newProp.fullRowNavigable\n          }, true);\n          this.listBaseOption.itemNavigable = newProp.fullRowNavigable;\n          this.reRenderNodes();\n          break;\n      }\n    }\n  };\n  /**\n   * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.\n   */\n\n\n  TreeView.prototype.destroy = function () {\n    this.clearTemplate();\n    this.element.removeAttribute('aria-activedescendant');\n    this.element.removeAttribute('tabindex');\n    this.unWireEvents();\n    this.wireEditingEvents(false);\n\n    if (!this.disabled) {\n      this.rippleFn();\n      this.rippleIconFn();\n    }\n\n    this.setCssClass(this.cssClass, null);\n    this.setDragAndDrop(false);\n    this.setFullRow(false);\n\n    if (this.ulElement && this.ulElement.parentElement) {\n      this.ulElement.parentElement.removeChild(this.ulElement);\n    }\n\n    _super.prototype.destroy.call(this);\n  };\n  /**\n   * Adds the collection of TreeView nodes based on target and index position. If target node is not specified,\n   * then the nodes are added as children of the given parentID or in the root level of TreeView.\n   * @param  { { [key: string]: Object }[] } nodes - Specifies the array of JSON data that has to be added.\n   * @param  { string | Element } target - Specifies ID of TreeView node/TreeView node as target element.\n   * @param  { number } index - Specifies the index to place the newly added nodes in the target element.\n   * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n   */\n\n\n  TreeView.prototype.addNodes = function (nodes, target, index, preventTargetExpand) {\n    if (isNOU(nodes)) {\n      return;\n    }\n\n    nodes = JSON.parse(JSON.stringify(nodes));\n    var dropLi = this.getElement(target);\n    this.preventExpand = preventTargetExpand;\n\n    if (this.fields.dataSource instanceof DataManager) {\n      if (!this.isOffline) {\n        this.crudOperation('insert', null, target, null, nodes, index, this.preventExpand);\n      } else {\n        this.addSuccess(nodes, dropLi, index);\n      }\n    } else if (this.dataType === 2) {\n      this.addGivenNodes(nodes, dropLi, index);\n    } else {\n      if (dropLi) {\n        this.addGivenNodes(nodes, dropLi, index);\n      } else {\n        nodes = this.getSortedData(nodes);\n\n        for (var i = 0; i < nodes.length; i++) {\n          var pid = getValue(this.fields.parentID, nodes[i]);\n          dropLi = pid ? this.getElement(pid.toString()) : pid;\n          this.addGivenNodes([nodes[i]], dropLi, index);\n        }\n      }\n\n      this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n    }\n\n    this.updateCheckedStateFromDS();\n\n    if (this.showCheckBox && dropLi) {\n      this.ensureParentCheckState(dropLi);\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false) {\n      this.preventExpand = false;\n      this.triggerEvent();\n    }\n  };\n  /**\n   * Instead of clicking on the TreeView node for editing, we can enable it by using\n   * `beginEdit` property. On passing the node ID or element through this property, the edit textBox\n   * will be created for the particular node thus allowing us to edit it.\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n   */\n\n\n  TreeView.prototype.beginEdit = function (node) {\n    var ele = this.getElement(node);\n\n    if (isNOU(ele) || this.disabled) {\n      return;\n    }\n\n    this.createTextbox(ele, null);\n  };\n  /**\n   * Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes\n   * as argument to this method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n   */\n\n\n  TreeView.prototype.checkAll = function (nodes) {\n    if (this.showCheckBox) {\n      this.doCheckBoxAction(nodes, true);\n    }\n  };\n  /**\n   * Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.\n   * You can also collapse all the nodes excluding the hidden nodes by setting **excludeHiddenNodes** to true. If you want to collapse\n   * a specific level of nodes, set **level** as argument to collapseAll method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/ array of TreeView node.\n   * @param  {number} level - TreeView nodes will collapse up to the given level.\n   * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes of TreeView when collapsing all nodes.\n   */\n\n\n  TreeView.prototype.collapseAll = function (nodes, level, excludeHiddenNodes) {\n    if (!isNOU(nodes)) {\n      this.doGivenAction(nodes, COLLAPSIBLE, false);\n    } else {\n      if (level > 0) {\n        this.collapseByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n      } else {\n        this.collapseAllNodes(excludeHiddenNodes);\n      }\n    }\n  };\n  /**\n   * Disables the collection of nodes by passing the ID of nodes or node elements in the array.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n   */\n\n\n  TreeView.prototype.disableNodes = function (nodes) {\n    if (!isNOU(nodes)) {\n      this.doDisableAction(nodes);\n    }\n  };\n  /**\n   * Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n   */\n\n\n  TreeView.prototype.enableNodes = function (nodes) {\n    if (!isNOU(nodes)) {\n      this.doEnableAction(nodes);\n    }\n  };\n  /**\n   * Ensures visibility of the TreeView node by using node ID or node element.\n   * When many TreeView nodes are present and we need to find a particular node, `ensureVisible` property\n   * helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView nodes.\n   */\n\n\n  TreeView.prototype.ensureVisible = function (node) {\n    var liEle = this.getElement(node);\n\n    if (isNOU(liEle)) {\n      return;\n    }\n\n    var parents = this.parents(liEle, '.' + LISTITEM);\n    this.expandAll(parents);\n    setTimeout(function () {\n      liEle.scrollIntoView(true);\n    }, 450);\n  };\n  /**\n   * Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes\n   * as argument to this method. You can also expand all the collapsed nodes by excluding the hidden nodes by setting\n   * **excludeHiddenNodes** to true to this method. To expand a specific level of nodes, set **level** as argument to expandAll method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n   * @param  {number} level - TreeView nodes will expand up to the given level.\n   * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes when expanding all nodes.\n   */\n\n\n  TreeView.prototype.expandAll = function (nodes, level, excludeHiddenNodes) {\n    if (!isNOU(nodes)) {\n      this.doGivenAction(nodes, EXPANDABLE, true);\n    } else {\n      if (level > 0) {\n        this.expandByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n      } else {\n        this.expandAllNodes(excludeHiddenNodes);\n      }\n    }\n  };\n  /**\n   * Gets all the checked nodes including child, whether it is loaded or not.\n   */\n\n\n  TreeView.prototype.getAllCheckedNodes = function () {\n    var checkNodes = this.checkedNodes;\n    return checkNodes;\n  };\n  /**\n  * Gets all the disabled nodes including child, whether it is loaded or not.\n  */\n\n\n  TreeView.prototype.getDisabledNodes = function () {\n    var disabledNodes = this.disableNode;\n    return disabledNodes;\n  };\n  /**\n   * Get the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n   */\n\n\n  TreeView.prototype.getNode = function (node) {\n    var ele = this.getElement(node);\n    return this.getNodeData(ele, true);\n  };\n  /**\n   * To get the updated data source of TreeView after performing some operation like drag and drop, node editing,\n   * node selecting/unSelecting, node expanding/collapsing, node checking/unChecking, adding and removing node.\n   * * If you pass the ID of TreeView node as arguments for this method then it will return the updated data source\n   * of the corresponding node otherwise it will return the entire updated data source of TreeView.\n   * * The updated data source also contains custom attributes if you specified in data source.\n   * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n   * @isGenericType true\n   */\n\n\n  TreeView.prototype.getTreeData = function (node) {\n    var id = this.getId(node);\n    this.updatePersistProp();\n\n    if (isNOU(id)) {\n      return this.treeData;\n    } else {\n      var data = this.getNodeObject(id);\n      return isNOU(data) ? [] : [data];\n    }\n  };\n  /**\n   * Moves the collection of nodes within the same TreeView based on target or its index position.\n   * @param  {string[] | Element[]} sourceNodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n   * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n   * @param  {number} index - Specifies the index to place the moved nodes in the target element.\n   * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n   */\n\n\n  TreeView.prototype.moveNodes = function (sourceNodes, target, index, preventTargetExpand) {\n    var dropLi = this.getElement(target);\n\n    if (isNOU(dropLi)) {\n      return;\n    }\n\n    for (var i = 0; i < sourceNodes.length; i++) {\n      var dragLi = this.getElement(sourceNodes[i]);\n\n      if (isNOU(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n        continue;\n      }\n\n      this.preventExpand = preventTargetExpand;\n      this.dropAsChildNode(dragLi, dropLi, this, index);\n    }\n\n    if (this.fields.dataSource instanceof DataManager === false) {\n      this.preventExpand = false;\n    }\n\n    this.triggerEvent();\n  };\n  /**\n   * Refreshes a particular node of the TreeView.\n   * @param  {string | Element} target - Specifies the ID of TreeView node or TreeView node as target element.\n   * @param  {{ [key: string]: Object }[]} newData - Specifies the new data of TreeView node.\n   */\n\n\n  TreeView.prototype.refreshNode = function (target, newData) {\n    if (isNOU(target) || isNOU(newData)) {\n      return;\n    }\n\n    var id;\n    var isRefreshChild = false;\n\n    if (this.dataType == 1 && newData.length > 1) {\n      isRefreshChild = true;\n    } else if (this.dataType == 2 && newData.length === 1) {\n      var updatedChildValue = getValue(this.fields.child.toString(), newData[0]);\n\n      if (!isNOU(updatedChildValue)) {\n        isRefreshChild = true;\n      }\n    }\n\n    var liEle = this.getElement(target);\n    id = liEle ? liEle.getAttribute('data-uid') : target ? target.toString() : null;\n    this.refreshData = this.getNodeObject(id);\n    newData = JSON.parse(JSON.stringify(newData));\n    /* eslint-disable */\n\n    var newNodeData;\n    var parentData;\n\n    if (this.dataType == 1 && isRefreshChild) {\n      for (var k = 0; k < newData.length; k++) {\n        if (isNOU(newData[k][this.fields.parentID])) {\n          parentData = newData[k];\n          newData.splice(k, 1);\n          break;\n        }\n      }\n\n      newNodeData = extend({}, this.refreshData, parentData);\n    } else {\n      newNodeData = extend({}, this.refreshData, newData[0]);\n    }\n\n    if (isNOU(liEle)) {\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n      return;\n    }\n\n    this.isRefreshed = true;\n    var level = parseFloat(liEle.getAttribute('aria-level'));\n    var newliEle = ListBase.createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);\n    var ul = select('.' + PARENTITEM, liEle);\n    var childItems = getValue(this.fields.child.toString(), newNodeData);\n\n    if (isRefreshChild && ul || isRefreshChild && !isNOU(childItems)) {\n      var parentEle = liEle.parentElement;\n      var index = Array.prototype.indexOf.call(parentEle.childNodes, liEle);\n      remove(liEle);\n      parentEle.insertBefore(newliEle[0], parentEle.childNodes[index]);\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n\n      if (isRefreshChild && ul) {\n        this.expandAll([id]);\n      }\n    } else {\n      var txtEle = select('.' + TEXTWRAP, liEle);\n      var newTextEle = select('.' + TEXTWRAP, newliEle[0]);\n      var icon = select('div.' + ICON, txtEle);\n      var newIcon = select('div.' + ICON, newTextEle);\n\n      if (icon && newIcon) {\n        if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {\n          removeClass([newIcon], EXPANDABLE);\n          addClass([newIcon], COLLAPSIBLE);\n        } else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {\n          removeClass([newIcon], COLLAPSIBLE);\n          addClass([newIcon], EXPANDABLE);\n        } else if (icon.classList.contains('interaction')) {\n          addClass([newIcon], 'interaction');\n        }\n      }\n\n      remove(txtEle);\n      var fullEle = select('.' + FULLROW, liEle);\n      fullEle.parentNode.insertBefore(newTextEle, fullEle.nextSibling);\n      this.updatePosition(id, newNodeData, isRefreshChild, newData);\n    }\n\n    liEle = this.getElement(target);\n\n    if (newNodeData[this.fields.tooltip]) {\n      liEle.setAttribute(\"title\", newNodeData[this.fields.tooltip]);\n    }\n\n    if (newNodeData.hasOwnProperty(this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {\n      var attr = {};\n      merge(attr, newNodeData[this.fields.htmlAttributes]);\n\n      if (attr.class) {\n        addClass([liEle], attr.class.split(' '));\n        delete attr.class;\n      } else {\n        attributes(liEle, attr);\n      }\n    }\n\n    if (this.selectedNodes.indexOf(id) !== -1) {\n      liEle.setAttribute('aria-selected', 'true');\n      addClass([liEle], ACTIVE);\n    }\n\n    this.isRefreshed = false;\n    this.triggerEvent();\n  };\n  /**\n   * Removes the collection of TreeView nodes by passing the array of node details as argument to this method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n   */\n\n\n  TreeView.prototype.removeNodes = function (nodes) {\n    if (!isNOU(nodes)) {\n      if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n        this.crudOperation('delete', nodes);\n      } else {\n        this.deleteSuccess(nodes);\n      }\n    }\n  };\n  /**\n   * Replaces the text of the TreeView node with the given text.\n   * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n   * @param  {string} newText - Specifies the new text of TreeView node.\n   */\n\n\n  TreeView.prototype.updateNode = function (target, newText) {\n    var _this = this;\n\n    if (isNOU(target) || isNOU(newText) || !this.allowEditing) {\n      return;\n    }\n\n    var liEle = this.getElement(target);\n\n    if (isNOU(liEle)) {\n      return;\n    }\n\n    var txtEle = select('.' + LISTTEXT, liEle);\n    this.updateOldText(liEle);\n    var eventArgs = this.getEditEvent(liEle, null, null);\n    this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n      if (!observedArgs.cancel) {\n        if (_this.fields.dataSource instanceof DataManager && !_this.isOffline) {\n          _this.crudOperation('update', null, target, newText, null, null, false);\n        } else {\n          _this.appendNewText(liEle, txtEle, newText, false);\n        }\n      }\n    });\n  };\n  /**\n   * Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes\n   * as argument to this method.\n   * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n   */\n\n\n  TreeView.prototype.uncheckAll = function (nodes) {\n    if (this.showCheckBox) {\n      this.doCheckBoxAction(nodes, false);\n    }\n  };\n\n  var TreeView_1;\n\n  __decorate([Property(false)], TreeView.prototype, \"allowDragAndDrop\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"allowEditing\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"allowMultiSelection\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"allowTextWrap\", void 0);\n\n  __decorate([Complex({}, NodeAnimationSettings)], TreeView.prototype, \"animation\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"checkedNodes\", void 0);\n\n  __decorate([Property('')], TreeView.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"disabled\", void 0);\n\n  __decorate([Property(null)], TreeView.prototype, \"dragArea\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"enableHtmlSanitizer\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"enablePersistence\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"expandedNodes\", void 0);\n\n  __decorate([Property('Auto')], TreeView.prototype, \"expandOn\", void 0);\n\n  __decorate([Complex({}, FieldsSettings)], TreeView.prototype, \"fields\", void 0);\n\n  __decorate([Property(true)], TreeView.prototype, \"fullRowSelect\", void 0);\n\n  __decorate([Property(true)], TreeView.prototype, \"loadOnDemand\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"locale\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"nodeTemplate\", void 0);\n\n  __decorate([Property()], TreeView.prototype, \"selectedNodes\", void 0);\n\n  __decorate([Property('None')], TreeView.prototype, \"sortOrder\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"showCheckBox\", void 0);\n\n  __decorate([Property(true)], TreeView.prototype, \"autoCheck\", void 0);\n\n  __decorate([Property(false)], TreeView.prototype, \"fullRowNavigable\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"actionFailure\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"created\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"dataBound\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"dataSourceChanged\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"drawNode\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"destroyed\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"keyPress\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeChecked\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeChecking\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeClicked\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeCollapsed\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeCollapsing\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeDragging\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeDragStart\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeDragStop\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeDropped\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeEdited\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeEditing\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeExpanded\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeExpanding\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeSelected\", void 0);\n\n  __decorate([Event()], TreeView.prototype, \"nodeSelecting\", void 0);\n\n  TreeView = TreeView_1 = __decorate([NotifyPropertyChanges], TreeView);\n  return TreeView;\n}(Component);\n\nexport { TreeView };","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/@syncfusion/ej2-navigations/src/treeview/treeview.js"],"names":["__extends","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","__decorate","decorators","target","key","desc","c","arguments","length","r","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","Component","isUndefined","Browser","compile","isNullOrUndefined","Property","NotifyPropertyChanges","ChildProperty","Complex","Event","EventHandler","KeyboardEvents","rippleEffect","Animation","remove","Draggable","Droppable","getElement","addClass","removeClass","closest","matches","detach","select","selectAll","isVisible","append","DataManager","Query","isNOU","Touch","getValue","setValue","extend","merge","attributes","ListBase","createCheckBox","rippleMouseHandler","Input","createSpinner","showSpinner","hideSpinner","ROOT","CONTROL","COLLAPSIBLE","EXPANDABLE","LISTITEM","LISTTEXT","LISTWRAP","IELISTWRAP","PARENTITEM","HOVER","ACTIVE","LOAD","PROCESS","ICON","TEXTWRAP","INPUT","INPUTGROUP","TREEINPUT","EDITING","RTL","INTERACTION","DRAGITEM","DROPPABLE","DRAGGING","SIBLING","DROPIN","DROPNEXT","DROPOUT","NODROP","FULLROWWRAP","FULLROW","SELECTED","EXPANDED","NODECOLLAPSED","DISABLE","DROPCOUNT","CHECK","INDETERMINATE","CHECKBOXWRAP","CHECKBOXFRAME","CHECKBOXRIPPLE","RIPPLE","RIPPLEELMENT","FOCUS","IMAGE","BIGGER","SMALL","CHILD","ITEM_ANIMATION_ACTIVE","DISABLED","treeAriaAttr","treeRole","itemRole","listRole","itemText","wrapperRole","FieldsSettings","_super","apply","ActionSettings","NodeAnimationSettings","effect","duration","easing","TreeView","options","element","_this","call","isRefreshed","preventExpand","checkedElement","disableNode","validArr","validNodes","expandChildren","isFieldChange","changeDataSource","hasTemplate","isFirstRender","isNodeDropped","mouseDownStatus","TreeView_1","getModuleName","preRender","checkActionNodes","parentNodeCheck","dragStartAction","isAnimate","keyConfigs","escape","end","enter","f2","home","moveDown","moveLeft","moveRight","moveUp","ctrlDown","ctrlUp","ctrlEnter","ctrlHome","ctrlEnd","ctrlA","shiftDown","shiftUp","shiftEnter","shiftHome","shiftEnd","csDown","csUp","csEnter","csHome","csEnd","space","listBaseOption","expandCollapse","showIcon","expandIconClass","ariaAttributes","expandIconPosition","itemCreated","e","beforeNodeCreate","enableHtmlSanitizer","itemNavigable","fullRowNavigable","updateListProp","fields","aniObj","treeList","isLoaded","isInitalExpand","index","setTouchClass","selectedNodes","setProperties","checkedNodes","expandedNodes","getPersistData","keyEntity","addOnPersist","render","initialRender","initialize","setDataBinding","setDisabledMode","setExpandOnType","disabled","setRipple","wireEditingEvents","allowEditing","setDragAndDrop","allowDragAndDrop","wireEvents","renderComplete","setAttribute","id","setCssClass","cssClass","setEnableRtl","setFullRow","fullRowSelect","setTextWrap","nodeTemplateFn","templateComplier","nodeTemplate","classList","add","enableRtl","tempStr","rippleModel","selector","ignore","rippleFn","iconModel","isCenterRipple","rippleIconFn","isEnabled","setMultiSelect","firstUl","removeAttribute","template","document","querySelectorAll","querySelector","innerHTML","trim","undefined","push","dataSource","isOffline","offline","ready","then","pop","treeData","result","isNumberTypeId","getType","setRootData","renderItems","finalize","catch","trigger","error","executeQuery","getQuery","rootData","JSON","parse","stringify","mapper","value","columns","query","prop","getActualProperties","_i","_a","keys","col","indexOf","from","tableName","clone","addSorting","sortOrder","text","parentID","where","parseFloat","dataType","getDataType","groupedData","getGroupedData","rootItems","getChildNodes","isSorted","level","sortedData","getSortedData","ulElement","createList","createElement","appendChild","rootNodes","loadOnDemand","renderChildNodes","parentEle","finalizeNode","parentCheckData","updateCheckedStateFromDS","autoCheck","showCheckBox","updateParentCheckState","resultData","executeLocal","isChecked","resultId","toString","resultPId","hasChildren","id_1","childData","child","childId","mapper_1","checkState","getCheckedNodeDetails","checkIndeterminateState","checkedId","checkedData","fieldId","childItems","updateChildCheckState","enablePersistence","checkNodes","count","len","childNodes","preElement","check","changeState","indeterminate","childCheckedElement","node","nodeId","getAttribute","j","nodeCheck","data","ariaChecked","checkedParent","checkedChild","subChildItems","checkboxEle","touchClass","icon","item","insertBefore","checkValue","curData","addCheck","frame","frameMouseHandler","createFullRow","allowMultiSelection","contains","addActionClass","selected","expanded","textEle","dataId","renderNodeTemplate","eventArgs","nodeData","rippleSpan","parentElement","action","actionValue","ds","groupBy","cusQuery","group","getDataSource","grpItem","itemObj","items","list","iNodes","k","sNodes","selectNode","cNodes","disableExpandAttr","eNodes","updateList","updateCheckedProp","nodes","concat","ensureIndeterminate","liElement","ensureParentCheckState","ensureChildCheckState","indeterminateNodes","checkBoxEle","getElementsByClassName","parentUL","currentParent","childElement","checkBoxes","parentCheck","childCheck","expandState","checkedState","currentLoadData","ele","splice","isNodeChecked","doCheckBoxAction","doCheck","li","liEle","setValidCheckedNode","dynamicCheckState","updateField","checkBox","validateCheckNode","updateFieldChecked","checkbox","currLi","nodeDetails","getNodeData","parent_1","updateIndeterminate","subChild","updateChildIndeterminate","indeterminateData","getTreeData","parent","subId","childElementCheck","innerChild","wrapper","state","isPrevent","isAdd","getCheckEvent","observedArgs","cancel","nodeCheckAction","ariaState","frameSpan","removeCheck","ensureStateChange","checked","isInteracted","firstNode","updateIdAttr","allowTextWrap","updateWrap","renderReactTemplates","hasPid","doExpandAction","isIE","ulEle","liList","calculateWrap","nextElementSibling","style","height","offsetHeight","eUids","expandGivenNodes","eNode","expandAction","afterFinalized","arr","proxy","expandCallback","eUid","callback","doSelectionAction","sUids","sNode","selectGivenNodes","clickHandler","event","originalEvent","preventContextMenu","which","rippleElement","rippleIcons","removeHover","setFocusElement","checkWrapper","checkElement","triggerClickEvent","collapseNode","toggleSelect","nodeCheckedEvent","isCheck","expandNode","loaded","start_1","end_1","proxy_1","ul_1","liEle_1","setHeight","activeElement_1","animate","name","animation","expand","timingFunction","begin","args","overflow","HTMLElement","progress","display","animateHeight","expandedNode","ul","addExpand","expandArgs","getExpandEvent","colArgs","nodeCollapseAction","start","activeElement","collapse","collapsedNode","removeExpand","toRemove","visibility","remaining","timeStamp","currentHeight","parentLi","expandChild","eicon","parents","mapper_2","getChildFields","loadChild","setSelectionForChildNodes","ensureCheckNode","disableTreeNodes","renderSubChild","getNodeObject","doDisableAction","getFields","nodeLevel","dataLevel","getChildMapper","obj","parentId","isRoot","getChildGroup","objlen","cIcons","curLi","multiSelect","ctrlKey","isActive","unselectNode","getSelectEvent","nodeSelectAction","removeSelectAll","shiftKey","startNode","startIndex","endIndex","temp","currNode","addSelect","nodeUnselectAction","removeSelect","focusedNode","getFocusedNode","selectedLI","selectedLI_1","expandOnType","expandOn","isDevice","expandHandler","expandCollapseAction","nodeExpandAction","nodeName","liEles","getId","icon_1","keyActionHandler","inpEle","blur","focus","oldText","preventDefault","checkNode","openNode","shiftKeySelect","navigateNode","navigateRootNode","createTextbox","navigateToFocus","isUp","focusNode","pos","getBoundingClientRect","getScrollParent","parentPos","bottom","scrollTop","top","isVisibleInViewport","scrollIntoView","txtWrap","left","window","innerHeight","documentElement","clientHeight","right","innerWidth","clientWidth","scrollHeight","isTowards","nextNode","getNextNode","getPrevNode","checkWrap","nodeCheckingAction","allCheckNode","parentIndex","getChildItems","childStateChange","childIsCheck","newCheck","validateCheck","length_1","hierChildId","childId_1","toBeOpened","focusNextNode","setFocus","isBackwards","rootNode","getRootNode","getEndNode","selectedItem","fNode","firstElementChild","lastChild","previousSibling","nextSibling","prevNode","endNode","preNode","focusIn","focusOut","onMouseOver","currentLi","setHover","onMouseLeave","hoveredNode","fromDS","getText","pNode","parentNode","pid","checkboxElement","nodeFields","textContent","tempArr","isStringTemplate","root","slice","destroyTemplate","clearTemplate","reRenderNodes","removeChild","oldClass","newClass","split","editingHandler","oldInpEle","updateOldText","innerEle","className","attrs","getEditEvent","outerHTML","inpWidth","offsetWidth","style_1","isReact","setTimeout","renderTextBox","innerHtml","inputObj","createInput","properties","container","inputEle","setSelectionRange","wireInputEvents","editData","editFields","inputFocusOut","newText","txtEle","crudOperation","appendNewText","isInput","updateText","triggerEvent","newData","innerText","getChildNodeObject","newList","toBind","initializeDrag","destroyDrag","virtualEle","dragObj","enableTailMode","enableAutoScroll","dragArea","dragTarget","helper","sender","dragRoot","dragWrap","dragLi","isSameNode","cloneEle","cloneNode","children","nLen","cNode","body","cursor","dragData","dragStart","listItem","parseInt","getDragEvent","draggedNode","intDestroy","dragCancelAction","drag","cursorAt","targetTouches","dragAction","dragStop","removeVirtualEle","dropTarget","preventTargetExpand","dropRoot","isHelperElement","dragParent","draggedParentNode","dropObj","out","over","drop","dropAction","dropWrap","dropLi","isDescendant","templateTarget","offsetY","offsetX","appendIndicator","renderVirtualEle","dropIndicator","virEle","dragInstance","draggable","ej2_instances","droppedElement","appendNode","draggedElement","dropAsSiblingNode","dropAsChildNode","dropUl","dragParentUl","dragParentLi","pre","moveData","updateElement","updateAriaLevel","updateInstance","dropParentUl","expandParent","childLi","dropParentLi","removedData","updateChildField","refId","getDataPos","currPid","removeChildNodes","addChildData","dropIcon","generateIcon","generateUL","childElementCount","dragIcon","updateChildAriaLevel","sibEle","destroy","dragNode","dropData","draggedNodeData","newParent","dragLiParent","targetParent","indexValue","iconCss","iconClass","position","dropTar","parent_2","parent_3","hasAttribute","clonedNode","droppedNode","droppedNodeData","dropIndex","dropLevel","addFullRow","toAdd","rowDiv","addMultiSelect","liEles_1","liEles_2","collapseByLevel","excludeHiddenNodes","getVisibleNodes","collapseAllNodes","expandByLevel","expandAllNodes","eIcons","vNodes","removeNode","removeData","updateSelectedNodes","updateExpandedNodes","dm","newId","currId","doGivenAction","toExpand","addGivenNodes","isRemote","dropEle","updateMapper","createListItemFromJson","refNode","returnValue","toUpperCase","url","navigateUrl","updated","childObj","nodeType","validID","checkValidId","doEnableAction","strNodes","filter","filterNestedChild","updatePersistProp","removeField","sleNodes","l","slelen","enodes","nodelen","cnodes","m","names","field","getMapperProp","fieldName","proxy_2","touchEditObj","tap","isDoubleTapped","tapCount","wireClickEvent","proxy_3","touchClickObj","wireExpandOnEvent","proxy_4","touchExpandObj","mouseDownHandler","keyboardModule","keyAction","bind","eventName","unWireEvents","matched","el","secondTap","firstTap","width","setCheckedNodes","uncheckAll","setIndeterminate","checkAll","setChildCheckState","parent_4","a","updatePosition","isRefreshChild","childValue","updateChildPosition","currID","found","dynamicState","operation","newNode","prevent","matchedArr","crud","changes","addedRecords","deletedRecords","changedRecords","nodesID","fromTable","saveChanges","deleteSuccess","dmFailure","update","editSucess","insert","addSuccess","updatePreviousText","onPropertyChanged","newProp","oldProp","collapseAll","onLoaded","addNodes","beginEdit","disableNodes","enableNodes","ensureVisible","expandAll","getAllCheckedNodes","getDisabledNodes","disabledNodes","getNode","moveNodes","sourceNodes","refreshNode","updatedChildValue","refreshData","newNodeData","parentData","newliEle","newTextEle","newIcon","fullEle","tooltip","htmlAttributes","attr","class","removeNodes","updateNode"],"mappings":"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","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component, isUndefined, Browser, compile, isNullOrUndefined } from '@syncfusion/ej2-base';\nimport { Property, NotifyPropertyChanges, ChildProperty, Complex } from '@syncfusion/ej2-base';\nimport { Event, EventHandler, KeyboardEvents } from '@syncfusion/ej2-base';\nimport { rippleEffect, Animation, remove } from '@syncfusion/ej2-base';\nimport { Draggable, Droppable } from '@syncfusion/ej2-base';\nimport { getElement } from '@syncfusion/ej2-base';\nimport { addClass, removeClass, closest, matches, detach, select, selectAll, isVisible, append } from '@syncfusion/ej2-base';\nimport { DataManager, Query } from '@syncfusion/ej2-data';\nimport { isNullOrUndefined as isNOU, Touch, getValue, setValue, extend, merge, attributes } from '@syncfusion/ej2-base';\nimport { ListBase } from '@syncfusion/ej2-lists';\nimport { createCheckBox, rippleMouseHandler } from '@syncfusion/ej2-buttons';\nimport { Input } from '@syncfusion/ej2-inputs';\nimport { createSpinner, showSpinner, hideSpinner } from '@syncfusion/ej2-popups';\nvar ROOT = 'e-treeview';\nvar CONTROL = 'e-control';\nvar COLLAPSIBLE = 'e-icon-collapsible';\nvar EXPANDABLE = 'e-icon-expandable';\nvar LISTITEM = 'e-list-item';\nvar LISTTEXT = 'e-list-text';\nvar LISTWRAP = 'e-text-wrap';\nvar IELISTWRAP = 'e-ie-wrap';\nvar PARENTITEM = 'e-list-parent';\nvar HOVER = 'e-hover';\nvar ACTIVE = 'e-active';\nvar LOAD = 'e-icons-spinner';\nvar PROCESS = 'e-process';\nvar ICON = 'e-icons';\nvar TEXTWRAP = 'e-text-content';\nvar INPUT = 'e-input';\nvar INPUTGROUP = 'e-input-group';\nvar TREEINPUT = 'e-tree-input';\nvar EDITING = 'e-editing';\nvar RTL = 'e-rtl';\nvar INTERACTION = 'e-interaction';\nvar DRAGITEM = 'e-drag-item';\nvar DROPPABLE = 'e-droppable';\nvar DRAGGING = 'e-dragging';\nvar SIBLING = 'e-sibling';\nvar DROPIN = 'e-drop-in';\nvar DROPNEXT = 'e-drop-next';\nvar DROPOUT = 'e-drop-out';\nvar NODROP = 'e-no-drop';\nvar FULLROWWRAP = 'e-fullrow-wrap';\nvar FULLROW = 'e-fullrow';\nvar SELECTED = 'e-selected';\nvar EXPANDED = 'e-expanded';\nvar NODECOLLAPSED = 'e-node-collapsed';\nvar DISABLE = 'e-disable';\nvar DROPCOUNT = 'e-drop-count';\nvar CHECK = 'e-check';\nvar INDETERMINATE = 'e-stop';\nvar CHECKBOXWRAP = 'e-checkbox-wrapper';\nvar CHECKBOXFRAME = 'e-frame';\nvar CHECKBOXRIPPLE = 'e-ripple-container';\nvar RIPPLE = 'e-ripple';\nvar RIPPLEELMENT = 'e-ripple-element';\nvar FOCUS = 'e-node-focus';\nvar IMAGE = 'e-list-img';\nvar BIGGER = 'e-bigger';\nvar SMALL = 'e-small';\nvar CHILD = 'e-has-child';\nvar ITEM_ANIMATION_ACTIVE = 'e-animation-active';\nvar DISABLED = 'e-disabled';\nvar treeAriaAttr = {\n    treeRole: 'tree',\n    itemRole: 'treeitem',\n    listRole: 'group',\n    itemText: '',\n    wrapperRole: ''\n};\n/**\n * Configures the fields to bind to the properties of node in the TreeView component.\n */\nvar FieldsSettings = /** @class */ (function (_super) {\n    __extends(FieldsSettings, _super);\n    function FieldsSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property('child')\n    ], FieldsSettings.prototype, \"child\", void 0);\n    __decorate([\n        Property([])\n    ], FieldsSettings.prototype, \"dataSource\", void 0);\n    __decorate([\n        Property('expanded')\n    ], FieldsSettings.prototype, \"expanded\", void 0);\n    __decorate([\n        Property('hasChildren')\n    ], FieldsSettings.prototype, \"hasChildren\", void 0);\n    __decorate([\n        Property('htmlAttributes')\n    ], FieldsSettings.prototype, \"htmlAttributes\", void 0);\n    __decorate([\n        Property('iconCss')\n    ], FieldsSettings.prototype, \"iconCss\", void 0);\n    __decorate([\n        Property('id')\n    ], FieldsSettings.prototype, \"id\", void 0);\n    __decorate([\n        Property('imageUrl')\n    ], FieldsSettings.prototype, \"imageUrl\", void 0);\n    __decorate([\n        Property('isChecked')\n    ], FieldsSettings.prototype, \"isChecked\", void 0);\n    __decorate([\n        Property('parentID')\n    ], FieldsSettings.prototype, \"parentID\", void 0);\n    __decorate([\n        Property(null)\n    ], FieldsSettings.prototype, \"query\", void 0);\n    __decorate([\n        Property('selected')\n    ], FieldsSettings.prototype, \"selected\", void 0);\n    __decorate([\n        Property(null)\n    ], FieldsSettings.prototype, \"tableName\", void 0);\n    __decorate([\n        Property('text')\n    ], FieldsSettings.prototype, \"text\", void 0);\n    __decorate([\n        Property('tooltip')\n    ], FieldsSettings.prototype, \"tooltip\", void 0);\n    __decorate([\n        Property('navigateUrl')\n    ], FieldsSettings.prototype, \"navigateUrl\", void 0);\n    return FieldsSettings;\n}(ChildProperty));\nexport { FieldsSettings };\n/**\n * Configures animation settings for the TreeView component.\n */\nvar ActionSettings = /** @class */ (function (_super) {\n    __extends(ActionSettings, _super);\n    function ActionSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Property('SlideDown')\n    ], ActionSettings.prototype, \"effect\", void 0);\n    __decorate([\n        Property(400)\n    ], ActionSettings.prototype, \"duration\", void 0);\n    __decorate([\n        Property('linear')\n    ], ActionSettings.prototype, \"easing\", void 0);\n    return ActionSettings;\n}(ChildProperty));\nexport { ActionSettings };\n/**\n * Configures the animation settings for expanding and collapsing nodes in TreeView.\n */\nvar NodeAnimationSettings = /** @class */ (function (_super) {\n    __extends(NodeAnimationSettings, _super);\n    function NodeAnimationSettings() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    __decorate([\n        Complex({ effect: 'SlideUp', duration: 400, easing: 'linear' }, ActionSettings)\n    ], NodeAnimationSettings.prototype, \"collapse\", void 0);\n    __decorate([\n        Complex({ effect: 'SlideDown', duration: 400, easing: 'linear' }, ActionSettings)\n    ], NodeAnimationSettings.prototype, \"expand\", void 0);\n    return NodeAnimationSettings;\n}(ChildProperty));\nexport { NodeAnimationSettings };\n/**\n * The TreeView component is used to represent hierarchical data in a tree like structure with advanced\n * functions to perform edit, drag and drop, selection with check-box, and more.\n * ```html\n *  <div id=\"tree\"></div>\n * ```\n * ```typescript\n *  let treeObj: TreeView = new TreeView();\n *  treeObj.appendTo('#tree');\n * ```\n */\nvar TreeView = /** @class */ (function (_super) {\n    __extends(TreeView, _super);\n    function TreeView(options, element) {\n        var _this = _super.call(this, options, element) || this;\n        _this.isRefreshed = false;\n        _this.preventExpand = false;\n        _this.checkedElement = [];\n        _this.disableNode = [];\n        // eslint-disable-next-line\n        _this.validArr = [];\n        _this.validNodes = [];\n        _this.expandChildren = [];\n        _this.isFieldChange = false;\n        _this.changeDataSource = false;\n        _this.hasTemplate = false;\n        _this.isFirstRender = false;\n        // Specifies whether the node is dropped or not \n        _this.isNodeDropped = false;\n        _this.mouseDownStatus = false;\n        return _this;\n    }\n    TreeView_1 = TreeView;\n    /**\n     * Get component name.\n     *\n     * @returns {string} - returns module name.\n     * @private\n     */\n    TreeView.prototype.getModuleName = function () {\n        return 'treeview';\n    };\n    /**\n     * Initialize the event handler\n     *\n     * @returns {void}\n     */\n    TreeView.prototype.preRender = function () {\n        var _this = this;\n        this.checkActionNodes = [];\n        this.parentNodeCheck = [];\n        this.dragStartAction = false;\n        this.isAnimate = false;\n        this.keyConfigs = {\n            escape: 'escape',\n            end: 'end',\n            enter: 'enter',\n            f2: 'f2',\n            home: 'home',\n            moveDown: 'downarrow',\n            moveLeft: 'leftarrow',\n            moveRight: 'rightarrow',\n            moveUp: 'uparrow',\n            ctrlDown: 'ctrl+downarrow',\n            ctrlUp: 'ctrl+uparrow',\n            ctrlEnter: 'ctrl+enter',\n            ctrlHome: 'ctrl+home',\n            ctrlEnd: 'ctrl+end',\n            ctrlA: 'ctrl+A',\n            shiftDown: 'shift+downarrow',\n            shiftUp: 'shift+uparrow',\n            shiftEnter: 'shift+enter',\n            shiftHome: 'shift+home',\n            shiftEnd: 'shift+end',\n            csDown: 'ctrl+shift+downarrow',\n            csUp: 'ctrl+shift+uparrow',\n            csEnter: 'ctrl+shift+enter',\n            csHome: 'ctrl+shift+home',\n            csEnd: 'ctrl+shift+end',\n            space: 'space'\n        };\n        this.listBaseOption = {\n            expandCollapse: true,\n            showIcon: true,\n            expandIconClass: EXPANDABLE,\n            ariaAttributes: treeAriaAttr,\n            expandIconPosition: 'Left',\n            itemCreated: function (e) {\n                _this.beforeNodeCreate(e);\n            },\n            enableHtmlSanitizer: this.enableHtmlSanitizer,\n            itemNavigable: this.fullRowNavigable\n        };\n        this.updateListProp(this.fields);\n        this.aniObj = new Animation({});\n        this.treeList = [];\n        this.isLoaded = false;\n        this.isInitalExpand = false;\n        this.expandChildren = [];\n        this.index = 0;\n        this.setTouchClass();\n        if (isNOU(this.selectedNodes)) {\n            this.setProperties({ selectedNodes: [] }, true);\n        }\n        if (isNOU(this.checkedNodes)) {\n            this.setProperties({ checkedNodes: [] }, true);\n        }\n        if (isNOU(this.expandedNodes)) {\n            this.setProperties({ expandedNodes: [] }, true);\n        }\n        else {\n            this.isInitalExpand = true;\n        }\n    };\n    /**\n     * Get the properties to be maintained in the persisted state.\n     *\n     * @returns {string} - returns the persisted data\n     * @hidden\n     */\n    TreeView.prototype.getPersistData = function () {\n        var keyEntity = ['selectedNodes', 'checkedNodes', 'expandedNodes'];\n        return this.addOnPersist(keyEntity);\n    };\n    /**\n     * To Initialize the control rendering\n     *\n     * @private\n     * @returns {void}\n     */\n    TreeView.prototype.render = function () {\n        this.initialRender = true;\n        this.initialize();\n        this.setDataBinding(false);\n        this.setDisabledMode();\n        this.setExpandOnType();\n        if (!this.disabled) {\n            this.setRipple();\n        }\n        this.wireEditingEvents(this.allowEditing);\n        this.setDragAndDrop(this.allowDragAndDrop);\n        if (!this.disabled) {\n            this.wireEvents();\n        }\n        this.initialRender = false;\n        this.renderComplete();\n    };\n    TreeView.prototype.initialize = function () {\n        this.element.setAttribute('role', 'tree');\n        this.element.setAttribute('tabindex', '0');\n        this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n        this.setCssClass(null, this.cssClass);\n        this.setEnableRtl();\n        this.setFullRow(this.fullRowSelect);\n        this.setTextWrap();\n        this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n    };\n    TreeView.prototype.setDisabledMode = function () {\n        if (this.disabled) {\n            this.element.classList.add(DISABLED);\n        }\n        else {\n            this.element.classList.remove(DISABLED);\n        }\n    };\n    TreeView.prototype.setEnableRtl = function () {\n        (this.enableRtl ? addClass : removeClass)([this.element], RTL);\n    };\n    TreeView.prototype.setRipple = function () {\n        var tempStr = '.' + FULLROW + ',.' + TEXTWRAP;\n        var rippleModel = {\n            selector: tempStr,\n            ignore: '.' + TEXTWRAP + ' > .' + ICON + ',.' + INPUTGROUP + ',.' + INPUT + ', .' + CHECKBOXWRAP\n        };\n        this.rippleFn = rippleEffect(this.element, rippleModel);\n        var iconModel = {\n            selector: '.' + TEXTWRAP + ' > .' + ICON,\n            isCenterRipple: true\n        };\n        this.rippleIconFn = rippleEffect(this.element, iconModel);\n    };\n    TreeView.prototype.setFullRow = function (isEnabled) {\n        (isEnabled ? addClass : removeClass)([this.element], FULLROWWRAP);\n    };\n    TreeView.prototype.setMultiSelect = function (isEnabled) {\n        var firstUl = select('.' + PARENTITEM, this.element);\n        if (isEnabled) {\n            firstUl.setAttribute('aria-multiselectable', 'true');\n        }\n        else {\n            firstUl.removeAttribute('aria-multiselectable');\n        }\n    };\n    // eslint-disable-next-line\n    TreeView.prototype.templateComplier = function (template) {\n        if (template) {\n            this.hasTemplate = true;\n            // eslint-disable-next-line\n            var e = void 0;\n            this.element.classList.add(INTERACTION);\n            try {\n                if (document.querySelectorAll(template).length) {\n                    return compile(document.querySelector(template).innerHTML.trim());\n                }\n                else {\n                    return compile(template);\n                }\n            }\n            catch (e) {\n                return compile(template);\n            }\n        }\n        this.element.classList.remove(INTERACTION);\n        return undefined;\n    };\n    TreeView.prototype.setDataBinding = function (changeDataSource) {\n        var _this = this;\n        this.treeList.push('false');\n        if (this.fields.dataSource instanceof DataManager) {\n            /* eslint-disable */\n            this.isOffline = this.fields.dataSource.dataSource.offline;\n            if (this.fields.dataSource.ready) {\n                this.fields.dataSource.ready.then(function (e) {\n                    /* eslint-disable */\n                    _this.isOffline = _this.fields.dataSource.dataSource.offline;\n                    if (_this.fields.dataSource instanceof DataManager && _this.isOffline) {\n                        _this.treeList.pop();\n                        _this.treeData = e.result;\n                        _this.isNumberTypeId = _this.getType();\n                        _this.setRootData();\n                        _this.renderItems(true);\n                        if (_this.treeList.length === 0 && !_this.isLoaded) {\n                            _this.finalize();\n                        }\n                    }\n                }).catch(function (e) {\n                    _this.trigger('actionFailure', { error: e });\n                });\n            }\n            else {\n                this.fields.dataSource.executeQuery(this.getQuery(this.fields)).then(function (e) {\n                    _this.treeList.pop();\n                    _this.treeData = e.result;\n                    _this.isNumberTypeId = _this.getType();\n                    _this.setRootData();\n                    if (changeDataSource) {\n                        _this.changeDataSource = true;\n                    }\n                    _this.renderItems(true);\n                    _this.changeDataSource = false;\n                    if (_this.treeList.length === 0 && !_this.isLoaded) {\n                        _this.finalize();\n                    }\n                }).catch(function (e) {\n                    _this.trigger('actionFailure', { error: e });\n                });\n            }\n        }\n        else {\n            this.treeList.pop();\n            if (isNOU(this.fields.dataSource)) {\n                this.rootData = this.treeData = [];\n            }\n            else {\n                this.treeData = JSON.parse(JSON.stringify(this.fields.dataSource));\n                this.setRootData();\n            }\n            this.isNumberTypeId = this.getType();\n            this.renderItems(false);\n        }\n        if (this.treeList.length === 0 && !this.isLoaded) {\n            this.finalize();\n        }\n    };\n    TreeView.prototype.getQuery = function (mapper, value) {\n        if (value === void 0) { value = null; }\n        var columns = [];\n        var query;\n        if (!mapper.query) {\n            query = new Query();\n            var prop = this.getActualProperties(mapper);\n            for (var _i = 0, _a = Object.keys(prop); _i < _a.length; _i++) {\n                var col = _a[_i];\n                if (col !== 'dataSource' && col !== 'tableName' && col !== 'child' && !!mapper[col]\n                    && col !== 'url' && columns.indexOf(mapper[col]) === -1) {\n                    columns.push(mapper[col]);\n                }\n            }\n            query.select(columns);\n            if (prop.hasOwnProperty('tableName')) {\n                query.from(mapper.tableName);\n            }\n        }\n        else {\n            query = mapper.query.clone();\n        }\n        ListBase.addSorting(this.sortOrder, mapper.text, query);\n        if (!isNOU(value) && !isNOU(mapper.parentID)) {\n            query.where(mapper.parentID, 'equal', (this.isNumberTypeId ? parseFloat(value) : value));\n        }\n        return query;\n    };\n    TreeView.prototype.getType = function () {\n        return this.treeData[0] ? ((typeof getValue(this.fields.id, this.treeData[0]) === 'number') ? true : false) : false;\n    };\n    TreeView.prototype.setRootData = function () {\n        this.dataType = this.getDataType(this.treeData, this.fields);\n        if (this.dataType === 1) {\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n            var rootItems = this.getChildNodes(this.treeData, undefined, true);\n            if (isNOU(rootItems)) {\n                this.rootData = [];\n            }\n            else {\n                this.rootData = rootItems;\n            }\n        }\n        else {\n            this.rootData = this.treeData;\n        }\n    };\n    TreeView.prototype.renderItems = function (isSorted) {\n        /* eslint-disable */\n        this.listBaseOption.ariaAttributes.level = 1;\n        var sortedData = this.getSortedData(this.rootData);\n        this.ulElement = ListBase.createList(this.createElement, isSorted ? this.rootData : sortedData, this.listBaseOption);\n        this.element.appendChild(this.ulElement);\n        var rootNodes = this.ulElement.querySelectorAll('.e-list-item');\n        if (this.loadOnDemand === false) {\n            var i = 0;\n            while (i < rootNodes.length) {\n                this.renderChildNodes(rootNodes[i], true, null, true);\n                i++;\n            }\n        }\n        var parentEle = selectAll('.' + PARENTITEM, this.element);\n        if ((parentEle.length === 1 && (rootNodes && rootNodes.length !== 0)) || this.loadOnDemand) {\n            this.finalizeNode(this.element);\n        }\n        this.parentNodeCheck = [];\n        this.parentCheckData = [];\n        this.updateCheckedStateFromDS();\n        if (this.autoCheck && this.showCheckBox && !this.isLoaded) {\n            this.updateParentCheckState();\n        }\n    };\n    /**\n     * Update the checkedNodes from datasource at initial rendering\n     */\n    TreeView.prototype.updateCheckedStateFromDS = function (id) {\n        this.validNodes = [];\n        if (this.treeData && this.showCheckBox) {\n            if (this.dataType === 1) {\n                var mapper = this.fields;\n                var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n                for (var i = 0; i < resultData.length; i++) {\n                    var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n                    var resultPId = resultData[i][this.fields.parentID] ? resultData[i][this.fields.parentID].toString() : null;\n                    if (this.checkedNodes.indexOf(resultId) === -1 && !(this.isLoaded)) {\n                        this.checkedNodes.push(resultId);\n                    }\n                    if (resultData[i][this.fields.hasChildren]) {\n                        var id_1 = resultData[i][this.fields.id];\n                        var childData = new DataManager(this.treeData).\n                            executeLocal(new Query().where(mapper.parentID, 'equal', id_1, false));\n                        for (var child = 0; child < childData.length; child++) {\n                            var childId = childData[child][this.fields.id] ? childData[child][this.fields.id].toString() : null;\n                            if (this.checkedNodes.indexOf(childId) === -1 && this.autoCheck) {\n                                this.checkedNodes.push(childId);\n                            }\n                        }\n                    }\n                }\n                for (var i = 0; i < this.checkedNodes.length; i++) {\n                    var mapper_1 = this.fields;\n                    var checkState = new DataManager(this.treeData).\n                        executeLocal(new Query().where(mapper_1.id, 'equal', this.checkedNodes[i], true));\n                    if (checkState[0] && this.autoCheck) {\n                        this.getCheckedNodeDetails(mapper_1, checkState);\n                        this.checkIndeterminateState(checkState[0]);\n                    }\n                    if (checkState.length > 0) {\n                        var checkedId = checkState[0][this.fields.id] ? checkState[0][this.fields.id].toString() : null;\n                        if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {\n                            this.validNodes.push(checkedId);\n                        }\n                    }\n                    var checkedData = new DataManager(this.treeData).\n                        executeLocal(new Query().where(mapper_1.parentID, 'equal', this.checkedNodes[i], true));\n                    for (var index = 0; index < checkedData.length; index++) {\n                        var checkedId = checkedData[index][this.fields.id] ? checkedData[index][this.fields.id].toString() : null;\n                        if (this.checkedNodes.indexOf(checkedId) === -1 && this.autoCheck) {\n                            this.checkedNodes.push(checkedId);\n                        }\n                        if (this.checkedNodes.indexOf(checkedId) > -1 && this.validNodes.indexOf(checkedId) === -1) {\n                            this.validNodes.push(checkedId);\n                        }\n                    }\n                }\n            }\n            else if (this.dataType === 2 || (this.fields.dataSource instanceof DataManager &&\n                this.isOffline)) {\n                for (var index = 0; index < this.treeData.length; index++) {\n                    var fieldId = this.treeData[index][this.fields.id] ? this.treeData[index][this.fields.id].toString() : '';\n                    if (this.treeData[index][this.fields.isChecked] && !(this.isLoaded) && this.checkedNodes.indexOf(fieldId) === -1) {\n                        this.checkedNodes.push(fieldId);\n                    }\n                    if (this.checkedNodes.indexOf(fieldId) > -1 && this.validNodes.indexOf(fieldId) === -1) {\n                        this.validNodes.push(fieldId);\n                    }\n                    var childItems = getValue(this.fields.child.toString(), this.treeData[index]);\n                    if (childItems) {\n                        this.updateChildCheckState(childItems, this.treeData[index]);\n                    }\n                }\n                this.validNodes = (this.enablePersistence) ? this.checkedNodes : this.validNodes;\n            }\n            this.setProperties({ checkedNodes: this.validNodes }, true);\n        }\n    };\n    /**\n     * To check whether the list data has sub child and to change the parent check state accordingly\n     */\n    TreeView.prototype.getCheckedNodeDetails = function (mapper, checkNodes) {\n        var id = checkNodes[0][this.fields.parentID] ? checkNodes[0][this.fields.parentID].toString() : null;\n        var count = 0;\n        var element = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.id] + '\"]');\n        var parentEle = this.element.querySelector('[data-uid=\"' + checkNodes[0][this.fields.parentID] + '\"]');\n        if (!element && !parentEle) {\n            var len = this.parentNodeCheck.length;\n            if (this.parentNodeCheck.indexOf(id) === -1) {\n                this.parentNodeCheck.push(id);\n            }\n            var childNodes = this.getChildNodes(this.treeData, id);\n            for (var i = 0; i < childNodes.length; i++) {\n                var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n                if (this.checkedNodes.indexOf(childId) !== -1) {\n                    count++;\n                }\n                if (count === childNodes.length && this.checkedNodes.indexOf(id) === -1) {\n                    this.checkedNodes.push(id);\n                }\n            }\n            var preElement = new DataManager(this.treeData).\n                executeLocal(new Query().where(mapper.id, 'equal', id, true));\n            this.getCheckedNodeDetails(mapper, preElement);\n        }\n        else if (parentEle) {\n            var check = select('.' + CHECK, parentEle);\n            if (!check) {\n                this.changeState(parentEle, 'indeterminate', null, true, true);\n            }\n        }\n    };\n    /**\n     * Update the checkedNodes and parent state when all the child Nodes are in checkedstate at initial rendering\n     */\n    TreeView.prototype.updateParentCheckState = function () {\n        var indeterminate = selectAll('.' + INDETERMINATE, this.element);\n        var childCheckedElement;\n        for (var i = 0; i < indeterminate.length; i++) {\n            var node = closest(indeterminate[i], '.' + LISTITEM);\n            var nodeId = node.getAttribute('data-uid').toString();\n            if (this.dataType === 1) {\n                childCheckedElement = new DataManager(this.treeData).\n                    executeLocal(new Query().where(this.fields.parentID, 'equal', nodeId, true));\n            }\n            else {\n                childCheckedElement = this.getChildNodes(this.treeData, nodeId);\n            }\n            var count = 0;\n            if (childCheckedElement) {\n                for (var j = 0; j < childCheckedElement.length; j++) {\n                    var childId = childCheckedElement[j][this.fields.id].toString();\n                    if (this.checkedNodes.indexOf(childId) !== -1) {\n                        count++;\n                    }\n                }\n                if (count === childCheckedElement.length) {\n                    var nodeCheck = node.getAttribute('data-uid');\n                    if (this.checkedNodes.indexOf(nodeCheck) === -1) {\n                        this.checkedNodes.push(nodeCheck);\n                    }\n                    this.changeState(node, 'check', null, true, true);\n                }\n                else if (count === 0 && this.checkedNodes.length === 0) {\n                    this.changeState(node, 'uncheck', null, true, true);\n                }\n            }\n        }\n    };\n    /**\n     * Change the parent to indeterminate state whenever the child is in checked state which is not rendered in DOM\n     */\n    TreeView.prototype.checkIndeterminateState = function (data) {\n        var element;\n        if (this.dataType === 1) {\n            element = this.element.querySelector('[data-uid=\"' + data[this.fields.parentID] + '\"]');\n        }\n        else {\n            element = this.element.querySelector('[data-uid=\"' + data[this.fields.id] + '\"]');\n        }\n        if (element) {\n            var ariaChecked = element.querySelector('.' + CHECKBOXWRAP).getAttribute('aria-checked');\n            if (ariaChecked !== 'true') {\n                this.changeState(element, 'indeterminate', null, true, true);\n            }\n        }\n        else if (this.dataType === 2) {\n            var len = this.parentNodeCheck.length;\n            if (this.parentNodeCheck.indexOf(data[this.fields.id].toString()) === -1) {\n                this.parentNodeCheck.push(data[this.fields.id].toString());\n            }\n        }\n    };\n    /**\n     * Update the checkedNodes for child and subchild from datasource (hierarchical datasource) at initial rendering\n     */\n    TreeView.prototype.updateChildCheckState = function (childItems, treeData) {\n        var count = 0;\n        var checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n        for (var index = 0; index < childItems.length; index++) {\n            var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n            if (childItems[index][this.fields.isChecked] && !(this.isLoaded) && this.checkedNodes.indexOf(checkedChild) === -1) {\n                this.checkedNodes.push(checkedChild);\n            }\n            if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1 && this.autoCheck) {\n                this.checkedNodes.push(checkedChild);\n            }\n            if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n                count++;\n            }\n            if (this.checkedNodes.indexOf(checkedChild) > -1 && this.validNodes.indexOf(checkedChild) === -1) {\n                this.validNodes.push(checkedChild);\n            }\n            var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n            if (subChildItems && subChildItems.length) {\n                if (this.parentCheckData.indexOf(treeData) === -1)\n                    this.parentCheckData.push(treeData);\n                this.updateChildCheckState(subChildItems, childItems[index]);\n            }\n            if (count === childItems.length && this.autoCheck && this.checkedNodes.indexOf(checkedParent) === -1) {\n                this.checkedNodes.push(checkedParent);\n            }\n        }\n        if (count !== 0 && this.autoCheck) {\n            this.checkIndeterminateState(treeData);\n            for (var len = 0; len < this.parentCheckData.length; len++) {\n                if ((treeData !== this.parentCheckData[len]) && (this.parentCheckData[len])) {\n                    this.checkIndeterminateState(this.parentCheckData[len]);\n                }\n            }\n        }\n        this.parentCheckData = [];\n    };\n    TreeView.prototype.beforeNodeCreate = function (e) {\n        if (this.showCheckBox) {\n            var checkboxEle = createCheckBox(this.createElement, true, { cssClass: this.touchClass });\n            checkboxEle.setAttribute('role', 'checkbox');\n            var icon = select('div.' + ICON, e.item);\n            var id = e.item.getAttribute('data-uid');\n            e.item.childNodes[0].insertBefore(checkboxEle, e.item.childNodes[0].childNodes[isNOU(icon) ? 0 : 1]);\n            var checkValue = getValue(e.fields.isChecked, e.curData);\n            if (this.checkedNodes.indexOf(id) > -1) {\n                select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n                checkboxEle.setAttribute('aria-checked', 'true');\n                this.addCheck(e.item);\n            }\n            else if (!isNOU(checkValue) && checkValue.toString() === 'true') {\n                select('.' + CHECKBOXFRAME, checkboxEle).classList.add(CHECK);\n                checkboxEle.setAttribute('aria-checked', 'true');\n                this.addCheck(e.item);\n            }\n            else {\n                checkboxEle.setAttribute('aria-checked', 'false');\n            }\n            var frame = select('.' + CHECKBOXFRAME, checkboxEle);\n            EventHandler.add(frame, 'mousedown', this.frameMouseHandler, this);\n            EventHandler.add(frame, 'mouseup', this.frameMouseHandler, this);\n        }\n        if (this.fullRowSelect) {\n            this.createFullRow(e.item);\n        }\n        if (this.allowMultiSelection && !e.item.classList.contains(SELECTED)) {\n            e.item.setAttribute('aria-selected', 'false');\n        }\n        var fields = e.fields;\n        this.addActionClass(e, fields.selected, SELECTED);\n        this.addActionClass(e, fields.expanded, EXPANDED);\n        if (!isNOU(this.nodeTemplateFn)) {\n            var textEle = e.item.querySelector('.' + LISTTEXT);\n            var dataId = e.item.getAttribute('data-uid');\n            textEle.innerHTML = '';\n            this.renderNodeTemplate(e.curData, textEle, dataId);\n        }\n        var eventArgs = {\n            node: e.item,\n            nodeData: e.curData,\n            text: e.text,\n        };\n        if (!this.isRefreshed) {\n            this.trigger('drawNode', eventArgs);\n        }\n    };\n    TreeView.prototype.frameMouseHandler = function (e) {\n        var rippleSpan = select('.' + CHECKBOXRIPPLE, e.target.parentElement);\n        rippleMouseHandler(e, rippleSpan);\n    };\n    TreeView.prototype.addActionClass = function (e, action, cssClass) {\n        var data = e.curData;\n        var actionValue = getValue(action, data);\n        if (!isNOU(actionValue) && actionValue.toString() !== 'false') {\n            e.item.classList.add(cssClass);\n        }\n    };\n    TreeView.prototype.getDataType = function (ds, mapper) {\n        if (this.fields.dataSource instanceof DataManager) {\n            for (var i = 0; i < ds.length; i++) {\n                if (this.isOffline) {\n                    if ((typeof mapper.child === 'string') && isNOU(getValue(mapper.child, ds[i])) && !isNOU(getValue(mapper.parentID, ds[i]))) {\n                        return 1;\n                    }\n                }\n                else if ((typeof mapper.child === 'string') && isNOU(getValue(mapper.child, ds[i]))) {\n                    return 1;\n                }\n            }\n            return 2;\n        }\n        for (var i = 0, len = ds.length; i < len; i++) {\n            if ((typeof mapper.child === 'string') && !isNOU(getValue(mapper.child, ds[i]))) {\n                return 2;\n            }\n            if (!isNOU(getValue(mapper.parentID, ds[i])) || !isNOU(getValue(mapper.hasChildren, ds[i]))) {\n                return 1;\n            }\n        }\n        return 1;\n    };\n    TreeView.prototype.getGroupedData = function (dataSource, groupBy) {\n        var cusQuery = new Query().group(groupBy);\n        var ds = ListBase.getDataSource(dataSource, cusQuery);\n        var grpItem = [];\n        for (var j = 0; j < ds.length; j++) {\n            var itemObj = ds[j].items;\n            grpItem.push(itemObj);\n        }\n        return grpItem;\n    };\n    TreeView.prototype.getSortedData = function (list) {\n        if (list && this.sortOrder !== 'None') {\n            list = ListBase.getDataSource(list, ListBase.addSorting(this.sortOrder, this.fields.text));\n        }\n        return list;\n    };\n    TreeView.prototype.finalizeNode = function (element) {\n        var iNodes = selectAll('.' + IMAGE, element);\n        for (var k = 0; k < iNodes.length; k++) {\n            iNodes[k].setAttribute('alt', IMAGE);\n        }\n        if (this.isLoaded) {\n            var sNodes = selectAll('.' + SELECTED, element);\n            for (var i = 0; i < sNodes.length; i++) {\n                this.selectNode(sNodes[i], null);\n                break;\n            }\n            removeClass(sNodes, SELECTED);\n        }\n        var cNodes = selectAll('.' + LISTITEM + ':not(.' + EXPANDED + ')', element);\n        for (var j = 0; j < cNodes.length; j++) {\n            var icon = select('div.' + ICON, cNodes[j]);\n            if (icon && icon.classList.contains(EXPANDABLE)) {\n                this.disableExpandAttr(cNodes[j]);\n            }\n        }\n        var eNodes = selectAll('.' + EXPANDED, element);\n        if (!this.isInitalExpand) {\n            for (var i = 0; i < eNodes.length; i++) {\n                this.renderChildNodes(eNodes[i]);\n            }\n        }\n        removeClass(eNodes, EXPANDED);\n        this.updateList();\n        if (this.isLoaded) {\n            this.updateCheckedProp();\n        }\n    };\n    TreeView.prototype.updateCheckedProp = function () {\n        if (this.showCheckBox) {\n            var nodes = [].concat([], this.checkedNodes);\n            this.setProperties({ checkedNodes: nodes }, true);\n        }\n    };\n    TreeView.prototype.ensureIndeterminate = function () {\n        if (this.autoCheck) {\n            var liElement = selectAll('li', this.element);\n            var ulElement = void 0;\n            for (var i = 0; i < liElement.length; i++) {\n                if (liElement[i].classList.contains(LISTITEM)) {\n                    ulElement = select('.' + PARENTITEM, liElement[i]);\n                    if (ulElement) {\n                        this.ensureParentCheckState(liElement[i]);\n                    }\n                    else {\n                        this.ensureChildCheckState(liElement[i]);\n                    }\n                }\n            }\n        }\n        else {\n            var indeterminate = selectAll('.' + INDETERMINATE, this.element);\n            for (var i = 0; i < indeterminate.length; i++) {\n                indeterminate[i].classList.remove(INDETERMINATE);\n            }\n        }\n    };\n    TreeView.prototype.ensureParentCheckState = function (element) {\n        if (!isNOU(element)) {\n            if (element.classList.contains(ROOT)) {\n                return;\n            }\n            var ulElement = element;\n            if (element.classList.contains(LISTITEM)) {\n                ulElement = select('.' + PARENTITEM, element);\n            }\n            var checkedNodes = selectAll('.' + CHECK, ulElement);\n            var indeterminateNodes = selectAll('.' + INDETERMINATE, ulElement);\n            var nodes = selectAll('.' + LISTITEM, ulElement);\n            var checkBoxEle = element.getElementsByClassName(CHECKBOXWRAP)[0];\n            if (nodes.length === checkedNodes.length) {\n                this.changeState(checkBoxEle, 'check', null, true, true);\n            }\n            else if (checkedNodes.length > 0 || indeterminateNodes.length > 0) {\n                this.changeState(checkBoxEle, 'indeterminate', null, true, true);\n            }\n            else if (checkedNodes.length === 0) {\n                this.changeState(checkBoxEle, 'uncheck', null, true, true);\n            }\n            var parentUL = closest(element, '.' + PARENTITEM);\n            if (!isNOU(parentUL)) {\n                var currentParent = closest(parentUL, '.' + LISTITEM);\n                this.ensureParentCheckState(currentParent);\n            }\n        }\n    };\n    TreeView.prototype.ensureChildCheckState = function (element, e) {\n        if (!isNOU(element)) {\n            var childElement = select('.' + PARENTITEM, element);\n            var checkBoxes = void 0;\n            if (!isNOU(childElement)) {\n                checkBoxes = selectAll('.' + CHECKBOXWRAP, childElement);\n                var isChecked = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n                var parentCheck = element.getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(INDETERMINATE);\n                var childCheck = childElement.querySelectorAll('li');\n                var expandState = childElement.parentElement.getAttribute('aria-expanded');\n                var checkedState = void 0;\n                for (var index = 0; index < checkBoxes.length; index++) {\n                    var childId = childCheck[index].getAttribute('data-uid');\n                    if (!isNOU(this.currentLoadData) && !isNOU(getValue(this.fields.isChecked, this.currentLoadData[index]))) {\n                        checkedState = getValue(this.fields.isChecked, this.currentLoadData[index]) ? 'check' : 'uncheck';\n                        if (this.ele !== -1) {\n                            checkedState = isChecked ? 'check' : 'uncheck';\n                        }\n                        if ((checkedState === 'uncheck') && (!isUndefined(this.parentNodeCheck) && this.autoCheck\n                            && this.parentNodeCheck.indexOf(childId) !== -1)) {\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n                            checkedState = 'indeterminate';\n                        }\n                    }\n                    else {\n                        var isNodeChecked = checkBoxes[index].getElementsByClassName(CHECKBOXFRAME)[0].classList.contains(CHECK);\n                        if (isChecked) {\n                            checkedState = 'check';\n                        }\n                        else if (isNodeChecked && !this.isLoaded) {\n                            checkedState = 'check';\n                        }\n                        else if (this.checkedNodes.indexOf(childId) !== -1 && this.isLoaded && (parentCheck || isChecked)) {\n                            checkedState = 'check';\n                        }\n                        else if (childCheck[index].classList.contains(CHILD) && (!isUndefined(this.parentNodeCheck) && this.autoCheck\n                            && (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1)) {\n                            checkedState = 'indeterminate';\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n                        }\n                        else if (this.dataType === 1 && (!isUndefined(this.parentNodeCheck) && this.autoCheck &&\n                            (isChecked || parentCheck) && this.parentNodeCheck.indexOf(childId) !== -1)) {\n                            checkedState = 'indeterminate';\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(childId), 1);\n                        }\n                        else {\n                            checkedState = 'uncheck';\n                        }\n                    }\n                    this.changeState(checkBoxes[index], checkedState, e, true, true);\n                }\n            }\n            if (this.autoCheck && this.isLoaded) {\n                this.updateParentCheckState();\n            }\n        }\n    };\n    TreeView.prototype.doCheckBoxAction = function (nodes, doCheck) {\n        var li = selectAll('.' + LISTITEM, this.element);\n        if (!isNOU(nodes)) {\n            for (var len = nodes.length; len >= 0; len--) {\n                var liEle = void 0;\n                if (nodes.length === 1) {\n                    liEle = this.getElement(nodes[len - 1]);\n                }\n                else {\n                    liEle = this.getElement(nodes[len]);\n                }\n                if (isNOU(liEle)) {\n                    var node = void 0;\n                    node = nodes[len - nodes.length] ? nodes[len - nodes.length].toString() : nodes[len] ? nodes[len].toString() : null;\n                    if (node !== '' && doCheck && node) {\n                        this.setValidCheckedNode(node);\n                        this.dynamicCheckState(node, doCheck);\n                    }\n                    else if (this.checkedNodes.indexOf(node) !== -1 && node !== '' && !doCheck) {\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(node), 1);\n                        var childItems = this.getChildNodes(this.treeData, node);\n                        if (childItems) {\n                            for (var i = 0; i < childItems.length; i++) {\n                                var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n                                if (this.checkedNodes.indexOf(id) !== -1) {\n                                    this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n                                    var ele = this.element.querySelector('[data-uid=\"' + id + '\"]');\n                                    if (ele) {\n                                        this.changeState(ele, 'uncheck', null);\n                                    }\n                                }\n                            }\n                            if (this.parentNodeCheck.indexOf(node) !== -1) {\n                                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(node), 1);\n                            }\n                        }\n                        if (node) {\n                            this.dynamicCheckState(node, doCheck);\n                        }\n                        this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n                    }\n                    continue;\n                }\n                var checkBox = select('.' + PARENTITEM + ' .' + CHECKBOXWRAP, liEle);\n                this.validateCheckNode(checkBox, !doCheck, liEle, null);\n            }\n        }\n        else {\n            var checkBoxes = selectAll('.' + CHECKBOXWRAP, this.element);\n            if (this.loadOnDemand) {\n                for (var index = 0; index < checkBoxes.length; index++) {\n                    this.updateFieldChecked(checkBoxes[index], doCheck);\n                    this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck', null, null, null, doCheck);\n                }\n            }\n            else {\n                for (var index = 0; index < checkBoxes.length; index++) {\n                    this.updateFieldChecked(checkBoxes[index], doCheck);\n                    this.changeState(checkBoxes[index], doCheck ? 'check' : 'uncheck');\n                }\n            }\n        }\n        if (nodes) {\n            for (var j = 0; j < nodes.length; j++) {\n                var node = nodes[j] ? nodes[j].toString() : '';\n                if (!doCheck) {\n                    this.updateField(this.treeData, this.fields, node, 'isChecked', null);\n                }\n            }\n        }\n        if (this.autoCheck) {\n            this.updateParentCheckState();\n        }\n    };\n    TreeView.prototype.updateFieldChecked = function (checkbox, doCheck) {\n        var currLi = closest(checkbox, '.' + LISTITEM);\n        var id = currLi.getAttribute('data-uid');\n        var nodeDetails = this.getNodeData(currLi);\n        if (nodeDetails.isChecked === 'true' && !doCheck) {\n            this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n        }\n    };\n    /**\n     * Changes the parent and child  check state while changing the checkedNodes via setmodel\n     */\n    TreeView.prototype.dynamicCheckState = function (node, doCheck) {\n        if (this.dataType === 1) {\n            var count = 0;\n            var resultId = new DataManager(this.treeData).executeLocal(new Query().where(this.fields.id, 'equal', node, true));\n            if (resultId[0]) {\n                var id = resultId[0][this.fields.id] ? resultId[0][this.fields.id].toString() : null;\n                var parent_1 = resultId[0][this.fields.parentID] ? resultId[0][this.fields.parentID].toString() : null;\n                var parentElement = this.element.querySelector('[data-uid=\"' + parent_1 + '\"]');\n                var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n                var check = parentElement ? select('.' + CHECK, parentElement) : null;\n                var element = this.element.querySelector('[data-uid=\"' + id + '\"]');\n                var childNodes = this.getChildNodes(this.treeData, parent_1);\n                if (childNodes) {\n                    for (var i = 0; i < childNodes.length; i++) {\n                        var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n                        if (this.checkedNodes.indexOf(childId) !== -1) {\n                            count++;\n                        }\n                    }\n                }\n                if (this.checkedNodes.indexOf(node) !== -1 && parentElement && (id === node) && this.autoCheck) {\n                    this.changeState(parentElement, 'indeterminate', null);\n                }\n                else if (this.checkedNodes.indexOf(node) === -1 && element && (id === node) && !doCheck) {\n                    this.changeState(element, 'uncheck', null);\n                }\n                else if (this.checkedNodes.indexOf(node) !== -1 && element && (id === node) && doCheck) {\n                    this.changeState(element, 'check', null);\n                }\n                else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && (id === node) && this.autoCheck\n                    && count !== 0) {\n                    this.changeState(parentElement, 'indeterminate', null);\n                }\n                else if (this.checkedNodes.indexOf(node) === -1 && !element && parentElement && (id === node) && this.autoCheck\n                    && count === 0) {\n                    this.changeState(parentElement, 'uncheck', null);\n                }\n                else if (!element && !parentElement && (id === node) && this.autoCheck) {\n                    this.updateIndeterminate(node, doCheck);\n                }\n            }\n        }\n        else if (this.dataType === 2 || (this.fields.dataSource instanceof DataManager &&\n            this.isOffline)) {\n            var id = void 0;\n            var parentElement = void 0;\n            var check = void 0;\n            for (var i = 0; i < this.treeData.length; i++) {\n                id = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : '';\n                parentElement = this.element.querySelector('[data-uid=\"' + id + '\"]');\n                check = parentElement ? select('.' + CHECK, parentElement) : null;\n                if (this.checkedNodes.indexOf(id) === -1 && parentElement && check && !doCheck) {\n                    this.changeState(parentElement, 'uncheck', null);\n                }\n                var subChild = getValue(this.fields.child.toString(), this.treeData[i]);\n                if (subChild) {\n                    this.updateChildIndeterminate(subChild, id, node, doCheck, id);\n                }\n            }\n        }\n    };\n    /**\n     * updates the parent and child  check state while changing the checkedNodes via setmodel for listData\n     */\n    TreeView.prototype.updateIndeterminate = function (node, doCheck) {\n        var indeterminateData = this.getTreeData(node);\n        var count = 0;\n        var parent;\n        if (this.dataType === 1) {\n            parent = indeterminateData[0][this.fields.parentID] ? indeterminateData[0][this.fields.parentID].toString() : null;\n        }\n        var childNodes = this.getChildNodes(this.treeData, parent);\n        if (childNodes) {\n            for (var i = 0; i < childNodes.length; i++) {\n                var childId = childNodes[i][this.fields.id] ? childNodes[i][this.fields.id].toString() : null;\n                if (this.checkedNodes.indexOf(childId) !== -1) {\n                    count++;\n                }\n            }\n        }\n        var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n        if (parentElement && doCheck) {\n            this.changeState(parentElement, 'indeterminate', null);\n        }\n        else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count !== 0) {\n            this.changeState(parentElement, 'indeterminate', null);\n        }\n        else if (!doCheck && parentElement && this.parentNodeCheck.indexOf(parent) === -1 && count === 0) {\n            this.changeState(parentElement, 'uncheck', null);\n        }\n        else if (!parentElement) {\n            if (!doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) !== -1) {\n                this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent), 1);\n            }\n            else if (doCheck && this.checkedNodes.indexOf(parent) === -1 && this.parentNodeCheck.indexOf(parent) === -1) {\n                this.parentNodeCheck.push(parent);\n            }\n            else if (!doCheck && this.checkedNodes.indexOf(parent) !== -1 && this.parentNodeCheck.indexOf(parent) === -1\n                && count !== 0) {\n                this.parentNodeCheck.push(parent);\n            }\n            this.updateIndeterminate(parent, doCheck);\n            if (this.checkedNodes.indexOf(parent) !== -1 && !doCheck) {\n                this.checkedNodes.splice(this.checkedNodes.indexOf(parent), 1);\n            }\n        }\n    };\n    /**\n     * updates the parent and child  check state while changing the checkedNodes via setmodel for hierarchical data\n     */\n    TreeView.prototype.updateChildIndeterminate = function (subChild, parent, node, doCheck, child) {\n        var count = 0;\n        for (var j = 0; j < subChild.length; j++) {\n            var subId = subChild[j][this.fields.id] ? subChild[j][this.fields.id].toString() : '';\n            if (this.checkedNodes.indexOf(subId) !== -1) {\n                count++;\n            }\n            var parentElement = this.element.querySelector('[data-uid=\"' + parent + '\"]');\n            var indeterminate = parentElement ? select('.' + INDETERMINATE, parentElement) : null;\n            var check = parentElement ? select('.' + CHECK, parentElement) : null;\n            var element = this.element.querySelector('[data-uid=\"' + subId + '\"]');\n            var childElementCheck = element ? select('.' + CHECK, element) : null;\n            if (this.checkedNodes.indexOf(node) !== -1 && parentElement && (subId === node) && this.autoCheck) {\n                this.changeState(parentElement, 'indeterminate', null);\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && parentElement && !element && (subId === node) && !doCheck) {\n                if (this.autoCheck) {\n                    this.changeState(parentElement, 'uncheck', null);\n                }\n                else {\n                    if (count !== 0) {\n                        this.changeState(parentElement, 'indeterminate', null);\n                    }\n                    else {\n                        this.changeState(parentElement, 'uncheck', null);\n                    }\n                }\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && element && (subId === node) && !doCheck) {\n                this.changeState(element, 'uncheck', null);\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && indeterminate && (subId === node) && this.autoCheck && count === 0\n                && !doCheck) {\n                indeterminate.classList.remove(INDETERMINATE);\n            }\n            else if (this.checkedNodes.indexOf(node) === -1 && !element && check && (subId === node) && count === 0) {\n                this.changeState(parentElement, 'uncheck', null);\n            }\n            else if (this.checkedNodes.indexOf(subId) === -1 && element && childElementCheck && count === 0) {\n                this.changeState(element, 'uncheck', null);\n            }\n            else if (!element && !parentElement && (subId === node) || (this.parentNodeCheck.indexOf(parent) !== -1) && this.autoCheck) {\n                var childElement = this.element.querySelector('[data-uid=\"' + child + '\"]');\n                if (doCheck && count !== 0) {\n                    this.changeState(childElement, 'indeterminate', null);\n                }\n                else if (doCheck && count === subChild.length && this.checkedNodes.indexOf(parent) === -1) {\n                    this.checkedNodes.push(parent);\n                }\n                else if (!doCheck && count === 0 && this.parentNodeCheck.indexOf(parent) !== -1) {\n                    this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(parent));\n                }\n                if (this.parentNodeCheck.indexOf(parent) === -1) {\n                    this.parentNodeCheck.push(parent);\n                }\n            }\n            var innerChild = getValue(this.fields.child.toString(), subChild[j]);\n            if (innerChild) {\n                this.updateChildIndeterminate(innerChild, subId, node, doCheck, child);\n            }\n        }\n    };\n    TreeView.prototype.changeState = function (wrapper, state, e, isPrevent, isAdd, doCheck) {\n        var _this = this;\n        var eventArgs;\n        var currLi = closest(wrapper, '.' + LISTITEM);\n        if (wrapper === currLi) {\n            wrapper = select('.' + CHECKBOXWRAP, currLi);\n        }\n        if (!isPrevent) {\n            this.checkActionNodes = [];\n            eventArgs = this.getCheckEvent(currLi, state, e);\n            this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    _this.nodeCheckAction(wrapper, state, currLi, observedArgs, e, isPrevent, isAdd, doCheck);\n                }\n            });\n        }\n        else {\n            this.nodeCheckAction(wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck);\n        }\n    };\n    TreeView.prototype.nodeCheckAction = function (wrapper, state, currLi, eventArgs, e, isPrevent, isAdd, doCheck) {\n        var ariaState;\n        var frameSpan = wrapper.getElementsByClassName(CHECKBOXFRAME)[0];\n        if (state === 'check' && !frameSpan.classList.contains(CHECK)) {\n            frameSpan.classList.remove(INDETERMINATE);\n            frameSpan.classList.add(CHECK);\n            this.addCheck(currLi);\n            ariaState = 'true';\n        }\n        else if (state === 'uncheck' && (frameSpan.classList.contains(CHECK) || frameSpan.classList.contains(INDETERMINATE))) {\n            removeClass([frameSpan], [CHECK, INDETERMINATE]);\n            this.removeCheck(currLi);\n            ariaState = 'false';\n        }\n        else if (state === 'indeterminate' && this.autoCheck) {\n            frameSpan.classList.remove(CHECK);\n            frameSpan.classList.add(INDETERMINATE);\n            this.removeCheck(currLi);\n            ariaState = 'mixed';\n        }\n        ariaState = state === 'check' ? 'true' : state === 'uncheck' ? 'false' : ariaState;\n        if (!isNOU(ariaState)) {\n            wrapper.setAttribute('aria-checked', ariaState);\n        }\n        if (isAdd) {\n            var data = [].concat([], this.checkActionNodes);\n            eventArgs = this.getCheckEvent(currLi, state, e);\n            if (isUndefined(isPrevent)) {\n                eventArgs.data = data;\n            }\n        }\n        if (doCheck !== undefined) {\n            this.ensureStateChange(currLi, doCheck);\n        }\n        if (!isPrevent) {\n            if (!isNOU(ariaState)) {\n                wrapper.setAttribute('aria-checked', ariaState);\n                eventArgs.data[0].checked = ariaState;\n                this.trigger('nodeChecked', eventArgs);\n                this.checkActionNodes = [];\n            }\n        }\n    };\n    TreeView.prototype.addCheck = function (liEle) {\n        var id = liEle.getAttribute('data-uid');\n        if (!isNOU(id) && this.checkedNodes.indexOf(id) === -1) {\n            this.checkedNodes.push(id);\n        }\n    };\n    TreeView.prototype.removeCheck = function (liEle) {\n        var index = this.checkedNodes.indexOf(liEle.getAttribute('data-uid'));\n        if (index > -1) {\n            this.checkedNodes.splice(index, 1);\n        }\n    };\n    TreeView.prototype.getCheckEvent = function (currLi, action, e) {\n        this.checkActionNodes.push(this.getNodeData(currLi));\n        var nodeData = this.checkActionNodes;\n        return { action: action, cancel: false, isInteracted: isNOU(e) ? false : true, node: currLi, data: nodeData };\n    };\n    TreeView.prototype.finalize = function () {\n        var firstUl = select('.' + PARENTITEM, this.element);\n        if (!isNullOrUndefined(firstUl)) {\n            firstUl.setAttribute('role', treeAriaAttr.treeRole);\n            this.setMultiSelect(this.allowMultiSelection);\n            var firstNode = select('.' + LISTITEM, this.element);\n            if (firstNode) {\n                addClass([firstNode], FOCUS);\n                this.updateIdAttr(null, firstNode);\n            }\n            if (this.allowTextWrap) {\n                this.updateWrap();\n            }\n            this.renderReactTemplates();\n            this.hasPid = this.rootData[0] ? this.rootData[0].hasOwnProperty(this.fields.parentID) : false;\n            this.doExpandAction();\n        }\n    };\n    TreeView.prototype.setTextWrap = function () {\n        (this.allowTextWrap ? addClass : removeClass)([this.element], LISTWRAP);\n        if (Browser.isIE) {\n            (this.allowTextWrap ? addClass : removeClass)([this.element], IELISTWRAP);\n        }\n    };\n    TreeView.prototype.updateWrap = function (ulEle) {\n        if (!this.fullRowSelect) {\n            return;\n        }\n        var liEle = ulEle ? selectAll('.' + LISTITEM, ulEle) : this.liList;\n        var length = liEle.length;\n        for (var i = 0; i < length; i++) {\n            this.calculateWrap(liEle[i]);\n        }\n    };\n    TreeView.prototype.calculateWrap = function (liEle) {\n        var element = select('.' + FULLROW, liEle);\n        if (element && element.nextElementSibling) {\n            element.style.height = this.allowTextWrap ? element.nextElementSibling.offsetHeight + 'px' : '';\n        }\n    };\n    TreeView.prototype.doExpandAction = function () {\n        var eUids = this.expandedNodes;\n        if (this.isInitalExpand && eUids.length > 0) {\n            this.setProperties({ expandedNodes: [] }, true);\n            /* eslint-disable */\n            if (this.fields.dataSource instanceof DataManager) {\n                this.expandGivenNodes(eUids);\n            }\n            else {\n                for (var i = 0; i < eUids.length; i++) {\n                    var eNode = select('[data-uid=\"' + eUids[i] + '\"]', this.element);\n                    if (!isNOU(eNode)) {\n                        var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n                        if (!isNOU(icon)) {\n                            this.expandAction(eNode, icon, null);\n                        }\n                    }\n                    else {\n                        if (eUids[i] && this.expandChildren.indexOf(eUids[i]) === -1) {\n                            this.expandChildren.push(eUids[i].toString());\n                        }\n                        continue;\n                    }\n                }\n                this.afterFinalized();\n            }\n        }\n        else {\n            this.afterFinalized();\n        }\n    };\n    TreeView.prototype.expandGivenNodes = function (arr) {\n        var proxy = this;\n        this.expandCallback(arr[this.index], function () {\n            proxy.index++;\n            if (proxy.index < arr.length) {\n                proxy.expandGivenNodes(arr);\n            }\n            else {\n                proxy.afterFinalized();\n            }\n        });\n    };\n    TreeView.prototype.expandCallback = function (eUid, callback) {\n        var eNode = select('[data-uid=\"' + eUid + '\"]', this.element);\n        if (!isNOU(eNode)) {\n            var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, eNode));\n            if (!isNOU(icon)) {\n                this.expandAction(eNode, icon, null, false, callback);\n            }\n            else {\n                callback();\n            }\n        }\n        else {\n            callback();\n        }\n    };\n    TreeView.prototype.afterFinalized = function () {\n        this.doSelectionAction();\n        this.updateCheckedProp();\n        this.isAnimate = true;\n        this.isInitalExpand = false;\n        if ((!this.isLoaded || this.isFieldChange) && !this.isNodeDropped) {\n            var eventArgs = { data: this.treeData };\n            this.trigger('dataBound', eventArgs);\n        }\n        this.isLoaded = true;\n        this.isNodeDropped = false;\n    };\n    TreeView.prototype.doSelectionAction = function () {\n        var sNodes = selectAll('.' + SELECTED, this.element);\n        var sUids = this.selectedNodes;\n        if (sUids.length > 0) {\n            this.setProperties({ selectedNodes: [] }, true);\n            for (var i = 0; i < sUids.length; i++) {\n                var sNode = select('[data-uid=\"' + sUids[i] + '\"]', this.element);\n                if (sNode && !(sNode.classList.contains('e-active'))) {\n                    this.selectNode(sNode, null, true);\n                }\n                else {\n                    this.selectedNodes.push(sUids[i]);\n                }\n                if (!this.allowMultiSelection) {\n                    break;\n                }\n            }\n        }\n        else {\n            this.selectGivenNodes(sNodes);\n        }\n        removeClass(sNodes, SELECTED);\n    };\n    TreeView.prototype.selectGivenNodes = function (sNodes) {\n        for (var i = 0; i < sNodes.length; i++) {\n            if (!sNodes[i].classList.contains('e-disable')) {\n                this.selectNode(sNodes[i], null, true);\n            }\n            if (!this.allowMultiSelection) {\n                break;\n            }\n        }\n    };\n    TreeView.prototype.clickHandler = function (event) {\n        var target = event.originalEvent.target;\n        EventHandler.remove(this.element, 'contextmenu', this.preventContextMenu);\n        if (!target || this.dragStartAction) {\n            return;\n        }\n        else {\n            var classList = target.classList;\n            var li = closest(target, '.' + LISTITEM);\n            if (!li) {\n                return;\n            }\n            else if (event.originalEvent.which !== 3) {\n                var rippleElement = select('.' + RIPPLEELMENT, li);\n                var rippleIcons = select('.' + ICON, li);\n                this.removeHover();\n                this.setFocusElement(li);\n                if (this.showCheckBox && !li.classList.contains('e-disable')) {\n                    var checkWrapper = closest(target, '.' + CHECKBOXWRAP);\n                    if (!isNOU(checkWrapper)) {\n                        var checkElement = select('.' + CHECKBOXFRAME, checkWrapper);\n                        this.validateCheckNode(checkWrapper, checkElement.classList.contains(CHECK), li, event.originalEvent);\n                        this.triggerClickEvent(event.originalEvent, li);\n                        return;\n                    }\n                }\n                if (classList.contains(EXPANDABLE)) {\n                    this.expandAction(li, target, event);\n                }\n                else if (classList.contains(COLLAPSIBLE)) {\n                    this.collapseNode(li, target, event);\n                }\n                else if (rippleElement && rippleIcons) {\n                    if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(EXPANDABLE)) {\n                        this.expandAction(li, rippleIcons, event);\n                    }\n                    else if (rippleIcons.classList.contains(RIPPLE) && rippleIcons.classList.contains(COLLAPSIBLE)) {\n                        this.collapseNode(li, rippleIcons, event);\n                    }\n                    else if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\n                        this.toggleSelect(li, event.originalEvent, false);\n                    }\n                }\n                else {\n                    if (!classList.contains(PARENTITEM) && !classList.contains(LISTITEM)) {\n                        this.toggleSelect(li, event.originalEvent, false);\n                    }\n                }\n            }\n            this.triggerClickEvent(event.originalEvent, li);\n        }\n    };\n    TreeView.prototype.nodeCheckedEvent = function (wrapper, isCheck, e) {\n        var currLi = closest(wrapper, '.' + LISTITEM);\n        var eventArgs = this.getCheckEvent(wrapper, isCheck ? 'uncheck' : 'check', e);\n        eventArgs.data = eventArgs.data.splice(0, eventArgs.data.length - 1);\n        this.trigger('nodeChecked', eventArgs);\n    };\n    TreeView.prototype.triggerClickEvent = function (e, li) {\n        var eventArgs = {\n            event: e,\n            node: li,\n        };\n        this.trigger('nodeClicked', eventArgs);\n    };\n    TreeView.prototype.expandNode = function (currLi, icon, loaded) {\n        var _this = this;\n        this.renderReactTemplates();\n        if (icon.classList.contains(LOAD)) {\n            this.hideSpinner(icon);\n        }\n        if (!this.initialRender) {\n            icon.classList.add('interaction');\n        }\n        if (loaded !== true || (loaded === true && currLi.classList.contains('e-expanded'))) {\n            if (this.preventExpand !== true) {\n                removeClass([icon], EXPANDABLE);\n                addClass([icon], COLLAPSIBLE);\n                var start_1 = 0;\n                var end_1 = 0;\n                var proxy_1 = this;\n                var ul_1 = select('.' + PARENTITEM, currLi);\n                var liEle_1 = currLi;\n                this.setHeight(liEle_1, ul_1);\n                var activeElement_1 = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n                if (this.isAnimate && !this.isRefreshed) {\n                    this.aniObj.animate(ul_1, {\n                        name: this.animation.expand.effect,\n                        duration: this.animation.expand.duration,\n                        timingFunction: this.animation.expand.easing,\n                        begin: function (args) {\n                            liEle_1.style.overflow = 'hidden';\n                            if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                                activeElement_1.classList.add(ITEM_ANIMATION_ACTIVE);\n                            }\n                            start_1 = liEle_1.offsetHeight;\n                            end_1 = select('.' + TEXTWRAP, currLi).offsetHeight;\n                        },\n                        progress: function (args) {\n                            args.element.style.display = 'block';\n                            proxy_1.animateHeight(args, start_1, end_1);\n                        },\n                        end: function (args) {\n                            args.element.style.display = 'block';\n                            if (!isNullOrUndefined(activeElement_1) && activeElement_1 instanceof HTMLElement) {\n                                activeElement_1.classList.remove(ITEM_ANIMATION_ACTIVE);\n                            }\n                            _this.expandedNode(liEle_1, ul_1, icon);\n                        }\n                    });\n                }\n                else {\n                    this.expandedNode(liEle_1, ul_1, icon);\n                }\n            }\n        }\n        else {\n            var ul = select('.' + PARENTITEM, currLi);\n            ul.style.display = 'none';\n            if (this.fields.dataSource instanceof DataManager === true) {\n                this.preventExpand = false;\n            }\n        }\n        if (this.initialRender) {\n            icon.classList.add('interaction');\n        }\n    };\n    TreeView.prototype.expandedNode = function (currLi, ul, icon) {\n        ul.style.display = 'block';\n        currLi.style.display = 'block';\n        currLi.style.overflow = '';\n        currLi.style.height = '';\n        removeClass([icon], PROCESS);\n        this.addExpand(currLi);\n        if (this.allowTextWrap && this.isLoaded && this.isFirstRender) {\n            this.updateWrap(currLi);\n            this.isFirstRender = false;\n        }\n        if (this.isLoaded && this.expandArgs && !this.isRefreshed) {\n            this.expandArgs = this.getExpandEvent(currLi, null);\n            this.trigger('nodeExpanded', this.expandArgs);\n        }\n    };\n    TreeView.prototype.addExpand = function (liEle) {\n        liEle.setAttribute('aria-expanded', 'true');\n        removeClass([liEle], NODECOLLAPSED);\n        var id = liEle.getAttribute('data-uid');\n        if (!isNOU(id) && this.expandedNodes.indexOf(id) === -1) {\n            this.expandedNodes.push(id);\n        }\n    };\n    TreeView.prototype.collapseNode = function (currLi, icon, e) {\n        var _this = this;\n        if (icon.classList.contains(PROCESS)) {\n            return;\n        }\n        else {\n            addClass([icon], PROCESS);\n        }\n        var colArgs;\n        if (this.isLoaded) {\n            colArgs = this.getExpandEvent(currLi, e);\n            this.trigger('nodeCollapsing', colArgs, function (observedArgs) {\n                if (observedArgs.cancel) {\n                    removeClass([icon], PROCESS);\n                }\n                else {\n                    _this.nodeCollapseAction(currLi, icon, observedArgs);\n                }\n            });\n        }\n        else {\n            this.nodeCollapseAction(currLi, icon, colArgs);\n        }\n    };\n    TreeView.prototype.nodeCollapseAction = function (currLi, icon, colArgs) {\n        var _this = this;\n        removeClass([icon], COLLAPSIBLE);\n        addClass([icon], EXPANDABLE);\n        var start = 0;\n        var end = 0;\n        var proxy = this;\n        var ul = select('.' + PARENTITEM, currLi);\n        var liEle = currLi;\n        var activeElement = select('.' + LISTITEM + '.' + ACTIVE, currLi);\n        if (this.isAnimate) {\n            this.aniObj.animate(ul, {\n                name: this.animation.collapse.effect,\n                duration: this.animation.collapse.duration,\n                timingFunction: this.animation.collapse.easing,\n                begin: function (args) {\n                    liEle.style.overflow = 'hidden';\n                    if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n                        activeElement.classList.add(ITEM_ANIMATION_ACTIVE);\n                    }\n                    start = select('.' + TEXTWRAP, currLi).offsetHeight;\n                    end = liEle.offsetHeight;\n                },\n                progress: function (args) {\n                    proxy.animateHeight(args, start, end);\n                },\n                end: function (args) {\n                    args.element.style.display = 'none';\n                    if (!isNullOrUndefined(activeElement) && activeElement instanceof HTMLElement) {\n                        activeElement.classList.remove(ITEM_ANIMATION_ACTIVE);\n                    }\n                    _this.collapsedNode(liEle, ul, icon, colArgs);\n                }\n            });\n        }\n        else {\n            this.collapsedNode(liEle, ul, icon, colArgs);\n        }\n    };\n    TreeView.prototype.collapsedNode = function (liEle, ul, icon, colArgs) {\n        ul.style.display = 'none';\n        liEle.style.overflow = '';\n        liEle.style.height = '';\n        removeClass([icon], PROCESS);\n        this.removeExpand(liEle);\n        if (this.isLoaded) {\n            colArgs = this.getExpandEvent(liEle, null);\n            this.trigger('nodeCollapsed', colArgs);\n        }\n    };\n    TreeView.prototype.removeExpand = function (liEle, toRemove) {\n        if (toRemove) {\n            liEle.removeAttribute('aria-expanded');\n        }\n        else {\n            this.disableExpandAttr(liEle);\n        }\n        var index = this.expandedNodes.indexOf(liEle.getAttribute('data-uid'));\n        if (index > -1) {\n            this.expandedNodes.splice(index, 1);\n        }\n    };\n    TreeView.prototype.disableExpandAttr = function (liEle) {\n        liEle.setAttribute('aria-expanded', 'false');\n        addClass([liEle], NODECOLLAPSED);\n    };\n    TreeView.prototype.setHeight = function (currLi, ul) {\n        ul.style.display = 'block';\n        ul.style.visibility = 'hidden';\n        currLi.style.height = currLi.offsetHeight + 'px';\n        ul.style.display = 'none';\n        ul.style.visibility = '';\n    };\n    TreeView.prototype.animateHeight = function (args, start, end) {\n        var remaining = (args.duration - args.timeStamp) / args.duration;\n        var currentHeight = (end - start) * remaining + start;\n        args.element.parentElement.style.height = currentHeight + 'px';\n    };\n    TreeView.prototype.renderChildNodes = function (parentLi, expandChild, callback, loaded) {\n        var _this = this;\n        var eicon = select('div.' + ICON, parentLi);\n        if (isNOU(eicon)) {\n            return;\n        }\n        this.showSpinner(eicon);\n        var childItems;\n        /* eslint-disable */\n        if (this.fields.dataSource instanceof DataManager) {\n            var level = this.parents(parentLi, '.' + PARENTITEM).length;\n            var mapper_2 = this.getChildFields(this.fields, level, 1);\n            if (isNOU(mapper_2) || isNOU(mapper_2.dataSource)) {\n                detach(eicon);\n                this.removeExpand(parentLi, true);\n                return;\n            }\n            this.treeList.push('false');\n            if (this.fields.dataSource instanceof DataManager && this.isOffline) {\n                this.treeList.pop();\n                childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n                this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n            }\n            else {\n                mapper_2.dataSource.executeQuery(this.getQuery(mapper_2, parentLi.getAttribute('data-uid'))).then(function (e) {\n                    _this.treeList.pop();\n                    childItems = e.result;\n                    if (_this.dataType === 1) {\n                        _this.dataType = 2;\n                    }\n                    _this.loadChild(childItems, mapper_2, eicon, parentLi, expandChild, callback, loaded);\n                }).catch(function (e) {\n                    _this.trigger('actionFailure', { error: e });\n                });\n            }\n        }\n        else {\n            childItems = this.getChildNodes(this.treeData, parentLi.getAttribute('data-uid'));\n            this.currentLoadData = this.getSortedData(childItems);\n            if (isNOU(childItems) || childItems.length === 0) {\n                detach(eicon);\n                this.removeExpand(parentLi, true);\n                return;\n            }\n            else {\n                this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n                parentLi.appendChild(ListBase.createList(this.createElement, this.currentLoadData, this.listBaseOption));\n                this.expandNode(parentLi, eicon, loaded);\n                this.setSelectionForChildNodes(childItems);\n                this.ensureCheckNode(parentLi);\n                this.finalizeNode(parentLi);\n                this.disableTreeNodes(childItems);\n                this.renderSubChild(parentLi, expandChild, loaded);\n            }\n        }\n    };\n    TreeView.prototype.loadChild = function (childItems, mapper, eicon, parentLi, expandChild, callback, loaded) {\n        this.currentLoadData = childItems;\n        if (isNOU(childItems) || childItems.length === 0) {\n            detach(eicon);\n            this.removeExpand(parentLi, true);\n        }\n        else {\n            this.updateListProp(mapper);\n            if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n                var id = parentLi.getAttribute('data-uid');\n                var nodeData = this.getNodeObject(id);\n                setValue('child', childItems, nodeData);\n            }\n            this.listBaseOption.ariaAttributes.level = parseFloat(parentLi.getAttribute('aria-level')) + 1;\n            parentLi.appendChild(ListBase.createList(this.createElement, childItems, this.listBaseOption));\n            this.expandNode(parentLi, eicon, loaded);\n            this.setSelectionForChildNodes(childItems);\n            this.ensureCheckNode(parentLi);\n            this.finalizeNode(parentLi);\n            this.disableTreeNodes(childItems);\n            this.renderSubChild(parentLi, expandChild, loaded);\n        }\n        if (callback) {\n            callback();\n        }\n        if (this.treeList.length === 0 && !this.isLoaded) {\n            this.finalize();\n        }\n    };\n    TreeView.prototype.disableTreeNodes = function (childItems) {\n        var i = 0;\n        while (i < childItems.length) {\n            var id = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n            if (this.disableNode !== undefined && this.disableNode.indexOf(id) !== -1) {\n                this.doDisableAction([id]);\n            }\n            i++;\n        }\n    };\n    /**\n     * Sets the child Item in selectedState while rendering the child node\n     */\n    TreeView.prototype.setSelectionForChildNodes = function (nodes) {\n        var i;\n        for (i = 0; i < nodes.length; i++) {\n            var id = nodes[i][this.fields.id] ? nodes[i][this.fields.id].toString() : null;\n            if (this.selectedNodes !== undefined && this.selectedNodes.indexOf(id) !== -1) {\n                this.doSelectionAction();\n            }\n        }\n    };\n    TreeView.prototype.ensureCheckNode = function (element) {\n        if (this.showCheckBox) {\n            this.ele = (this.checkedElement) ? this.checkedElement.indexOf(element.getAttribute('data-uid')) : null;\n            if (this.autoCheck) {\n                this.ensureChildCheckState(element);\n                this.ensureParentCheckState(element);\n            }\n        }\n        this.currentLoadData = null;\n    };\n    TreeView.prototype.getFields = function (mapper, nodeLevel, dataLevel) {\n        if (nodeLevel === dataLevel) {\n            return mapper;\n        }\n        else {\n            return this.getFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n        }\n    };\n    TreeView.prototype.getChildFields = function (mapper, nodeLevel, dataLevel) {\n        var childData;\n        if (nodeLevel === dataLevel) {\n            return this.getChildMapper(mapper);\n        }\n        else {\n            return this.getChildFields(this.getChildMapper(mapper), nodeLevel, dataLevel + 1);\n        }\n    };\n    TreeView.prototype.getChildMapper = function (mapper) {\n        return (typeof mapper.child === 'string' || isNOU(mapper.child)) ? mapper : mapper.child;\n    };\n    TreeView.prototype.getChildNodes = function (obj, parentId, isRoot) {\n        if (isRoot === void 0) { isRoot = false; }\n        var childNodes;\n        if (isNOU(obj)) {\n            return childNodes;\n        }\n        else if (this.dataType === 1) {\n            return this.getChildGroup(this.groupedData, parentId, isRoot);\n        }\n        else {\n            if (typeof this.fields.child === 'string') {\n                for (var i = 0, objlen = obj.length; i < objlen; i++) {\n                    var dataId = getValue(this.fields.id, obj[i]);\n                    if (dataId && dataId.toString() === parentId) {\n                        return getValue(this.fields.child, obj[i]);\n                    }\n                    else if (!isNOU(getValue(this.fields.child, obj[i]))) {\n                        childNodes = this.getChildNodes(getValue(this.fields.child, obj[i]), parentId);\n                        if (childNodes !== undefined) {\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        return childNodes;\n    };\n    TreeView.prototype.getChildGroup = function (data, parentId, isRoot) {\n        var childNodes;\n        if (isNOU(data)) {\n            return childNodes;\n        }\n        for (var i = 0, objlen = data.length; i < objlen; i++) {\n            if (!isNOU(data[i][0]) && !isNOU(getValue(this.fields.parentID, data[i][0]))) {\n                if (getValue(this.fields.parentID, data[i][0]).toString() === parentId) {\n                    return data[i];\n                }\n            }\n            else if (isRoot) {\n                return data[i];\n            }\n            else {\n                return [];\n            }\n        }\n        return childNodes;\n    };\n    TreeView.prototype.renderSubChild = function (element, expandChild, loaded) {\n        if (expandChild) {\n            var cIcons = selectAll('.' + EXPANDABLE, element);\n            for (var i = 0, len = cIcons.length; i < len; i++) {\n                var icon = cIcons[i];\n                if (element.querySelector('.e-icons') !== cIcons[i]) {\n                    var curLi = closest(icon, '.' + LISTITEM);\n                    this.expandArgs = this.getExpandEvent(curLi, null);\n                    if (loaded !== true) {\n                        this.trigger('nodeExpanding', this.expandArgs);\n                    }\n                    this.renderChildNodes(curLi, expandChild, null, loaded);\n                }\n            }\n        }\n    };\n    TreeView.prototype.toggleSelect = function (li, e, multiSelect) {\n        if (!li.classList.contains('e-disable')) {\n            if (this.allowMultiSelection && ((e && e.ctrlKey) || multiSelect) && this.isActive(li)) {\n                this.unselectNode(li, e);\n            }\n            else {\n                this.selectNode(li, e, multiSelect);\n            }\n        }\n    };\n    TreeView.prototype.isActive = function (li) {\n        return li.classList.contains(ACTIVE) ? true : false;\n    };\n    TreeView.prototype.selectNode = function (li, e, multiSelect) {\n        var _this = this;\n        if (isNOU(li) || (!this.allowMultiSelection && this.isActive(li) && !isNOU(e))) {\n            this.setFocusElement(li);\n            return;\n        }\n        var eventArgs;\n        if (this.isLoaded) {\n            eventArgs = this.getSelectEvent(li, 'select', e);\n            this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    _this.nodeSelectAction(li, e, observedArgs, multiSelect);\n                }\n            });\n        }\n        else {\n            this.nodeSelectAction(li, e, eventArgs, multiSelect);\n        }\n    };\n    TreeView.prototype.nodeSelectAction = function (li, e, eventArgs, multiSelect) {\n        if (!this.allowMultiSelection || (!multiSelect && (!e || (e && !e.ctrlKey)))) {\n            this.removeSelectAll();\n        }\n        if (this.allowMultiSelection && e && e.shiftKey) {\n            if (!this.startNode) {\n                this.startNode = li;\n            }\n            var startIndex = this.liList.indexOf(this.startNode);\n            var endIndex = this.liList.indexOf(li);\n            if (startIndex > endIndex) {\n                var temp = startIndex;\n                startIndex = endIndex;\n                endIndex = temp;\n            }\n            for (var i = startIndex; i <= endIndex; i++) {\n                var currNode = this.liList[i];\n                if (isVisible(currNode) && !currNode.classList.contains('e-disable')) {\n                    this.addSelect(currNode);\n                }\n            }\n        }\n        else {\n            this.startNode = li;\n            this.addSelect(li);\n        }\n        this.setFocusElement(li);\n        if (this.isLoaded) {\n            eventArgs.nodeData = this.getNodeData(li);\n            this.trigger('nodeSelected', eventArgs);\n        }\n    };\n    TreeView.prototype.unselectNode = function (li, e) {\n        var _this = this;\n        var eventArgs;\n        if (this.isLoaded) {\n            eventArgs = this.getSelectEvent(li, 'un-select', e);\n            this.trigger('nodeSelecting', eventArgs, function (observedArgs) {\n                if (!observedArgs.cancel) {\n                    _this.nodeUnselectAction(li, observedArgs);\n                }\n            });\n        }\n        else {\n            this.nodeUnselectAction(li, eventArgs);\n        }\n    };\n    TreeView.prototype.nodeUnselectAction = function (li, eventArgs) {\n        this.removeSelect(li);\n        this.setFocusElement(li);\n        if (this.isLoaded) {\n            eventArgs.nodeData = this.getNodeData(li);\n            this.trigger('nodeSelected', eventArgs);\n        }\n    };\n    TreeView.prototype.setFocusElement = function (li) {\n        if (!isNOU(li)) {\n            var focusedNode = this.getFocusedNode();\n            if (focusedNode) {\n                removeClass([focusedNode], FOCUS);\n            }\n            addClass([li], FOCUS);\n            this.updateIdAttr(focusedNode, li);\n        }\n    };\n    TreeView.prototype.addSelect = function (liEle) {\n        liEle.setAttribute('aria-selected', 'true');\n        addClass([liEle], ACTIVE);\n        var id = liEle.getAttribute('data-uid');\n        if (!isNOU(id) && this.selectedNodes.indexOf(id) === -1) {\n            this.selectedNodes.push(id);\n        }\n    };\n    TreeView.prototype.removeSelect = function (liEle) {\n        if (this.allowMultiSelection) {\n            liEle.setAttribute('aria-selected', 'false');\n        }\n        else {\n            liEle.removeAttribute('aria-selected');\n        }\n        removeClass([liEle], ACTIVE);\n        var index = this.selectedNodes.indexOf(liEle.getAttribute('data-uid'));\n        if (index > -1) {\n            this.selectedNodes.splice(index, 1);\n        }\n    };\n    TreeView.prototype.removeSelectAll = function () {\n        var selectedLI = this.element.querySelectorAll('.' + ACTIVE);\n        for (var _i = 0, selectedLI_1 = selectedLI; _i < selectedLI_1.length; _i++) {\n            var ele = selectedLI_1[_i];\n            if (this.allowMultiSelection) {\n                ele.setAttribute('aria-selected', 'false');\n            }\n            else {\n                ele.removeAttribute('aria-selected');\n            }\n        }\n        removeClass(selectedLI, ACTIVE);\n        this.setProperties({ selectedNodes: [] }, true);\n    };\n    TreeView.prototype.getSelectEvent = function (currLi, action, e) {\n        var nodeData = this.getNodeData(currLi);\n        return { action: action, cancel: false, isInteracted: isNOU(e) ? false : true, node: currLi, nodeData: nodeData };\n    };\n    TreeView.prototype.setExpandOnType = function () {\n        this.expandOnType = (this.expandOn === 'Auto') ? (Browser.isDevice ? 'Click' : 'DblClick') : this.expandOn;\n    };\n    TreeView.prototype.expandHandler = function (e) {\n        var target = e.originalEvent.target;\n        if (!target || target.classList.contains(INPUT) || target.classList.contains(ROOT) ||\n            target.classList.contains(PARENTITEM) || target.classList.contains(LISTITEM) ||\n            target.classList.contains(ICON) || this.showCheckBox && closest(target, '.' + CHECKBOXWRAP)) {\n            return;\n        }\n        else {\n            this.expandCollapseAction(closest(target, '.' + LISTITEM), e);\n        }\n    };\n    TreeView.prototype.expandCollapseAction = function (currLi, e) {\n        var icon = select('div.' + ICON, currLi);\n        if (!icon || icon.classList.contains(PROCESS)) {\n            return;\n        }\n        else {\n            var classList = icon.classList;\n            if (classList.contains(EXPANDABLE)) {\n                this.expandAction(currLi, icon, e);\n            }\n            else if (classList.contains(COLLAPSIBLE)) {\n                this.collapseNode(currLi, icon, e);\n            }\n        }\n    };\n    TreeView.prototype.expandAction = function (currLi, icon, e, expandChild, callback) {\n        var _this = this;\n        if (icon.classList.contains(PROCESS)) {\n            return;\n        }\n        else {\n            addClass([icon], PROCESS);\n        }\n        if (this.isLoaded && !this.isRefreshed) {\n            this.expandArgs = this.getExpandEvent(currLi, e);\n            this.trigger('nodeExpanding', this.expandArgs, function (observedArgs) {\n                if (observedArgs.cancel) {\n                    removeClass([icon], PROCESS);\n                }\n                else {\n                    _this.nodeExpandAction(currLi, icon, expandChild, callback);\n                }\n            });\n        }\n        else {\n            this.nodeExpandAction(currLi, icon, expandChild, callback);\n        }\n    };\n    TreeView.prototype.nodeExpandAction = function (currLi, icon, expandChild, callback) {\n        var ul = select('.' + PARENTITEM, currLi);\n        if (ul && ul.nodeName === 'UL') {\n            this.expandNode(currLi, icon);\n        }\n        else {\n            this.isFirstRender = true;\n            this.renderChildNodes(currLi, expandChild, callback);\n            var liEles = selectAll('.' + LISTITEM, currLi);\n            for (var i = 0; i < liEles.length; i++) {\n                var id = this.getId(liEles[i]);\n                if (this.expandChildren.indexOf(id) !== -1 && this.expandChildren !== undefined) {\n                    var icon_1 = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEles[i]));\n                    if (!isNOU(icon_1)) {\n                        this.expandAction(liEles[i], icon_1, null);\n                    }\n                    this.expandChildren.splice(this.expandChildren.indexOf(id), 1);\n                }\n            }\n        }\n    };\n    TreeView.prototype.keyActionHandler = function (e) {\n        var _this = this;\n        var target = e.target;\n        var focusedNode = this.getFocusedNode();\n        if (target && target.classList.contains(INPUT)) {\n            var inpEle = target;\n            if (e.action === 'enter') {\n                inpEle.blur();\n                this.element.focus();\n                addClass([focusedNode], HOVER);\n            }\n            else if (e.action === 'escape') {\n                inpEle.value = this.oldText;\n                inpEle.blur();\n                this.element.focus();\n                addClass([focusedNode], HOVER);\n            }\n            return;\n        }\n        e.preventDefault();\n        var eventArgs = {\n            cancel: false,\n            event: e,\n            node: focusedNode,\n        };\n        this.trigger('keyPress', eventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                switch (e.action) {\n                    case 'space':\n                        if (_this.showCheckBox) {\n                            _this.checkNode(e);\n                        }\n                        break;\n                    case 'moveRight':\n                        _this.openNode(_this.enableRtl ? false : true, e);\n                        break;\n                    case 'moveLeft':\n                        _this.openNode(_this.enableRtl ? true : false, e);\n                        break;\n                    case 'shiftDown':\n                        _this.shiftKeySelect(true, e);\n                        break;\n                    case 'moveDown':\n                    case 'ctrlDown':\n                    case 'csDown':\n                        _this.navigateNode(true);\n                        break;\n                    case 'shiftUp':\n                        _this.shiftKeySelect(false, e);\n                        break;\n                    case 'moveUp':\n                    case 'ctrlUp':\n                    case 'csUp':\n                        _this.navigateNode(false);\n                        break;\n                    case 'home':\n                    case 'shiftHome':\n                    case 'ctrlHome':\n                    case 'csHome':\n                        _this.navigateRootNode(true);\n                        break;\n                    case 'end':\n                    case 'shiftEnd':\n                    case 'ctrlEnd':\n                    case 'csEnd':\n                        _this.navigateRootNode(false);\n                        break;\n                    case 'enter':\n                    case 'ctrlEnter':\n                    case 'shiftEnter':\n                    case 'csEnter':\n                        _this.toggleSelect(focusedNode, e);\n                        break;\n                    case 'f2':\n                        if (_this.allowEditing && !focusedNode.classList.contains('e-disable')) {\n                            _this.createTextbox(focusedNode, e);\n                        }\n                        break;\n                    case 'ctrlA':\n                        if (_this.allowMultiSelection) {\n                            var sNodes = selectAll('.' + LISTITEM + ':not(.' + ACTIVE + ')', _this.element);\n                            _this.selectGivenNodes(sNodes);\n                        }\n                        break;\n                }\n            }\n        });\n    };\n    TreeView.prototype.navigateToFocus = function (isUp) {\n        var focusNode = this.getFocusedNode().querySelector('.' + TEXTWRAP);\n        var pos = focusNode.getBoundingClientRect();\n        var parent = this.getScrollParent(this.element);\n        if (!isNOU(parent)) {\n            var parentPos = parent.getBoundingClientRect();\n            if (pos.bottom > parentPos.bottom) {\n                parent.scrollTop += pos.bottom - parentPos.bottom;\n            }\n            else if (pos.top < parentPos.top) {\n                parent.scrollTop -= parentPos.top - pos.top;\n            }\n        }\n        var isVisible = this.isVisibleInViewport(focusNode);\n        if (!isVisible) {\n            focusNode.scrollIntoView(isUp);\n        }\n    };\n    TreeView.prototype.isVisibleInViewport = function (txtWrap) {\n        var pos = txtWrap.getBoundingClientRect();\n        return (pos.top >= 0 && pos.left >= 0 && pos.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n            pos.right <= (window.innerWidth || document.documentElement.clientWidth));\n    };\n    TreeView.prototype.getScrollParent = function (node) {\n        if (isNOU(node)) {\n            return null;\n        }\n        return (node.scrollHeight > node.clientHeight) ? node : this.getScrollParent(node.parentElement);\n    };\n    TreeView.prototype.shiftKeySelect = function (isTowards, e) {\n        if (this.allowMultiSelection) {\n            var focusedNode = this.getFocusedNode();\n            var nextNode = isTowards ? this.getNextNode(focusedNode) : this.getPrevNode(focusedNode);\n            this.removeHover();\n            this.setFocusElement(nextNode);\n            this.toggleSelect(nextNode, e, false);\n            this.navigateToFocus(!isTowards);\n        }\n        else {\n            this.navigateNode(isTowards);\n        }\n    };\n    TreeView.prototype.checkNode = function (e) {\n        var focusedNode = this.getFocusedNode();\n        var checkWrap = select('.' + CHECKBOXWRAP, focusedNode);\n        var isChecked = select(' .' + CHECKBOXFRAME, checkWrap).classList.contains(CHECK);\n        if (!focusedNode.classList.contains('e-disable')) {\n            if (focusedNode.getElementsByClassName(\"e-checkbox-disabled\").length == 0) {\n                this.validateCheckNode(checkWrap, isChecked, focusedNode, e);\n            }\n        }\n    };\n    TreeView.prototype.validateCheckNode = function (checkWrap, isCheck, li, e) {\n        var _this = this;\n        var currLi = closest(checkWrap, '.' + LISTITEM);\n        this.checkActionNodes = [];\n        var ariaState = !isCheck ? 'true' : 'false';\n        if (!isNOU(ariaState)) {\n            checkWrap.setAttribute('aria-checked', ariaState);\n        }\n        var eventArgs = this.getCheckEvent(currLi, isCheck ? 'uncheck' : 'check', e);\n        this.trigger('nodeChecking', eventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                _this.nodeCheckingAction(checkWrap, isCheck, li, observedArgs, e);\n            }\n        });\n    };\n    TreeView.prototype.nodeCheckingAction = function (checkWrap, isCheck, li, eventArgs, e) {\n        if (this.checkedElement.indexOf(li.getAttribute('data-uid')) === -1) {\n            this.checkedElement.push(li.getAttribute('data-uid'));\n            if (this.autoCheck) {\n                var child = this.getChildNodes(this.treeData, li.getAttribute('data-uid'));\n                (child !== null) ? this.allCheckNode(child, this.checkedElement, null, null, false) : child = null;\n            }\n        }\n        this.changeState(checkWrap, isCheck ? 'uncheck' : 'check', e, true);\n        if (this.autoCheck) {\n            this.ensureChildCheckState(li);\n            this.ensureParentCheckState(closest(closest(li, '.' + PARENTITEM), '.' + LISTITEM));\n            var doCheck = void 0;\n            if (eventArgs.action === 'check') {\n                doCheck = true;\n            }\n            else if (eventArgs.action === 'uncheck') {\n                doCheck = false;\n            }\n            this.ensureStateChange(li, doCheck);\n        }\n        this.nodeCheckedEvent(checkWrap, isCheck, e);\n    };\n    /**\n     * Update checkedNodes when UI interaction happens before the child node renders in DOM\n     */\n    TreeView.prototype.ensureStateChange = function (li, doCheck) {\n        var childElement = select('.' + PARENTITEM, li);\n        var parentIndex = li.getAttribute('data-uid');\n        var mapper = this.fields;\n        if (this.dataType === 1 && this.autoCheck) {\n            var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.parentID, 'equal', parentIndex, true));\n            for (var i = 0; i < resultData.length; i++) {\n                var resultId = resultData[i][this.fields.id] ? resultData[i][this.fields.id].toString() : null;\n                var isCheck = resultData[i][this.fields.isChecked] ? resultData[i][this.fields.isChecked].toString() : null;\n                if (this.checkedNodes.indexOf(parentIndex) !== -1 && this.checkedNodes.indexOf(resultId) === -1) {\n                    this.checkedNodes.push(resultId);\n                    var childItems = this.getChildNodes(this.treeData, resultId);\n                    this.getChildItems(childItems, doCheck);\n                    if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n                        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n                    }\n                }\n                else if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null &&\n                    this.checkedNodes.indexOf(resultId) !== -1) {\n                    this.checkedNodes.splice(this.checkedNodes.indexOf(resultId), 1);\n                    if (isCheck === 'true') {\n                        this.updateField(this.treeData, this.fields, resultId, 'isChecked', null);\n                    }\n                    if (this.checkedNodes.indexOf(parentIndex) === -1 && childElement === null ||\n                        this.parentNodeCheck.indexOf(resultId) !== -1) {\n                        var childNodes = this.getChildNodes(this.treeData, resultId);\n                        this.getChildItems(childNodes, doCheck);\n                        if (this.parentNodeCheck.indexOf(resultId) !== -1) {\n                            this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(resultId), 1);\n                        }\n                    }\n                }\n                else {\n                    var childItems = this.getChildNodes(this.treeData, resultId);\n                    this.getChildItems(childItems, doCheck);\n                }\n            }\n        }\n        else if (this.dataType === 1 && !this.autoCheck) {\n            if (!doCheck) {\n                var checkedData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.isChecked, 'equal', true, false));\n                for (var i = 0; i < checkedData.length; i++) {\n                    var id = checkedData[i][this.fields.id] ? checkedData[i][this.fields.id].toString() : null;\n                    if (this.checkedNodes.indexOf(id) !== -1) {\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(id), 1);\n                    }\n                    this.updateField(this.treeData, this.fields, id, 'isChecked', null);\n                }\n                this.checkedNodes = [];\n            }\n            else {\n                for (var i = 0; i < this.treeData.length; i++) {\n                    var checkedId = this.treeData[i][this.fields.id] ? this.treeData[i][this.fields.id].toString() : null;\n                    if (this.checkedNodes.indexOf(checkedId) === -1) {\n                        this.checkedNodes.push(checkedId);\n                    }\n                }\n            }\n        }\n        else {\n            var childItems = this.getChildNodes(this.treeData, parentIndex);\n            if (childItems) {\n                this.childStateChange(childItems, parentIndex, childElement, doCheck);\n            }\n        }\n    };\n    TreeView.prototype.getChildItems = function (childItems, doCheck) {\n        for (var i = 0; i < childItems.length; i++) {\n            var childId = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : null;\n            var childIsCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() :\n                null;\n            if (this.checkedNodes.indexOf(childId) !== -1 && !doCheck) {\n                this.checkedNodes.splice(this.checkedNodes.indexOf(childId), 1);\n            }\n            if (this.checkedNodes.indexOf(childId) === -1 && doCheck) {\n                this.checkedNodes.push(childId);\n            }\n            if (childIsCheck === 'true' && !doCheck) {\n                this.updateField(this.treeData, this.fields, childId, 'isChecked', null);\n            }\n            var subChildItems = this.getChildNodes(this.treeData, childId);\n            if (subChildItems.length > 0) {\n                this.getChildItems(subChildItems, doCheck);\n            }\n        }\n    };\n    /**\n     * Update checkedNodes when UI interaction happens before the child node renders in DOM for hierarchical DS\n     */\n    TreeView.prototype.childStateChange = function (childItems, parent, childElement, doCheck) {\n        for (var i = 0; i < childItems.length; i++) {\n            var checkedChild = childItems[i][this.fields.id] ? childItems[i][this.fields.id].toString() : '';\n            var isCheck = childItems[i][this.fields.isChecked] ? childItems[i][this.fields.isChecked].toString() : null;\n            if (this.autoCheck) {\n                if (this.checkedNodes.indexOf(parent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n                    this.checkedNodes.push(checkedChild);\n                    if (this.parentNodeCheck.indexOf(checkedChild) !== -1) {\n                        this.parentNodeCheck.splice(this.parentNodeCheck.indexOf(checkedChild), 1);\n                    }\n                }\n                else if (this.checkedNodes.indexOf(parent) === -1 && this.checkedNodes.indexOf(checkedChild) !== -1 && !doCheck) {\n                    this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n                    if (isCheck === 'true') {\n                        this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n                    }\n                }\n            }\n            else if (!this.autoCheck) {\n                if (!doCheck) {\n                    if (this.checkedNodes.indexOf(checkedChild) !== -1) {\n                        this.checkedNodes.splice(this.checkedNodes.indexOf(checkedChild), 1);\n                    }\n                    this.updateField(this.treeData, this.fields, checkedChild, 'isChecked', null);\n                    this.checkedNodes = [];\n                }\n                else {\n                    if (this.checkedNodes.indexOf(checkedChild) === -1) {\n                        this.checkedNodes.push(checkedChild);\n                    }\n                }\n            }\n            var subChild = this.getChildNodes([childItems[i]], checkedChild);\n            if (subChild) {\n                this.childStateChange(subChild, parent, childElement, doCheck);\n            }\n        }\n    };\n    //This method can be used to get all child nodes of a parent by passing the children of a parent along with 'validateCheck' set to false\n    TreeView.prototype.allCheckNode = function (child, newCheck, checked, childCheck, validateCheck) {\n        if (child) {\n            for (var length_1 = 0; length_1 < child.length; length_1++) {\n                var childId = getValue(this.fields.id, child[length_1]);\n                var check = this.element.querySelector('[data-uid=\"' + childId + '\"]');\n                //Validates isChecked case while no UI interaction has been performed on the node or it's parent\n                if (validateCheck !== false && this.checkedElement.indexOf(childId.toString()) === -1) {\n                    if (((check === null && !isNOU(child[length_1][this.fields.isChecked]) && newCheck.indexOf(childId.toString()) === -1)\n                        || childCheck === 0 || checked === 2)) {\n                        (child[length_1][this.fields.isChecked] !== false || checked === 2) ? newCheck.push(childId.toString())\n                            : childCheck = null;\n                        childCheck = (child[length_1][this.fields.isChecked] !== false || checked === 2) ? 0 : null;\n                    }\n                }\n                //Pushes child checked node done thro' UI interaction\n                if (newCheck.indexOf(childId.toString()) === -1 && isNOU(checked)) {\n                    newCheck.push(childId.toString());\n                }\n                var hierChildId = getValue(this.fields.child.toString(), child[length_1]);\n                //Gets if any next level children are available for child nodes\n                if (getValue(this.fields.hasChildren, child[length_1]) === true || hierChildId) {\n                    var id = getValue(this.fields.id, child[length_1]);\n                    var childId_1 = void 0;\n                    if (this.dataType === 1) {\n                        childId_1 = this.getChildNodes(this.treeData, id.toString());\n                    }\n                    else {\n                        childId_1 = hierChildId;\n                    }\n                    if (childId_1) {\n                        (isNOU(validateCheck)) ? this.allCheckNode(childId_1, newCheck, checked, childCheck) :\n                            this.allCheckNode(childId_1, newCheck, checked, childCheck, validateCheck);\n                        childCheck = null;\n                    }\n                }\n                childCheck = null;\n            }\n        }\n    };\n    TreeView.prototype.openNode = function (toBeOpened, e) {\n        var focusedNode = this.getFocusedNode();\n        var icon = select('div.' + ICON, focusedNode);\n        if (toBeOpened) {\n            if (!icon) {\n                return;\n            }\n            else if (icon.classList.contains(EXPANDABLE)) {\n                this.expandAction(focusedNode, icon, e);\n            }\n            else {\n                this.focusNextNode(focusedNode, true);\n            }\n        }\n        else {\n            if (icon && icon.classList.contains(COLLAPSIBLE)) {\n                this.collapseNode(focusedNode, icon, e);\n            }\n            else {\n                var parentLi = closest(closest(focusedNode, '.' + PARENTITEM), '.' + LISTITEM);\n                if (!parentLi) {\n                    return;\n                }\n                else {\n                    if (!parentLi.classList.contains('e-disable')) {\n                        this.setFocus(focusedNode, parentLi);\n                        this.navigateToFocus(true);\n                    }\n                }\n            }\n        }\n    };\n    TreeView.prototype.navigateNode = function (isTowards) {\n        var focusedNode = this.getFocusedNode();\n        this.focusNextNode(focusedNode, isTowards);\n    };\n    TreeView.prototype.navigateRootNode = function (isBackwards) {\n        var focusedNode = this.getFocusedNode();\n        var rootNode = isBackwards ? this.getRootNode() : this.getEndNode();\n        if (!rootNode.classList.contains('e-disable')) {\n            this.setFocus(focusedNode, rootNode);\n            this.navigateToFocus(isBackwards);\n        }\n    };\n    TreeView.prototype.getFocusedNode = function () {\n        var selectedItem;\n        var fNode = select('.' + LISTITEM + '.' + FOCUS, this.element);\n        if (isNOU(fNode)) {\n            selectedItem = select('.' + LISTITEM, this.element);\n        }\n        return isNOU(fNode) ? (isNOU(selectedItem) ? this.element.firstElementChild : selectedItem) : fNode;\n    };\n    TreeView.prototype.focusNextNode = function (li, isTowards) {\n        var nextNode = isTowards ? this.getNextNode(li) : this.getPrevNode(li);\n        this.setFocus(li, nextNode);\n        this.navigateToFocus(!isTowards);\n        if (nextNode.classList.contains('e-disable')) {\n            var lastChild = nextNode.lastChild;\n            if (nextNode.previousSibling == null && nextNode.classList.contains('e-level-1')) {\n                this.focusNextNode(nextNode, true);\n            }\n            else if (nextNode.nextSibling == null && nextNode.classList.contains('e-node-collapsed')) {\n                this.focusNextNode(nextNode, false);\n            }\n            else if (nextNode.nextSibling == null && lastChild.classList.contains(TEXTWRAP)) {\n                this.focusNextNode(nextNode, false);\n            }\n            else {\n                this.focusNextNode(nextNode, isTowards);\n            }\n        }\n    };\n    TreeView.prototype.getNextNode = function (li) {\n        var index = this.liList.indexOf(li);\n        var nextNode;\n        do {\n            index++;\n            nextNode = this.liList[index];\n            if (isNOU(nextNode)) {\n                return li;\n            }\n        } while (!isVisible(nextNode));\n        return nextNode;\n    };\n    TreeView.prototype.getPrevNode = function (li) {\n        var index = this.liList.indexOf(li);\n        var prevNode;\n        do {\n            index--;\n            prevNode = this.liList[index];\n            if (isNOU(prevNode)) {\n                return li;\n            }\n        } while (!isVisible(prevNode));\n        return prevNode;\n    };\n    TreeView.prototype.getRootNode = function () {\n        var index = 0;\n        var rootNode;\n        do {\n            rootNode = this.liList[index];\n            index++;\n        } while (!isVisible(rootNode));\n        return rootNode;\n    };\n    TreeView.prototype.getEndNode = function () {\n        var index = this.liList.length - 1;\n        var endNode;\n        do {\n            endNode = this.liList[index];\n            index--;\n        } while (!isVisible(endNode));\n        return endNode;\n    };\n    TreeView.prototype.setFocus = function (preNode, nextNode) {\n        removeClass([preNode], [HOVER, FOCUS]);\n        if (!nextNode.classList.contains('e-disable')) {\n            addClass([nextNode], [HOVER, FOCUS]);\n            this.updateIdAttr(preNode, nextNode);\n        }\n    };\n    TreeView.prototype.updateIdAttr = function (preNode, nextNode) {\n        this.element.removeAttribute('aria-activedescendant');\n        if (preNode) {\n            preNode.removeAttribute('id');\n        }\n        nextNode.setAttribute('id', this.element.id + '_active');\n        this.element.setAttribute('aria-activedescendant', this.element.id + '_active');\n    };\n    TreeView.prototype.focusIn = function () {\n        if (!this.mouseDownStatus) {\n            addClass([this.getFocusedNode()], HOVER);\n        }\n        this.mouseDownStatus = false;\n    };\n    TreeView.prototype.focusOut = function () {\n        removeClass([this.getFocusedNode()], HOVER);\n    };\n    TreeView.prototype.onMouseOver = function (e) {\n        var target = e.target;\n        var classList = target.classList;\n        var currentLi = closest(target, '.' + LISTITEM);\n        if (!currentLi || classList.contains(PARENTITEM) || classList.contains(LISTITEM)) {\n            this.removeHover();\n            return;\n        }\n        else {\n            if (currentLi && !currentLi.classList.contains('e-disable')) {\n                this.setHover(currentLi);\n            }\n        }\n    };\n    TreeView.prototype.setHover = function (li) {\n        if (!li.classList.contains(HOVER)) {\n            this.removeHover();\n            addClass([li], HOVER);\n        }\n    };\n    ;\n    TreeView.prototype.onMouseLeave = function (e) {\n        this.removeHover();\n    };\n    TreeView.prototype.removeHover = function () {\n        var hoveredNode = selectAll('.' + HOVER, this.element);\n        if (hoveredNode && hoveredNode.length) {\n            removeClass(hoveredNode, HOVER);\n        }\n    };\n    ;\n    TreeView.prototype.getNodeData = function (currLi, fromDS) {\n        if (!isNOU(currLi) && currLi.classList.contains(LISTITEM) &&\n            !isNOU(closest(currLi, '.' + CONTROL)) && closest(currLi, '.' + CONTROL).classList.contains(ROOT)) {\n            var id = currLi.getAttribute('data-uid');\n            var text = this.getText(currLi, fromDS);\n            var pNode = closest(currLi.parentNode, '.' + LISTITEM);\n            var pid = pNode ? pNode.getAttribute('data-uid') : null;\n            var selected = currLi.classList.contains(ACTIVE);\n            var expanded = (currLi.getAttribute('aria-expanded') === 'true') ? true : false;\n            var hasChildren = currLi.getAttribute('aria-expanded') !== null ? true : (select('.' + EXPANDABLE, currLi) || select('.' + COLLAPSIBLE, currLi)) != null ? true : false;\n            var checked = null;\n            var checkboxElement = select('.' + CHECKBOXWRAP, currLi);\n            if (this.showCheckBox && checkboxElement) {\n                checked = checkboxElement.getAttribute('aria-checked');\n            }\n            return {\n                id: id, text: text, parentID: pid, selected: selected, expanded: expanded,\n                isChecked: checked, hasChildren: hasChildren\n            };\n        }\n        return { id: '', text: '', parentID: '', selected: false, expanded: false, isChecked: '', hasChildren: false };\n    };\n    TreeView.prototype.getText = function (currLi, fromDS) {\n        if (fromDS) {\n            var nodeData = this.getNodeObject(currLi.getAttribute('data-uid'));\n            var level = parseFloat(currLi.getAttribute('aria-level'));\n            var nodeFields = this.getFields(this.fields, level, 1);\n            return getValue(nodeFields.text, nodeData);\n        }\n        return select('.' + LISTTEXT, currLi).textContent;\n    };\n    TreeView.prototype.getExpandEvent = function (currLi, e) {\n        var nodeData = this.getNodeData(currLi);\n        return { cancel: false, isInteracted: isNOU(e) ? false : true, node: currLi, nodeData: nodeData, event: e };\n    };\n    TreeView.prototype.renderNodeTemplate = function (data, textEle, dataId) {\n        var tempArr = this.nodeTemplateFn(data, this, 'nodeTemplate' + dataId, this.element.id + 'nodeTemplate', this.isStringTemplate, undefined, textEle, this.root);\n        if (tempArr) {\n            tempArr = Array.prototype.slice.call(tempArr);\n            append(tempArr, textEle);\n        }\n    };\n    TreeView.prototype.destroyTemplate = function (liEle) {\n        this.clearTemplate(['nodeTemplate' + liEle.getAttribute('data-uid')]);\n    };\n    TreeView.prototype.reRenderNodes = function () {\n        this.updateListProp(this.fields);\n        if (Browser.isIE) {\n            this.ulElement = this.element.querySelector('.e-list-parent.e-ul');\n            this.ulElement.parentElement.removeChild(this.ulElement);\n        }\n        else {\n            this.element.innerHTML = '';\n        }\n        if (!isNOU(this.nodeTemplateFn)) {\n            this.clearTemplate();\n        }\n        this.setTouchClass();\n        this.setProperties({ selectedNodes: [], checkedNodes: [], expandedNodes: [] }, true);\n        this.checkedElement = [];\n        this.isLoaded = false;\n        this.setDataBinding(true);\n    };\n    TreeView.prototype.setCssClass = function (oldClass, newClass) {\n        if (!isNOU(oldClass) && oldClass !== '') {\n            removeClass([this.element], oldClass.split(' '));\n        }\n        if (!isNOU(newClass) && newClass !== '') {\n            addClass([this.element], newClass.split(' '));\n        }\n    };\n    TreeView.prototype.editingHandler = function (e) {\n        var target = e.target;\n        if (!target || target.classList.contains(ROOT) || target.classList.contains(PARENTITEM) ||\n            target.classList.contains(LISTITEM) || target.classList.contains(ICON) ||\n            target.classList.contains(INPUT) || target.classList.contains(INPUTGROUP)) {\n            return;\n        }\n        else {\n            var liEle = closest(target, '.' + LISTITEM);\n            this.createTextbox(liEle, e);\n        }\n    };\n    TreeView.prototype.createTextbox = function (liEle, e) {\n        var _this = this;\n        var oldInpEle = select('.' + TREEINPUT, this.element);\n        if (oldInpEle) {\n            oldInpEle.blur();\n        }\n        var textEle = select('.' + LISTTEXT, liEle);\n        this.updateOldText(liEle);\n        var innerEle = this.createElement('input', { className: TREEINPUT, attrs: { value: this.oldText } });\n        var eventArgs = this.getEditEvent(liEle, null, innerEle.outerHTML);\n        this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                var inpWidth = textEle.offsetWidth + 5;\n                var style_1 = 'width:' + inpWidth + 'px';\n                addClass([liEle], EDITING);\n                if (!isNOU(_this.nodeTemplateFn)) {\n                    _this.destroyTemplate(liEle);\n                }\n                if (_this.isReact) {\n                    setTimeout(function () {\n                        _this.renderTextBox(eventArgs, textEle, style_1);\n                    }, 5);\n                }\n                else {\n                    _this.renderTextBox(eventArgs, textEle, style_1);\n                }\n            }\n        });\n    };\n    TreeView.prototype.renderTextBox = function (eventArgs, textEle, style) {\n        textEle.innerHTML = eventArgs.innerHtml;\n        var inpEle = select('.' + TREEINPUT, textEle);\n        this.inputObj = Input.createInput({\n            element: inpEle,\n            properties: {\n                enableRtl: this.enableRtl,\n            }\n        }, this.createElement);\n        this.inputObj.container.setAttribute('style', style);\n        inpEle.focus();\n        var inputEle = inpEle;\n        inputEle.setSelectionRange(0, inputEle.value.length);\n        this.wireInputEvents(inpEle);\n    };\n    TreeView.prototype.updateOldText = function (liEle) {\n        var id = liEle.getAttribute('data-uid');\n        this.editData = this.getNodeObject(id);\n        var level = parseFloat(liEle.getAttribute('aria-level'));\n        this.editFields = this.getFields(this.fields, level, 1);\n        this.oldText = getValue(this.editFields.text, this.editData);\n    };\n    TreeView.prototype.inputFocusOut = function (e) {\n        if (!select('.' + TREEINPUT, this.element)) {\n            return;\n        }\n        var target = e.target;\n        var newText = target.value;\n        var txtEle = closest(target, '.' + LISTTEXT);\n        var liEle = closest(target, '.' + LISTITEM);\n        detach(this.inputObj.container);\n        if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n            this.crudOperation('update', null, liEle, newText, null, null, true);\n        }\n        else {\n            this.appendNewText(liEle, txtEle, newText, true);\n        }\n    };\n    TreeView.prototype.appendNewText = function (liEle, txtEle, newText, isInput) {\n        var _this = this;\n        var eventArgs = this.getEditEvent(liEle, newText, null);\n        this.trigger('nodeEdited', eventArgs, function (observedArgs) {\n            newText = observedArgs.cancel ? observedArgs.oldText : observedArgs.newText;\n            _this.updateText(liEle, txtEle, newText, isInput);\n            if (observedArgs.oldText !== newText) {\n                _this.triggerEvent();\n            }\n        });\n    };\n    TreeView.prototype.updateText = function (liEle, txtEle, newText, isInput) {\n        var newData = setValue(this.editFields.text, newText, this.editData);\n        if (!isNOU(this.nodeTemplateFn)) {\n            txtEle.innerText = '';\n            var dataId = liEle.getAttribute('data-uid');\n            this.renderNodeTemplate(newData, txtEle, dataId);\n            this.renderReactTemplates();\n        }\n        else {\n            txtEle.innerText = newText;\n        }\n        if (isInput) {\n            removeClass([liEle], EDITING);\n            txtEle.focus();\n        }\n        if (this.allowTextWrap) {\n            this.calculateWrap(liEle);\n        }\n    };\n    TreeView.prototype.getElement = function (ele) {\n        if (isNOU(ele)) {\n            return null;\n        }\n        else if (typeof ele === 'string') {\n            return this.element.querySelector('[data-uid=\"' + ele + '\"]');\n        }\n        else if (typeof ele === 'object') {\n            return getElement(ele);\n        }\n        else {\n            return null;\n        }\n    };\n    TreeView.prototype.getId = function (ele) {\n        if (isNOU(ele)) {\n            return null;\n        }\n        else if (typeof ele === 'string') {\n            return ele;\n        }\n        else if (typeof ele === 'object') {\n            return (getElement(ele)).getAttribute('data-uid');\n        }\n        else {\n            return null;\n        }\n    };\n    TreeView.prototype.getEditEvent = function (liEle, newText, inpEle) {\n        var data = this.getNodeData(liEle);\n        return { cancel: false, newText: newText, node: liEle, nodeData: data, oldText: this.oldText, innerHtml: inpEle };\n    };\n    TreeView.prototype.getNodeObject = function (id) {\n        var childNodes;\n        if (isNOU(id)) {\n            return childNodes;\n        }\n        else if (this.dataType === 1) {\n            for (var i = 0, objlen = this.treeData.length; i < objlen; i++) {\n                var dataId = getValue(this.fields.id, this.treeData[i]);\n                if (!isNOU(this.treeData[i]) && !isNOU(dataId) && dataId.toString() === id) {\n                    return this.treeData[i];\n                }\n            }\n        }\n        else {\n            return this.getChildNodeObject(this.treeData, this.fields, id);\n        }\n        return childNodes;\n    };\n    TreeView.prototype.getChildNodeObject = function (obj, mapper, id) {\n        var newList;\n        if (isNOU(obj)) {\n            return newList;\n        }\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var dataId = getValue(mapper.id, obj[i]);\n            if (obj[i] && dataId && dataId.toString() === id) {\n                return obj[i];\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                var childData = getValue(mapper.child, obj[i]);\n                newList = this.getChildNodeObject(childData, this.getChildMapper(mapper), id);\n                if (newList !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n                var child = 'child';\n                newList = this.getChildNodeObject(getValue(child, obj[i]), this.getChildMapper(mapper), id);\n                if (newList !== undefined) {\n                    break;\n                }\n            }\n        }\n        return newList;\n    };\n    TreeView.prototype.setDragAndDrop = function (toBind) {\n        if (toBind && !this.disabled) {\n            this.initializeDrag();\n        }\n        else {\n            this.destroyDrag();\n        }\n    };\n    TreeView.prototype.initializeDrag = function () {\n        var _this = this;\n        var virtualEle;\n        var proxy = this;\n        this.dragObj = new Draggable(this.element, {\n            enableTailMode: true, enableAutoScroll: true,\n            dragArea: this.dragArea,\n            dragTarget: '.' + TEXTWRAP,\n            helper: function (e) {\n                _this.dragTarget = e.sender.target;\n                var dragRoot = closest(_this.dragTarget, '.' + ROOT);\n                var dragWrap = closest(_this.dragTarget, '.' + TEXTWRAP);\n                _this.dragLi = closest(_this.dragTarget, '.' + LISTITEM);\n                if (_this.fullRowSelect && !dragWrap && _this.dragTarget.classList.contains(FULLROW)) {\n                    dragWrap = _this.dragTarget.nextElementSibling;\n                }\n                if (!_this.dragTarget || !e.element.isSameNode(dragRoot) || !dragWrap ||\n                    _this.dragTarget.classList.contains(ROOT) || _this.dragTarget.classList.contains(PARENTITEM) ||\n                    _this.dragTarget.classList.contains(LISTITEM) || _this.dragLi.classList.contains('e-disable')) {\n                    return false;\n                }\n                var cloneEle = (dragWrap.cloneNode(true));\n                if (isNOU(select('div.' + ICON, cloneEle))) {\n                    var icon = proxy.createElement('div', { className: ICON + ' ' + EXPANDABLE });\n                    cloneEle.insertBefore(icon, cloneEle.children[0]);\n                }\n                var cssClass = DRAGITEM + ' ' + ROOT + ' ' + _this.cssClass + ' ' + (_this.enableRtl ? RTL : '');\n                virtualEle = proxy.createElement('div', { className: cssClass });\n                virtualEle.appendChild(cloneEle);\n                var nLen = _this.selectedNodes.length;\n                if (nLen > 1 && _this.allowMultiSelection && _this.dragLi.classList.contains(ACTIVE)) {\n                    var cNode = proxy.createElement('span', { className: DROPCOUNT, innerHTML: '' + nLen });\n                    virtualEle.appendChild(cNode);\n                }\n                document.body.appendChild(virtualEle);\n                document.body.style.cursor = '';\n                _this.dragData = _this.getNodeData(_this.dragLi);\n                return virtualEle;\n            },\n            dragStart: function (e) {\n                addClass([_this.element], DRAGGING);\n                var listItem = closest(e.target, '.e-list-item');\n                var level;\n                if (listItem) {\n                    level = parseInt(listItem.getAttribute('aria-level'), 10);\n                }\n                var eventArgs = _this.getDragEvent(e.event, _this, null, e.target, null, virtualEle, level);\n                if (eventArgs.draggedNode.classList.contains(EDITING)) {\n                    _this.dragObj.intDestroy(e.event);\n                    _this.dragCancelAction(virtualEle);\n                }\n                else {\n                    _this.trigger('nodeDragStart', eventArgs, function (observedArgs) {\n                        if (observedArgs.cancel) {\n                            _this.dragObj.intDestroy(e.event);\n                            _this.dragCancelAction(virtualEle);\n                        }\n                        else {\n                            _this.dragStartAction = true;\n                        }\n                    });\n                }\n            },\n            drag: function (e) {\n                _this.dragObj.setProperties({ cursorAt: { top: (!isNOU(e.event.targetTouches) || Browser.isDevice) ? 60 : -20 } });\n                _this.dragAction(e, virtualEle);\n            },\n            dragStop: function (e) {\n                removeClass([_this.element], DRAGGING);\n                _this.removeVirtualEle();\n                var dropTarget = e.target;\n                var preventTargetExpand = false;\n                var dropRoot = (closest(dropTarget, '.' + DROPPABLE));\n                var isHelperElement = true;\n                if (!dropTarget || !dropRoot) {\n                    detach(e.helper);\n                    document.body.style.cursor = '';\n                    isHelperElement = false;\n                }\n                var listItem = closest(dropTarget, '.e-list-item');\n                var level;\n                if (listItem) {\n                    level = parseInt(listItem.getAttribute('aria-level'), 10);\n                }\n                var eventArgs = _this.getDragEvent(e.event, _this, dropTarget, dropTarget, null, e.helper, level);\n                eventArgs.preventTargetExpand = preventTargetExpand;\n                _this.trigger('nodeDragStop', eventArgs, function (observedArgs) {\n                    _this.dragParent = observedArgs.draggedParentNode;\n                    _this.preventExpand = observedArgs.preventTargetExpand;\n                    if (observedArgs.cancel) {\n                        if (e.helper.parentNode) {\n                            detach(e.helper);\n                        }\n                        document.body.style.cursor = '';\n                        isHelperElement = false;\n                    }\n                    _this.dragStartAction = false;\n                });\n            }\n        });\n        this.dropObj = new Droppable(this.element, {\n            out: function (e) {\n                if (!isNOU(e) && !e.target.classList.contains(SIBLING)) {\n                    document.body.style.cursor = 'not-allowed';\n                }\n            },\n            over: function (e) {\n                document.body.style.cursor = '';\n            },\n            drop: function (e) {\n                _this.dropAction(e);\n            }\n        });\n    };\n    TreeView.prototype.dragCancelAction = function (virtualEle) {\n        detach(virtualEle);\n        removeClass([this.element], DRAGGING);\n        this.dragStartAction = false;\n    };\n    TreeView.prototype.dragAction = function (e, virtualEle) {\n        var dropRoot = closest(e.target, '.' + DROPPABLE);\n        var dropWrap = closest(e.target, '.' + TEXTWRAP);\n        var icon = select('div.' + ICON, virtualEle);\n        removeClass([icon], [DROPIN, DROPNEXT, DROPOUT, NODROP]);\n        this.removeVirtualEle();\n        document.body.style.cursor = '';\n        var classList = e.target.classList;\n        if (this.fullRowSelect && !dropWrap && !isNOU(classList) && classList.contains(FULLROW)) {\n            dropWrap = e.target.nextElementSibling;\n        }\n        if (dropRoot) {\n            var dropLi = closest(e.target, '.' + LISTITEM);\n            var checkWrapper = closest(e.target, '.' + CHECKBOXWRAP);\n            var collapse = closest(e.target, '.' + COLLAPSIBLE);\n            var expand = closest(e.target, '.' + EXPANDABLE);\n            if (!dropRoot.classList.contains(ROOT) || (dropWrap &&\n                (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi)))) {\n                if (this.hasTemplate && dropLi) {\n                    var templateTarget = select(this.fullRowSelect ? '.' + FULLROW : '.' + TEXTWRAP, dropLi);\n                    if ((e && (!expand && !collapse) && e.event.offsetY < 7 && !checkWrapper) || (((expand && e.event.offsetY < 5) || (collapse && e.event.offsetX < 3)))) {\n                        var index = this.fullRowSelect ? (1) : (0);\n                        this.appendIndicator(dropLi, icon, index);\n                    }\n                    else if ((e && (!expand && !collapse) && !checkWrapper && templateTarget && e.event.offsetY > templateTarget.offsetHeight - 10) || ((expand && e.event.offsetY > 19) || (collapse && e.event.offsetX > 19))) {\n                        var index = this.fullRowSelect ? (2) : (1);\n                        this.appendIndicator(dropLi, icon, index);\n                    }\n                    else {\n                        addClass([icon], DROPIN);\n                    }\n                }\n                else {\n                    if ((dropLi && e && (!expand && !collapse) && (e.event.offsetY < 7) && !checkWrapper) || (((expand && e.event.offsetY < 5) || (collapse && e.event.offsetX < 3)))) {\n                        var index = this.fullRowSelect ? (1) : (0);\n                        this.appendIndicator(dropLi, icon, index);\n                    }\n                    else if ((dropLi && e && (!expand && !collapse) && (e.target.offsetHeight > 0 && e.event.offsetY > (e.target.offsetHeight - 10)) && !checkWrapper) || (((expand && e.event.offsetY > 19) || (collapse && e.event.offsetX > 19)))) {\n                        var index = this.fullRowSelect ? (2) : (1);\n                        this.appendIndicator(dropLi, icon, index);\n                    }\n                    else {\n                        addClass([icon], DROPIN);\n                    }\n                }\n            }\n            else if (e.target.nodeName === 'LI' && (!dropLi.isSameNode(this.dragLi) && !this.isDescendant(this.dragLi, dropLi))) {\n                addClass([icon], DROPNEXT);\n                this.renderVirtualEle(e);\n            }\n            else if (e.target.classList.contains(SIBLING)) {\n                addClass([icon], DROPNEXT);\n            }\n            else {\n                addClass([icon], DROPOUT);\n            }\n        }\n        else {\n            addClass([icon], NODROP);\n            document.body.style.cursor = 'not-allowed';\n        }\n        var listItem = closest(e.target, '.e-list-item');\n        var level;\n        if (listItem) {\n            level = parseInt(listItem.getAttribute('aria-level'), 10);\n        }\n        var eventArgs = this.getDragEvent(e.event, this, e.target, e.target, null, virtualEle, level);\n        if (eventArgs.dropIndicator) {\n            removeClass([icon], eventArgs.dropIndicator);\n        }\n        this.trigger('nodeDragging', eventArgs);\n        if (eventArgs.dropIndicator) {\n            addClass([icon], eventArgs.dropIndicator);\n        }\n    };\n    TreeView.prototype.appendIndicator = function (dropLi, icon, index) {\n        addClass([icon], DROPNEXT);\n        var virEle = this.createElement('div', { className: SIBLING });\n        dropLi.insertBefore(virEle, dropLi.children[index]);\n    };\n    /* eslint-disable */\n    TreeView.prototype.dropAction = function (e) {\n        var offsetY = e.event.offsetY;\n        var dropTarget = e.target;\n        var dragObj;\n        var level;\n        var drop = false;\n        var dragInstance;\n        dragInstance = e.dragData.draggable;\n        for (var i = 0; i < dragInstance.ej2_instances.length; i++) {\n            if (dragInstance.ej2_instances[i] instanceof TreeView_1) {\n                dragObj = dragInstance.ej2_instances[i];\n                break;\n            }\n        }\n        if (dragObj && dragObj.dragTarget) {\n            var dragTarget = dragObj.dragTarget;\n            var dragLi = (closest(dragTarget, '.' + LISTITEM));\n            var dropLi = (closest(dropTarget, '.' + LISTITEM));\n            if (dropLi == null && dropTarget.classList.contains(ROOT)) {\n                dropLi = dropTarget.firstElementChild;\n            }\n            detach(e.droppedElement);\n            document.body.style.cursor = '';\n            if (!dropLi || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n                if (this.fields.dataSource instanceof DataManager === false) {\n                    this.preventExpand = false;\n                }\n                return;\n            }\n            if (dragObj.allowMultiSelection && dragLi.classList.contains(ACTIVE)) {\n                var sNodes = selectAll('.' + ACTIVE, dragObj.element);\n                if (e.target.offsetHeight <= 33 && offsetY > e.target.offsetHeight - 10 && offsetY > 6) {\n                    for (var i = sNodes.length - 1; i >= 0; i--) {\n                        if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n                            continue;\n                        }\n                        this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n                    }\n                }\n                else {\n                    for (var i = 0; i < sNodes.length; i++) {\n                        if (dropLi.isSameNode(sNodes[i]) || this.isDescendant(sNodes[i], dropLi)) {\n                            continue;\n                        }\n                        this.appendNode(dropTarget, sNodes[i], dropLi, e, dragObj, offsetY);\n                    }\n                }\n            }\n            else {\n                this.appendNode(dropTarget, dragLi, dropLi, e, dragObj, offsetY);\n            }\n            level = parseInt(dragLi.getAttribute('aria-level'), 10);\n            drop = true;\n        }\n        if (this.fields.dataSource instanceof DataManager === false) {\n            this.preventExpand = false;\n        }\n        this.trigger('nodeDropped', this.getDragEvent(e.event, dragObj, dropTarget, e.target, e.dragData.draggedElement, null, level, drop));\n        if (dragObj.element.id !== this.element.id) {\n            dragObj.triggerEvent();\n            this.isNodeDropped = true;\n            this.fields.dataSource = this.treeData;\n        }\n        this.triggerEvent();\n    };\n    TreeView.prototype.appendNode = function (dropTarget, dragLi, dropLi, e, dragObj, offsetY) {\n        var checkWrapper = closest(dropTarget, '.' + CHECKBOXWRAP);\n        var collapse = closest(e.target, '.' + COLLAPSIBLE);\n        var expand = closest(e.target, '.' + EXPANDABLE);\n        if (!dragLi.classList.contains('e-disable') && !checkWrapper && ((expand && e.event.offsetY < 5) || (collapse && e.event.offsetX < 3) || (expand && e.event.offsetY > 19) || (collapse && e.event.offsetX > 19) || (!expand && !collapse))) {\n            if (dropTarget.nodeName === 'LI') {\n                this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n            }\n            else if (dropTarget.firstElementChild && dropTarget.classList.contains(ROOT)) {\n                if (dropTarget.firstElementChild.nodeName === 'UL') {\n                    this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n                }\n            }\n            else if ((dropTarget.classList.contains('e-icon-collapsible')) || (dropTarget.classList.contains('e-icon-expandable'))) {\n                this.dropAsSiblingNode(dragLi, dropLi, e, dragObj);\n            }\n            else {\n                this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY);\n            }\n        }\n        else {\n            this.dropAsChildNode(dragLi, dropLi, dragObj, null, e, offsetY, true);\n        }\n    };\n    TreeView.prototype.dropAsSiblingNode = function (dragLi, dropLi, e, dragObj) {\n        var dropUl = closest(dropLi, '.' + PARENTITEM);\n        var dragParentUl = closest(dragLi, '.' + PARENTITEM);\n        var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n        var pre;\n        if (e.target.offsetHeight > 0 && e.event.offsetY > e.target.offsetHeight - 2) {\n            pre = false;\n        }\n        else if (e.event.offsetY < 2) {\n            pre = true;\n        }\n        else if (e.target.classList.contains('e-icon-expandable') || (e.target.classList.contains('e-icon-collapsible'))) {\n            if ((e.event.offsetY < 5) || (e.event.offsetX < 3)) {\n                pre = true;\n            }\n            else if ((e.event.offsetY > 15) || (e.event.offsetX > 17)) {\n                pre = false;\n            }\n        }\n        if ((e.target.classList.contains('e-icon-expandable')) || (e.target.classList.contains('e-icon-collapsible'))) {\n            var target = e.target.closest('li');\n            dropUl.insertBefore(dragLi, pre ? target : target.nextElementSibling);\n        }\n        else {\n            dropUl.insertBefore(dragLi, pre ? e.target : e.target.nextElementSibling);\n        }\n        this.moveData(dragLi, dropLi, dropUl, pre, dragObj);\n        this.updateElement(dragParentUl, dragParentLi);\n        this.updateAriaLevel(dragLi);\n        if (dragObj.element.id === this.element.id) {\n            this.updateList();\n        }\n        else {\n            dragObj.updateInstance();\n            this.updateInstance();\n        }\n    };\n    TreeView.prototype.dropAsChildNode = function (dragLi, dropLi, dragObj, index, e, pos, isCheck) {\n        var dragParentUl = closest(dragLi, '.' + PARENTITEM);\n        var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n        var dropParentUl = closest(dropLi, '.' + PARENTITEM);\n        var templateTarget;\n        if (e && e.target) {\n            templateTarget = select(this.fullRowSelect ? '.' + FULLROW : '.' + TEXTWRAP, dropLi);\n        }\n        if (e && (pos < 7) && !isCheck) {\n            dropParentUl.insertBefore(dragLi, dropLi);\n            this.moveData(dragLi, dropLi, dropParentUl, true, dragObj);\n        }\n        else if (e && (e.target.offsetHeight > 0 && pos > (e.target.offsetHeight - 10)) && !isCheck && !this.hasTemplate) {\n            dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n            this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n        }\n        else if (this.hasTemplate && templateTarget && pos > templateTarget.offsetHeight - 10 && !isCheck) {\n            dropParentUl.insertBefore(dragLi, dropLi.nextElementSibling);\n            this.moveData(dragLi, dropLi, dropParentUl, false, dragObj);\n        }\n        else {\n            var dropUl = this.expandParent(dropLi);\n            var childLi = dropUl.childNodes[index];\n            dropUl.insertBefore(dragLi, childLi);\n            this.moveData(dragLi, childLi, dropUl, true, dragObj);\n        }\n        this.updateElement(dragParentUl, dragParentLi);\n        this.updateAriaLevel(dragLi);\n        if (dragObj.element.id === this.element.id) {\n            this.updateList();\n        }\n        else {\n            dragObj.updateInstance();\n            this.updateInstance();\n        }\n    };\n    TreeView.prototype.moveData = function (dragLi, dropLi, dropUl, pre, dragObj) {\n        var dropParentLi = closest(dropUl, '.' + LISTITEM);\n        var id = this.getId(dragLi);\n        var removedData = dragObj.updateChildField(dragObj.treeData, dragObj.fields, id, null, null, true);\n        var refId = this.getId(dropLi);\n        var index = this.getDataPos(this.treeData, this.fields, refId);\n        var parentId = this.getId(dropParentLi);\n        if (this.dataType === 1) {\n            this.updateField(this.treeData, this.fields, parentId, 'hasChildren', true);\n            var pos = isNOU(index) ? this.treeData.length : (pre ? index : index + 1);\n            if (isNOU(parentId) && !this.hasPid) {\n                delete removedData[0][this.fields.parentID];\n            }\n            else {\n                var currPid = this.isNumberTypeId ? parseFloat(parentId) : parentId;\n                setValue(this.fields.parentID, currPid, removedData[0]);\n            }\n            this.treeData.splice(pos, 0, removedData[0]);\n            if (dragObj.element.id !== this.element.id) {\n                var childData = dragObj.removeChildNodes(id);\n                pos++;\n                for (var i = 0, len = childData.length; i < len; i++) {\n                    this.treeData.splice(pos, 0, childData[i]);\n                    pos++;\n                }\n                dragObj.groupedData = dragObj.getGroupedData(dragObj.treeData, dragObj.fields.parentID);\n            }\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        else {\n            this.addChildData(this.treeData, this.fields, parentId, removedData, pre ? index : index + 1);\n        }\n    };\n    TreeView.prototype.expandParent = function (dropLi) {\n        var dropIcon = select('div.' + ICON, dropLi);\n        if (dropIcon && dropIcon.classList.contains(EXPANDABLE) && this.preventExpand !== true) {\n            this.expandAction(dropLi, dropIcon, null);\n        }\n        var dropUl = select('.' + PARENTITEM, dropLi);\n        if (this.preventExpand === true && !dropUl && dropIcon) {\n            this.renderChildNodes(dropLi);\n        }\n        dropUl = select('.' + PARENTITEM, dropLi);\n        if (!isNOU(dropUl) && this.preventExpand === true) {\n            dropUl.style.display = 'none';\n        }\n        if (!isNOU(dropUl) && this.preventExpand === false) {\n            dropUl.style.display = 'block';\n        }\n        if (isNOU(dropUl) && this.preventExpand === true) {\n            if (isNOU(dropIcon)) {\n                ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n            }\n            var icon = select('div.' + ICON, dropLi);\n            if (icon) {\n                icon.classList.add('e-icon-expandable');\n            }\n            dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n            dropLi.appendChild(dropUl);\n            if (icon) {\n                removeClass([icon], COLLAPSIBLE);\n            }\n            else {\n                ListBase.generateIcon(this.createElement, dropLi, EXPANDABLE, this.listBaseOption);\n            }\n            dropLi.setAttribute('aria-expanded', 'false');\n            dropUl.style.display = 'none';\n        }\n        if (isNOU(dropUl)) {\n            this.trigger('nodeExpanding', this.getExpandEvent(dropLi, null));\n            if (isNOU(dropIcon)) {\n                ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n            }\n            var icon = select('div.' + ICON, dropLi);\n            if (icon) {\n                removeClass([icon], EXPANDABLE);\n            }\n            else {\n                ListBase.generateIcon(this.createElement, dropLi, COLLAPSIBLE, this.listBaseOption);\n                icon = select('div.' + ICON, dropLi);\n                removeClass([icon], EXPANDABLE);\n            }\n            dropUl = ListBase.generateUL(this.createElement, [], null, this.listBaseOption);\n            dropLi.appendChild(dropUl);\n            this.addExpand(dropLi);\n            this.trigger('nodeExpanded', this.getExpandEvent(dropLi, null));\n        }\n        return dropUl;\n    };\n    TreeView.prototype.updateElement = function (dragParentUl, dragParentLi) {\n        if (dragParentLi && dragParentUl.childElementCount === 0) {\n            var dragIcon = select('div.' + ICON, dragParentLi);\n            detach(dragParentUl);\n            detach(dragIcon);\n            var parentId = this.getId(dragParentLi);\n            this.updateField(this.treeData, this.fields, parentId, 'hasChildren', false);\n            this.removeExpand(dragParentLi, true);\n        }\n    };\n    TreeView.prototype.updateAriaLevel = function (dragLi) {\n        var level = this.parents(dragLi, '.' + PARENTITEM).length;\n        dragLi.setAttribute('aria-level', '' + level);\n        this.updateChildAriaLevel(select('.' + PARENTITEM, dragLi), level + 1);\n    };\n    TreeView.prototype.updateChildAriaLevel = function (element, level) {\n        if (!isNOU(element)) {\n            var cNodes = element.childNodes;\n            for (var i = 0, len = cNodes.length; i < len; i++) {\n                var liEle = cNodes[i];\n                liEle.setAttribute('aria-level', '' + level);\n                this.updateChildAriaLevel(select('.' + PARENTITEM, liEle), level + 1);\n            }\n        }\n    };\n    TreeView.prototype.renderVirtualEle = function (e) {\n        var pre;\n        if (e.event.offsetY > e.target.offsetHeight - 2) {\n            pre = false;\n        }\n        else if (e.event.offsetY < 2) {\n            pre = true;\n        }\n        var virEle = this.createElement('div', { className: SIBLING });\n        var index = this.fullRowSelect ? (pre ? 1 : 2) : (pre ? 0 : 1);\n        e.target.insertBefore(virEle, e.target.children[index]);\n    };\n    TreeView.prototype.removeVirtualEle = function () {\n        var sibEle = select('.' + SIBLING);\n        if (sibEle) {\n            detach(sibEle);\n        }\n    };\n    TreeView.prototype.destroyDrag = function () {\n        if (this.dragObj && this.dropObj) {\n            this.dragObj.destroy();\n            this.dropObj.destroy();\n        }\n    };\n    TreeView.prototype.getDragEvent = function (event, obj, dropTarget, target, dragNode, cloneEle, level, drop) {\n        var dropLi = dropTarget ? closest(dropTarget, '.' + LISTITEM) : null;\n        var dropData = dropLi ? this.getNodeData(dropLi) : null;\n        var draggedNode = obj ? obj.dragLi : dragNode;\n        var draggedNodeData = obj ? obj.dragData : null;\n        var newParent = dropTarget ? this.parents(dropTarget, '.' + LISTITEM) : null;\n        var dragLiParent = obj.dragLi.parentElement;\n        var dragParent = obj.dragLi ? closest(dragLiParent, '.' + LISTITEM) : null;\n        var targetParent = null;\n        var indexValue = null;\n        var iconCss = [DROPNEXT, DROPIN, DROPOUT, NODROP];\n        var iconClass = null;\n        var node = (drop === true) ? draggedNode : dropLi;\n        var index = node ? closest(node, '.e-list-parent') : null;\n        var i = 0;\n        var position = null;\n        dragParent = (obj.dragLi && dragParent === null) ? closest(dragLiParent, '.' + ROOT) : dragParent;\n        dragParent = (drop === true) ? this.dragParent : dragParent;\n        if (cloneEle) {\n            while (i < 4) {\n                if (select('.' + ICON, cloneEle).classList.contains(iconCss[i])) {\n                    iconClass = iconCss[i];\n                    break;\n                }\n                i++;\n            }\n        }\n        if (index) {\n            var dropTar = 0;\n            for (i = 0; i < index.childElementCount; i++) {\n                dropTar = (drop !== true && index.children[i] === draggedNode && dropLi !== draggedNode) ? ++dropTar : dropTar;\n                if ((drop !== true && index.children[i].classList.contains('e-hover'))) {\n                    indexValue = (event.offsetY >= 23) ? i + 1 : i;\n                    break;\n                }\n                else if (index.children[i] === node) {\n                    indexValue = (event.offsetY >= 23) ? i : i;\n                    break;\n                }\n            }\n            indexValue = (dropTar !== 0) ? --indexValue : indexValue;\n            position = (iconClass == \"e-drop-in\") ? \"Inside\" : ((event.offsetY < 7) ? \"Before\" : \"After\");\n        }\n        if (dropTarget) {\n            if (newParent.length === 0) {\n                targetParent = null;\n            }\n            else if (dropTarget.classList.contains(LISTITEM)) {\n                targetParent = newParent[0];\n            }\n            else {\n                targetParent = newParent[1];\n            }\n        }\n        if (dropLi === draggedNode) {\n            targetParent = dropLi;\n        }\n        if (dropTarget && target.offsetHeight <= 33 && event.offsetY < target.offsetHeight - 10 && event.offsetY > 6) {\n            targetParent = dropLi;\n            if (drop !== true) {\n                level = ++level;\n                var parent_2 = targetParent ? select('.e-list-parent', targetParent) : null;\n                indexValue = (parent_2) ? parent_2.children.length : 0;\n                if (!(this.fields.dataSource instanceof DataManager) && parent_2 === null && targetParent) {\n                    var parent_3 = targetParent.hasAttribute('data-uid') ?\n                        this.getChildNodes(this.fields.dataSource, targetParent.getAttribute('data-uid').toString()) : null;\n                    indexValue = (parent_3) ? parent_3.length : 0;\n                }\n            }\n        }\n        return {\n            cancel: false,\n            clonedNode: cloneEle,\n            event: event,\n            draggedNode: draggedNode,\n            draggedNodeData: draggedNodeData,\n            droppedNode: dropLi,\n            droppedNodeData: dropData,\n            dropIndex: indexValue,\n            dropLevel: level,\n            draggedParentNode: dragParent,\n            dropTarget: targetParent,\n            dropIndicator: iconClass,\n            target: target,\n            position: position,\n        };\n    };\n    TreeView.prototype.addFullRow = function (toAdd) {\n        var len = this.liList.length;\n        if (toAdd) {\n            for (var i = 0; i < len; i++) {\n                this.createFullRow(this.liList[i]);\n            }\n        }\n        else {\n            for (var i = 0; i < len; i++) {\n                var rowDiv = select('.' + FULLROW, this.liList[i]);\n                detach(rowDiv);\n            }\n        }\n    };\n    TreeView.prototype.createFullRow = function (item) {\n        var rowDiv = this.createElement('div', { className: FULLROW });\n        item.insertBefore(rowDiv, item.childNodes[0]);\n    };\n    TreeView.prototype.addMultiSelect = function (toAdd) {\n        if (toAdd) {\n            var liEles = selectAll('.' + LISTITEM + ':not([aria-selected=\"true\"])', this.element);\n            for (var _i = 0, liEles_1 = liEles; _i < liEles_1.length; _i++) {\n                var ele = liEles_1[_i];\n                ele.setAttribute('aria-selected', 'false');\n            }\n        }\n        else {\n            var liEles = selectAll('.' + LISTITEM + '[aria-selected=\"false\"]', this.element);\n            for (var _a = 0, liEles_2 = liEles; _a < liEles_2.length; _a++) {\n                var ele = liEles_2[_a];\n                ele.removeAttribute('aria-selected');\n            }\n        }\n    };\n    TreeView.prototype.collapseByLevel = function (element, level, excludeHiddenNodes) {\n        if (level > 0 && !isNOU(element)) {\n            var cNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n            for (var i = 0, len = cNodes.length; i < len; i++) {\n                var liEle = cNodes[i];\n                var icon = select('.' + COLLAPSIBLE, select('.' + TEXTWRAP, liEle));\n                if (!isNOU(icon)) {\n                    this.collapseNode(liEle, icon, null);\n                }\n                this.collapseByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n            }\n        }\n    };\n    TreeView.prototype.collapseAllNodes = function (excludeHiddenNodes) {\n        var cIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + COLLAPSIBLE, this.element));\n        for (var i = 0, len = cIcons.length; i < len; i++) {\n            var icon = cIcons[i];\n            var liEle = closest(icon, '.' + LISTITEM);\n            this.collapseNode(liEle, icon, null);\n        }\n    };\n    TreeView.prototype.expandByLevel = function (element, level, excludeHiddenNodes) {\n        if (level > 0 && !isNOU(element)) {\n            var eNodes = this.getVisibleNodes(excludeHiddenNodes, element.childNodes);\n            for (var i = 0, len = eNodes.length; i < len; i++) {\n                var liEle = eNodes[i];\n                var icon = select('.' + EXPANDABLE, select('.' + TEXTWRAP, liEle));\n                if (!isNOU(icon)) {\n                    this.expandAction(liEle, icon, null);\n                }\n                this.expandByLevel(select('.' + PARENTITEM, liEle), level - 1, excludeHiddenNodes);\n            }\n        }\n    };\n    TreeView.prototype.expandAllNodes = function (excludeHiddenNodes) {\n        var eIcons = this.getVisibleNodes(excludeHiddenNodes, selectAll('.' + EXPANDABLE, this.element));\n        for (var i = 0, len = eIcons.length; i < len; i++) {\n            var icon = eIcons[i];\n            var liEle = closest(icon, '.' + LISTITEM);\n            this.expandAction(liEle, icon, null, true);\n        }\n    };\n    TreeView.prototype.getVisibleNodes = function (excludeHiddenNodes, nodes) {\n        var vNodes = Array.prototype.slice.call(nodes);\n        if (excludeHiddenNodes) {\n            for (var i = 0; i < vNodes.length; i++) {\n                if (!isVisible(vNodes[i])) {\n                    vNodes.splice(i, 1);\n                    i--;\n                }\n            }\n        }\n        return vNodes;\n    };\n    TreeView.prototype.removeNode = function (node) {\n        var dragParentUl = closest(node, '.' + PARENTITEM);\n        var dragParentLi = closest(dragParentUl, '.' + LISTITEM);\n        if (!isNOU(this.nodeTemplateFn)) {\n            this.destroyTemplate(node);\n        }\n        detach(node);\n        this.updateElement(dragParentUl, dragParentLi);\n        this.removeData(node);\n    };\n    TreeView.prototype.updateInstance = function () {\n        this.updateList();\n        this.updateSelectedNodes();\n        this.updateExpandedNodes();\n    };\n    TreeView.prototype.updateList = function () {\n        this.liList = Array.prototype.slice.call(selectAll('.' + LISTITEM, this.element));\n    };\n    TreeView.prototype.updateSelectedNodes = function () {\n        this.setProperties({ selectedNodes: [] }, true);\n        var sNodes = selectAll('.' + ACTIVE, this.element);\n        this.selectGivenNodes(sNodes);\n    };\n    TreeView.prototype.updateExpandedNodes = function () {\n        this.setProperties({ expandedNodes: [] }, true);\n        var eNodes = selectAll('[aria-expanded=\"true\"]', this.element);\n        for (var i = 0, len = eNodes.length; i < len; i++) {\n            this.addExpand(eNodes[i]);\n        }\n    };\n    TreeView.prototype.removeData = function (node) {\n        if (this.dataType === 1) {\n            var dm = new DataManager(this.treeData);\n            var id = this.getId(node);\n            var data = {};\n            var newId = this.isNumberTypeId ? parseFloat(id) : id;\n            data[this.fields.id] = newId;\n            dm.remove(this.fields.id, data);\n            this.removeChildNodes(id);\n        }\n        else {\n            var id = this.getId(node);\n            this.updateChildField(this.treeData, this.fields, id, null, null, true);\n        }\n    };\n    TreeView.prototype.removeChildNodes = function (parentId) {\n        var cNodes = this.getChildGroup(this.groupedData, parentId, false);\n        var childData = [];\n        if (cNodes) {\n            for (var i = 0, len = cNodes.length; i < len; i++) {\n                var dm = new DataManager(this.treeData);\n                var id = getValue(this.fields.id, cNodes[i]).toString();\n                var data = {};\n                var currId = this.isNumberTypeId ? parseFloat(id) : id;\n                data[this.fields.id] = currId;\n                var nodeData = dm.remove(this.fields.id, data);\n                childData.push(nodeData[0]);\n                this.removeChildNodes(id);\n            }\n        }\n        return childData;\n    };\n    TreeView.prototype.doGivenAction = function (nodes, selector, toExpand) {\n        for (var i = 0, len = nodes.length; i < len; i++) {\n            var liEle = this.getElement(nodes[i]);\n            if (isNOU(liEle)) {\n                continue;\n            }\n            var icon = select('.' + selector, select('.' + TEXTWRAP, liEle));\n            if (!isNOU(icon)) {\n                toExpand ? this.expandAction(liEle, icon, null) : this.collapseNode(liEle, icon, null);\n            }\n        }\n    };\n    TreeView.prototype.addGivenNodes = function (nodes, dropLi, index, isRemote, dropEle) {\n        if (nodes.length === 0) {\n            return;\n        }\n        var sNodes = this.getSortedData(nodes);\n        var level = dropLi ? parseFloat(dropLi.getAttribute('aria-level')) + 1 : 1;\n        if (isRemote) {\n            this.updateMapper(level);\n        }\n        var li = ListBase.createListItemFromJson(this.createElement, sNodes, this.listBaseOption, level);\n        var dropUl;\n        if (!dropEle) {\n            dropUl = dropLi ? this.expandParent(dropLi) : select('.' + PARENTITEM, this.element);\n        }\n        else {\n            dropUl = dropEle;\n        }\n        var refNode = dropUl.childNodes[index];\n        if (refNode || this.sortOrder === 'None') {\n            for (var i = 0; i < li.length; i++) {\n                dropUl.insertBefore(li[i], refNode);\n            }\n        }\n        if (!refNode && ((this.sortOrder === 'Ascending') || (this.sortOrder === 'Descending'))) {\n            var cNodes = dropUl.childNodes;\n            for (var i = 0; i < li.length; i++) {\n                for (var j = 0; j < cNodes.length; j++) {\n                    var returnValue = (this.sortOrder === 'Ascending') ? cNodes[j].textContent.toUpperCase() > li[i].innerText.toUpperCase() : cNodes[j].textContent.toUpperCase() < li[i].innerText.toUpperCase();\n                    if (returnValue) {\n                        dropUl.insertBefore(li[i], cNodes[j]);\n                        break;\n                    }\n                    dropUl.insertBefore(li[i], cNodes[cNodes.length]);\n                }\n            }\n        }\n        var id = this.getId(dropLi);\n        if (this.dataType === 1) {\n            this.updateField(this.treeData, this.fields, id, 'hasChildren', true);\n            var refId = this.getId(refNode);\n            var pos = isNOU(refId) ? this.treeData.length : this.getDataPos(this.treeData, this.fields, refId);\n            for (var j = 0; j < nodes.length; j++) {\n                if (!isNOU(id)) {\n                    var currId = this.isNumberTypeId ? parseFloat(id) : id;\n                    setValue(this.fields.parentID, currId, nodes[j]);\n                }\n                this.treeData.splice(pos, 0, nodes[j]);\n                pos++;\n            }\n        }\n        else {\n            this.addChildData(this.treeData, this.fields, id, nodes, index);\n        }\n        this.finalizeNode(dropUl);\n    };\n    TreeView.prototype.updateMapper = function (level) {\n        var mapper = (level === 1) ? this.fields : this.getChildFields(this.fields, level - 1, 1);\n        this.updateListProp(mapper);\n    };\n    TreeView.prototype.updateListProp = function (mapper) {\n        var prop = this.getActualProperties(mapper);\n        this.listBaseOption.fields = prop;\n        this.listBaseOption.fields.url = prop.hasOwnProperty('navigateUrl') ? prop.navigateUrl : 'navigateUrl';\n    };\n    TreeView.prototype.getDataPos = function (obj, mapper, id) {\n        var pos = null;\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var nodeId = getValue(mapper.id, obj[i]);\n            if (obj[i] && nodeId && nodeId.toString() === id) {\n                return i;\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                var data = getValue(mapper.child, obj[i]);\n                pos = this.getDataPos(data, this.getChildMapper(mapper), id);\n                if (pos !== null) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n                var items = getValue('child', obj[i]);\n                pos = this.getDataPos(items, this.getChildMapper(mapper), id);\n                if (pos !== null) {\n                    break;\n                }\n            }\n        }\n        return pos;\n    };\n    TreeView.prototype.addChildData = function (obj, mapper, id, data, index) {\n        var updated;\n        if (isNOU(id)) {\n            index = isNOU(index) ? obj.length : index;\n            for (var k = 0, len = data.length; k < len; k++) {\n                obj.splice(index, 0, data[k]);\n                index++;\n            }\n            return updated;\n        }\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var nodeId = getValue(mapper.id, obj[i]);\n            if (obj[i] && nodeId && nodeId.toString() === id) {\n                if ((typeof mapper.child === 'string' && (obj[i].hasOwnProperty(mapper.child) && obj[i][mapper.child] !== null)) ||\n                    ((this.fields.dataSource instanceof DataManager) && obj[i].hasOwnProperty('child'))) {\n                    var key = (typeof mapper.child === 'string') ? mapper.child : 'child';\n                    var childData = getValue(key, obj[i]);\n                    if (isNOU(childData)) {\n                        childData = [];\n                    }\n                    index = isNOU(index) ? childData.length : index;\n                    for (var k = 0, len = data.length; k < len; k++) {\n                        childData.splice(index, 0, data[k]);\n                        index++;\n                    }\n                }\n                else {\n                    var key = (typeof mapper.child === 'string') ? mapper.child : 'child';\n                    obj[i][key] = data;\n                }\n                return true;\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                var childObj = getValue(mapper.child, obj[i]);\n                updated = this.addChildData(childObj, this.getChildMapper(mapper), id, data, index);\n                if (updated !== undefined) {\n                    break;\n                }\n            }\n            else if ((this.fields.dataSource instanceof DataManager) && !isNOU(getValue('child', obj[i]))) {\n                var childData = getValue('child', obj[i]);\n                updated = this.addChildData(childData, this.getChildMapper(mapper), id, data, index);\n                if (updated !== undefined) {\n                    break;\n                }\n            }\n        }\n        return updated;\n    };\n    TreeView.prototype.doDisableAction = function (nodes) {\n        var validNodes = this.nodeType(nodes);\n        var validID = this.checkValidId(validNodes);\n        this.validArr = [];\n        for (var i = 0, len = validID.length; i < len; i++) {\n            var id = validID[i][this.fields.id].toString();\n            if (id && this.disableNode.indexOf(id) === -1) {\n                this.disableNode.push(id);\n            }\n            var liEle = this.getElement(id);\n            if (liEle) {\n                liEle.setAttribute('aria-disabled', 'true');\n                addClass([liEle], DISABLE);\n            }\n        }\n    };\n    TreeView.prototype.doEnableAction = function (nodes) {\n        var strNodes = this.nodeType(nodes);\n        for (var i = 0, len = strNodes.length; i < len; i++) {\n            var liEle = this.getElement(strNodes[i]);\n            var id = strNodes[i];\n            if (id && this.disableNode.indexOf(id) !== -1) {\n                this.disableNode.splice(this.disableNode.indexOf(id), 1);\n            }\n            if (liEle) {\n                liEle.removeAttribute('aria-disabled');\n                removeClass([liEle], DISABLE);\n            }\n        }\n    };\n    TreeView.prototype.nodeType = function (nodes) {\n        var validID = [];\n        for (var i = 0, len = nodes.length; i < len; i++) {\n            var id = void 0;\n            if (typeof nodes[i] == \"string\") {\n                id = (nodes[i]) ? nodes[i].toString() : null;\n            }\n            else if (typeof nodes[i] === \"object\") {\n                id = nodes[i] ? nodes[i].getAttribute(\"data-uid\").toString() : null;\n            }\n            if (validID.indexOf(id) == -1) {\n                validID.push(id);\n            }\n        }\n        return validID;\n    };\n    TreeView.prototype.checkValidId = function (node) {\n        var _this = this;\n        if (this.dataType === 1) {\n            this.validArr = this.treeData.filter(function (data) {\n                return node.indexOf(data[_this.fields.id] ? data[_this.fields.id].toString() : null) !== -1;\n            });\n        }\n        else if (this.dataType === 2) {\n            for (var k = 0; k < this.treeData.length; k++) {\n                var id = this.treeData[k][this.fields.id] ? this.treeData[k][this.fields.id].toString() : null;\n                if (node.indexOf(id) !== -1) {\n                    this.validArr.push(this.treeData[k]);\n                }\n                var childItems = getValue(this.fields.child.toString(), this.treeData[k]);\n                if (childItems) {\n                    this.filterNestedChild(childItems, node);\n                }\n            }\n        }\n        return this.validArr;\n    };\n    TreeView.prototype.filterNestedChild = function (treeData, nodes) {\n        for (var k = 0; k < treeData.length; k++) {\n            var id = treeData[k][this.fields.id] ? treeData[k][this.fields.id].toString() : null;\n            if (nodes.indexOf(id) !== -1) {\n                this.validArr.push(treeData[k]);\n            }\n            var childItems = getValue(this.fields.child.toString(), treeData[k]);\n            if (childItems) {\n                this.filterNestedChild(childItems, nodes);\n            }\n        }\n    };\n    TreeView.prototype.setTouchClass = function () {\n        var ele = closest(this.element, '.' + BIGGER);\n        this.touchClass = isNOU(ele) ? '' : SMALL;\n    };\n    TreeView.prototype.updatePersistProp = function () {\n        this.removeField(this.treeData, this.fields, ['selected', 'expanded']);\n        var sleNodes = this.selectedNodes;\n        for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {\n            this.updateField(this.treeData, this.fields, sleNodes[l], 'selected', true);\n        }\n        var enodes = this.expandedNodes;\n        for (var k = 0, nodelen = enodes.length; k < nodelen; k++) {\n            this.updateField(this.treeData, this.fields, enodes[k], 'expanded', true);\n        }\n        if (this.showCheckBox) {\n            this.removeField(this.treeData, this.fields, ['isChecked']);\n            var cnodes = this.checkedNodes;\n            for (var m = 0, nodelen = cnodes.length; m < nodelen; m++) {\n                this.updateField(this.treeData, this.fields, cnodes[m], 'isChecked', true);\n            }\n        }\n    };\n    TreeView.prototype.removeField = function (obj, mapper, names) {\n        if (isNOU(obj) || isNOU(mapper)) {\n            return;\n        }\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            for (var j = 0; j < names.length; j++) {\n                var field = this.getMapperProp(mapper, names[j]);\n                if (!isNOU(obj[i][field])) {\n                    delete obj[i][field];\n                }\n            }\n            if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                this.removeField(getValue(mapper.child, obj[i]), this.getChildMapper(mapper), names);\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n                this.removeField(getValue('child', obj[i]), this.getChildMapper(mapper), names);\n            }\n        }\n    };\n    TreeView.prototype.getMapperProp = function (mapper, fieldName) {\n        switch (fieldName) {\n            case 'selected':\n                return !isNOU(mapper.selected) ? mapper.selected : 'selected';\n            case 'expanded':\n                return !isNOU(mapper.expanded) ? mapper.expanded : 'expanded';\n            case 'isChecked':\n                return !isNOU(mapper.isChecked) ? mapper.isChecked : 'isChecked';\n            case 'hasChildren':\n                return !isNOU(mapper.hasChildren) ? mapper.hasChildren : 'hasChildren';\n            default:\n                return fieldName;\n        }\n    };\n    TreeView.prototype.updateField = function (obj, mapper, id, key, value) {\n        var childNodes;\n        if (isNOU(id)) {\n            return;\n        }\n        else if (this.dataType === 1) {\n            var newId = this.isNumberTypeId ? parseFloat(id) : id;\n            var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', newId, false));\n            setValue(this.getMapperProp(mapper, key), value, resultData[0]);\n        }\n        else {\n            this.updateChildField(obj, mapper, id, key, value);\n        }\n    };\n    TreeView.prototype.updateChildField = function (obj, mapper, id, key, value, remove) {\n        var removedData;\n        if (isNOU(obj)) {\n            return removedData;\n        }\n        for (var i = 0, objlen = obj.length; i < objlen; i++) {\n            var nodeId = getValue(mapper.id, obj[i]);\n            if (obj[i] && nodeId && nodeId.toString() === id) {\n                if (remove) {\n                    removedData = obj.splice(i, 1);\n                }\n                else {\n                    setValue(this.getMapperProp(mapper, key), value, obj[i]);\n                    removedData = [];\n                }\n                return removedData;\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, obj[i]))) {\n                var childData = getValue(mapper.child, obj[i]);\n                removedData = this.updateChildField(childData, this.getChildMapper(mapper), id, key, value, remove);\n                if (removedData !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', obj[i]))) {\n                var childItems = getValue('child', obj[i]);\n                removedData = this.updateChildField(childItems, this.getChildMapper(mapper), id, key, value, remove);\n                if (removedData !== undefined) {\n                    break;\n                }\n            }\n        }\n        return removedData;\n    };\n    TreeView.prototype.triggerEvent = function () {\n        this.renderReactTemplates();\n        var eventArgs = { data: this.treeData };\n        this.trigger('dataSourceChanged', eventArgs);\n    };\n    TreeView.prototype.wireInputEvents = function (inpEle) {\n        EventHandler.add(inpEle, 'blur', this.inputFocusOut, this);\n    };\n    TreeView.prototype.wireEditingEvents = function (toBind) {\n        var _this = this;\n        if (toBind && !this.disabled) {\n            var proxy_2 = this;\n            this.touchEditObj = new Touch(this.element, {\n                tap: function (e) {\n                    if (_this.isDoubleTapped(e) && e.tapCount === 2) {\n                        e.originalEvent.preventDefault();\n                        proxy_2.editingHandler(e.originalEvent);\n                    }\n                }\n            });\n        }\n        else {\n            if (this.touchEditObj) {\n                this.touchEditObj.destroy();\n            }\n        }\n    };\n    TreeView.prototype.wireClickEvent = function (toBind) {\n        if (toBind) {\n            var proxy_3 = this;\n            this.touchClickObj = new Touch(this.element, {\n                tap: function (e) {\n                    proxy_3.clickHandler(e);\n                }\n            });\n        }\n        else {\n            if (this.touchClickObj) {\n                this.touchClickObj.destroy();\n            }\n        }\n    };\n    TreeView.prototype.wireExpandOnEvent = function (toBind) {\n        var _this = this;\n        if (toBind) {\n            var proxy_4 = this;\n            this.touchExpandObj = new Touch(this.element, {\n                tap: function (e) {\n                    if ((_this.expandOnType === 'Click' || (_this.expandOnType === 'DblClick' && _this.isDoubleTapped(e) && e.tapCount === 2))\n                        && e.originalEvent.which !== 3) {\n                        proxy_4.expandHandler(e);\n                    }\n                }\n            });\n        }\n        else {\n            if (this.touchExpandObj) {\n                this.touchExpandObj.destroy();\n            }\n        }\n    };\n    TreeView.prototype.mouseDownHandler = function (e) {\n        this.mouseDownStatus = true;\n        if (e.shiftKey || e.ctrlKey) {\n            e.preventDefault();\n        }\n        if (e.ctrlKey && this.allowMultiSelection) {\n            EventHandler.add(this.element, 'contextmenu', this.preventContextMenu, this);\n        }\n    };\n    ;\n    TreeView.prototype.preventContextMenu = function (e) {\n        e.preventDefault();\n    };\n    TreeView.prototype.wireEvents = function () {\n        EventHandler.add(this.element, 'mousedown', this.mouseDownHandler, this);\n        this.wireClickEvent(true);\n        if (this.expandOnType !== 'None') {\n            this.wireExpandOnEvent(true);\n        }\n        EventHandler.add(this.element, 'focus', this.focusIn, this);\n        EventHandler.add(this.element, 'blur', this.focusOut, this);\n        EventHandler.add(this.element, 'mouseover', this.onMouseOver, this);\n        EventHandler.add(this.element, 'mouseout', this.onMouseLeave, this);\n        this.keyboardModule = new KeyboardEvents(this.element, {\n            keyAction: this.keyActionHandler.bind(this),\n            keyConfigs: this.keyConfigs,\n            eventName: 'keydown',\n        });\n    };\n    TreeView.prototype.unWireEvents = function () {\n        EventHandler.remove(this.element, 'mousedown', this.mouseDownHandler);\n        this.wireClickEvent(false);\n        this.wireExpandOnEvent(false);\n        EventHandler.remove(this.element, 'focus', this.focusIn);\n        EventHandler.remove(this.element, 'blur', this.focusOut);\n        EventHandler.remove(this.element, 'mouseover', this.onMouseOver);\n        EventHandler.remove(this.element, 'mouseout', this.onMouseLeave);\n        if (!this.disabled) {\n            this.keyboardModule.destroy();\n        }\n    };\n    TreeView.prototype.parents = function (element, selector) {\n        var matched = [];\n        var el = element.parentNode;\n        while (!isNOU(el)) {\n            if (matches(el, selector)) {\n                matched.push(el);\n            }\n            el = el.parentNode;\n        }\n        return matched;\n    };\n    TreeView.prototype.isDoubleTapped = function (e) {\n        var target = e.originalEvent.target;\n        var secondTap;\n        if (target && e.tapCount) {\n            if (e.tapCount === 1) {\n                this.firstTap = closest(target, '.' + LISTITEM);\n            }\n            else if (e.tapCount === 2) {\n                secondTap = closest(target, '.' + LISTITEM);\n            }\n        }\n        return (this.firstTap === secondTap);\n    };\n    TreeView.prototype.isDescendant = function (parent, child) {\n        var node = child.parentNode;\n        while (!isNOU(node)) {\n            if (node === parent) {\n                return true;\n            }\n            node = node.parentNode;\n        }\n        return false;\n    };\n    TreeView.prototype.showSpinner = function (element) {\n        addClass([element], LOAD);\n        createSpinner({\n            target: element,\n            width: Browser.isDevice ? 16 : 14\n        }, this.createElement);\n        showSpinner(element);\n    };\n    TreeView.prototype.hideSpinner = function (element) {\n        hideSpinner(element);\n        element.innerHTML = '';\n        removeClass([element], LOAD);\n    };\n    TreeView.prototype.setCheckedNodes = function (nodes) {\n        nodes = JSON.parse(JSON.stringify(nodes));\n        this.uncheckAll(this.checkedNodes);\n        this.setIndeterminate(nodes);\n        if (nodes.length > 0) {\n            this.checkAll(nodes);\n        }\n    };\n    /**\n     * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel\n     */\n    TreeView.prototype.setValidCheckedNode = function (node) {\n        if (this.dataType === 1) {\n            var mapper = this.fields;\n            var resultData = new DataManager(this.treeData).executeLocal(new Query().where(mapper.id, 'equal', node, true));\n            if (resultData[0]) {\n                this.setChildCheckState(resultData, node, resultData[0]);\n                if (this.autoCheck) {\n                    var parent_4 = resultData[0][this.fields.parentID] ? resultData[0][this.fields.parentID].toString() : null;\n                    var childNodes = this.getChildNodes(this.treeData, parent_4);\n                    var count = 0;\n                    for (var len = 0; len < childNodes.length; len++) {\n                        var childId = childNodes[len][this.fields.id].toString();\n                        if (this.checkedNodes.indexOf(childId) !== -1) {\n                            count++;\n                        }\n                    }\n                    if (count === childNodes.length && this.checkedNodes.indexOf(parent_4) === -1 && parent_4) {\n                        this.checkedNodes.push(parent_4);\n                    }\n                }\n            }\n        }\n        else if (this.dataType === 2) {\n            for (var a = 0; a < this.treeData.length; a++) {\n                var index = this.treeData[a][this.fields.id] ? this.treeData[a][this.fields.id].toString() : '';\n                if (index === node && this.checkedNodes.indexOf(node) === -1) {\n                    this.checkedNodes.push(node);\n                    break;\n                }\n                var childItems = getValue(this.fields.child.toString(), this.treeData[a]);\n                if (childItems) {\n                    this.setChildCheckState(childItems, node, this.treeData[a]);\n                }\n            }\n        }\n    };\n    /**\n     * Checks whether the checkedNodes entered are valid and sets the valid checkedNodes while changing via setmodel(for hierarchical DS)\n     */\n    TreeView.prototype.setChildCheckState = function (childItems, node, treeData) {\n        var checkedParent;\n        var count = 0;\n        if (this.dataType === 1) {\n            if (treeData) {\n                checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : null;\n            }\n            for (var index = 0; index < childItems.length; index++) {\n                var checkNode = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : null;\n                if (treeData && checkedParent && this.autoCheck) {\n                    if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkNode) === -1) {\n                        this.checkedNodes.push(checkNode);\n                    }\n                }\n                if (checkNode === node && this.checkedNodes.indexOf(node) === -1) {\n                    this.checkedNodes.push(node);\n                }\n                var subChildItems = this.getChildNodes(this.treeData, checkNode);\n                if (subChildItems) {\n                    this.setChildCheckState(subChildItems, node, treeData);\n                }\n            }\n        }\n        else {\n            if (treeData) {\n                checkedParent = treeData[this.fields.id] ? treeData[this.fields.id].toString() : '';\n            }\n            for (var index = 0; index < childItems.length; index++) {\n                var checkedChild = childItems[index][this.fields.id] ? childItems[index][this.fields.id].toString() : '';\n                if (treeData && checkedParent && this.autoCheck) {\n                    if (this.checkedNodes.indexOf(checkedParent) !== -1 && this.checkedNodes.indexOf(checkedChild) === -1) {\n                        this.checkedNodes.push(checkedChild);\n                    }\n                }\n                if (checkedChild === node && this.checkedNodes.indexOf(node) === -1) {\n                    this.checkedNodes.push(node);\n                }\n                var subChildItems = getValue(this.fields.child.toString(), childItems[index]);\n                if (subChildItems) {\n                    this.setChildCheckState(subChildItems, node, childItems[index]);\n                }\n                if (this.checkedNodes.indexOf(checkedChild) !== -1 && this.autoCheck) {\n                    count++;\n                }\n                if (count === childItems.length && this.checkedNodes.indexOf(checkedParent) === -1 && this.autoCheck) {\n                    this.checkedNodes.push(checkedParent);\n                }\n            }\n        }\n    };\n    TreeView.prototype.setIndeterminate = function (nodes) {\n        for (var i = 0; i < nodes.length; i++) {\n            this.setValidCheckedNode(nodes[i]);\n        }\n    };\n    TreeView.prototype.updatePosition = function (id, newData, isRefreshChild, childValue) {\n        if (this.dataType === 1) {\n            var pos = this.getDataPos(this.treeData, this.fields, id);\n            this.treeData.splice(pos, 1, newData);\n            if (isRefreshChild) {\n                this.removeChildNodes(id);\n                for (var j = 0; j < childValue.length; j++) {\n                    this.treeData.splice(pos, 0, childValue[j]);\n                    pos++;\n                }\n            }\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        else {\n            this.updateChildPosition(this.treeData, this.fields, id, [newData], undefined);\n        }\n    };\n    TreeView.prototype.updateChildPosition = function (treeData, mapper, currID, newData, index) {\n        var found;\n        for (var i = 0, objlen = treeData.length; i < objlen; i++) {\n            var nodeId = getValue(mapper.id, treeData[i]);\n            if (treeData[i] && nodeId && nodeId.toString() === currID) {\n                treeData[i] = newData[0];\n                return true;\n            }\n            else if (typeof mapper.child === 'string' && !isNOU(getValue(mapper.child, treeData[i]))) {\n                var childObj = getValue(mapper.child, treeData[i]);\n                found = this.updateChildPosition(childObj, this.getChildMapper(mapper), currID, newData, index);\n                if (found !== undefined) {\n                    break;\n                }\n            }\n            else if (this.fields.dataSource instanceof DataManager && !isNOU(getValue('child', treeData[i]))) {\n                var childData = getValue('child', treeData[i]);\n                found = this.updateChildPosition(childData, this.getChildMapper(mapper), currID, newData, index);\n                if (found !== undefined) {\n                    break;\n                }\n            }\n        }\n        return found;\n    };\n    TreeView.prototype.dynamicState = function () {\n        this.setDragAndDrop(this.allowDragAndDrop);\n        this.wireEditingEvents(this.allowEditing);\n        if (!this.disabled) {\n            this.wireEvents();\n            this.setRipple();\n        }\n        else {\n            this.unWireEvents();\n            this.rippleFn();\n            this.rippleIconFn();\n        }\n    };\n    TreeView.prototype.crudOperation = function (operation, nodes, target, newText, newNode, index, prevent) {\n        var _this = this;\n        var data = this.fields.dataSource;\n        var matchedArr = [];\n        var query = this.getQuery(this.fields);\n        var key = this.fields.id;\n        var crud;\n        var changes = {\n            addedRecords: [],\n            deletedRecords: [],\n            changedRecords: []\n        };\n        var nodesID = [];\n        if (nodes) {\n            nodesID = this.nodeType(nodes);\n        }\n        else if (target) {\n            if (typeof target == \"string\") {\n                nodesID[0] = target.toString();\n            }\n            else if (typeof target === \"object\") {\n                nodesID[0] = target.getAttribute(\"data-uid\").toString();\n            }\n        }\n        for (var i = 0, len = nodesID.length; i < len; i++) {\n            var liEle = this.getElement(nodesID[i]);\n            if (isNullOrUndefined(liEle)) {\n                continue;\n            }\n            var removedData = this.getNodeObject(nodesID[i]);\n            matchedArr.push(removedData);\n        }\n        switch (operation) {\n            case 'delete':\n                if (nodes.length == 1) {\n                    crud = data.remove(key, matchedArr[0], query.fromTable, query);\n                }\n                else {\n                    changes.deletedRecords = matchedArr;\n                    crud = data.saveChanges(changes, key, query.fromTable, query);\n                }\n                crud.then(function (e) { return _this.deleteSuccess(nodesID); })\n                    .catch(function (e) { return _this.dmFailure(e); });\n                break;\n            case 'update':\n                matchedArr[0][this.fields.text] = newText;\n                crud = data.update(key, matchedArr[0], query.fromTable, query);\n                crud.then(function (e) { return _this.editSucess(target, newText, prevent); })\n                    .catch(function (e) { return _this.dmFailure(e, target, prevent); });\n                break;\n            case 'insert':\n                if (newNode.length == 1) {\n                    crud = data.insert(newNode[0], query.fromTable, query);\n                }\n                else {\n                    var arr = [];\n                    for (var i = 0, len = newNode.length; i < len; i++) {\n                        arr.push(newNode[i]);\n                    }\n                    changes.addedRecords = arr;\n                    crud = data.saveChanges(changes, key, query.fromTable, query);\n                }\n                crud.then(function (e) {\n                    var dropLi = _this.getElement(target);\n                    _this.addSuccess(newNode, dropLi, index);\n                    _this.preventExpand = false;\n                }).catch(function (e) { return _this.dmFailure(e); });\n                break;\n        }\n    };\n    TreeView.prototype.deleteSuccess = function (nodes) {\n        for (var i = 0, len = nodes.length; i < len; i++) {\n            var liEle = this.getElement(nodes[i]);\n            if (isNOU(liEle)) {\n                continue;\n            }\n            this.removeNode(liEle);\n        }\n        this.updateInstance();\n        if (this.dataType === 1) {\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        this.triggerEvent();\n    };\n    TreeView.prototype.editSucess = function (target, newText, prevent) {\n        var liEle = this.getElement(target);\n        var txtEle = select('.' + LISTTEXT, liEle);\n        this.appendNewText(liEle, txtEle, newText, prevent);\n    };\n    TreeView.prototype.addSuccess = function (nodes, dropLi, index) {\n        var dropUl;\n        var icon = dropLi ? dropLi.querySelector('.' + ICON) : null;\n        var proxy = this;\n        if (dropLi && icon && icon.classList.contains(EXPANDABLE) &&\n            dropLi.querySelector('.' + PARENTITEM) === null) {\n            proxy.renderChildNodes(dropLi, null, function () {\n                dropUl = dropLi.querySelector('.' + PARENTITEM);\n                proxy.addGivenNodes(nodes, dropLi, index, true, dropUl);\n                proxy.triggerEvent();\n            });\n        }\n        else {\n            this.addGivenNodes(nodes, dropLi, index, true);\n            this.triggerEvent();\n        }\n    };\n    TreeView.prototype.dmFailure = function (e, target, prevent) {\n        if (target) {\n            this.updatePreviousText(target, prevent);\n        }\n        this.trigger('actionFailure', { error: e });\n    };\n    TreeView.prototype.updatePreviousText = function (target, prevent) {\n        var liEle = this.getElement(target);\n        var txtEle = select('.' + LISTTEXT, liEle);\n        this.updateText(liEle, txtEle, this.oldText, prevent);\n    };\n    /**\n     * Called internally if any of the property value changed.\n     * @param  {TreeView} newProp\n     * @param  {TreeView} oldProp\n     * @returns void\n     * @private\n     */\n    TreeView.prototype.onPropertyChanged = function (newProp, oldProp) {\n        for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n            var prop = _a[_i];\n            switch (prop) {\n                case 'allowDragAndDrop':\n                    this.setDragAndDrop(this.allowDragAndDrop);\n                    break;\n                case 'dragArea':\n                    if (this.allowDragAndDrop) {\n                        this.dragObj.dragArea = this.dragArea;\n                    }\n                    break;\n                case 'allowEditing':\n                    this.wireEditingEvents(this.allowEditing);\n                    break;\n                case 'allowMultiSelection':\n                    if (this.selectedNodes.length > 1) {\n                        var sNode = this.getElement(this.selectedNodes[0]);\n                        this.isLoaded = false;\n                        this.removeSelectAll();\n                        this.selectNode(sNode, null);\n                        this.isLoaded = true;\n                    }\n                    this.setMultiSelect(this.allowMultiSelection);\n                    this.addMultiSelect(this.allowMultiSelection);\n                    break;\n                case 'allowTextWrap':\n                    this.setTextWrap();\n                    this.updateWrap();\n                    break;\n                case 'checkedNodes':\n                    if (this.showCheckBox) {\n                        this.checkedNodes = oldProp.checkedNodes;\n                        this.setCheckedNodes(newProp.checkedNodes);\n                    }\n                    break;\n                case 'autoCheck':\n                    if (this.showCheckBox) {\n                        this.autoCheck = newProp.autoCheck;\n                        this.ensureIndeterminate();\n                    }\n                    break;\n                case 'cssClass':\n                    this.setCssClass(oldProp.cssClass, newProp.cssClass);\n                    break;\n                case 'enableRtl':\n                    this.setEnableRtl();\n                    break;\n                case 'expandedNodes':\n                    this.isAnimate = false;\n                    this.setProperties({ expandedNodes: [] }, true);\n                    this.collapseAll();\n                    this.isInitalExpand = true;\n                    this.setProperties({ expandedNodes: isNOU(newProp.expandedNodes) ? [] : newProp.expandedNodes }, true);\n                    this.doExpandAction();\n                    this.isInitalExpand = false;\n                    this.isAnimate = true;\n                    break;\n                case 'expandOn':\n                    this.wireExpandOnEvent(false);\n                    this.setExpandOnType();\n                    if (this.expandOnType !== 'None' && !this.disabled) {\n                        this.wireExpandOnEvent(true);\n                    }\n                    break;\n                case 'disabled':\n                    this.setDisabledMode();\n                    this.dynamicState();\n                    break;\n                case 'fields':\n                    this.isAnimate = false;\n                    this.isFieldChange = true;\n                    this.initialRender = true;\n                    this.reRenderNodes();\n                    this.initialRender = false;\n                    this.isAnimate = true;\n                    this.isFieldChange = false;\n                    break;\n                case 'fullRowSelect':\n                    this.setFullRow(this.fullRowSelect);\n                    this.addFullRow(this.fullRowSelect);\n                    if (this.allowTextWrap) {\n                        this.setTextWrap();\n                        this.updateWrap();\n                    }\n                    break;\n                case 'loadOnDemand':\n                    if (this.loadOnDemand === false && !this.onLoaded) {\n                        var nodes = this.element.querySelectorAll('li');\n                        var i = 0;\n                        while (i < nodes.length) {\n                            if (nodes[i].getAttribute('aria-expanded') !== 'true') {\n                                this.renderChildNodes(nodes[i], true, null, true);\n                            }\n                            i++;\n                        }\n                        this.onLoaded = true;\n                    }\n                    break;\n                case 'nodeTemplate':\n                    this.hasTemplate = false;\n                    this.nodeTemplateFn = this.templateComplier(this.nodeTemplate);\n                    this.reRenderNodes();\n                    break;\n                case 'selectedNodes':\n                    this.removeSelectAll();\n                    this.setProperties({ selectedNodes: newProp.selectedNodes }, true);\n                    this.doSelectionAction();\n                    break;\n                case 'showCheckBox':\n                    this.reRenderNodes();\n                    break;\n                case 'sortOrder':\n                    this.reRenderNodes();\n                    break;\n                case 'fullRowNavigable':\n                    this.setProperties({ fullRowNavigable: newProp.fullRowNavigable }, true);\n                    this.listBaseOption.itemNavigable = newProp.fullRowNavigable;\n                    this.reRenderNodes();\n                    break;\n            }\n        }\n    };\n    /**\n     * Removes the component from the DOM and detaches all its related event handlers. It also removes the attributes and classes.\n     */\n    TreeView.prototype.destroy = function () {\n        this.clearTemplate();\n        this.element.removeAttribute('aria-activedescendant');\n        this.element.removeAttribute('tabindex');\n        this.unWireEvents();\n        this.wireEditingEvents(false);\n        if (!this.disabled) {\n            this.rippleFn();\n            this.rippleIconFn();\n        }\n        this.setCssClass(this.cssClass, null);\n        this.setDragAndDrop(false);\n        this.setFullRow(false);\n        if (this.ulElement && this.ulElement.parentElement) {\n            this.ulElement.parentElement.removeChild(this.ulElement);\n        }\n        _super.prototype.destroy.call(this);\n    };\n    /**\n     * Adds the collection of TreeView nodes based on target and index position. If target node is not specified,\n     * then the nodes are added as children of the given parentID or in the root level of TreeView.\n     * @param  { { [key: string]: Object }[] } nodes - Specifies the array of JSON data that has to be added.\n     * @param  { string | Element } target - Specifies ID of TreeView node/TreeView node as target element.\n     * @param  { number } index - Specifies the index to place the newly added nodes in the target element.\n     * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n     */\n    TreeView.prototype.addNodes = function (nodes, target, index, preventTargetExpand) {\n        if (isNOU(nodes)) {\n            return;\n        }\n        nodes = JSON.parse(JSON.stringify(nodes));\n        var dropLi = this.getElement(target);\n        this.preventExpand = preventTargetExpand;\n        if (this.fields.dataSource instanceof DataManager) {\n            if (!this.isOffline) {\n                this.crudOperation('insert', null, target, null, nodes, index, this.preventExpand);\n            }\n            else {\n                this.addSuccess(nodes, dropLi, index);\n            }\n        }\n        else if (this.dataType === 2) {\n            this.addGivenNodes(nodes, dropLi, index);\n        }\n        else {\n            if (dropLi) {\n                this.addGivenNodes(nodes, dropLi, index);\n            }\n            else {\n                nodes = this.getSortedData(nodes);\n                for (var i = 0; i < nodes.length; i++) {\n                    var pid = getValue(this.fields.parentID, nodes[i]);\n                    dropLi = pid ? this.getElement(pid.toString()) : pid;\n                    this.addGivenNodes([nodes[i]], dropLi, index);\n                }\n            }\n            this.groupedData = this.getGroupedData(this.treeData, this.fields.parentID);\n        }\n        this.updateCheckedStateFromDS();\n        if (this.showCheckBox && dropLi) {\n            this.ensureParentCheckState(dropLi);\n        }\n        if ((this.fields.dataSource instanceof DataManager === false)) {\n            this.preventExpand = false;\n            this.triggerEvent();\n        }\n    };\n    /**\n     * Instead of clicking on the TreeView node for editing, we can enable it by using\n     * `beginEdit` property. On passing the node ID or element through this property, the edit textBox\n     * will be created for the particular node thus allowing us to edit it.\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n     */\n    TreeView.prototype.beginEdit = function (node) {\n        var ele = this.getElement(node);\n        if (isNOU(ele) || this.disabled) {\n            return;\n        }\n        this.createTextbox(ele, null);\n    };\n    /**\n     * Checks all the unchecked nodes. You can also check specific nodes by passing array of unchecked nodes\n     * as argument to this method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     */\n    TreeView.prototype.checkAll = function (nodes) {\n        if (this.showCheckBox) {\n            this.doCheckBoxAction(nodes, true);\n        }\n    };\n    /**\n     * Collapses all the expanded TreeView nodes. You can collapse specific nodes by passing array of nodes as argument to this method.\n     * You can also collapse all the nodes excluding the hidden nodes by setting **excludeHiddenNodes** to true. If you want to collapse\n     * a specific level of nodes, set **level** as argument to collapseAll method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/ array of TreeView node.\n     * @param  {number} level - TreeView nodes will collapse up to the given level.\n     * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes of TreeView when collapsing all nodes.\n     */\n    TreeView.prototype.collapseAll = function (nodes, level, excludeHiddenNodes) {\n        if (!isNOU(nodes)) {\n            this.doGivenAction(nodes, COLLAPSIBLE, false);\n        }\n        else {\n            if (level > 0) {\n                this.collapseByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n            }\n            else {\n                this.collapseAllNodes(excludeHiddenNodes);\n            }\n        }\n    };\n    /**\n     * Disables the collection of nodes by passing the ID of nodes or node elements in the array.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n     */\n    TreeView.prototype.disableNodes = function (nodes) {\n        if (!isNOU(nodes)) {\n            this.doDisableAction(nodes);\n        }\n    };\n    /**\n     * Enables the collection of disabled nodes by passing the ID of nodes or node elements in the array.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n     */\n    TreeView.prototype.enableNodes = function (nodes) {\n        if (!isNOU(nodes)) {\n            this.doEnableAction(nodes);\n        }\n    };\n    /**\n     * Ensures visibility of the TreeView node by using node ID or node element.\n     * When many TreeView nodes are present and we need to find a particular node, `ensureVisible` property\n     * helps bring the node to visibility by expanding the TreeView and scrolling to the specific node.\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView nodes.\n     */\n    TreeView.prototype.ensureVisible = function (node) {\n        var liEle = this.getElement(node);\n        if (isNOU(liEle)) {\n            return;\n        }\n        var parents = this.parents(liEle, '.' + LISTITEM);\n        this.expandAll(parents);\n        setTimeout(function () { liEle.scrollIntoView(true); }, 450);\n    };\n    /**\n     * Expands all the collapsed TreeView nodes. You can expand the specific nodes by passing the array of collapsed nodes\n     * as argument to this method. You can also expand all the collapsed nodes by excluding the hidden nodes by setting\n     * **excludeHiddenNodes** to true to this method. To expand a specific level of nodes, set **level** as argument to expandAll method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView nodes.\n     * @param  {number} level - TreeView nodes will expand up to the given level.\n     * @param  {boolean} excludeHiddenNodes - Whether or not to exclude hidden nodes when expanding all nodes.\n     */\n    TreeView.prototype.expandAll = function (nodes, level, excludeHiddenNodes) {\n        if (!isNOU(nodes)) {\n            this.doGivenAction(nodes, EXPANDABLE, true);\n        }\n        else {\n            if (level > 0) {\n                this.expandByLevel(select('.' + PARENTITEM, this.element), level, excludeHiddenNodes);\n            }\n            else {\n                this.expandAllNodes(excludeHiddenNodes);\n            }\n        }\n    };\n    /**\n     * Gets all the checked nodes including child, whether it is loaded or not.\n     */\n    TreeView.prototype.getAllCheckedNodes = function () {\n        var checkNodes = this.checkedNodes;\n        return checkNodes;\n    };\n    /**\n    * Gets all the disabled nodes including child, whether it is loaded or not.\n    */\n    TreeView.prototype.getDisabledNodes = function () {\n        var disabledNodes = this.disableNode;\n        return disabledNodes;\n    };\n    /**\n     * Get the node's data such as id, text, parentID, selected, isChecked, and expanded by passing the node element or it's ID.\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n     */\n    TreeView.prototype.getNode = function (node) {\n        var ele = this.getElement(node);\n        return this.getNodeData(ele, true);\n    };\n    /**\n     * To get the updated data source of TreeView after performing some operation like drag and drop, node editing,\n     * node selecting/unSelecting, node expanding/collapsing, node checking/unChecking, adding and removing node.\n     * * If you pass the ID of TreeView node as arguments for this method then it will return the updated data source\n     * of the corresponding node otherwise it will return the entire updated data source of TreeView.\n     * * The updated data source also contains custom attributes if you specified in data source.\n     * @param  {string | Element} node - Specifies ID of TreeView node/TreeView node.\n     * @isGenericType true\n     */\n    TreeView.prototype.getTreeData = function (node) {\n        var id = this.getId(node);\n        this.updatePersistProp();\n        if (isNOU(id)) {\n            return this.treeData;\n        }\n        else {\n            var data = this.getNodeObject(id);\n            return isNOU(data) ? [] : [data];\n        }\n    };\n    /**\n     * Moves the collection of nodes within the same TreeView based on target or its index position.\n     * @param  {string[] | Element[]} sourceNodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n     * @param  {number} index - Specifies the index to place the moved nodes in the target element.\n     * @param { boolean } preventTargetExpand - If set to true, the target parent node will be prevented from auto expanding.\n     */\n    TreeView.prototype.moveNodes = function (sourceNodes, target, index, preventTargetExpand) {\n        var dropLi = this.getElement(target);\n        if (isNOU(dropLi)) {\n            return;\n        }\n        for (var i = 0; i < sourceNodes.length; i++) {\n            var dragLi = this.getElement(sourceNodes[i]);\n            if (isNOU(dragLi) || dropLi.isSameNode(dragLi) || this.isDescendant(dragLi, dropLi)) {\n                continue;\n            }\n            this.preventExpand = preventTargetExpand;\n            this.dropAsChildNode(dragLi, dropLi, this, index);\n        }\n        if (this.fields.dataSource instanceof DataManager === false) {\n            this.preventExpand = false;\n        }\n        this.triggerEvent();\n    };\n    /**\n     * Refreshes a particular node of the TreeView.\n     * @param  {string | Element} target - Specifies the ID of TreeView node or TreeView node as target element.\n     * @param  {{ [key: string]: Object }[]} newData - Specifies the new data of TreeView node.\n     */\n    TreeView.prototype.refreshNode = function (target, newData) {\n        if (isNOU(target) || isNOU(newData)) {\n            return;\n        }\n        var id;\n        var isRefreshChild = false;\n        if (this.dataType == 1 && newData.length > 1) {\n            isRefreshChild = true;\n        }\n        else if (this.dataType == 2 && newData.length === 1) {\n            var updatedChildValue = getValue(this.fields.child.toString(), newData[0]);\n            if (!isNOU(updatedChildValue)) {\n                isRefreshChild = true;\n            }\n        }\n        var liEle = this.getElement(target);\n        id = liEle ? liEle.getAttribute('data-uid') : ((target) ? target.toString() : null);\n        this.refreshData = this.getNodeObject(id);\n        newData = JSON.parse(JSON.stringify(newData));\n        /* eslint-disable */\n        var newNodeData;\n        var parentData;\n        if (this.dataType == 1 && isRefreshChild) {\n            for (var k = 0; k < newData.length; k++) {\n                if (isNOU(newData[k][this.fields.parentID])) {\n                    parentData = newData[k];\n                    newData.splice(k, 1);\n                    break;\n                }\n            }\n            newNodeData = extend({}, this.refreshData, parentData);\n        }\n        else {\n            newNodeData = extend({}, this.refreshData, newData[0]);\n        }\n        if (isNOU(liEle)) {\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\n            return;\n        }\n        this.isRefreshed = true;\n        var level = parseFloat(liEle.getAttribute('aria-level'));\n        var newliEle = ListBase.createListItemFromJson(this.createElement, [newNodeData], this.listBaseOption, level);\n        var ul = select('.' + PARENTITEM, liEle);\n        var childItems = getValue(this.fields.child.toString(), newNodeData);\n        if ((isRefreshChild && ul) || (isRefreshChild && !isNOU(childItems))) {\n            var parentEle = liEle.parentElement;\n            var index = Array.prototype.indexOf.call(parentEle.childNodes, liEle);\n            remove(liEle);\n            parentEle.insertBefore(newliEle[0], parentEle.childNodes[index]);\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\n            if (isRefreshChild && ul) {\n                this.expandAll([id]);\n            }\n        }\n        else {\n            var txtEle = select('.' + TEXTWRAP, liEle);\n            var newTextEle = select('.' + TEXTWRAP, newliEle[0]);\n            var icon = select('div.' + ICON, txtEle);\n            var newIcon = select('div.' + ICON, newTextEle);\n            if (icon && newIcon) {\n                if (newIcon.classList.contains(EXPANDABLE) && icon.classList.contains(COLLAPSIBLE)) {\n                    removeClass([newIcon], EXPANDABLE);\n                    addClass([newIcon], COLLAPSIBLE);\n                }\n                else if (newIcon.classList.contains(COLLAPSIBLE) && icon.classList.contains(EXPANDABLE)) {\n                    removeClass([newIcon], COLLAPSIBLE);\n                    addClass([newIcon], EXPANDABLE);\n                }\n                else if (icon.classList.contains('interaction')) {\n                    addClass([newIcon], 'interaction');\n                }\n            }\n            remove(txtEle);\n            var fullEle = select('.' + FULLROW, liEle);\n            fullEle.parentNode.insertBefore(newTextEle, fullEle.nextSibling);\n            this.updatePosition(id, newNodeData, isRefreshChild, newData);\n        }\n        liEle = this.getElement(target);\n        if (newNodeData[this.fields.tooltip]) {\n            liEle.setAttribute(\"title\", newNodeData[this.fields.tooltip]);\n        }\n        if (newNodeData.hasOwnProperty(this.fields.htmlAttributes) && newNodeData[this.fields.htmlAttributes]) {\n            var attr = {};\n            merge(attr, newNodeData[this.fields.htmlAttributes]);\n            if (attr.class) {\n                addClass([liEle], attr.class.split(' '));\n                delete attr.class;\n            }\n            else {\n                attributes(liEle, attr);\n            }\n        }\n        if (this.selectedNodes.indexOf(id) !== -1) {\n            liEle.setAttribute('aria-selected', 'true');\n            addClass([liEle], ACTIVE);\n        }\n        this.isRefreshed = false;\n        this.triggerEvent();\n    };\n    /**\n     * Removes the collection of TreeView nodes by passing the array of node details as argument to this method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     */\n    TreeView.prototype.removeNodes = function (nodes) {\n        if (!isNOU(nodes)) {\n            if (this.fields.dataSource instanceof DataManager && !this.isOffline) {\n                this.crudOperation('delete', nodes);\n            }\n            else {\n                this.deleteSuccess(nodes);\n            }\n        }\n    };\n    /**\n     * Replaces the text of the TreeView node with the given text.\n     * @param  {string | Element} target - Specifies ID of TreeView node/TreeView node as target element.\n     * @param  {string} newText - Specifies the new text of TreeView node.\n     */\n    TreeView.prototype.updateNode = function (target, newText) {\n        var _this = this;\n        if (isNOU(target) || isNOU(newText) || !this.allowEditing) {\n            return;\n        }\n        var liEle = this.getElement(target);\n        if (isNOU(liEle)) {\n            return;\n        }\n        var txtEle = select('.' + LISTTEXT, liEle);\n        this.updateOldText(liEle);\n        var eventArgs = this.getEditEvent(liEle, null, null);\n        this.trigger('nodeEditing', eventArgs, function (observedArgs) {\n            if (!observedArgs.cancel) {\n                if (_this.fields.dataSource instanceof DataManager && !_this.isOffline) {\n                    _this.crudOperation('update', null, target, newText, null, null, false);\n                }\n                else {\n                    _this.appendNewText(liEle, txtEle, newText, false);\n                }\n            }\n        });\n    };\n    /**\n     * Unchecks all the checked nodes. You can also uncheck the specific nodes by passing array of checked nodes\n     * as argument to this method.\n     * @param  {string[] | Element[]} nodes - Specifies the array of TreeView nodes ID/array of TreeView node.\n     */\n    TreeView.prototype.uncheckAll = function (nodes) {\n        if (this.showCheckBox) {\n            this.doCheckBoxAction(nodes, false);\n        }\n    };\n    var TreeView_1;\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"allowDragAndDrop\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"allowEditing\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"allowMultiSelection\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"allowTextWrap\", void 0);\n    __decorate([\n        Complex({}, NodeAnimationSettings)\n    ], TreeView.prototype, \"animation\", void 0);\n    __decorate([\n        Property()\n    ], TreeView.prototype, \"checkedNodes\", void 0);\n    __decorate([\n        Property('')\n    ], TreeView.prototype, \"cssClass\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"disabled\", void 0);\n    __decorate([\n        Property(null)\n    ], TreeView.prototype, \"dragArea\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"enableHtmlSanitizer\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"enablePersistence\", void 0);\n    __decorate([\n        Property()\n    ], TreeView.prototype, \"expandedNodes\", void 0);\n    __decorate([\n        Property('Auto')\n    ], TreeView.prototype, \"expandOn\", void 0);\n    __decorate([\n        Complex({}, FieldsSettings)\n    ], TreeView.prototype, \"fields\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeView.prototype, \"fullRowSelect\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeView.prototype, \"loadOnDemand\", void 0);\n    __decorate([\n        Property()\n    ], TreeView.prototype, \"locale\", void 0);\n    __decorate([\n        Property()\n    ], TreeView.prototype, \"nodeTemplate\", void 0);\n    __decorate([\n        Property()\n    ], TreeView.prototype, \"selectedNodes\", void 0);\n    __decorate([\n        Property('None')\n    ], TreeView.prototype, \"sortOrder\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"showCheckBox\", void 0);\n    __decorate([\n        Property(true)\n    ], TreeView.prototype, \"autoCheck\", void 0);\n    __decorate([\n        Property(false)\n    ], TreeView.prototype, \"fullRowNavigable\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"actionFailure\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"created\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"dataBound\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"dataSourceChanged\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"drawNode\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"destroyed\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"keyPress\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeChecked\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeChecking\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeClicked\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeCollapsed\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeCollapsing\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeDragging\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeDragStart\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeDragStop\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeDropped\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeEdited\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeEditing\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeExpanded\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeExpanding\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeSelected\", void 0);\n    __decorate([\n        Event()\n    ], TreeView.prototype, \"nodeSelecting\", void 0);\n    TreeView = TreeView_1 = __decorate([\n        NotifyPropertyChanges\n    ], TreeView);\n    return TreeView;\n}(Component));\nexport { TreeView };\n"]},"metadata":{},"sourceType":"module"}