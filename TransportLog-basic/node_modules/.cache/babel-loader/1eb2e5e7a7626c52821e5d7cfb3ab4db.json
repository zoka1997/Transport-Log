{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.virtual_scrolling.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport domAdapter from \"../../../core/dom_adapter\";\nimport eventsEngine from \"../../../events/core/events_engine\";\nimport { getWindow } from \"../../../core/utils/window\";\nimport { addNamespace } from \"../../../events/utils/index\";\nimport { isDefined } from \"../../../core/utils/type\";\nvar DEFAULT_CELL_HEIGHT = 50;\nvar MIN_CELL_WIDTH = 1;\nvar MIN_SCROLL_OFFSET = 10;\nvar VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT = 15;\nvar DOCUMENT_SCROLL_EVENT_NAMESPACE = addNamespace(\"scroll\", \"dxSchedulerVirtualScrolling\");\nvar scrollingOrientations = {\n  vertical: \"vertical\",\n  horizontal: \"horizontal\",\n  both: \"both\",\n  none: \"none\"\n};\nvar DefaultScrollingOrientation = scrollingOrientations.both;\nexport class VirtualScrollingDispatcher {\n  constructor(options) {\n    this.options = options;\n\n    if (options) {\n      this._rowHeight = this.getCellHeight();\n      this._cellWidth = this.getCellWidth();\n\n      this._createVirtualScrollingBase();\n    }\n  }\n\n  get isRTL() {\n    return this.options.isRTL();\n  }\n\n  get verticalVirtualScrolling() {\n    return this._verticalVirtualScrolling;\n  }\n\n  set verticalVirtualScrolling(value) {\n    this._verticalVirtualScrolling = value;\n  }\n\n  get horizontalVirtualScrolling() {\n    return this._horizontalVirtualScrolling;\n  }\n\n  set horizontalVirtualScrolling(value) {\n    this._horizontalVirtualScrolling = value;\n  }\n\n  get document() {\n    return domAdapter.getDocument();\n  }\n\n  get height() {\n    return this.options.getSchedulerHeight();\n  }\n\n  get width() {\n    return this.options.getSchedulerWidth();\n  }\n\n  get rowHeight() {\n    return this._rowHeight;\n  }\n\n  set rowHeight(value) {\n    this._rowHeight = value;\n  }\n\n  get outlineCount() {\n    return this.options.getScrolling().outlineCount;\n  }\n\n  get cellWidth() {\n    return this._cellWidth;\n  }\n\n  set cellWidth(value) {\n    this._cellWidth = value;\n  }\n\n  get viewportWidth() {\n    var width = this.width && this.options.getViewWidth();\n    return width > 0 ? width : this.options.getWindowWidth();\n  }\n\n  get viewportHeight() {\n    var height = this.height && this.options.getViewHeight();\n    return height > 0 ? height : this.options.getWindowHeight();\n  }\n\n  get cellCountInsideTopVirtualRow() {\n    var _this$verticalScrolli;\n\n    return (null === (_this$verticalScrolli = this.verticalScrollingState) || void 0 === _this$verticalScrolli ? void 0 : _this$verticalScrolli.virtualItemCountBefore) || 0;\n  }\n\n  get cellCountInsideLeftVirtualCell() {\n    var _this$horizontalScrol;\n\n    return (null === (_this$horizontalScrol = this.horizontalScrollingState) || void 0 === _this$horizontalScrol ? void 0 : _this$horizontalScrol.virtualItemCountBefore) || 0;\n  }\n\n  get cellCountInsideRightVirtualCell() {\n    var _this$horizontalScrol2;\n\n    return (null === (_this$horizontalScrol2 = this.horizontalScrollingState) || void 0 === _this$horizontalScrol2 ? void 0 : _this$horizontalScrol2.virtualItemCountAfter) || 0;\n  }\n\n  get topVirtualRowsCount() {\n    return this.cellCountInsideTopVirtualRow > 0 ? 1 : 0;\n  }\n\n  get leftVirtualCellsCount() {\n    var virtualItemsCount = !this.isRTL ? this.cellCountInsideLeftVirtualCell : this.cellCountInsideRightVirtualCell;\n    return virtualItemsCount > 0 ? 1 : 0;\n  }\n\n  get virtualRowOffset() {\n    var _this$verticalScrolli2;\n\n    return (null === (_this$verticalScrolli2 = this.verticalScrollingState) || void 0 === _this$verticalScrolli2 ? void 0 : _this$verticalScrolli2.virtualItemSizeBefore) || 0;\n  }\n\n  get virtualCellOffset() {\n    var _this$horizontalScrol3;\n\n    return (null === (_this$horizontalScrol3 = this.horizontalScrollingState) || void 0 === _this$horizontalScrol3 ? void 0 : _this$horizontalScrol3.virtualItemSizeBefore) || 0;\n  }\n\n  get scrollingState() {\n    var _this$verticalVirtual, _this$horizontalVirtu;\n\n    return {\n      vertical: null === (_this$verticalVirtual = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual ? void 0 : _this$verticalVirtual.state,\n      horizontal: null === (_this$horizontalVirtu = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu ? void 0 : _this$horizontalVirtu.state\n    };\n  }\n\n  get verticalScrollingState() {\n    return this.scrollingState.vertical;\n  }\n\n  get horizontalScrollingState() {\n    return this.scrollingState.horizontal;\n  }\n\n  get scrollingOrientation() {\n    var scrolling = this.options.getScrolling();\n\n    if (\"standard\" === scrolling.mode) {\n      return scrollingOrientations.none;\n    }\n\n    return scrolling.orientation || DefaultScrollingOrientation;\n  }\n\n  get verticalScrollingAllowed() {\n    return this.scrollingOrientation === scrollingOrientations.vertical || this.scrollingOrientation === scrollingOrientations.both;\n  }\n\n  get horizontalScrollingAllowed() {\n    return this.scrollingOrientation === scrollingOrientations.horizontal || this.scrollingOrientation === scrollingOrientations.both;\n  }\n\n  setViewOptions(options) {\n    this.options = options;\n\n    if (this.verticalVirtualScrolling) {\n      this.verticalVirtualScrolling.options = options;\n      this.verticalVirtualScrolling.itemSize = this.rowHeight;\n      this.verticalVirtualScrolling.viewportSize = this.viewportHeight;\n    }\n\n    if (this.horizontalVirtualScrolling) {\n      this.horizontalVirtualScrolling.options = options;\n      this.verticalVirtualScrolling.itemSize = this.cellWidth;\n      this.verticalVirtualScrolling.viewportSize = this.viewportWidth;\n    }\n  }\n\n  getRenderState() {\n    var _this$verticalVirtual2, _this$horizontalVirtu2;\n\n    var verticalRenderState = (null === (_this$verticalVirtual2 = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual2 ? void 0 : _this$verticalVirtual2.getRenderState()) || {};\n    var horizontalRenderState = (null === (_this$horizontalVirtu2 = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu2 ? void 0 : _this$horizontalVirtu2.getRenderState()) || {};\n    return _extends({}, verticalRenderState, horizontalRenderState);\n  }\n\n  getCellHeight() {\n    var cellHeight = this.options.getCellHeight();\n    var result = cellHeight > 0 ? cellHeight : DEFAULT_CELL_HEIGHT;\n    return Math.floor(result);\n  }\n\n  getCellWidth() {\n    var cellWidth = this.options.getCellWidth();\n    var minCellWidth = this.options.getCellMinWidth();\n\n    if (!cellWidth || cellWidth < minCellWidth) {\n      cellWidth = minCellWidth;\n    }\n\n    var result = cellWidth > 0 ? cellWidth : MIN_CELL_WIDTH;\n    return Math.floor(result);\n  }\n\n  calculateCoordinatesByDataAndPosition(cellData, position, date, isCalculateTime, isVerticalDirectionView) {\n    var {\n      rowIndex: rowIndex,\n      columnIndex: columnIndex\n    } = position;\n    var {\n      startDate: startDate,\n      endDate: endDate,\n      allDay: allDay\n    } = cellData;\n    var timeToScroll = date.getTime();\n    var cellStartTime = startDate.getTime();\n    var cellEndTime = endDate.getTime();\n    var scrollInCell = allDay || !isCalculateTime ? 0 : (timeToScroll - cellStartTime) / (cellEndTime - cellStartTime);\n    var cellWidth = this.getCellWidth();\n    var rowHeight = this.getCellHeight();\n    var top = isVerticalDirectionView ? (rowIndex + scrollInCell) * rowHeight : rowIndex * rowHeight;\n    var left = isVerticalDirectionView ? columnIndex * cellWidth : (columnIndex + scrollInCell) * cellWidth;\n\n    if (this.isRTL) {\n      left = this.options.getScrollableOuterWidth() - left;\n    }\n\n    return {\n      top: top,\n      left: left\n    };\n  }\n\n  dispose() {\n    if (this._onScrollHandler) {\n      eventsEngine.off(this.document, DOCUMENT_SCROLL_EVENT_NAMESPACE, this._onScrollHandler);\n    }\n  }\n\n  createVirtualScrolling() {\n    var isVerticalVirtualScrollingCreated = !!this.verticalVirtualScrolling;\n    var isHorizontalVirtualScrollingCreated = !!this.horizontalVirtualScrolling;\n\n    if (this.verticalScrollingAllowed !== isVerticalVirtualScrollingCreated || this.horizontalScrollingAllowed !== isHorizontalVirtualScrollingCreated) {\n      this._rowHeight = this.getCellHeight();\n      this._cellWidth = this.getCellWidth();\n\n      this._createVirtualScrollingBase();\n    }\n  }\n\n  _createVirtualScrollingBase() {\n    if (this.verticalScrollingAllowed) {\n      this.verticalVirtualScrolling = new VerticalVirtualScrolling(_extends({}, this.options, {\n        viewportHeight: this.viewportHeight,\n        rowHeight: this.rowHeight,\n        outlineCount: this.outlineCount\n      }));\n    }\n\n    if (this.horizontalScrollingAllowed) {\n      this.horizontalVirtualScrolling = new HorizontalVirtualScrolling(_extends({}, this.options, {\n        viewportWidth: this.viewportWidth,\n        cellWidth: this.cellWidth,\n        outlineCount: this.outlineCount\n      }));\n    }\n  }\n\n  isAttachWindowScrollEvent() {\n    return (this.horizontalScrollingAllowed || this.verticalScrollingAllowed) && !this.height;\n  }\n\n  attachScrollableEvents() {\n    if (this.isAttachWindowScrollEvent()) {\n      this._attachWindowScroll();\n    }\n  }\n\n  _attachWindowScroll() {\n    var window = getWindow();\n    this._onScrollHandler = this.options.createAction(() => {\n      var {\n        scrollX: scrollX,\n        scrollY: scrollY\n      } = window;\n\n      if (scrollX >= MIN_SCROLL_OFFSET || scrollY >= MIN_SCROLL_OFFSET) {\n        this.handleOnScrollEvent({\n          left: scrollX,\n          top: scrollY\n        });\n      }\n    });\n    eventsEngine.on(this.document, DOCUMENT_SCROLL_EVENT_NAMESPACE, this._onScrollHandler);\n  }\n\n  handleOnScrollEvent(scrollPosition) {\n    if (scrollPosition) {\n      var _this$verticalVirtual3, _this$horizontalVirtu3;\n\n      var {\n        left: left,\n        top: top\n      } = scrollPosition;\n      var verticalStateChanged = isDefined(top) && (null === (_this$verticalVirtual3 = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual3 ? void 0 : _this$verticalVirtual3.updateState(top));\n      var horizontalStateChanged = isDefined(left) && (null === (_this$horizontalVirtu3 = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu3 ? void 0 : _this$horizontalVirtu3.updateState(left));\n\n      if (verticalStateChanged || horizontalStateChanged) {\n        var _this$options$updateR, _this$options;\n\n        null === (_this$options$updateR = (_this$options = this.options).updateRender) || void 0 === _this$options$updateR ? void 0 : _this$options$updateR.call(_this$options);\n      }\n    }\n  }\n\n  updateDimensions(isForce) {\n    var cellHeight = this.getCellHeight();\n    var needUpdateVertical = this.verticalScrollingAllowed && cellHeight !== this.rowHeight;\n\n    if ((needUpdateVertical || isForce) && this.verticalVirtualScrolling) {\n      this.rowHeight = cellHeight;\n      this.verticalVirtualScrolling.viewportSize = this.viewportHeight;\n      this.verticalVirtualScrolling.reinitState(cellHeight, isForce);\n    }\n\n    var cellWidth = this.getCellWidth();\n    var needUpdateHorizontal = this.horizontalScrollingAllowed && cellWidth !== this.cellWidth;\n\n    if ((needUpdateHorizontal || isForce) && this.horizontalVirtualScrolling) {\n      this.cellWidth = cellWidth;\n      this.horizontalVirtualScrolling.viewportSize = this.viewportWidth;\n      this.horizontalVirtualScrolling.reinitState(cellWidth, isForce);\n    }\n\n    if (needUpdateVertical || needUpdateHorizontal) {\n      var _this$options$updateG, _this$options2;\n\n      null === (_this$options$updateG = (_this$options2 = this.options).updateGrid) || void 0 === _this$options$updateG ? void 0 : _this$options$updateG.call(_this$options2);\n    }\n  }\n\n}\n\nclass VirtualScrollingBase {\n  constructor(options) {\n    this.options = options;\n    this._state = this.defaultState;\n    this.viewportSize = options.viewportSize;\n    this._itemSize = options.itemSize;\n    this._position = -1;\n    this._itemSizeChanged = false;\n    this.updateState(0);\n  }\n\n  get itemSize() {\n    return this._itemSize;\n  }\n\n  set itemSize(value) {\n    this._itemSizeChanged = this._itemSize !== value;\n    this._itemSize = value;\n  }\n\n  get state() {\n    return this._state;\n  }\n\n  set state(value) {\n    this._state = value;\n  }\n\n  get startIndex() {\n    return this.state.startIndex;\n  }\n\n  get pageSize() {\n    return Math.ceil(this.viewportSize / this.itemSize);\n  }\n\n  get outlineCount() {\n    return isDefined(this.options.outlineCount) ? this.options.outlineCount : Math.floor(this.pageSize / 2);\n  }\n\n  get groupCount() {\n    return this.options.getGroupCount();\n  }\n\n  get isVerticalGrouping() {\n    return this.options.isVerticalGrouping();\n  }\n\n  get defaultState() {\n    return {\n      prevPosition: 0,\n      startIndex: -1,\n      itemCount: 0,\n      virtualItemCountBefore: 0,\n      virtualItemCountAfter: 0,\n      outlineCountBefore: 0,\n      outlineCountAfter: 0,\n      virtualItemSizeBefore: 0,\n      virtualItemSizeAfter: 0,\n      outlineSizeBefore: 0,\n      outlineSizeAfter: 0\n    };\n  }\n\n  get maxScrollPosition() {\n    return this.getTotalItemCount() * this.itemSize - this.viewportSize;\n  }\n\n  get position() {\n    return this._position;\n  }\n\n  set position(value) {\n    this._position = value;\n  }\n\n  needUpdateState(position) {\n    var {\n      prevPosition: prevPosition,\n      startIndex: startIndex\n    } = this.state;\n    var isFirstInitialization = startIndex < 0;\n\n    if (isFirstInitialization) {\n      return true;\n    }\n\n    var isStartIndexChanged = false;\n\n    if (this._validateAndSavePosition(position)) {\n      if (0 === position || position === this.maxScrollPosition) {\n        return true;\n      }\n\n      var currentPosition = prevPosition;\n      var currentItemsCount = Math.floor(currentPosition / this.itemSize);\n      var itemsCount = Math.floor(position / this.itemSize);\n      isStartIndexChanged = Math.abs(currentItemsCount - itemsCount) >= this.outlineCount;\n    }\n\n    return isStartIndexChanged;\n  }\n\n  _validateAndSavePosition(position) {\n    if (!isDefined(position)) {\n      return false;\n    }\n\n    var result = this.position !== position;\n    this.position = position;\n    return result;\n  }\n\n  _correctPosition(position) {\n    return position >= 0 ? Math.min(position, this.maxScrollPosition) : -1;\n  }\n\n  updateState(position, isForce) {\n    position = this._correctPosition(position);\n\n    if (!this.needUpdateState(position) && !isForce) {\n      return false;\n    }\n\n    var itemsInfoBefore = this._calcItemInfoBefore(position);\n\n    var itemsDeltaBefore = this._calcItemDeltaBefore(itemsInfoBefore);\n\n    var {\n      outlineCountAfter: outlineCountAfter,\n      virtualItemCountAfter: virtualItemCountAfter,\n      itemCountWithAfter: itemCountWithAfter\n    } = this._calcItemInfoAfter(itemsDeltaBefore);\n\n    var {\n      virtualItemCountBefore: virtualItemCountBefore,\n      outlineCountBefore: outlineCountBefore\n    } = itemsInfoBefore;\n    var itemCount = outlineCountBefore + itemCountWithAfter + outlineCountAfter;\n    var itemCountBefore = Math.floor(position / this.itemSize);\n    this.state.prevPosition = itemCountBefore * this.itemSize;\n    this.state.startIndex = itemCountBefore - outlineCountBefore;\n    this.state.virtualItemCountBefore = virtualItemCountBefore;\n    this.state.outlineCountBefore = outlineCountBefore;\n    this.state.itemCount = itemCount;\n    this.state.outlineCountAfter = outlineCountAfter;\n    this.state.virtualItemCountAfter = virtualItemCountAfter;\n\n    this._updateStateCore();\n\n    return true;\n  }\n\n  reinitState(itemSize, isForceUpdate) {\n    var {\n      position: position\n    } = this;\n    this.itemSize = itemSize;\n    this.updateState(0, isForceUpdate);\n\n    if (position > 0) {\n      this.updateState(position, isForceUpdate);\n    }\n  }\n\n  _calcItemInfoBefore(position) {\n    var virtualItemCountBefore = Math.floor(position / this.itemSize);\n    var outlineCountBefore = Math.min(virtualItemCountBefore, this.outlineCount);\n    virtualItemCountBefore -= outlineCountBefore;\n    return {\n      virtualItemCountBefore: virtualItemCountBefore,\n      outlineCountBefore: outlineCountBefore\n    };\n  }\n\n  _calcItemDeltaBefore(itemInfoBefore) {\n    var {\n      virtualItemCountBefore: virtualItemCountBefore,\n      outlineCountBefore: outlineCountBefore\n    } = itemInfoBefore;\n    var totalItemCount = this.getTotalItemCount();\n    return totalItemCount - virtualItemCountBefore - outlineCountBefore;\n  }\n\n  getTotalItemCount() {\n    throw \"getTotalItemCount method should be implemented\";\n  }\n\n  getRenderState() {\n    throw \"getRenderState method should be implemented\";\n  }\n\n  _calcItemInfoAfter(itemsDeltaBefore) {\n    var itemCountWithAfter = itemsDeltaBefore >= this.pageSize ? this.pageSize : itemsDeltaBefore;\n    var virtualItemCountAfter = itemsDeltaBefore - itemCountWithAfter;\n    var outlineCountAfter = virtualItemCountAfter > 0 ? Math.min(virtualItemCountAfter, this.outlineCount) : 0;\n\n    if (virtualItemCountAfter > 0) {\n      virtualItemCountAfter -= outlineCountAfter;\n    }\n\n    return {\n      virtualItemCountAfter: virtualItemCountAfter,\n      outlineCountAfter: outlineCountAfter,\n      itemCountWithAfter: itemCountWithAfter\n    };\n  }\n\n  _updateStateCore() {\n    var {\n      state: state\n    } = this;\n    var virtualItemCountBefore = state.virtualItemCountBefore;\n    var virtualItemCountAfter = state.virtualItemCountAfter;\n    var outlineCountBefore = state.outlineCountBefore;\n    var outlineCountAfter = state.outlineCountAfter;\n    var prevVirtualItemSizeBefore = state.virtualItemSizeBefore;\n    var prevVirtualItemSizeAfter = state.virtualItemSizeAfter;\n    var prevOutlineSizeBefore = state.outlineSizeBefore;\n    var prevOutlineSizeAfter = state.outlineSizeAfter;\n    var virtualItemSizeBefore = this.itemSize * virtualItemCountBefore;\n    var virtualItemSizeAfter = this.itemSize * virtualItemCountAfter;\n    var outlineSizeBefore = this.itemSize * outlineCountBefore;\n    var outlineSizeAfter = this.itemSize * outlineCountAfter;\n    var prevVirtualSizeBefore = prevVirtualItemSizeBefore + prevOutlineSizeBefore;\n    var virtualSizeBefore = virtualItemSizeBefore + outlineSizeBefore;\n    var prevVirtualSizeAfter = prevVirtualItemSizeAfter + prevOutlineSizeAfter;\n    var virtualSizeAfter = virtualItemSizeAfter + outlineSizeAfter;\n    var isAppend = prevVirtualSizeBefore < virtualSizeBefore;\n    var isPrepend = prevVirtualSizeAfter < virtualSizeAfter;\n    var needAddItems = this._itemSizeChanged || isAppend || isPrepend;\n\n    if (needAddItems) {\n      this._updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter);\n    }\n  }\n\n  _updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter) {\n    var {\n      state: state\n    } = this;\n    state.virtualItemSizeBefore = virtualItemSizeBefore;\n    state.virtualItemSizeAfter = virtualItemSizeAfter;\n  }\n\n}\n\nclass VerticalVirtualScrolling extends VirtualScrollingBase {\n  constructor(options) {\n    super(_extends({}, options, {\n      itemSize: options.rowHeight,\n      viewportSize: options.viewportHeight\n    }));\n  }\n\n  get prevTopPosition() {\n    return this.state.prevPosition;\n  }\n\n  get rowCount() {\n    return this.state.itemCount;\n  }\n\n  get topVirtualRowCount() {\n    return this.state.virtualItemCountBefore;\n  }\n\n  get bottomVirtualRowCount() {\n    return this.state.virtualItemCountAfter;\n  }\n\n  getTotalItemCount() {\n    return this.options.getTotalRowCount(this.groupCount, this.isVerticalGrouping);\n  }\n\n  getRenderState() {\n    return {\n      topVirtualRowHeight: this.state.virtualItemSizeBefore,\n      bottomVirtualRowHeight: this.state.virtualItemSizeAfter,\n      startRowIndex: this.state.startIndex,\n      rowCount: this.state.itemCount,\n      startIndex: this.state.startIndex\n    };\n  }\n\n}\n\nclass HorizontalVirtualScrolling extends VirtualScrollingBase {\n  constructor(options) {\n    super(_extends({}, options, {\n      itemSize: options.cellWidth,\n      viewportSize: options.viewportWidth\n    }));\n  }\n\n  get isRTL() {\n    return this.options.isRTL();\n  }\n\n  getTotalItemCount() {\n    return this.options.getTotalCellCount(this.groupCount, this.isVerticalGrouping);\n  }\n\n  getRenderState() {\n    return {\n      leftVirtualCellWidth: this.state.virtualItemSizeBefore,\n      rightVirtualCellWidth: this.state.virtualItemSizeAfter,\n      startCellIndex: this.state.startIndex,\n      cellCount: this.state.itemCount,\n      cellWidth: this.itemSize\n    };\n  }\n\n  _updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter) {\n    if (!this.isRTL) {\n      super._updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter);\n    } else {\n      var {\n        state: state\n      } = this;\n      state.virtualItemSizeAfter = virtualItemSizeBefore;\n      state.virtualItemSizeBefore = virtualItemSizeAfter;\n      state.startIndex = this.getTotalItemCount() - this.startIndex - this.state.itemCount;\n    }\n  }\n\n}\n\nexport class VirtualScrollingRenderer {\n  constructor(workspace) {\n    this._workspace = workspace;\n    this._renderAppointmentTimeoutID = null;\n  }\n\n  getRenderTimeout() {\n    return this._workspace.option(\"isRenovatedAppointments\") ? -1 : VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT;\n  }\n\n  get workspace() {\n    return this._workspace;\n  }\n\n  updateRender() {\n    this._renderGrid();\n\n    this._renderAppointments();\n  }\n\n  _renderGrid() {\n    this.workspace.renderWorkSpace(false);\n  }\n\n  _renderAppointments() {\n    var renderTimeout = this.getRenderTimeout();\n\n    if (renderTimeout >= 0) {\n      clearTimeout(this._renderAppointmentTimeoutID);\n      this._renderAppointmentTimeoutID = setTimeout(() => this.workspace.updateAppointments(), renderTimeout);\n    } else {\n      this.workspace.updateAppointments();\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.virtual_scrolling.js"],"names":["_extends","domAdapter","eventsEngine","getWindow","addNamespace","isDefined","DEFAULT_CELL_HEIGHT","MIN_CELL_WIDTH","MIN_SCROLL_OFFSET","VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT","DOCUMENT_SCROLL_EVENT_NAMESPACE","scrollingOrientations","vertical","horizontal","both","none","DefaultScrollingOrientation","VirtualScrollingDispatcher","constructor","options","_rowHeight","getCellHeight","_cellWidth","getCellWidth","_createVirtualScrollingBase","isRTL","verticalVirtualScrolling","_verticalVirtualScrolling","value","horizontalVirtualScrolling","_horizontalVirtualScrolling","document","getDocument","height","getSchedulerHeight","width","getSchedulerWidth","rowHeight","outlineCount","getScrolling","cellWidth","viewportWidth","getViewWidth","getWindowWidth","viewportHeight","getViewHeight","getWindowHeight","cellCountInsideTopVirtualRow","_this$verticalScrolli","verticalScrollingState","virtualItemCountBefore","cellCountInsideLeftVirtualCell","_this$horizontalScrol","horizontalScrollingState","cellCountInsideRightVirtualCell","_this$horizontalScrol2","virtualItemCountAfter","topVirtualRowsCount","leftVirtualCellsCount","virtualItemsCount","virtualRowOffset","_this$verticalScrolli2","virtualItemSizeBefore","virtualCellOffset","_this$horizontalScrol3","scrollingState","_this$verticalVirtual","_this$horizontalVirtu","state","scrollingOrientation","scrolling","mode","orientation","verticalScrollingAllowed","horizontalScrollingAllowed","setViewOptions","itemSize","viewportSize","getRenderState","_this$verticalVirtual2","_this$horizontalVirtu2","verticalRenderState","horizontalRenderState","cellHeight","result","Math","floor","minCellWidth","getCellMinWidth","calculateCoordinatesByDataAndPosition","cellData","position","date","isCalculateTime","isVerticalDirectionView","rowIndex","columnIndex","startDate","endDate","allDay","timeToScroll","getTime","cellStartTime","cellEndTime","scrollInCell","top","left","getScrollableOuterWidth","dispose","_onScrollHandler","off","createVirtualScrolling","isVerticalVirtualScrollingCreated","isHorizontalVirtualScrollingCreated","VerticalVirtualScrolling","HorizontalVirtualScrolling","isAttachWindowScrollEvent","attachScrollableEvents","_attachWindowScroll","window","createAction","scrollX","scrollY","handleOnScrollEvent","on","scrollPosition","_this$verticalVirtual3","_this$horizontalVirtu3","verticalStateChanged","updateState","horizontalStateChanged","_this$options$updateR","_this$options","updateRender","call","updateDimensions","isForce","needUpdateVertical","reinitState","needUpdateHorizontal","_this$options$updateG","_this$options2","updateGrid","VirtualScrollingBase","_state","defaultState","_itemSize","_position","_itemSizeChanged","startIndex","pageSize","ceil","groupCount","getGroupCount","isVerticalGrouping","prevPosition","itemCount","outlineCountBefore","outlineCountAfter","virtualItemSizeAfter","outlineSizeBefore","outlineSizeAfter","maxScrollPosition","getTotalItemCount","needUpdateState","isFirstInitialization","isStartIndexChanged","_validateAndSavePosition","currentPosition","currentItemsCount","itemsCount","abs","_correctPosition","min","itemsInfoBefore","_calcItemInfoBefore","itemsDeltaBefore","_calcItemDeltaBefore","itemCountWithAfter","_calcItemInfoAfter","itemCountBefore","_updateStateCore","isForceUpdate","itemInfoBefore","totalItemCount","prevVirtualItemSizeBefore","prevVirtualItemSizeAfter","prevOutlineSizeBefore","prevOutlineSizeAfter","prevVirtualSizeBefore","virtualSizeBefore","prevVirtualSizeAfter","virtualSizeAfter","isAppend","isPrepend","needAddItems","_updateStateVirtualItems","prevTopPosition","rowCount","topVirtualRowCount","bottomVirtualRowCount","getTotalRowCount","topVirtualRowHeight","bottomVirtualRowHeight","startRowIndex","getTotalCellCount","leftVirtualCellWidth","rightVirtualCellWidth","startCellIndex","cellCount","VirtualScrollingRenderer","workspace","_workspace","_renderAppointmentTimeoutID","getRenderTimeout","option","_renderGrid","_renderAppointments","renderWorkSpace","renderTimeout","clearTimeout","setTimeout","updateAppointments"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.virtual_scrolling.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport domAdapter from \"../../../core/dom_adapter\";\r\nimport eventsEngine from \"../../../events/core/events_engine\";\r\nimport {\r\n    getWindow\r\n} from \"../../../core/utils/window\";\r\nimport {\r\n    addNamespace\r\n} from \"../../../events/utils/index\";\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nvar DEFAULT_CELL_HEIGHT = 50;\r\nvar MIN_CELL_WIDTH = 1;\r\nvar MIN_SCROLL_OFFSET = 10;\r\nvar VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT = 15;\r\nvar DOCUMENT_SCROLL_EVENT_NAMESPACE = addNamespace(\"scroll\", \"dxSchedulerVirtualScrolling\");\r\nvar scrollingOrientations = {\r\n    vertical: \"vertical\",\r\n    horizontal: \"horizontal\",\r\n    both: \"both\",\r\n    none: \"none\"\r\n};\r\nvar DefaultScrollingOrientation = scrollingOrientations.both;\r\nexport class VirtualScrollingDispatcher {\r\n    constructor(options) {\r\n        this.options = options;\r\n        if (options) {\r\n            this._rowHeight = this.getCellHeight();\r\n            this._cellWidth = this.getCellWidth();\r\n            this._createVirtualScrollingBase()\r\n        }\r\n    }\r\n    get isRTL() {\r\n        return this.options.isRTL()\r\n    }\r\n    get verticalVirtualScrolling() {\r\n        return this._verticalVirtualScrolling\r\n    }\r\n    set verticalVirtualScrolling(value) {\r\n        this._verticalVirtualScrolling = value\r\n    }\r\n    get horizontalVirtualScrolling() {\r\n        return this._horizontalVirtualScrolling\r\n    }\r\n    set horizontalVirtualScrolling(value) {\r\n        this._horizontalVirtualScrolling = value\r\n    }\r\n    get document() {\r\n        return domAdapter.getDocument()\r\n    }\r\n    get height() {\r\n        return this.options.getSchedulerHeight()\r\n    }\r\n    get width() {\r\n        return this.options.getSchedulerWidth()\r\n    }\r\n    get rowHeight() {\r\n        return this._rowHeight\r\n    }\r\n    set rowHeight(value) {\r\n        this._rowHeight = value\r\n    }\r\n    get outlineCount() {\r\n        return this.options.getScrolling().outlineCount\r\n    }\r\n    get cellWidth() {\r\n        return this._cellWidth\r\n    }\r\n    set cellWidth(value) {\r\n        this._cellWidth = value\r\n    }\r\n    get viewportWidth() {\r\n        var width = this.width && this.options.getViewWidth();\r\n        return width > 0 ? width : this.options.getWindowWidth()\r\n    }\r\n    get viewportHeight() {\r\n        var height = this.height && this.options.getViewHeight();\r\n        return height > 0 ? height : this.options.getWindowHeight()\r\n    }\r\n    get cellCountInsideTopVirtualRow() {\r\n        var _this$verticalScrolli;\r\n        return (null === (_this$verticalScrolli = this.verticalScrollingState) || void 0 === _this$verticalScrolli ? void 0 : _this$verticalScrolli.virtualItemCountBefore) || 0\r\n    }\r\n    get cellCountInsideLeftVirtualCell() {\r\n        var _this$horizontalScrol;\r\n        return (null === (_this$horizontalScrol = this.horizontalScrollingState) || void 0 === _this$horizontalScrol ? void 0 : _this$horizontalScrol.virtualItemCountBefore) || 0\r\n    }\r\n    get cellCountInsideRightVirtualCell() {\r\n        var _this$horizontalScrol2;\r\n        return (null === (_this$horizontalScrol2 = this.horizontalScrollingState) || void 0 === _this$horizontalScrol2 ? void 0 : _this$horizontalScrol2.virtualItemCountAfter) || 0\r\n    }\r\n    get topVirtualRowsCount() {\r\n        return this.cellCountInsideTopVirtualRow > 0 ? 1 : 0\r\n    }\r\n    get leftVirtualCellsCount() {\r\n        var virtualItemsCount = !this.isRTL ? this.cellCountInsideLeftVirtualCell : this.cellCountInsideRightVirtualCell;\r\n        return virtualItemsCount > 0 ? 1 : 0\r\n    }\r\n    get virtualRowOffset() {\r\n        var _this$verticalScrolli2;\r\n        return (null === (_this$verticalScrolli2 = this.verticalScrollingState) || void 0 === _this$verticalScrolli2 ? void 0 : _this$verticalScrolli2.virtualItemSizeBefore) || 0\r\n    }\r\n    get virtualCellOffset() {\r\n        var _this$horizontalScrol3;\r\n        return (null === (_this$horizontalScrol3 = this.horizontalScrollingState) || void 0 === _this$horizontalScrol3 ? void 0 : _this$horizontalScrol3.virtualItemSizeBefore) || 0\r\n    }\r\n    get scrollingState() {\r\n        var _this$verticalVirtual, _this$horizontalVirtu;\r\n        return {\r\n            vertical: null === (_this$verticalVirtual = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual ? void 0 : _this$verticalVirtual.state,\r\n            horizontal: null === (_this$horizontalVirtu = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu ? void 0 : _this$horizontalVirtu.state\r\n        }\r\n    }\r\n    get verticalScrollingState() {\r\n        return this.scrollingState.vertical\r\n    }\r\n    get horizontalScrollingState() {\r\n        return this.scrollingState.horizontal\r\n    }\r\n    get scrollingOrientation() {\r\n        var scrolling = this.options.getScrolling();\r\n        if (\"standard\" === scrolling.mode) {\r\n            return scrollingOrientations.none\r\n        }\r\n        return scrolling.orientation || DefaultScrollingOrientation\r\n    }\r\n    get verticalScrollingAllowed() {\r\n        return this.scrollingOrientation === scrollingOrientations.vertical || this.scrollingOrientation === scrollingOrientations.both\r\n    }\r\n    get horizontalScrollingAllowed() {\r\n        return this.scrollingOrientation === scrollingOrientations.horizontal || this.scrollingOrientation === scrollingOrientations.both\r\n    }\r\n    setViewOptions(options) {\r\n        this.options = options;\r\n        if (this.verticalVirtualScrolling) {\r\n            this.verticalVirtualScrolling.options = options;\r\n            this.verticalVirtualScrolling.itemSize = this.rowHeight;\r\n            this.verticalVirtualScrolling.viewportSize = this.viewportHeight\r\n        }\r\n        if (this.horizontalVirtualScrolling) {\r\n            this.horizontalVirtualScrolling.options = options;\r\n            this.verticalVirtualScrolling.itemSize = this.cellWidth;\r\n            this.verticalVirtualScrolling.viewportSize = this.viewportWidth\r\n        }\r\n    }\r\n    getRenderState() {\r\n        var _this$verticalVirtual2, _this$horizontalVirtu2;\r\n        var verticalRenderState = (null === (_this$verticalVirtual2 = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual2 ? void 0 : _this$verticalVirtual2.getRenderState()) || {};\r\n        var horizontalRenderState = (null === (_this$horizontalVirtu2 = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu2 ? void 0 : _this$horizontalVirtu2.getRenderState()) || {};\r\n        return _extends({}, verticalRenderState, horizontalRenderState)\r\n    }\r\n    getCellHeight() {\r\n        var cellHeight = this.options.getCellHeight();\r\n        var result = cellHeight > 0 ? cellHeight : DEFAULT_CELL_HEIGHT;\r\n        return Math.floor(result)\r\n    }\r\n    getCellWidth() {\r\n        var cellWidth = this.options.getCellWidth();\r\n        var minCellWidth = this.options.getCellMinWidth();\r\n        if (!cellWidth || cellWidth < minCellWidth) {\r\n            cellWidth = minCellWidth\r\n        }\r\n        var result = cellWidth > 0 ? cellWidth : MIN_CELL_WIDTH;\r\n        return Math.floor(result)\r\n    }\r\n    calculateCoordinatesByDataAndPosition(cellData, position, date, isCalculateTime, isVerticalDirectionView) {\r\n        var {\r\n            rowIndex: rowIndex,\r\n            columnIndex: columnIndex\r\n        } = position;\r\n        var {\r\n            startDate: startDate,\r\n            endDate: endDate,\r\n            allDay: allDay\r\n        } = cellData;\r\n        var timeToScroll = date.getTime();\r\n        var cellStartTime = startDate.getTime();\r\n        var cellEndTime = endDate.getTime();\r\n        var scrollInCell = allDay || !isCalculateTime ? 0 : (timeToScroll - cellStartTime) / (cellEndTime - cellStartTime);\r\n        var cellWidth = this.getCellWidth();\r\n        var rowHeight = this.getCellHeight();\r\n        var top = isVerticalDirectionView ? (rowIndex + scrollInCell) * rowHeight : rowIndex * rowHeight;\r\n        var left = isVerticalDirectionView ? columnIndex * cellWidth : (columnIndex + scrollInCell) * cellWidth;\r\n        if (this.isRTL) {\r\n            left = this.options.getScrollableOuterWidth() - left\r\n        }\r\n        return {\r\n            top: top,\r\n            left: left\r\n        }\r\n    }\r\n    dispose() {\r\n        if (this._onScrollHandler) {\r\n            eventsEngine.off(this.document, DOCUMENT_SCROLL_EVENT_NAMESPACE, this._onScrollHandler)\r\n        }\r\n    }\r\n    createVirtualScrolling() {\r\n        var isVerticalVirtualScrollingCreated = !!this.verticalVirtualScrolling;\r\n        var isHorizontalVirtualScrollingCreated = !!this.horizontalVirtualScrolling;\r\n        if (this.verticalScrollingAllowed !== isVerticalVirtualScrollingCreated || this.horizontalScrollingAllowed !== isHorizontalVirtualScrollingCreated) {\r\n            this._rowHeight = this.getCellHeight();\r\n            this._cellWidth = this.getCellWidth();\r\n            this._createVirtualScrollingBase()\r\n        }\r\n    }\r\n    _createVirtualScrollingBase() {\r\n        if (this.verticalScrollingAllowed) {\r\n            this.verticalVirtualScrolling = new VerticalVirtualScrolling(_extends({}, this.options, {\r\n                viewportHeight: this.viewportHeight,\r\n                rowHeight: this.rowHeight,\r\n                outlineCount: this.outlineCount\r\n            }))\r\n        }\r\n        if (this.horizontalScrollingAllowed) {\r\n            this.horizontalVirtualScrolling = new HorizontalVirtualScrolling(_extends({}, this.options, {\r\n                viewportWidth: this.viewportWidth,\r\n                cellWidth: this.cellWidth,\r\n                outlineCount: this.outlineCount\r\n            }))\r\n        }\r\n    }\r\n    isAttachWindowScrollEvent() {\r\n        return (this.horizontalScrollingAllowed || this.verticalScrollingAllowed) && !this.height\r\n    }\r\n    attachScrollableEvents() {\r\n        if (this.isAttachWindowScrollEvent()) {\r\n            this._attachWindowScroll()\r\n        }\r\n    }\r\n    _attachWindowScroll() {\r\n        var window = getWindow();\r\n        this._onScrollHandler = this.options.createAction(() => {\r\n            var {\r\n                scrollX: scrollX,\r\n                scrollY: scrollY\r\n            } = window;\r\n            if (scrollX >= MIN_SCROLL_OFFSET || scrollY >= MIN_SCROLL_OFFSET) {\r\n                this.handleOnScrollEvent({\r\n                    left: scrollX,\r\n                    top: scrollY\r\n                })\r\n            }\r\n        });\r\n        eventsEngine.on(this.document, DOCUMENT_SCROLL_EVENT_NAMESPACE, this._onScrollHandler)\r\n    }\r\n    handleOnScrollEvent(scrollPosition) {\r\n        if (scrollPosition) {\r\n            var _this$verticalVirtual3, _this$horizontalVirtu3;\r\n            var {\r\n                left: left,\r\n                top: top\r\n            } = scrollPosition;\r\n            var verticalStateChanged = isDefined(top) && (null === (_this$verticalVirtual3 = this.verticalVirtualScrolling) || void 0 === _this$verticalVirtual3 ? void 0 : _this$verticalVirtual3.updateState(top));\r\n            var horizontalStateChanged = isDefined(left) && (null === (_this$horizontalVirtu3 = this.horizontalVirtualScrolling) || void 0 === _this$horizontalVirtu3 ? void 0 : _this$horizontalVirtu3.updateState(left));\r\n            if (verticalStateChanged || horizontalStateChanged) {\r\n                var _this$options$updateR, _this$options;\r\n                null === (_this$options$updateR = (_this$options = this.options).updateRender) || void 0 === _this$options$updateR ? void 0 : _this$options$updateR.call(_this$options)\r\n            }\r\n        }\r\n    }\r\n    updateDimensions(isForce) {\r\n        var cellHeight = this.getCellHeight();\r\n        var needUpdateVertical = this.verticalScrollingAllowed && cellHeight !== this.rowHeight;\r\n        if ((needUpdateVertical || isForce) && this.verticalVirtualScrolling) {\r\n            this.rowHeight = cellHeight;\r\n            this.verticalVirtualScrolling.viewportSize = this.viewportHeight;\r\n            this.verticalVirtualScrolling.reinitState(cellHeight, isForce)\r\n        }\r\n        var cellWidth = this.getCellWidth();\r\n        var needUpdateHorizontal = this.horizontalScrollingAllowed && cellWidth !== this.cellWidth;\r\n        if ((needUpdateHorizontal || isForce) && this.horizontalVirtualScrolling) {\r\n            this.cellWidth = cellWidth;\r\n            this.horizontalVirtualScrolling.viewportSize = this.viewportWidth;\r\n            this.horizontalVirtualScrolling.reinitState(cellWidth, isForce)\r\n        }\r\n        if (needUpdateVertical || needUpdateHorizontal) {\r\n            var _this$options$updateG, _this$options2;\r\n            null === (_this$options$updateG = (_this$options2 = this.options).updateGrid) || void 0 === _this$options$updateG ? void 0 : _this$options$updateG.call(_this$options2)\r\n        }\r\n    }\r\n}\r\nclass VirtualScrollingBase {\r\n    constructor(options) {\r\n        this.options = options;\r\n        this._state = this.defaultState;\r\n        this.viewportSize = options.viewportSize;\r\n        this._itemSize = options.itemSize;\r\n        this._position = -1;\r\n        this._itemSizeChanged = false;\r\n        this.updateState(0)\r\n    }\r\n    get itemSize() {\r\n        return this._itemSize\r\n    }\r\n    set itemSize(value) {\r\n        this._itemSizeChanged = this._itemSize !== value;\r\n        this._itemSize = value\r\n    }\r\n    get state() {\r\n        return this._state\r\n    }\r\n    set state(value) {\r\n        this._state = value\r\n    }\r\n    get startIndex() {\r\n        return this.state.startIndex\r\n    }\r\n    get pageSize() {\r\n        return Math.ceil(this.viewportSize / this.itemSize)\r\n    }\r\n    get outlineCount() {\r\n        return isDefined(this.options.outlineCount) ? this.options.outlineCount : Math.floor(this.pageSize / 2)\r\n    }\r\n    get groupCount() {\r\n        return this.options.getGroupCount()\r\n    }\r\n    get isVerticalGrouping() {\r\n        return this.options.isVerticalGrouping()\r\n    }\r\n    get defaultState() {\r\n        return {\r\n            prevPosition: 0,\r\n            startIndex: -1,\r\n            itemCount: 0,\r\n            virtualItemCountBefore: 0,\r\n            virtualItemCountAfter: 0,\r\n            outlineCountBefore: 0,\r\n            outlineCountAfter: 0,\r\n            virtualItemSizeBefore: 0,\r\n            virtualItemSizeAfter: 0,\r\n            outlineSizeBefore: 0,\r\n            outlineSizeAfter: 0\r\n        }\r\n    }\r\n    get maxScrollPosition() {\r\n        return this.getTotalItemCount() * this.itemSize - this.viewportSize\r\n    }\r\n    get position() {\r\n        return this._position\r\n    }\r\n    set position(value) {\r\n        this._position = value\r\n    }\r\n    needUpdateState(position) {\r\n        var {\r\n            prevPosition: prevPosition,\r\n            startIndex: startIndex\r\n        } = this.state;\r\n        var isFirstInitialization = startIndex < 0;\r\n        if (isFirstInitialization) {\r\n            return true\r\n        }\r\n        var isStartIndexChanged = false;\r\n        if (this._validateAndSavePosition(position)) {\r\n            if (0 === position || position === this.maxScrollPosition) {\r\n                return true\r\n            }\r\n            var currentPosition = prevPosition;\r\n            var currentItemsCount = Math.floor(currentPosition / this.itemSize);\r\n            var itemsCount = Math.floor(position / this.itemSize);\r\n            isStartIndexChanged = Math.abs(currentItemsCount - itemsCount) >= this.outlineCount\r\n        }\r\n        return isStartIndexChanged\r\n    }\r\n    _validateAndSavePosition(position) {\r\n        if (!isDefined(position)) {\r\n            return false\r\n        }\r\n        var result = this.position !== position;\r\n        this.position = position;\r\n        return result\r\n    }\r\n    _correctPosition(position) {\r\n        return position >= 0 ? Math.min(position, this.maxScrollPosition) : -1\r\n    }\r\n    updateState(position, isForce) {\r\n        position = this._correctPosition(position);\r\n        if (!this.needUpdateState(position) && !isForce) {\r\n            return false\r\n        }\r\n        var itemsInfoBefore = this._calcItemInfoBefore(position);\r\n        var itemsDeltaBefore = this._calcItemDeltaBefore(itemsInfoBefore);\r\n        var {\r\n            outlineCountAfter: outlineCountAfter,\r\n            virtualItemCountAfter: virtualItemCountAfter,\r\n            itemCountWithAfter: itemCountWithAfter\r\n        } = this._calcItemInfoAfter(itemsDeltaBefore);\r\n        var {\r\n            virtualItemCountBefore: virtualItemCountBefore,\r\n            outlineCountBefore: outlineCountBefore\r\n        } = itemsInfoBefore;\r\n        var itemCount = outlineCountBefore + itemCountWithAfter + outlineCountAfter;\r\n        var itemCountBefore = Math.floor(position / this.itemSize);\r\n        this.state.prevPosition = itemCountBefore * this.itemSize;\r\n        this.state.startIndex = itemCountBefore - outlineCountBefore;\r\n        this.state.virtualItemCountBefore = virtualItemCountBefore;\r\n        this.state.outlineCountBefore = outlineCountBefore;\r\n        this.state.itemCount = itemCount;\r\n        this.state.outlineCountAfter = outlineCountAfter;\r\n        this.state.virtualItemCountAfter = virtualItemCountAfter;\r\n        this._updateStateCore();\r\n        return true\r\n    }\r\n    reinitState(itemSize, isForceUpdate) {\r\n        var {\r\n            position: position\r\n        } = this;\r\n        this.itemSize = itemSize;\r\n        this.updateState(0, isForceUpdate);\r\n        if (position > 0) {\r\n            this.updateState(position, isForceUpdate)\r\n        }\r\n    }\r\n    _calcItemInfoBefore(position) {\r\n        var virtualItemCountBefore = Math.floor(position / this.itemSize);\r\n        var outlineCountBefore = Math.min(virtualItemCountBefore, this.outlineCount);\r\n        virtualItemCountBefore -= outlineCountBefore;\r\n        return {\r\n            virtualItemCountBefore: virtualItemCountBefore,\r\n            outlineCountBefore: outlineCountBefore\r\n        }\r\n    }\r\n    _calcItemDeltaBefore(itemInfoBefore) {\r\n        var {\r\n            virtualItemCountBefore: virtualItemCountBefore,\r\n            outlineCountBefore: outlineCountBefore\r\n        } = itemInfoBefore;\r\n        var totalItemCount = this.getTotalItemCount();\r\n        return totalItemCount - virtualItemCountBefore - outlineCountBefore\r\n    }\r\n    getTotalItemCount() {\r\n        throw \"getTotalItemCount method should be implemented\"\r\n    }\r\n    getRenderState() {\r\n        throw \"getRenderState method should be implemented\"\r\n    }\r\n    _calcItemInfoAfter(itemsDeltaBefore) {\r\n        var itemCountWithAfter = itemsDeltaBefore >= this.pageSize ? this.pageSize : itemsDeltaBefore;\r\n        var virtualItemCountAfter = itemsDeltaBefore - itemCountWithAfter;\r\n        var outlineCountAfter = virtualItemCountAfter > 0 ? Math.min(virtualItemCountAfter, this.outlineCount) : 0;\r\n        if (virtualItemCountAfter > 0) {\r\n            virtualItemCountAfter -= outlineCountAfter\r\n        }\r\n        return {\r\n            virtualItemCountAfter: virtualItemCountAfter,\r\n            outlineCountAfter: outlineCountAfter,\r\n            itemCountWithAfter: itemCountWithAfter\r\n        }\r\n    }\r\n    _updateStateCore() {\r\n        var {\r\n            state: state\r\n        } = this;\r\n        var virtualItemCountBefore = state.virtualItemCountBefore;\r\n        var virtualItemCountAfter = state.virtualItemCountAfter;\r\n        var outlineCountBefore = state.outlineCountBefore;\r\n        var outlineCountAfter = state.outlineCountAfter;\r\n        var prevVirtualItemSizeBefore = state.virtualItemSizeBefore;\r\n        var prevVirtualItemSizeAfter = state.virtualItemSizeAfter;\r\n        var prevOutlineSizeBefore = state.outlineSizeBefore;\r\n        var prevOutlineSizeAfter = state.outlineSizeAfter;\r\n        var virtualItemSizeBefore = this.itemSize * virtualItemCountBefore;\r\n        var virtualItemSizeAfter = this.itemSize * virtualItemCountAfter;\r\n        var outlineSizeBefore = this.itemSize * outlineCountBefore;\r\n        var outlineSizeAfter = this.itemSize * outlineCountAfter;\r\n        var prevVirtualSizeBefore = prevVirtualItemSizeBefore + prevOutlineSizeBefore;\r\n        var virtualSizeBefore = virtualItemSizeBefore + outlineSizeBefore;\r\n        var prevVirtualSizeAfter = prevVirtualItemSizeAfter + prevOutlineSizeAfter;\r\n        var virtualSizeAfter = virtualItemSizeAfter + outlineSizeAfter;\r\n        var isAppend = prevVirtualSizeBefore < virtualSizeBefore;\r\n        var isPrepend = prevVirtualSizeAfter < virtualSizeAfter;\r\n        var needAddItems = this._itemSizeChanged || isAppend || isPrepend;\r\n        if (needAddItems) {\r\n            this._updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter)\r\n        }\r\n    }\r\n    _updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter) {\r\n        var {\r\n            state: state\r\n        } = this;\r\n        state.virtualItemSizeBefore = virtualItemSizeBefore;\r\n        state.virtualItemSizeAfter = virtualItemSizeAfter\r\n    }\r\n}\r\nclass VerticalVirtualScrolling extends VirtualScrollingBase {\r\n    constructor(options) {\r\n        super(_extends({}, options, {\r\n            itemSize: options.rowHeight,\r\n            viewportSize: options.viewportHeight\r\n        }))\r\n    }\r\n    get prevTopPosition() {\r\n        return this.state.prevPosition\r\n    }\r\n    get rowCount() {\r\n        return this.state.itemCount\r\n    }\r\n    get topVirtualRowCount() {\r\n        return this.state.virtualItemCountBefore\r\n    }\r\n    get bottomVirtualRowCount() {\r\n        return this.state.virtualItemCountAfter\r\n    }\r\n    getTotalItemCount() {\r\n        return this.options.getTotalRowCount(this.groupCount, this.isVerticalGrouping)\r\n    }\r\n    getRenderState() {\r\n        return {\r\n            topVirtualRowHeight: this.state.virtualItemSizeBefore,\r\n            bottomVirtualRowHeight: this.state.virtualItemSizeAfter,\r\n            startRowIndex: this.state.startIndex,\r\n            rowCount: this.state.itemCount,\r\n            startIndex: this.state.startIndex\r\n        }\r\n    }\r\n}\r\nclass HorizontalVirtualScrolling extends VirtualScrollingBase {\r\n    constructor(options) {\r\n        super(_extends({}, options, {\r\n            itemSize: options.cellWidth,\r\n            viewportSize: options.viewportWidth\r\n        }))\r\n    }\r\n    get isRTL() {\r\n        return this.options.isRTL()\r\n    }\r\n    getTotalItemCount() {\r\n        return this.options.getTotalCellCount(this.groupCount, this.isVerticalGrouping)\r\n    }\r\n    getRenderState() {\r\n        return {\r\n            leftVirtualCellWidth: this.state.virtualItemSizeBefore,\r\n            rightVirtualCellWidth: this.state.virtualItemSizeAfter,\r\n            startCellIndex: this.state.startIndex,\r\n            cellCount: this.state.itemCount,\r\n            cellWidth: this.itemSize\r\n        }\r\n    }\r\n    _updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter) {\r\n        if (!this.isRTL) {\r\n            super._updateStateVirtualItems(virtualItemSizeBefore, virtualItemSizeAfter)\r\n        } else {\r\n            var {\r\n                state: state\r\n            } = this;\r\n            state.virtualItemSizeAfter = virtualItemSizeBefore;\r\n            state.virtualItemSizeBefore = virtualItemSizeAfter;\r\n            state.startIndex = this.getTotalItemCount() - this.startIndex - this.state.itemCount\r\n        }\r\n    }\r\n}\r\nexport class VirtualScrollingRenderer {\r\n    constructor(workspace) {\r\n        this._workspace = workspace;\r\n        this._renderAppointmentTimeoutID = null\r\n    }\r\n    getRenderTimeout() {\r\n        return this._workspace.option(\"isRenovatedAppointments\") ? -1 : VIRTUAL_APPOINTMENTS_RENDER_TIMEOUT\r\n    }\r\n    get workspace() {\r\n        return this._workspace\r\n    }\r\n    updateRender() {\r\n        this._renderGrid();\r\n        this._renderAppointments()\r\n    }\r\n    _renderGrid() {\r\n        this.workspace.renderWorkSpace(false)\r\n    }\r\n    _renderAppointments() {\r\n        var renderTimeout = this.getRenderTimeout();\r\n        if (renderTimeout >= 0) {\r\n            clearTimeout(this._renderAppointmentTimeoutID);\r\n            this._renderAppointmentTimeoutID = setTimeout(() => this.workspace.updateAppointments(), renderTimeout)\r\n        } else {\r\n            this.workspace.updateAppointments()\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}