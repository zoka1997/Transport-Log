{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments/rendering_strategies/strategy_agenda.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../../../core/utils/date\";\nimport { each } from \"../../../../core/utils/iterator\";\nimport BaseRenderingStrategy from \"./strategy.base\";\nimport { ExpressionUtils } from \"../../expressionUtils\";\nimport { groupAppointmentsByResources } from \"../../resources/utils\";\nimport { createAppointmentAdapter } from \"../../appointmentAdapter\";\nimport { replaceWrongEndDate, getAppointmentTakesSeveralDays } from \"../dataProvider/utils\";\n\nclass AgendaRenderingStrategy extends BaseRenderingStrategy {\n  get instance() {\n    return this.options.instance;\n  }\n\n  get agendaDuration() {\n    return this.options.agendaDuration;\n  }\n\n  getAppointmentMinSize() {}\n\n  getDeltaTime() {}\n\n  keepAppointmentSettings() {\n    return true;\n  }\n\n  getAppointmentGeometry(geometry) {\n    return geometry;\n  }\n\n  groupAppointmentByResources(appointments) {\n    var groups = this.instance._getCurrentViewOption(\"groups\");\n\n    var config = {\n      loadedResources: this.options.loadedResources,\n      resources: this.options.resources,\n      dataAccessors: this.dataAccessors.resources\n    };\n    return groupAppointmentsByResources(config, appointments, groups);\n  }\n\n  createTaskPositionMap(appointments) {\n    var height;\n    var appointmentsByResources;\n    this.calculateRows(appointments, this.agendaDuration, this.currentDate);\n\n    if (appointments.length) {\n      height = this.instance.fire(\"getAgendaVerticalStepHeight\");\n      appointmentsByResources = this.groupAppointmentByResources(appointments);\n      var groupedAppts = [];\n      each(appointmentsByResources, function (i, appts) {\n        var additionalAppointments = [];\n        var recurrentIndexes = [];\n        each(appts, function (index, appointment) {\n          var recurrenceBatch = this.instance.getAppointmentsInstance()._processRecurrenceAppointment(appointment, index);\n\n          var appointmentBatch = null;\n\n          if (!recurrenceBatch.indexes.length) {\n            appointmentBatch = {\n              parts: []\n            };\n            appointmentBatch = this.instance.getAppointmentsInstance()._processLongAppointment(appointment);\n            additionalAppointments = additionalAppointments.concat(appointmentBatch.parts);\n          }\n\n          additionalAppointments = additionalAppointments.concat(recurrenceBatch.parts);\n          recurrentIndexes = recurrentIndexes.concat(recurrenceBatch.indexes);\n        }.bind(this));\n\n        this.instance.getAppointmentsInstance()._reduceRecurrenceAppointments(recurrentIndexes, appts);\n\n        this.instance.getAppointmentsInstance()._combineAppointments(appts, additionalAppointments);\n\n        groupedAppts = groupedAppts.concat(appts);\n      }.bind(this));\n      Array.prototype.splice.apply(appointments, [0, appointments.length].concat(groupedAppts));\n    }\n\n    var result = [];\n    var sortedIndex = 0;\n    appointments.forEach(function (appt, index) {\n      result.push([{\n        height: height,\n        width: \"100%\",\n        sortedIndex: sortedIndex++,\n        groupIndex: this._calculateGroupIndex(index, appointmentsByResources),\n        agendaSettings: appt.settings\n      }]);\n      delete appt.settings;\n    }.bind(this));\n    return result;\n  }\n\n  _calculateGroupIndex(apptIndex, appointmentsByResources) {\n    var resultInd;\n    var counter = 0;\n\n    for (var i in appointmentsByResources) {\n      var countApptInGroup = appointmentsByResources[i].length;\n\n      if (apptIndex >= counter && apptIndex < counter + countApptInGroup) {\n        resultInd = Number(i);\n        break;\n      }\n\n      counter += countApptInGroup;\n    }\n\n    return resultInd;\n  }\n\n  _getDeltaWidth() {}\n\n  _getAppointmentMaxWidth() {\n    return this.cellWidth;\n  }\n\n  _needVerifyItemSize() {\n    return false;\n  }\n\n  _getAppointmentParts() {}\n\n  _reduceMultiWeekAppointment() {}\n\n  calculateAppointmentHeight() {\n    return 0;\n  }\n\n  calculateAppointmentWidth() {\n    return 0;\n  }\n\n  isAppointmentGreaterThan() {}\n\n  isAllDay() {\n    return false;\n  }\n\n  _sortCondition() {}\n\n  _rowCondition() {}\n\n  _columnCondition() {}\n\n  _findIndexByKey() {}\n\n  _markAppointmentAsVirtual() {}\n\n  getDropDownAppointmentWidth() {}\n\n  getCollectorLeftOffset() {}\n\n  getCollectorTopOffset() {}\n\n  replaceWrongAppointmentEndDate(rawAppointment, startDate, endDate) {\n    var adapter = createAppointmentAdapter(rawAppointment, this.dataAccessors, this.timeZoneCalculator);\n    replaceWrongEndDate(adapter, startDate, endDate, this.cellDuration, this.dataAccessors);\n  }\n\n  calculateRows(appointments, agendaDuration, currentDate, needClearSettings) {\n    this._rows = [];\n    currentDate = dateUtils.trimTime(new Date(currentDate));\n    var groupedAppointments = this.groupAppointmentByResources(appointments);\n    each(groupedAppointments, function (_, currentAppointments) {\n      var groupResult = [];\n      var appts = {\n        indexes: [],\n        parts: []\n      };\n\n      if (!currentAppointments.length) {\n        this._rows.push([]);\n\n        return true;\n      }\n\n      each(currentAppointments, function (index, appointment) {\n        var startDate = ExpressionUtils.getField(this.dataAccessors, \"startDate\", appointment);\n        var endDate = ExpressionUtils.getField(this.dataAccessors, \"endDate\", appointment);\n        this.replaceWrongAppointmentEndDate(appointment, startDate, endDate);\n        needClearSettings && delete appointment.settings;\n\n        var result = this.instance.getAppointmentsInstance()._processRecurrenceAppointment(appointment, index, false);\n\n        appts.parts = appts.parts.concat(result.parts);\n        appts.indexes = appts.indexes.concat(result.indexes);\n      }.bind(this));\n\n      this.instance.getAppointmentsInstance()._reduceRecurrenceAppointments(appts.indexes, currentAppointments);\n\n      currentAppointments.push(...appts.parts);\n      var appointmentCount = currentAppointments.length;\n\n      for (var i = 0; i < agendaDuration; i++) {\n        var day = new Date(currentDate);\n        day.setMilliseconds(day.getMilliseconds() + 864e5 * i);\n\n        if (void 0 === groupResult[i]) {\n          groupResult[i] = 0;\n        }\n\n        for (var j = 0; j < appointmentCount; j++) {\n          var appointmentData = currentAppointments[j].settings || currentAppointments[j];\n          var adapter = createAppointmentAdapter(currentAppointments[j], this.dataAccessors, this.timeZoneCalculator);\n          var appointmentIsLong = getAppointmentTakesSeveralDays(adapter);\n          var appointmentIsRecurrence = ExpressionUtils.getField(this.dataAccessors, \"recurrenceRule\", currentAppointments[j]);\n\n          if (this.instance.fire(\"dayHasAppointment\", day, appointmentData, true) || !appointmentIsRecurrence && appointmentIsLong && this.instance.fire(\"dayHasAppointment\", day, currentAppointments[j], true)) {\n            groupResult[i] += 1;\n          }\n        }\n      }\n\n      this._rows.push(groupResult);\n    }.bind(this));\n    return this._rows;\n  }\n\n  _iterateRow(row, obj, index) {\n    for (var i = 0; i < row.length; i++) {\n      obj.counter = obj.counter + row[i];\n\n      if (obj.counter >= index) {\n        obj.indexInRow = i;\n        break;\n      }\n    }\n  }\n\n  getDateByIndex(index, rows, startViewDate) {\n    var obj = {\n      counter: 0,\n      indexInRow: 0\n    };\n    index++;\n\n    for (var i = 0; i < rows.length; i++) {\n      this._iterateRow(rows[i], obj, index);\n\n      if (obj.indexInRow) {\n        break;\n      }\n    }\n\n    return new Date(new Date(startViewDate).setDate(startViewDate.getDate() + obj.indexInRow));\n  }\n\n  getAppointmentDataCalculator() {\n    return function ($appointment, originalStartDate) {\n      var apptIndex = $appointment.index();\n      var startViewDate = this.instance.getStartViewDate();\n      var calculatedStartDate = this.getDateByIndex(apptIndex, this._rows, startViewDate);\n      var wrappedOriginalStartDate = new Date(originalStartDate);\n      return {\n        startDate: new Date(calculatedStartDate.setHours(wrappedOriginalStartDate.getHours(), wrappedOriginalStartDate.getMinutes(), wrappedOriginalStartDate.getSeconds(), wrappedOriginalStartDate.getMilliseconds()))\n      };\n    }.bind(this);\n  }\n\n}\n\nexport default AgendaRenderingStrategy;","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/scheduler/appointments/rendering_strategies/strategy_agenda.js"],"names":["dateUtils","each","BaseRenderingStrategy","ExpressionUtils","groupAppointmentsByResources","createAppointmentAdapter","replaceWrongEndDate","getAppointmentTakesSeveralDays","AgendaRenderingStrategy","instance","options","agendaDuration","getAppointmentMinSize","getDeltaTime","keepAppointmentSettings","getAppointmentGeometry","geometry","groupAppointmentByResources","appointments","groups","_getCurrentViewOption","config","loadedResources","resources","dataAccessors","createTaskPositionMap","height","appointmentsByResources","calculateRows","currentDate","length","fire","groupedAppts","i","appts","additionalAppointments","recurrentIndexes","index","appointment","recurrenceBatch","getAppointmentsInstance","_processRecurrenceAppointment","appointmentBatch","indexes","parts","_processLongAppointment","concat","bind","_reduceRecurrenceAppointments","_combineAppointments","Array","prototype","splice","apply","result","sortedIndex","forEach","appt","push","width","groupIndex","_calculateGroupIndex","agendaSettings","settings","apptIndex","resultInd","counter","countApptInGroup","Number","_getDeltaWidth","_getAppointmentMaxWidth","cellWidth","_needVerifyItemSize","_getAppointmentParts","_reduceMultiWeekAppointment","calculateAppointmentHeight","calculateAppointmentWidth","isAppointmentGreaterThan","isAllDay","_sortCondition","_rowCondition","_columnCondition","_findIndexByKey","_markAppointmentAsVirtual","getDropDownAppointmentWidth","getCollectorLeftOffset","getCollectorTopOffset","replaceWrongAppointmentEndDate","rawAppointment","startDate","endDate","adapter","timeZoneCalculator","cellDuration","needClearSettings","_rows","trimTime","Date","groupedAppointments","_","currentAppointments","groupResult","getField","appointmentCount","day","setMilliseconds","getMilliseconds","j","appointmentData","appointmentIsLong","appointmentIsRecurrence","_iterateRow","row","obj","indexInRow","getDateByIndex","rows","startViewDate","setDate","getDate","getAppointmentDataCalculator","$appointment","originalStartDate","getStartViewDate","calculatedStartDate","wrappedOriginalStartDate","setHours","getHours","getMinutes","getSeconds"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/appointments/rendering_strategies/strategy_agenda.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dateUtils from \"../../../../core/utils/date\";\r\nimport {\r\n    each\r\n} from \"../../../../core/utils/iterator\";\r\nimport BaseRenderingStrategy from \"./strategy.base\";\r\nimport {\r\n    ExpressionUtils\r\n} from \"../../expressionUtils\";\r\nimport {\r\n    groupAppointmentsByResources\r\n} from \"../../resources/utils\";\r\nimport {\r\n    createAppointmentAdapter\r\n} from \"../../appointmentAdapter\";\r\nimport {\r\n    replaceWrongEndDate,\r\n    getAppointmentTakesSeveralDays\r\n} from \"../dataProvider/utils\";\r\nclass AgendaRenderingStrategy extends BaseRenderingStrategy {\r\n    get instance() {\r\n        return this.options.instance\r\n    }\r\n    get agendaDuration() {\r\n        return this.options.agendaDuration\r\n    }\r\n    getAppointmentMinSize() {}\r\n    getDeltaTime() {}\r\n    keepAppointmentSettings() {\r\n        return true\r\n    }\r\n    getAppointmentGeometry(geometry) {\r\n        return geometry\r\n    }\r\n    groupAppointmentByResources(appointments) {\r\n        var groups = this.instance._getCurrentViewOption(\"groups\");\r\n        var config = {\r\n            loadedResources: this.options.loadedResources,\r\n            resources: this.options.resources,\r\n            dataAccessors: this.dataAccessors.resources\r\n        };\r\n        return groupAppointmentsByResources(config, appointments, groups)\r\n    }\r\n    createTaskPositionMap(appointments) {\r\n        var height;\r\n        var appointmentsByResources;\r\n        this.calculateRows(appointments, this.agendaDuration, this.currentDate);\r\n        if (appointments.length) {\r\n            height = this.instance.fire(\"getAgendaVerticalStepHeight\");\r\n            appointmentsByResources = this.groupAppointmentByResources(appointments);\r\n            var groupedAppts = [];\r\n            each(appointmentsByResources, function(i, appts) {\r\n                var additionalAppointments = [];\r\n                var recurrentIndexes = [];\r\n                each(appts, function(index, appointment) {\r\n                    var recurrenceBatch = this.instance.getAppointmentsInstance()._processRecurrenceAppointment(appointment, index);\r\n                    var appointmentBatch = null;\r\n                    if (!recurrenceBatch.indexes.length) {\r\n                        appointmentBatch = {\r\n                            parts: []\r\n                        };\r\n                        appointmentBatch = this.instance.getAppointmentsInstance()._processLongAppointment(appointment);\r\n                        additionalAppointments = additionalAppointments.concat(appointmentBatch.parts)\r\n                    }\r\n                    additionalAppointments = additionalAppointments.concat(recurrenceBatch.parts);\r\n                    recurrentIndexes = recurrentIndexes.concat(recurrenceBatch.indexes)\r\n                }.bind(this));\r\n                this.instance.getAppointmentsInstance()._reduceRecurrenceAppointments(recurrentIndexes, appts);\r\n                this.instance.getAppointmentsInstance()._combineAppointments(appts, additionalAppointments);\r\n                groupedAppts = groupedAppts.concat(appts)\r\n            }.bind(this));\r\n            Array.prototype.splice.apply(appointments, [0, appointments.length].concat(groupedAppts))\r\n        }\r\n        var result = [];\r\n        var sortedIndex = 0;\r\n        appointments.forEach(function(appt, index) {\r\n            result.push([{\r\n                height: height,\r\n                width: \"100%\",\r\n                sortedIndex: sortedIndex++,\r\n                groupIndex: this._calculateGroupIndex(index, appointmentsByResources),\r\n                agendaSettings: appt.settings\r\n            }]);\r\n            delete appt.settings\r\n        }.bind(this));\r\n        return result\r\n    }\r\n    _calculateGroupIndex(apptIndex, appointmentsByResources) {\r\n        var resultInd;\r\n        var counter = 0;\r\n        for (var i in appointmentsByResources) {\r\n            var countApptInGroup = appointmentsByResources[i].length;\r\n            if (apptIndex >= counter && apptIndex < counter + countApptInGroup) {\r\n                resultInd = Number(i);\r\n                break\r\n            }\r\n            counter += countApptInGroup\r\n        }\r\n        return resultInd\r\n    }\r\n    _getDeltaWidth() {}\r\n    _getAppointmentMaxWidth() {\r\n        return this.cellWidth\r\n    }\r\n    _needVerifyItemSize() {\r\n        return false\r\n    }\r\n    _getAppointmentParts() {}\r\n    _reduceMultiWeekAppointment() {}\r\n    calculateAppointmentHeight() {\r\n        return 0\r\n    }\r\n    calculateAppointmentWidth() {\r\n        return 0\r\n    }\r\n    isAppointmentGreaterThan() {}\r\n    isAllDay() {\r\n        return false\r\n    }\r\n    _sortCondition() {}\r\n    _rowCondition() {}\r\n    _columnCondition() {}\r\n    _findIndexByKey() {}\r\n    _markAppointmentAsVirtual() {}\r\n    getDropDownAppointmentWidth() {}\r\n    getCollectorLeftOffset() {}\r\n    getCollectorTopOffset() {}\r\n    replaceWrongAppointmentEndDate(rawAppointment, startDate, endDate) {\r\n        var adapter = createAppointmentAdapter(rawAppointment, this.dataAccessors, this.timeZoneCalculator);\r\n        replaceWrongEndDate(adapter, startDate, endDate, this.cellDuration, this.dataAccessors)\r\n    }\r\n    calculateRows(appointments, agendaDuration, currentDate, needClearSettings) {\r\n        this._rows = [];\r\n        currentDate = dateUtils.trimTime(new Date(currentDate));\r\n        var groupedAppointments = this.groupAppointmentByResources(appointments);\r\n        each(groupedAppointments, function(_, currentAppointments) {\r\n            var groupResult = [];\r\n            var appts = {\r\n                indexes: [],\r\n                parts: []\r\n            };\r\n            if (!currentAppointments.length) {\r\n                this._rows.push([]);\r\n                return true\r\n            }\r\n            each(currentAppointments, function(index, appointment) {\r\n                var startDate = ExpressionUtils.getField(this.dataAccessors, \"startDate\", appointment);\r\n                var endDate = ExpressionUtils.getField(this.dataAccessors, \"endDate\", appointment);\r\n                this.replaceWrongAppointmentEndDate(appointment, startDate, endDate);\r\n                needClearSettings && delete appointment.settings;\r\n                var result = this.instance.getAppointmentsInstance()._processRecurrenceAppointment(appointment, index, false);\r\n                appts.parts = appts.parts.concat(result.parts);\r\n                appts.indexes = appts.indexes.concat(result.indexes)\r\n            }.bind(this));\r\n            this.instance.getAppointmentsInstance()._reduceRecurrenceAppointments(appts.indexes, currentAppointments);\r\n            currentAppointments.push(...appts.parts);\r\n            var appointmentCount = currentAppointments.length;\r\n            for (var i = 0; i < agendaDuration; i++) {\r\n                var day = new Date(currentDate);\r\n                day.setMilliseconds(day.getMilliseconds() + 864e5 * i);\r\n                if (void 0 === groupResult[i]) {\r\n                    groupResult[i] = 0\r\n                }\r\n                for (var j = 0; j < appointmentCount; j++) {\r\n                    var appointmentData = currentAppointments[j].settings || currentAppointments[j];\r\n                    var adapter = createAppointmentAdapter(currentAppointments[j], this.dataAccessors, this.timeZoneCalculator);\r\n                    var appointmentIsLong = getAppointmentTakesSeveralDays(adapter);\r\n                    var appointmentIsRecurrence = ExpressionUtils.getField(this.dataAccessors, \"recurrenceRule\", currentAppointments[j]);\r\n                    if (this.instance.fire(\"dayHasAppointment\", day, appointmentData, true) || !appointmentIsRecurrence && appointmentIsLong && this.instance.fire(\"dayHasAppointment\", day, currentAppointments[j], true)) {\r\n                        groupResult[i] += 1\r\n                    }\r\n                }\r\n            }\r\n            this._rows.push(groupResult)\r\n        }.bind(this));\r\n        return this._rows\r\n    }\r\n    _iterateRow(row, obj, index) {\r\n        for (var i = 0; i < row.length; i++) {\r\n            obj.counter = obj.counter + row[i];\r\n            if (obj.counter >= index) {\r\n                obj.indexInRow = i;\r\n                break\r\n            }\r\n        }\r\n    }\r\n    getDateByIndex(index, rows, startViewDate) {\r\n        var obj = {\r\n            counter: 0,\r\n            indexInRow: 0\r\n        };\r\n        index++;\r\n        for (var i = 0; i < rows.length; i++) {\r\n            this._iterateRow(rows[i], obj, index);\r\n            if (obj.indexInRow) {\r\n                break\r\n            }\r\n        }\r\n        return new Date(new Date(startViewDate).setDate(startViewDate.getDate() + obj.indexInRow))\r\n    }\r\n    getAppointmentDataCalculator() {\r\n        return function($appointment, originalStartDate) {\r\n            var apptIndex = $appointment.index();\r\n            var startViewDate = this.instance.getStartViewDate();\r\n            var calculatedStartDate = this.getDateByIndex(apptIndex, this._rows, startViewDate);\r\n            var wrappedOriginalStartDate = new Date(originalStartDate);\r\n            return {\r\n                startDate: new Date(calculatedStartDate.setHours(wrappedOriginalStartDate.getHours(), wrappedOriginalStartDate.getMinutes(), wrappedOriginalStartDate.getSeconds(), wrappedOriginalStartDate.getMilliseconds()))\r\n            }\r\n        }.bind(this)\r\n    }\r\n}\r\nexport default AgendaRenderingStrategy;\r\n"]},"metadata":{},"sourceType":"module"}