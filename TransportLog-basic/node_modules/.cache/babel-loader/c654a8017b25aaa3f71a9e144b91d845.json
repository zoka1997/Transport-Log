{"ast":null,"code":"/**\r\n * DevExtreme (esm/exporter/excel_creator.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport Class from \"../core/class\";\nimport { getWindow } from \"../core/utils/window\";\nimport { isDefined, isString, isDate, isBoolean, isObject, isFunction } from \"../core/utils/type\";\nimport { extend } from \"../core/utils/extend\";\nimport errors from \"../ui/widget/ui.errors\";\nimport { encodeHtml } from \"../core/utils/string\";\nimport JSZip from \"jszip\";\nimport { MIME_TYPES } from \"./file_saver\";\nimport excelFormatConverter from \"./excel_format_converter\";\nimport ExcelFile from \"./excel/excel.file\";\nimport { Deferred } from \"../core/utils/deferred\";\nvar XML_TAG = '<?xml version=\"1.0\" encoding=\"utf-8\"?>';\nvar GROUP_SHEET_PR_XML = '<sheetPr><outlinePr summaryBelow=\"0\"/></sheetPr>';\nvar SINGLE_SHEET_PR_XML = \"<sheetPr/>\";\nvar BASE_STYLE_XML2 = '<borders count=\"1\"><border><left style=\"thin\"><color rgb=\"FFD3D3D3\"/></left><right style=\"thin\"><color rgb=\"FFD3D3D3\"/></right><top style=\"thin\"><color rgb=\"FFD3D3D3\"/></top><bottom style=\"thin\"><color rgb=\"FFD3D3D3\"/></bottom></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs>';\nvar OPEN_XML_FORMAT_URL = \"http://schemas.openxmlformats.org\";\nvar RELATIONSHIP_PART_NAME = \"rels\";\nvar XL_FOLDER_NAME = \"xl\";\nvar WORKBOOK_FILE_NAME = \"workbook.xml\";\nvar CONTENTTYPES_FILE_NAME = \"[Content_Types].xml\";\nvar SHAREDSTRING_FILE_NAME = \"sharedStrings.xml\";\nvar STYLE_FILE_NAME = \"styles.xml\";\nvar WORKSHEETS_FOLDER = \"worksheets\";\nvar WORKSHEET_FILE_NAME = \"sheet1.xml\";\nvar WORKSHEET_HEADER_XML = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">';\nvar VALID_TYPES = {\n  boolean: \"b\",\n  date: \"d\",\n  number: \"n\",\n  string: \"s\"\n};\nvar EXCEL_START_TIME = Date.UTC(1899, 11, 30);\nvar DAYS_COUNT_BEFORE_29_FEB_1900 = 60;\nvar MAX_DIGIT_WIDTH_IN_PIXELS = 7;\nvar UNSUPPORTED_FORMAT_MAPPING = {\n  quarter: \"shortDate\",\n  quarterAndYear: \"shortDate\",\n  minute: \"longTime\",\n  millisecond: \"longTime\"\n};\nexport var ExcelCreator = Class.inherit({\n  _getXMLTag: function (tagName, attributes, content) {\n    var result = \"<\" + tagName;\n    var i;\n    var length = attributes.length;\n    var attr;\n\n    for (i = 0; i < length; i++) {\n      attr = attributes[i];\n\n      if (void 0 !== attr.value) {\n        result = result + \" \" + attr.name + '=\"' + attr.value + '\"';\n      }\n    }\n\n    return isDefined(content) ? result + \">\" + content + \"</\" + tagName + \">\" : result + \" />\";\n  },\n  _convertToExcelCellRef: function (zeroBasedRowIndex, zeroBasedCellIndex) {\n    var columnName = \"\";\n    var charCode;\n    var isCellIndexFound;\n\n    while (!isCellIndexFound) {\n      charCode = 65 + (zeroBasedCellIndex >= 26 ? zeroBasedCellIndex % 26 : Math.ceil(zeroBasedCellIndex));\n      columnName = String.fromCharCode(charCode) + columnName;\n\n      if (zeroBasedCellIndex >= 26) {\n        zeroBasedCellIndex = Math.floor(zeroBasedCellIndex / 26) - 1;\n      } else {\n        isCellIndexFound = true;\n      }\n    }\n\n    return columnName + (zeroBasedRowIndex + 1);\n  },\n  _convertToExcelCellRefAndTrackMaxIndex: function (rowIndex, cellIndex) {\n    if (this._maxRowIndex < Number(rowIndex)) {\n      this._maxRowIndex = Number(rowIndex);\n    }\n\n    if (this._maxColumnIndex < Number(cellIndex)) {\n      this._maxColumnIndex = Number(cellIndex);\n    }\n\n    return this._convertToExcelCellRef(rowIndex, cellIndex);\n  },\n  _getDataType: function (dataType) {\n    return VALID_TYPES[dataType] || VALID_TYPES.string;\n  },\n  _tryGetExcelCellDataType: function (object) {\n    if (isDefined(object)) {\n      if (\"number\" === typeof object) {\n        if (isFinite(object)) {\n          return VALID_TYPES.number;\n        } else {\n          return VALID_TYPES.string;\n        }\n      } else if (isString(object)) {\n        return VALID_TYPES.string;\n      } else if (isDate(object)) {\n        return VALID_TYPES.number;\n      } else if (isBoolean(object)) {\n        return VALID_TYPES.boolean;\n      }\n    }\n  },\n  _formatObjectConverter: function (format, dataType) {\n    var result = {\n      format: format,\n      precision: format && format.precision,\n      dataType: dataType\n    };\n\n    if (isObject(format)) {\n      return extend(result, format, {\n        format: format.formatter || format.type,\n        currency: format.currency\n      });\n    }\n\n    return result;\n  },\n  _tryConvertToExcelNumberFormat: function (format, dataType) {\n    var newFormat = this._formatObjectConverter(format, dataType);\n\n    format = newFormat.format;\n    var currency = newFormat.currency;\n    dataType = newFormat.dataType;\n\n    if (isDefined(format) && \"date\" === dataType) {\n      format = UNSUPPORTED_FORMAT_MAPPING[format && format.type || format] || format;\n    }\n\n    return excelFormatConverter.convertFormat(format, newFormat.precision, dataType, currency);\n  },\n  _appendString: function (value) {\n    if (isDefined(value)) {\n      value = String(value);\n\n      if (value.length) {\n        value = encodeHtml(value);\n\n        if (void 0 === this._stringHash[value]) {\n          this._stringHash[value] = this._stringArray.length;\n\n          this._stringArray.push(value);\n        }\n\n        return this._stringHash[value];\n      }\n    }\n  },\n  _tryGetExcelDateValue: function (date) {\n    var days;\n    var totalTime;\n\n    if (isDate(date)) {\n      days = Math.floor((Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - EXCEL_START_TIME) / 864e5);\n\n      if (days < DAYS_COUNT_BEFORE_29_FEB_1900) {\n        days--;\n      }\n\n      totalTime = (3600 * date.getHours() + 60 * date.getMinutes() + date.getSeconds()) / 86400;\n      return days + totalTime;\n    }\n  },\n  _prepareValue: function (rowIndex, cellIndex) {\n    var dataProvider = this._dataProvider;\n    var {\n      cellSourceData: cellSourceData\n    } = dataProvider.getCellData(rowIndex, cellIndex) || {};\n    var {\n      value: value\n    } = dataProvider.getCellData(rowIndex, cellIndex) || {};\n    var sourceValue;\n\n    var type = this._getDataType(dataProvider.getCellType(rowIndex, cellIndex));\n\n    if (type === VALID_TYPES.date && !isDate(value)) {\n      type = VALID_TYPES.string;\n    }\n\n    switch (type) {\n      case VALID_TYPES.string:\n        sourceValue = value;\n        value = this._appendString(value);\n        break;\n\n      case VALID_TYPES.date:\n        sourceValue = value;\n        value = this._tryGetExcelDateValue(value);\n        type = VALID_TYPES.number;\n    }\n\n    return {\n      value: value,\n      type: type,\n      sourceValue: sourceValue,\n      cellSourceData: cellSourceData\n    };\n  },\n  _callCustomizeExcelCell: function (_ref) {\n    var {\n      dataProvider: dataProvider,\n      value: value,\n      style: style,\n      sourceData: sourceData\n    } = _ref;\n    var styleCopy = ExcelFile.copyCellFormat(style);\n    var args = {\n      value: value,\n      numberFormat: styleCopy.numberFormat,\n      clearStyle: function () {\n        this.horizontalAlignment = null;\n        this.verticalAlignment = null;\n        this.wrapTextEnabled = null;\n        this.font = null;\n        this.numberFormat = null;\n      }\n    };\n\n    if (isDefined(styleCopy)) {\n      if (isDefined(styleCopy.alignment)) {\n        args.horizontalAlignment = styleCopy.alignment.horizontal;\n        args.verticalAlignment = styleCopy.alignment.vertical;\n        args.wrapTextEnabled = styleCopy.alignment.wrapText;\n      }\n\n      args.backgroundColor = styleCopy.backgroundColor;\n      args.fillPatternType = styleCopy.fillPatternType;\n      args.fillPatternColor = styleCopy.fillPatternColor;\n      args.font = styleCopy.font;\n    }\n\n    dataProvider.customizeExcelCell(args, sourceData);\n    var newStyle = styleCopy || {};\n    newStyle.font = args.font;\n    newStyle.alignment = newStyle.alignment || {};\n    newStyle.alignment.horizontal = args.horizontalAlignment;\n    newStyle.alignment.vertical = args.verticalAlignment;\n    newStyle.alignment.wrapText = args.wrapTextEnabled;\n    newStyle.backgroundColor = args.backgroundColor;\n    newStyle.fillPatternType = args.fillPatternType;\n    newStyle.fillPatternColor = args.fillPatternColor;\n    newStyle.numberFormat = args.numberFormat;\n    return {\n      value: args.value,\n      style: newStyle\n    };\n  },\n  _getDataArray: function () {\n    var rowIndex;\n    var cellIndex;\n    var cellsArray;\n    var cellData;\n    var result = [];\n    var dataProvider = this._dataProvider;\n    var rowsLength = dataProvider.getRowsCount();\n    var columns = dataProvider.getColumns();\n    var cellsLength;\n\n    for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\n      cellsArray = [];\n      cellsLength = columns.length;\n\n      for (cellIndex = 0; cellIndex !== cellsLength; cellIndex++) {\n        cellData = this._prepareValue(rowIndex, cellIndex);\n        var styleArrayIndex = dataProvider.getStyleId(rowIndex, cellIndex);\n        var cellStyleId = this._styleArrayIndexToCellStyleIdMap[styleArrayIndex];\n\n        if (dataProvider.hasCustomizeExcelCell && dataProvider.hasCustomizeExcelCell()) {\n          var value = cellData.sourceValue || cellData.value;\n\n          var modifiedExcelCell = this._callCustomizeExcelCell({\n            dataProvider: dataProvider,\n            value: value,\n            style: this._styleArray[styleArrayIndex],\n            sourceData: cellData.cellSourceData\n          });\n\n          if (modifiedExcelCell.value !== value) {\n            if (typeof modifiedExcelCell.value !== typeof value || \"number\" === typeof modifiedExcelCell.value && !isFinite(modifiedExcelCell.value)) {\n              var cellDataType = this._tryGetExcelCellDataType(modifiedExcelCell.value);\n\n              if (isDefined(cellDataType)) {\n                cellData.type = cellDataType;\n              }\n            }\n\n            switch (cellData.type) {\n              case VALID_TYPES.string:\n                cellData.value = this._appendString(modifiedExcelCell.value);\n                break;\n\n              case VALID_TYPES.date:\n                cellData.value = modifiedExcelCell.value;\n                break;\n\n              case VALID_TYPES.number:\n                var newValue = modifiedExcelCell.value;\n\n                var excelDateValue = this._tryGetExcelDateValue(newValue);\n\n                if (isDefined(excelDateValue)) {\n                  newValue = excelDateValue;\n                }\n\n                cellData.value = newValue;\n                break;\n\n              default:\n                cellData.value = modifiedExcelCell.value;\n            }\n          }\n\n          cellStyleId = this._excelFile.registerCellFormat(modifiedExcelCell.style);\n        }\n\n        cellsArray.push({\n          style: cellStyleId,\n          value: cellData.value,\n          type: cellData.type\n        });\n      }\n\n      if (!this._needSheetPr && dataProvider.getGroupLevel(rowIndex) > 0) {\n        this._needSheetPr = true;\n      }\n\n      result.push(cellsArray);\n    }\n\n    return result;\n  },\n  _calculateWidth: function (pixelsWidth) {\n    pixelsWidth = parseInt(pixelsWidth, 10);\n\n    if (!pixelsWidth || pixelsWidth < 5) {\n      pixelsWidth = 100;\n    }\n\n    return Math.min(255, Math.floor((pixelsWidth - 5) / MAX_DIGIT_WIDTH_IN_PIXELS * 100 + .5) / 100);\n  },\n  _prepareStyleData: function () {\n    var that = this;\n\n    var styles = that._dataProvider.getStyles();\n\n    that._dataProvider.getColumns().forEach(function (column) {\n      that._colsArray.push(that._calculateWidth(column.width));\n    });\n\n    var fonts = [{\n      size: 11,\n      color: {\n        theme: 1\n      },\n      name: \"Calibri\",\n      family: 2,\n      scheme: \"minor\",\n      bold: false\n    }, {\n      size: 11,\n      color: {\n        theme: 1\n      },\n      name: \"Calibri\",\n      family: 2,\n      scheme: \"minor\",\n      bold: true\n    }];\n\n    this._excelFile.registerFont(fonts[0]);\n\n    this._excelFile.registerFont(fonts[1]);\n\n    styles.forEach(function (style) {\n      var numberFormat = that._tryConvertToExcelNumberFormat(style.format, style.dataType);\n\n      if (!isDefined(numberFormat)) {\n        numberFormat = 0;\n      }\n\n      that._styleArray.push({\n        font: fonts[Number(!!style.bold)],\n        numberFormat: numberFormat,\n        alignment: {\n          vertical: \"top\",\n          wrapText: !!style.wrapText,\n          horizontal: style.alignment || \"left\"\n        }\n      });\n    });\n    that._styleArrayIndexToCellStyleIdMap = that._styleArray.map(item => this._excelFile.registerCellFormat(item));\n  },\n  _prepareCellData: function () {\n    this._cellsArray = this._getDataArray();\n  },\n  _createXMLRelationships: function (xmlRelationships) {\n    return this._getXMLTag(\"Relationships\", [{\n      name: \"xmlns\",\n      value: OPEN_XML_FORMAT_URL + \"/package/2006/relationships\"\n    }], xmlRelationships);\n  },\n  _createXMLRelationship: function (id, type, target) {\n    return this._getXMLTag(\"Relationship\", [{\n      name: \"Id\",\n      value: \"rId\" + id\n    }, {\n      name: \"Type\",\n      value: OPEN_XML_FORMAT_URL + \"/officeDocument/2006/relationships/\" + type\n    }, {\n      name: \"Target\",\n      value: target\n    }]);\n  },\n  _getWorkbookContent: function () {\n    return XML_TAG + this._getXMLTag(\"workbook\", [{\n      name: \"xmlns:r\",\n      value: OPEN_XML_FORMAT_URL + \"/officeDocument/2006/relationships\"\n    }, {\n      name: \"xmlns\",\n      value: OPEN_XML_FORMAT_URL + \"/spreadsheetml/2006/main\"\n    }], '<bookViews><workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"0\" windowHeight=\"0\"/></bookViews><sheets><sheet name=\"Sheet\" sheetId=\"1\" r:id=\"rId1\" /></sheets><definedNames><definedName name=\"_xlnm.Print_Titles\" localSheetId=\"0\">Sheet!$1:$1</definedName><definedName name=\"_xlnm._FilterDatabase\" hidden=\"0\" localSheetId=\"0\">Sheet!$A$1:$F$6332</definedName></definedNames>');\n  },\n  _getContentTypesContent: function () {\n    return XML_TAG + '<Types xmlns=\"' + OPEN_XML_FORMAT_URL + '/package/2006/content-types\"><Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" /><Default Extension=\"xml\" ContentType=\"application/xml\" /><Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\" /><Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\" /><Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\" /><Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\" /></Types>';\n  },\n  _generateStylesXML: function () {\n    var folder = this._zip.folder(XL_FOLDER_NAME);\n\n    var XML = \"\";\n    XML += this._excelFile.generateNumberFormatsXml();\n    XML += this._excelFile.generateFontsXml();\n    XML += this._excelFile.generateFillsXml();\n    XML += BASE_STYLE_XML2;\n    XML += this._excelFile.generateCellFormatsXml();\n    XML += this._getXMLTag(\"cellStyles\", [{\n      name: \"count\",\n      value: 1\n    }], this._getXMLTag(\"cellStyle\", [{\n      name: \"name\",\n      value: \"Normal\"\n    }, {\n      name: \"xfId\",\n      value: 0\n    }, {\n      name: \"builtinId\",\n      value: 0\n    }]));\n    XML = XML_TAG + this._getXMLTag(\"styleSheet\", [{\n      name: \"xmlns\",\n      value: OPEN_XML_FORMAT_URL + \"/spreadsheetml/2006/main\"\n    }], XML);\n    folder.file(STYLE_FILE_NAME, XML);\n    this._styleArray = [];\n  },\n  _generateStringsXML: function () {\n    var folder = this._zip.folder(XL_FOLDER_NAME);\n\n    var stringIndex;\n    var stringsLength = this._stringArray.length;\n    var sharedStringXml = XML_TAG;\n\n    for (stringIndex = 0; stringIndex < stringsLength; stringIndex++) {\n      this._stringArray[stringIndex] = this._getXMLTag(\"si\", [], this._getXMLTag(\"t\", [], this._stringArray[stringIndex]));\n    }\n\n    sharedStringXml += this._getXMLTag(\"sst\", [{\n      name: \"xmlns\",\n      value: OPEN_XML_FORMAT_URL + \"/spreadsheetml/2006/main\"\n    }, {\n      name: \"count\",\n      value: this._stringArray.length\n    }, {\n      name: \"uniqueCount\",\n      value: this._stringArray.length\n    }], this._stringArray.join(\"\"));\n    folder.file(SHAREDSTRING_FILE_NAME, sharedStringXml);\n    this._stringArray = [];\n  },\n  _getPaneXML: function () {\n    var attributes = [{\n      name: \"activePane\",\n      value: \"bottomLeft\"\n    }, {\n      name: \"state\",\n      value: \"frozen\"\n    }];\n\n    var frozenArea = this._dataProvider.getFrozenArea();\n\n    if (!(frozenArea.x || frozenArea.y)) {\n      return \"\";\n    }\n\n    if (frozenArea.x) {\n      attributes.push({\n        name: \"xSplit\",\n        value: frozenArea.x\n      });\n    }\n\n    if (frozenArea.y) {\n      attributes.push({\n        name: \"ySplit\",\n        value: frozenArea.y\n      });\n    }\n\n    attributes.push({\n      name: \"topLeftCell\",\n      value: this._convertToExcelCellRefAndTrackMaxIndex(frozenArea.y, frozenArea.x)\n    });\n    return this._getXMLTag(\"pane\", attributes);\n  },\n  _getAutoFilterXML: function (maxCellIndex) {\n    if (this._options.autoFilterEnabled) {\n      return '<autoFilter ref=\"A' + this._dataProvider.getHeaderRowCount() + \":\" + maxCellIndex + '\" />';\n    }\n\n    return \"\";\n  },\n  _getIgnoredErrorsXML: function (maxCellIndex) {\n    if (this._options.ignoreErrors) {\n      return '<ignoredErrors><ignoredError sqref=\"A1:' + maxCellIndex + '\" numberStoredAsText=\"1\" /></ignoredErrors>';\n    }\n\n    return \"\";\n  },\n  _generateWorksheetXML: function () {\n    var colIndex;\n    var rowIndex;\n    var cellData;\n    var xmlCells;\n    var xmlRows = [];\n    var rowsLength = this._cellsArray.length;\n    var cellsLength;\n    var colsLength = this._colsArray.length;\n    var rSpans = \"1:\" + colsLength;\n    var headerRowCount = this._dataProvider.getHeaderRowCount ? this._dataProvider.getHeaderRowCount() : 1;\n    var xmlResult = [WORKSHEET_HEADER_XML];\n    xmlResult.push(this._needSheetPr ? GROUP_SHEET_PR_XML : SINGLE_SHEET_PR_XML);\n    xmlResult.push('<dimension ref=\"A1:C1\"/>');\n    xmlResult.push(\"<sheetViews><sheetView \");\n    xmlResult.push(this._rtlEnabled ? 'rightToLeft=\"1\" ' : \"\");\n    xmlResult.push('tabSelected=\"1\" workbookViewId=\"0\">');\n    xmlResult.push(this._getPaneXML());\n    xmlResult.push(\"</sheetView></sheetViews>\");\n    xmlResult.push('<sheetFormatPr defaultRowHeight=\"15\"');\n    xmlResult.push(' outlineLevelRow=\"' + (this._dataProvider.getRowsCount() > 0 ? this._dataProvider.getGroupLevel(0) : 0) + '\"');\n    xmlResult.push(' x14ac:dyDescent=\"0.25\"/>');\n\n    for (colIndex = 0; colIndex < colsLength; colIndex++) {\n      this._colsArray[colIndex] = this._getXMLTag(\"col\", [{\n        name: \"width\",\n        value: this._colsArray[colIndex]\n      }, {\n        name: \"min\",\n        value: Number(colIndex) + 1\n      }, {\n        name: \"max\",\n        value: Number(colIndex) + 1\n      }, {\n        name: \"customWidth\",\n        value: 1\n      }]);\n    }\n\n    xmlResult.push(this._getXMLTag(\"cols\", [], this._colsArray.join(\"\")) + \"<sheetData>\");\n\n    for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\n      xmlCells = [];\n      cellsLength = this._cellsArray[rowIndex].length;\n\n      for (colIndex = 0; colIndex < cellsLength; colIndex++) {\n        rowIndex = Number(rowIndex);\n        cellData = this._cellsArray[rowIndex][colIndex];\n        xmlCells.push(this._getXMLTag(\"c\", [{\n          name: \"r\",\n          value: this._convertToExcelCellRefAndTrackMaxIndex(rowIndex, colIndex)\n        }, {\n          name: \"s\",\n          value: cellData.style\n        }, {\n          name: \"t\",\n          value: cellData.type\n        }], isDefined(cellData.value) ? this._getXMLTag(\"v\", [], cellData.value) : null));\n      }\n\n      xmlRows.push(this._getXMLTag(\"row\", [{\n        name: \"r\",\n        value: Number(rowIndex) + 1\n      }, {\n        name: \"spans\",\n        value: rSpans\n      }, {\n        name: \"outlineLevel\",\n        value: rowIndex >= headerRowCount ? this._dataProvider.getGroupLevel(rowIndex) : 0\n      }, {\n        name: \"x14ac:dyDescent\",\n        value: \"0.25\"\n      }], xmlCells.join(\"\")));\n      this._cellsArray[rowIndex] = null;\n\n      if (xmlRows.length > 1e4) {\n        xmlResult.push(xmlRows.join(\"\"));\n        xmlRows = [];\n      }\n    }\n\n    xmlResult.push(xmlRows.join(\"\"));\n    xmlRows = [];\n\n    var rightBottomCellRef = this._convertToExcelCellRef(this._maxRowIndex, this._maxColumnIndex);\n\n    xmlResult.push(\"</sheetData>\" + this._getAutoFilterXML(rightBottomCellRef) + this._generateMergingXML() + this._getIgnoredErrorsXML(rightBottomCellRef) + \"</worksheet>\");\n\n    this._zip.folder(XL_FOLDER_NAME).folder(WORKSHEETS_FOLDER).file(WORKSHEET_FILE_NAME, xmlResult.join(\"\"));\n\n    this._colsArray = [];\n    this._cellsArray = [];\n    xmlResult = [];\n  },\n  _generateMergingXML: function () {\n    var k;\n    var l;\n    var cellIndex;\n    var rowIndex;\n    var rowsLength = isDefined(this._dataProvider.getHeaderRowCount) ? this._dataProvider.getHeaderRowCount() : this._dataProvider.getRowsCount();\n\n    var columnsLength = this._dataProvider.getColumns().length;\n\n    var usedArea = [];\n    var mergeArray = [];\n    var mergeIndex;\n    var mergeXML = \"\";\n\n    for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\n      for (cellIndex = 0; cellIndex !== columnsLength; cellIndex++) {\n        if (!isDefined(usedArea[rowIndex]) || !isDefined(usedArea[rowIndex][cellIndex])) {\n          var cellMerge = this._dataProvider.getCellMerging(rowIndex, cellIndex);\n\n          if (cellMerge.colspan || cellMerge.rowspan) {\n            mergeArray.push({\n              start: this._convertToExcelCellRefAndTrackMaxIndex(rowIndex, cellIndex),\n              end: this._convertToExcelCellRefAndTrackMaxIndex(rowIndex + (cellMerge.rowspan || 0), cellIndex + (cellMerge.colspan || 0))\n            });\n\n            for (k = rowIndex; k <= rowIndex + cellMerge.rowspan || 0; k++) {\n              for (l = cellIndex; l <= cellIndex + cellMerge.colspan || 0; l++) {\n                if (!isDefined(usedArea[k])) {\n                  usedArea[k] = [];\n                }\n\n                usedArea[k][l] = true;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    var mergeArrayLength = mergeArray.length;\n\n    for (mergeIndex = 0; mergeIndex < mergeArrayLength; mergeIndex++) {\n      mergeXML += this._getXMLTag(\"mergeCell\", [{\n        name: \"ref\",\n        value: mergeArray[mergeIndex].start + \":\" + mergeArray[mergeIndex].end\n      }]);\n    }\n\n    return mergeXML.length ? this._getXMLTag(\"mergeCells\", [{\n      name: \"count\",\n      value: mergeArrayLength\n    }], mergeXML) : \"\";\n  },\n  _generateCommonXML: function () {\n    var relsFileContent = XML_TAG + this._createXMLRelationships(this._createXMLRelationship(1, \"officeDocument\", \"xl/\" + WORKBOOK_FILE_NAME));\n\n    var folder = this._zip.folder(XL_FOLDER_NAME);\n\n    var relsXML = XML_TAG;\n\n    this._zip.folder(\"_\" + RELATIONSHIP_PART_NAME).file(\".\" + RELATIONSHIP_PART_NAME, relsFileContent);\n\n    var xmlRelationships = this._createXMLRelationship(1, \"worksheet\", \"worksheets/\" + WORKSHEET_FILE_NAME) + this._createXMLRelationship(2, \"styles\", STYLE_FILE_NAME) + this._createXMLRelationship(3, \"sharedStrings\", SHAREDSTRING_FILE_NAME);\n\n    relsXML += this._createXMLRelationships(xmlRelationships);\n    folder.folder(\"_\" + RELATIONSHIP_PART_NAME).file(WORKBOOK_FILE_NAME + \".rels\", relsXML);\n    folder.file(WORKBOOK_FILE_NAME, this._getWorkbookContent());\n\n    this._zip.file(CONTENTTYPES_FILE_NAME, this._getContentTypesContent());\n  },\n  _generateContent: function () {\n    this._prepareStyleData();\n\n    this._prepareCellData();\n\n    this._generateWorkXML();\n\n    this._generateCommonXML();\n  },\n  _generateWorkXML: function () {\n    this._generateStylesXML();\n\n    this._generateStringsXML();\n\n    this._generateWorksheetXML();\n  },\n  ctor: function (dataProvider, options) {\n    this._rtlEnabled = options && !!options.rtlEnabled;\n    this._options = options;\n    this._maxRowIndex = 0;\n    this._maxColumnIndex = 0;\n    this._stringArray = [];\n    this._stringHash = {};\n    this._styleArray = [];\n    this._colsArray = [];\n    this._cellsArray = [];\n    this._needSheetPr = false;\n    this._dataProvider = dataProvider;\n    this._excelFile = new ExcelFile();\n\n    if (isDefined(ExcelCreator.JSZip)) {\n      this._zip = new ExcelCreator.JSZip();\n    } else {\n      this._zip = null;\n    }\n  },\n  _checkZipState: function () {\n    if (!this._zip) {\n      throw errors.Error(\"E1041\", \"JSZip\");\n    }\n  },\n  ready: function () {\n    return this._dataProvider.ready();\n  },\n  getData: function (isBlob) {\n    var options = {\n      type: isBlob ? \"blob\" : \"base64\",\n      compression: \"DEFLATE\",\n      mimeType: MIME_TYPES.EXCEL\n    };\n    var deferred = new Deferred();\n\n    this._checkZipState();\n\n    this._generateContent();\n\n    if (this._zip.generateAsync) {\n      this._zip.generateAsync(options).then(deferred.resolve);\n    } else {\n      deferred.resolve(this._zip.generate(options));\n    }\n\n    return deferred;\n  }\n});\nExcelCreator.JSZip = JSZip;\nexport function getData(data, options) {\n  var excelCreator = new ExcelCreator(data, options);\n\n  excelCreator._checkZipState();\n\n  return excelCreator.ready().then(() => excelCreator.getData(isFunction(getWindow().Blob)));\n}","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/exporter/excel_creator.js"],"names":["Class","getWindow","isDefined","isString","isDate","isBoolean","isObject","isFunction","extend","errors","encodeHtml","JSZip","MIME_TYPES","excelFormatConverter","ExcelFile","Deferred","XML_TAG","GROUP_SHEET_PR_XML","SINGLE_SHEET_PR_XML","BASE_STYLE_XML2","OPEN_XML_FORMAT_URL","RELATIONSHIP_PART_NAME","XL_FOLDER_NAME","WORKBOOK_FILE_NAME","CONTENTTYPES_FILE_NAME","SHAREDSTRING_FILE_NAME","STYLE_FILE_NAME","WORKSHEETS_FOLDER","WORKSHEET_FILE_NAME","WORKSHEET_HEADER_XML","VALID_TYPES","boolean","date","number","string","EXCEL_START_TIME","Date","UTC","DAYS_COUNT_BEFORE_29_FEB_1900","MAX_DIGIT_WIDTH_IN_PIXELS","UNSUPPORTED_FORMAT_MAPPING","quarter","quarterAndYear","minute","millisecond","ExcelCreator","inherit","_getXMLTag","tagName","attributes","content","result","i","length","attr","value","name","_convertToExcelCellRef","zeroBasedRowIndex","zeroBasedCellIndex","columnName","charCode","isCellIndexFound","Math","ceil","String","fromCharCode","floor","_convertToExcelCellRefAndTrackMaxIndex","rowIndex","cellIndex","_maxRowIndex","Number","_maxColumnIndex","_getDataType","dataType","_tryGetExcelCellDataType","object","isFinite","_formatObjectConverter","format","precision","formatter","type","currency","_tryConvertToExcelNumberFormat","newFormat","convertFormat","_appendString","_stringHash","_stringArray","push","_tryGetExcelDateValue","days","totalTime","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","_prepareValue","dataProvider","_dataProvider","cellSourceData","getCellData","sourceValue","getCellType","_callCustomizeExcelCell","_ref","style","sourceData","styleCopy","copyCellFormat","args","numberFormat","clearStyle","horizontalAlignment","verticalAlignment","wrapTextEnabled","font","alignment","horizontal","vertical","wrapText","backgroundColor","fillPatternType","fillPatternColor","customizeExcelCell","newStyle","_getDataArray","cellsArray","cellData","rowsLength","getRowsCount","columns","getColumns","cellsLength","styleArrayIndex","getStyleId","cellStyleId","_styleArrayIndexToCellStyleIdMap","hasCustomizeExcelCell","modifiedExcelCell","_styleArray","cellDataType","newValue","excelDateValue","_excelFile","registerCellFormat","_needSheetPr","getGroupLevel","_calculateWidth","pixelsWidth","parseInt","min","_prepareStyleData","that","styles","getStyles","forEach","column","_colsArray","width","fonts","size","color","theme","family","scheme","bold","registerFont","map","item","_prepareCellData","_cellsArray","_createXMLRelationships","xmlRelationships","_createXMLRelationship","id","target","_getWorkbookContent","_getContentTypesContent","_generateStylesXML","folder","_zip","XML","generateNumberFormatsXml","generateFontsXml","generateFillsXml","generateCellFormatsXml","file","_generateStringsXML","stringIndex","stringsLength","sharedStringXml","join","_getPaneXML","frozenArea","getFrozenArea","x","y","_getAutoFilterXML","maxCellIndex","_options","autoFilterEnabled","getHeaderRowCount","_getIgnoredErrorsXML","ignoreErrors","_generateWorksheetXML","colIndex","xmlCells","xmlRows","colsLength","rSpans","headerRowCount","xmlResult","_rtlEnabled","rightBottomCellRef","_generateMergingXML","k","l","columnsLength","usedArea","mergeArray","mergeIndex","mergeXML","cellMerge","getCellMerging","colspan","rowspan","start","end","mergeArrayLength","_generateCommonXML","relsFileContent","relsXML","_generateContent","_generateWorkXML","ctor","options","rtlEnabled","_checkZipState","Error","ready","getData","isBlob","compression","mimeType","EXCEL","deferred","generateAsync","then","resolve","generate","data","excelCreator","Blob"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/exporter/excel_creator.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport Class from \"../core/class\";\r\nimport {\r\n    getWindow\r\n} from \"../core/utils/window\";\r\nimport {\r\n    isDefined,\r\n    isString,\r\n    isDate,\r\n    isBoolean,\r\n    isObject,\r\n    isFunction\r\n} from \"../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../core/utils/extend\";\r\nimport errors from \"../ui/widget/ui.errors\";\r\nimport {\r\n    encodeHtml\r\n} from \"../core/utils/string\";\r\nimport JSZip from \"jszip\";\r\nimport {\r\n    MIME_TYPES\r\n} from \"./file_saver\";\r\nimport excelFormatConverter from \"./excel_format_converter\";\r\nimport ExcelFile from \"./excel/excel.file\";\r\nimport {\r\n    Deferred\r\n} from \"../core/utils/deferred\";\r\nvar XML_TAG = '<?xml version=\"1.0\" encoding=\"utf-8\"?>';\r\nvar GROUP_SHEET_PR_XML = '<sheetPr><outlinePr summaryBelow=\"0\"/></sheetPr>';\r\nvar SINGLE_SHEET_PR_XML = \"<sheetPr/>\";\r\nvar BASE_STYLE_XML2 = '<borders count=\"1\"><border><left style=\"thin\"><color rgb=\"FFD3D3D3\"/></left><right style=\"thin\"><color rgb=\"FFD3D3D3\"/></right><top style=\"thin\"><color rgb=\"FFD3D3D3\"/></top><bottom style=\"thin\"><color rgb=\"FFD3D3D3\"/></bottom></border></borders><cellStyleXfs count=\"1\"><xf numFmtId=\"0\" fontId=\"0\" fillId=\"0\" borderId=\"0\"/></cellStyleXfs>';\r\nvar OPEN_XML_FORMAT_URL = \"http://schemas.openxmlformats.org\";\r\nvar RELATIONSHIP_PART_NAME = \"rels\";\r\nvar XL_FOLDER_NAME = \"xl\";\r\nvar WORKBOOK_FILE_NAME = \"workbook.xml\";\r\nvar CONTENTTYPES_FILE_NAME = \"[Content_Types].xml\";\r\nvar SHAREDSTRING_FILE_NAME = \"sharedStrings.xml\";\r\nvar STYLE_FILE_NAME = \"styles.xml\";\r\nvar WORKSHEETS_FOLDER = \"worksheets\";\r\nvar WORKSHEET_FILE_NAME = \"sheet1.xml\";\r\nvar WORKSHEET_HEADER_XML = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?><worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">';\r\nvar VALID_TYPES = {\r\n    boolean: \"b\",\r\n    date: \"d\",\r\n    number: \"n\",\r\n    string: \"s\"\r\n};\r\nvar EXCEL_START_TIME = Date.UTC(1899, 11, 30);\r\nvar DAYS_COUNT_BEFORE_29_FEB_1900 = 60;\r\nvar MAX_DIGIT_WIDTH_IN_PIXELS = 7;\r\nvar UNSUPPORTED_FORMAT_MAPPING = {\r\n    quarter: \"shortDate\",\r\n    quarterAndYear: \"shortDate\",\r\n    minute: \"longTime\",\r\n    millisecond: \"longTime\"\r\n};\r\nexport var ExcelCreator = Class.inherit({\r\n    _getXMLTag: function(tagName, attributes, content) {\r\n        var result = \"<\" + tagName;\r\n        var i;\r\n        var length = attributes.length;\r\n        var attr;\r\n        for (i = 0; i < length; i++) {\r\n            attr = attributes[i];\r\n            if (void 0 !== attr.value) {\r\n                result = result + \" \" + attr.name + '=\"' + attr.value + '\"'\r\n            }\r\n        }\r\n        return isDefined(content) ? result + \">\" + content + \"</\" + tagName + \">\" : result + \" />\"\r\n    },\r\n    _convertToExcelCellRef: function(zeroBasedRowIndex, zeroBasedCellIndex) {\r\n        var columnName = \"\";\r\n        var charCode;\r\n        var isCellIndexFound;\r\n        while (!isCellIndexFound) {\r\n            charCode = 65 + (zeroBasedCellIndex >= 26 ? zeroBasedCellIndex % 26 : Math.ceil(zeroBasedCellIndex));\r\n            columnName = String.fromCharCode(charCode) + columnName;\r\n            if (zeroBasedCellIndex >= 26) {\r\n                zeroBasedCellIndex = Math.floor(zeroBasedCellIndex / 26) - 1\r\n            } else {\r\n                isCellIndexFound = true\r\n            }\r\n        }\r\n        return columnName + (zeroBasedRowIndex + 1)\r\n    },\r\n    _convertToExcelCellRefAndTrackMaxIndex: function(rowIndex, cellIndex) {\r\n        if (this._maxRowIndex < Number(rowIndex)) {\r\n            this._maxRowIndex = Number(rowIndex)\r\n        }\r\n        if (this._maxColumnIndex < Number(cellIndex)) {\r\n            this._maxColumnIndex = Number(cellIndex)\r\n        }\r\n        return this._convertToExcelCellRef(rowIndex, cellIndex)\r\n    },\r\n    _getDataType: function(dataType) {\r\n        return VALID_TYPES[dataType] || VALID_TYPES.string\r\n    },\r\n    _tryGetExcelCellDataType: function(object) {\r\n        if (isDefined(object)) {\r\n            if (\"number\" === typeof object) {\r\n                if (isFinite(object)) {\r\n                    return VALID_TYPES.number\r\n                } else {\r\n                    return VALID_TYPES.string\r\n                }\r\n            } else if (isString(object)) {\r\n                return VALID_TYPES.string\r\n            } else if (isDate(object)) {\r\n                return VALID_TYPES.number\r\n            } else if (isBoolean(object)) {\r\n                return VALID_TYPES.boolean\r\n            }\r\n        }\r\n    },\r\n    _formatObjectConverter: function(format, dataType) {\r\n        var result = {\r\n            format: format,\r\n            precision: format && format.precision,\r\n            dataType: dataType\r\n        };\r\n        if (isObject(format)) {\r\n            return extend(result, format, {\r\n                format: format.formatter || format.type,\r\n                currency: format.currency\r\n            })\r\n        }\r\n        return result\r\n    },\r\n    _tryConvertToExcelNumberFormat: function(format, dataType) {\r\n        var newFormat = this._formatObjectConverter(format, dataType);\r\n        format = newFormat.format;\r\n        var currency = newFormat.currency;\r\n        dataType = newFormat.dataType;\r\n        if (isDefined(format) && \"date\" === dataType) {\r\n            format = UNSUPPORTED_FORMAT_MAPPING[format && format.type || format] || format\r\n        }\r\n        return excelFormatConverter.convertFormat(format, newFormat.precision, dataType, currency)\r\n    },\r\n    _appendString: function(value) {\r\n        if (isDefined(value)) {\r\n            value = String(value);\r\n            if (value.length) {\r\n                value = encodeHtml(value);\r\n                if (void 0 === this._stringHash[value]) {\r\n                    this._stringHash[value] = this._stringArray.length;\r\n                    this._stringArray.push(value)\r\n                }\r\n                return this._stringHash[value]\r\n            }\r\n        }\r\n    },\r\n    _tryGetExcelDateValue: function(date) {\r\n        var days;\r\n        var totalTime;\r\n        if (isDate(date)) {\r\n            days = Math.floor((Date.UTC(date.getFullYear(), date.getMonth(), date.getDate()) - EXCEL_START_TIME) / 864e5);\r\n            if (days < DAYS_COUNT_BEFORE_29_FEB_1900) {\r\n                days--\r\n            }\r\n            totalTime = (3600 * date.getHours() + 60 * date.getMinutes() + date.getSeconds()) / 86400;\r\n            return days + totalTime\r\n        }\r\n    },\r\n    _prepareValue: function(rowIndex, cellIndex) {\r\n        var dataProvider = this._dataProvider;\r\n        var {\r\n            cellSourceData: cellSourceData\r\n        } = dataProvider.getCellData(rowIndex, cellIndex) || {};\r\n        var {\r\n            value: value\r\n        } = dataProvider.getCellData(rowIndex, cellIndex) || {};\r\n        var sourceValue;\r\n        var type = this._getDataType(dataProvider.getCellType(rowIndex, cellIndex));\r\n        if (type === VALID_TYPES.date && !isDate(value)) {\r\n            type = VALID_TYPES.string\r\n        }\r\n        switch (type) {\r\n            case VALID_TYPES.string:\r\n                sourceValue = value;\r\n                value = this._appendString(value);\r\n                break;\r\n            case VALID_TYPES.date:\r\n                sourceValue = value;\r\n                value = this._tryGetExcelDateValue(value);\r\n                type = VALID_TYPES.number\r\n        }\r\n        return {\r\n            value: value,\r\n            type: type,\r\n            sourceValue: sourceValue,\r\n            cellSourceData: cellSourceData\r\n        }\r\n    },\r\n    _callCustomizeExcelCell: function(_ref) {\r\n        var {\r\n            dataProvider: dataProvider,\r\n            value: value,\r\n            style: style,\r\n            sourceData: sourceData\r\n        } = _ref;\r\n        var styleCopy = ExcelFile.copyCellFormat(style);\r\n        var args = {\r\n            value: value,\r\n            numberFormat: styleCopy.numberFormat,\r\n            clearStyle: function() {\r\n                this.horizontalAlignment = null;\r\n                this.verticalAlignment = null;\r\n                this.wrapTextEnabled = null;\r\n                this.font = null;\r\n                this.numberFormat = null\r\n            }\r\n        };\r\n        if (isDefined(styleCopy)) {\r\n            if (isDefined(styleCopy.alignment)) {\r\n                args.horizontalAlignment = styleCopy.alignment.horizontal;\r\n                args.verticalAlignment = styleCopy.alignment.vertical;\r\n                args.wrapTextEnabled = styleCopy.alignment.wrapText\r\n            }\r\n            args.backgroundColor = styleCopy.backgroundColor;\r\n            args.fillPatternType = styleCopy.fillPatternType;\r\n            args.fillPatternColor = styleCopy.fillPatternColor;\r\n            args.font = styleCopy.font\r\n        }\r\n        dataProvider.customizeExcelCell(args, sourceData);\r\n        var newStyle = styleCopy || {};\r\n        newStyle.font = args.font;\r\n        newStyle.alignment = newStyle.alignment || {};\r\n        newStyle.alignment.horizontal = args.horizontalAlignment;\r\n        newStyle.alignment.vertical = args.verticalAlignment;\r\n        newStyle.alignment.wrapText = args.wrapTextEnabled;\r\n        newStyle.backgroundColor = args.backgroundColor;\r\n        newStyle.fillPatternType = args.fillPatternType;\r\n        newStyle.fillPatternColor = args.fillPatternColor;\r\n        newStyle.numberFormat = args.numberFormat;\r\n        return {\r\n            value: args.value,\r\n            style: newStyle\r\n        }\r\n    },\r\n    _getDataArray: function() {\r\n        var rowIndex;\r\n        var cellIndex;\r\n        var cellsArray;\r\n        var cellData;\r\n        var result = [];\r\n        var dataProvider = this._dataProvider;\r\n        var rowsLength = dataProvider.getRowsCount();\r\n        var columns = dataProvider.getColumns();\r\n        var cellsLength;\r\n        for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\r\n            cellsArray = [];\r\n            cellsLength = columns.length;\r\n            for (cellIndex = 0; cellIndex !== cellsLength; cellIndex++) {\r\n                cellData = this._prepareValue(rowIndex, cellIndex);\r\n                var styleArrayIndex = dataProvider.getStyleId(rowIndex, cellIndex);\r\n                var cellStyleId = this._styleArrayIndexToCellStyleIdMap[styleArrayIndex];\r\n                if (dataProvider.hasCustomizeExcelCell && dataProvider.hasCustomizeExcelCell()) {\r\n                    var value = cellData.sourceValue || cellData.value;\r\n                    var modifiedExcelCell = this._callCustomizeExcelCell({\r\n                        dataProvider: dataProvider,\r\n                        value: value,\r\n                        style: this._styleArray[styleArrayIndex],\r\n                        sourceData: cellData.cellSourceData\r\n                    });\r\n                    if (modifiedExcelCell.value !== value) {\r\n                        if (typeof modifiedExcelCell.value !== typeof value || \"number\" === typeof modifiedExcelCell.value && !isFinite(modifiedExcelCell.value)) {\r\n                            var cellDataType = this._tryGetExcelCellDataType(modifiedExcelCell.value);\r\n                            if (isDefined(cellDataType)) {\r\n                                cellData.type = cellDataType\r\n                            }\r\n                        }\r\n                        switch (cellData.type) {\r\n                            case VALID_TYPES.string:\r\n                                cellData.value = this._appendString(modifiedExcelCell.value);\r\n                                break;\r\n                            case VALID_TYPES.date:\r\n                                cellData.value = modifiedExcelCell.value;\r\n                                break;\r\n                            case VALID_TYPES.number:\r\n                                var newValue = modifiedExcelCell.value;\r\n                                var excelDateValue = this._tryGetExcelDateValue(newValue);\r\n                                if (isDefined(excelDateValue)) {\r\n                                    newValue = excelDateValue\r\n                                }\r\n                                cellData.value = newValue;\r\n                                break;\r\n                            default:\r\n                                cellData.value = modifiedExcelCell.value\r\n                        }\r\n                    }\r\n                    cellStyleId = this._excelFile.registerCellFormat(modifiedExcelCell.style)\r\n                }\r\n                cellsArray.push({\r\n                    style: cellStyleId,\r\n                    value: cellData.value,\r\n                    type: cellData.type\r\n                })\r\n            }\r\n            if (!this._needSheetPr && dataProvider.getGroupLevel(rowIndex) > 0) {\r\n                this._needSheetPr = true\r\n            }\r\n            result.push(cellsArray)\r\n        }\r\n        return result\r\n    },\r\n    _calculateWidth: function(pixelsWidth) {\r\n        pixelsWidth = parseInt(pixelsWidth, 10);\r\n        if (!pixelsWidth || pixelsWidth < 5) {\r\n            pixelsWidth = 100\r\n        }\r\n        return Math.min(255, Math.floor((pixelsWidth - 5) / MAX_DIGIT_WIDTH_IN_PIXELS * 100 + .5) / 100)\r\n    },\r\n    _prepareStyleData: function() {\r\n        var that = this;\r\n        var styles = that._dataProvider.getStyles();\r\n        that._dataProvider.getColumns().forEach((function(column) {\r\n            that._colsArray.push(that._calculateWidth(column.width))\r\n        }));\r\n        var fonts = [{\r\n            size: 11,\r\n            color: {\r\n                theme: 1\r\n            },\r\n            name: \"Calibri\",\r\n            family: 2,\r\n            scheme: \"minor\",\r\n            bold: false\r\n        }, {\r\n            size: 11,\r\n            color: {\r\n                theme: 1\r\n            },\r\n            name: \"Calibri\",\r\n            family: 2,\r\n            scheme: \"minor\",\r\n            bold: true\r\n        }];\r\n        this._excelFile.registerFont(fonts[0]);\r\n        this._excelFile.registerFont(fonts[1]);\r\n        styles.forEach((function(style) {\r\n            var numberFormat = that._tryConvertToExcelNumberFormat(style.format, style.dataType);\r\n            if (!isDefined(numberFormat)) {\r\n                numberFormat = 0\r\n            }\r\n            that._styleArray.push({\r\n                font: fonts[Number(!!style.bold)],\r\n                numberFormat: numberFormat,\r\n                alignment: {\r\n                    vertical: \"top\",\r\n                    wrapText: !!style.wrapText,\r\n                    horizontal: style.alignment || \"left\"\r\n                }\r\n            })\r\n        }));\r\n        that._styleArrayIndexToCellStyleIdMap = that._styleArray.map(item => this._excelFile.registerCellFormat(item))\r\n    },\r\n    _prepareCellData: function() {\r\n        this._cellsArray = this._getDataArray()\r\n    },\r\n    _createXMLRelationships: function(xmlRelationships) {\r\n        return this._getXMLTag(\"Relationships\", [{\r\n            name: \"xmlns\",\r\n            value: OPEN_XML_FORMAT_URL + \"/package/2006/relationships\"\r\n        }], xmlRelationships)\r\n    },\r\n    _createXMLRelationship: function(id, type, target) {\r\n        return this._getXMLTag(\"Relationship\", [{\r\n            name: \"Id\",\r\n            value: \"rId\" + id\r\n        }, {\r\n            name: \"Type\",\r\n            value: OPEN_XML_FORMAT_URL + \"/officeDocument/2006/relationships/\" + type\r\n        }, {\r\n            name: \"Target\",\r\n            value: target\r\n        }])\r\n    },\r\n    _getWorkbookContent: function() {\r\n        return XML_TAG + this._getXMLTag(\"workbook\", [{\r\n            name: \"xmlns:r\",\r\n            value: OPEN_XML_FORMAT_URL + \"/officeDocument/2006/relationships\"\r\n        }, {\r\n            name: \"xmlns\",\r\n            value: OPEN_XML_FORMAT_URL + \"/spreadsheetml/2006/main\"\r\n        }], '<bookViews><workbookView xWindow=\"0\" yWindow=\"0\" windowWidth=\"0\" windowHeight=\"0\"/></bookViews><sheets><sheet name=\"Sheet\" sheetId=\"1\" r:id=\"rId1\" /></sheets><definedNames><definedName name=\"_xlnm.Print_Titles\" localSheetId=\"0\">Sheet!$1:$1</definedName><definedName name=\"_xlnm._FilterDatabase\" hidden=\"0\" localSheetId=\"0\">Sheet!$A$1:$F$6332</definedName></definedNames>')\r\n    },\r\n    _getContentTypesContent: function() {\r\n        return XML_TAG + '<Types xmlns=\"' + OPEN_XML_FORMAT_URL + '/package/2006/content-types\"><Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" /><Default Extension=\"xml\" ContentType=\"application/xml\" /><Override PartName=\"/xl/worksheets/sheet1.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml\" /><Override PartName=\"/xl/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml\" /><Override PartName=\"/xl/sharedStrings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml\" /><Override PartName=\"/xl/workbook.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml\" /></Types>'\r\n    },\r\n    _generateStylesXML: function() {\r\n        var folder = this._zip.folder(XL_FOLDER_NAME);\r\n        var XML = \"\";\r\n        XML += this._excelFile.generateNumberFormatsXml();\r\n        XML += this._excelFile.generateFontsXml();\r\n        XML += this._excelFile.generateFillsXml();\r\n        XML += BASE_STYLE_XML2;\r\n        XML += this._excelFile.generateCellFormatsXml();\r\n        XML += this._getXMLTag(\"cellStyles\", [{\r\n            name: \"count\",\r\n            value: 1\r\n        }], this._getXMLTag(\"cellStyle\", [{\r\n            name: \"name\",\r\n            value: \"Normal\"\r\n        }, {\r\n            name: \"xfId\",\r\n            value: 0\r\n        }, {\r\n            name: \"builtinId\",\r\n            value: 0\r\n        }]));\r\n        XML = XML_TAG + this._getXMLTag(\"styleSheet\", [{\r\n            name: \"xmlns\",\r\n            value: OPEN_XML_FORMAT_URL + \"/spreadsheetml/2006/main\"\r\n        }], XML);\r\n        folder.file(STYLE_FILE_NAME, XML);\r\n        this._styleArray = []\r\n    },\r\n    _generateStringsXML: function() {\r\n        var folder = this._zip.folder(XL_FOLDER_NAME);\r\n        var stringIndex;\r\n        var stringsLength = this._stringArray.length;\r\n        var sharedStringXml = XML_TAG;\r\n        for (stringIndex = 0; stringIndex < stringsLength; stringIndex++) {\r\n            this._stringArray[stringIndex] = this._getXMLTag(\"si\", [], this._getXMLTag(\"t\", [], this._stringArray[stringIndex]))\r\n        }\r\n        sharedStringXml += this._getXMLTag(\"sst\", [{\r\n            name: \"xmlns\",\r\n            value: OPEN_XML_FORMAT_URL + \"/spreadsheetml/2006/main\"\r\n        }, {\r\n            name: \"count\",\r\n            value: this._stringArray.length\r\n        }, {\r\n            name: \"uniqueCount\",\r\n            value: this._stringArray.length\r\n        }], this._stringArray.join(\"\"));\r\n        folder.file(SHAREDSTRING_FILE_NAME, sharedStringXml);\r\n        this._stringArray = []\r\n    },\r\n    _getPaneXML: function() {\r\n        var attributes = [{\r\n            name: \"activePane\",\r\n            value: \"bottomLeft\"\r\n        }, {\r\n            name: \"state\",\r\n            value: \"frozen\"\r\n        }];\r\n        var frozenArea = this._dataProvider.getFrozenArea();\r\n        if (!(frozenArea.x || frozenArea.y)) {\r\n            return \"\"\r\n        }\r\n        if (frozenArea.x) {\r\n            attributes.push({\r\n                name: \"xSplit\",\r\n                value: frozenArea.x\r\n            })\r\n        }\r\n        if (frozenArea.y) {\r\n            attributes.push({\r\n                name: \"ySplit\",\r\n                value: frozenArea.y\r\n            })\r\n        }\r\n        attributes.push({\r\n            name: \"topLeftCell\",\r\n            value: this._convertToExcelCellRefAndTrackMaxIndex(frozenArea.y, frozenArea.x)\r\n        });\r\n        return this._getXMLTag(\"pane\", attributes)\r\n    },\r\n    _getAutoFilterXML: function(maxCellIndex) {\r\n        if (this._options.autoFilterEnabled) {\r\n            return '<autoFilter ref=\"A' + this._dataProvider.getHeaderRowCount() + \":\" + maxCellIndex + '\" />'\r\n        }\r\n        return \"\"\r\n    },\r\n    _getIgnoredErrorsXML: function(maxCellIndex) {\r\n        if (this._options.ignoreErrors) {\r\n            return '<ignoredErrors><ignoredError sqref=\"A1:' + maxCellIndex + '\" numberStoredAsText=\"1\" /></ignoredErrors>'\r\n        }\r\n        return \"\"\r\n    },\r\n    _generateWorksheetXML: function() {\r\n        var colIndex;\r\n        var rowIndex;\r\n        var cellData;\r\n        var xmlCells;\r\n        var xmlRows = [];\r\n        var rowsLength = this._cellsArray.length;\r\n        var cellsLength;\r\n        var colsLength = this._colsArray.length;\r\n        var rSpans = \"1:\" + colsLength;\r\n        var headerRowCount = this._dataProvider.getHeaderRowCount ? this._dataProvider.getHeaderRowCount() : 1;\r\n        var xmlResult = [WORKSHEET_HEADER_XML];\r\n        xmlResult.push(this._needSheetPr ? GROUP_SHEET_PR_XML : SINGLE_SHEET_PR_XML);\r\n        xmlResult.push('<dimension ref=\"A1:C1\"/>');\r\n        xmlResult.push(\"<sheetViews><sheetView \");\r\n        xmlResult.push(this._rtlEnabled ? 'rightToLeft=\"1\" ' : \"\");\r\n        xmlResult.push('tabSelected=\"1\" workbookViewId=\"0\">');\r\n        xmlResult.push(this._getPaneXML());\r\n        xmlResult.push(\"</sheetView></sheetViews>\");\r\n        xmlResult.push('<sheetFormatPr defaultRowHeight=\"15\"');\r\n        xmlResult.push(' outlineLevelRow=\"' + (this._dataProvider.getRowsCount() > 0 ? this._dataProvider.getGroupLevel(0) : 0) + '\"');\r\n        xmlResult.push(' x14ac:dyDescent=\"0.25\"/>');\r\n        for (colIndex = 0; colIndex < colsLength; colIndex++) {\r\n            this._colsArray[colIndex] = this._getXMLTag(\"col\", [{\r\n                name: \"width\",\r\n                value: this._colsArray[colIndex]\r\n            }, {\r\n                name: \"min\",\r\n                value: Number(colIndex) + 1\r\n            }, {\r\n                name: \"max\",\r\n                value: Number(colIndex) + 1\r\n            }, {\r\n                name: \"customWidth\",\r\n                value: 1\r\n            }])\r\n        }\r\n        xmlResult.push(this._getXMLTag(\"cols\", [], this._colsArray.join(\"\")) + \"<sheetData>\");\r\n        for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\r\n            xmlCells = [];\r\n            cellsLength = this._cellsArray[rowIndex].length;\r\n            for (colIndex = 0; colIndex < cellsLength; colIndex++) {\r\n                rowIndex = Number(rowIndex);\r\n                cellData = this._cellsArray[rowIndex][colIndex];\r\n                xmlCells.push(this._getXMLTag(\"c\", [{\r\n                    name: \"r\",\r\n                    value: this._convertToExcelCellRefAndTrackMaxIndex(rowIndex, colIndex)\r\n                }, {\r\n                    name: \"s\",\r\n                    value: cellData.style\r\n                }, {\r\n                    name: \"t\",\r\n                    value: cellData.type\r\n                }], isDefined(cellData.value) ? this._getXMLTag(\"v\", [], cellData.value) : null))\r\n            }\r\n            xmlRows.push(this._getXMLTag(\"row\", [{\r\n                name: \"r\",\r\n                value: Number(rowIndex) + 1\r\n            }, {\r\n                name: \"spans\",\r\n                value: rSpans\r\n            }, {\r\n                name: \"outlineLevel\",\r\n                value: rowIndex >= headerRowCount ? this._dataProvider.getGroupLevel(rowIndex) : 0\r\n            }, {\r\n                name: \"x14ac:dyDescent\",\r\n                value: \"0.25\"\r\n            }], xmlCells.join(\"\")));\r\n            this._cellsArray[rowIndex] = null;\r\n            if (xmlRows.length > 1e4) {\r\n                xmlResult.push(xmlRows.join(\"\"));\r\n                xmlRows = []\r\n            }\r\n        }\r\n        xmlResult.push(xmlRows.join(\"\"));\r\n        xmlRows = [];\r\n        var rightBottomCellRef = this._convertToExcelCellRef(this._maxRowIndex, this._maxColumnIndex);\r\n        xmlResult.push(\"</sheetData>\" + this._getAutoFilterXML(rightBottomCellRef) + this._generateMergingXML() + this._getIgnoredErrorsXML(rightBottomCellRef) + \"</worksheet>\");\r\n        this._zip.folder(XL_FOLDER_NAME).folder(WORKSHEETS_FOLDER).file(WORKSHEET_FILE_NAME, xmlResult.join(\"\"));\r\n        this._colsArray = [];\r\n        this._cellsArray = [];\r\n        xmlResult = []\r\n    },\r\n    _generateMergingXML: function() {\r\n        var k;\r\n        var l;\r\n        var cellIndex;\r\n        var rowIndex;\r\n        var rowsLength = isDefined(this._dataProvider.getHeaderRowCount) ? this._dataProvider.getHeaderRowCount() : this._dataProvider.getRowsCount();\r\n        var columnsLength = this._dataProvider.getColumns().length;\r\n        var usedArea = [];\r\n        var mergeArray = [];\r\n        var mergeIndex;\r\n        var mergeXML = \"\";\r\n        for (rowIndex = 0; rowIndex < rowsLength; rowIndex++) {\r\n            for (cellIndex = 0; cellIndex !== columnsLength; cellIndex++) {\r\n                if (!isDefined(usedArea[rowIndex]) || !isDefined(usedArea[rowIndex][cellIndex])) {\r\n                    var cellMerge = this._dataProvider.getCellMerging(rowIndex, cellIndex);\r\n                    if (cellMerge.colspan || cellMerge.rowspan) {\r\n                        mergeArray.push({\r\n                            start: this._convertToExcelCellRefAndTrackMaxIndex(rowIndex, cellIndex),\r\n                            end: this._convertToExcelCellRefAndTrackMaxIndex(rowIndex + (cellMerge.rowspan || 0), cellIndex + (cellMerge.colspan || 0))\r\n                        });\r\n                        for (k = rowIndex; k <= rowIndex + cellMerge.rowspan || 0; k++) {\r\n                            for (l = cellIndex; l <= cellIndex + cellMerge.colspan || 0; l++) {\r\n                                if (!isDefined(usedArea[k])) {\r\n                                    usedArea[k] = []\r\n                                }\r\n                                usedArea[k][l] = true\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        var mergeArrayLength = mergeArray.length;\r\n        for (mergeIndex = 0; mergeIndex < mergeArrayLength; mergeIndex++) {\r\n            mergeXML += this._getXMLTag(\"mergeCell\", [{\r\n                name: \"ref\",\r\n                value: mergeArray[mergeIndex].start + \":\" + mergeArray[mergeIndex].end\r\n            }])\r\n        }\r\n        return mergeXML.length ? this._getXMLTag(\"mergeCells\", [{\r\n            name: \"count\",\r\n            value: mergeArrayLength\r\n        }], mergeXML) : \"\"\r\n    },\r\n    _generateCommonXML: function() {\r\n        var relsFileContent = XML_TAG + this._createXMLRelationships(this._createXMLRelationship(1, \"officeDocument\", \"xl/\" + WORKBOOK_FILE_NAME));\r\n        var folder = this._zip.folder(XL_FOLDER_NAME);\r\n        var relsXML = XML_TAG;\r\n        this._zip.folder(\"_\" + RELATIONSHIP_PART_NAME).file(\".\" + RELATIONSHIP_PART_NAME, relsFileContent);\r\n        var xmlRelationships = this._createXMLRelationship(1, \"worksheet\", \"worksheets/\" + WORKSHEET_FILE_NAME) + this._createXMLRelationship(2, \"styles\", STYLE_FILE_NAME) + this._createXMLRelationship(3, \"sharedStrings\", SHAREDSTRING_FILE_NAME);\r\n        relsXML += this._createXMLRelationships(xmlRelationships);\r\n        folder.folder(\"_\" + RELATIONSHIP_PART_NAME).file(WORKBOOK_FILE_NAME + \".rels\", relsXML);\r\n        folder.file(WORKBOOK_FILE_NAME, this._getWorkbookContent());\r\n        this._zip.file(CONTENTTYPES_FILE_NAME, this._getContentTypesContent())\r\n    },\r\n    _generateContent: function() {\r\n        this._prepareStyleData();\r\n        this._prepareCellData();\r\n        this._generateWorkXML();\r\n        this._generateCommonXML()\r\n    },\r\n    _generateWorkXML: function() {\r\n        this._generateStylesXML();\r\n        this._generateStringsXML();\r\n        this._generateWorksheetXML()\r\n    },\r\n    ctor: function(dataProvider, options) {\r\n        this._rtlEnabled = options && !!options.rtlEnabled;\r\n        this._options = options;\r\n        this._maxRowIndex = 0;\r\n        this._maxColumnIndex = 0;\r\n        this._stringArray = [];\r\n        this._stringHash = {};\r\n        this._styleArray = [];\r\n        this._colsArray = [];\r\n        this._cellsArray = [];\r\n        this._needSheetPr = false;\r\n        this._dataProvider = dataProvider;\r\n        this._excelFile = new ExcelFile;\r\n        if (isDefined(ExcelCreator.JSZip)) {\r\n            this._zip = new ExcelCreator.JSZip\r\n        } else {\r\n            this._zip = null\r\n        }\r\n    },\r\n    _checkZipState: function() {\r\n        if (!this._zip) {\r\n            throw errors.Error(\"E1041\", \"JSZip\")\r\n        }\r\n    },\r\n    ready: function() {\r\n        return this._dataProvider.ready()\r\n    },\r\n    getData: function(isBlob) {\r\n        var options = {\r\n            type: isBlob ? \"blob\" : \"base64\",\r\n            compression: \"DEFLATE\",\r\n            mimeType: MIME_TYPES.EXCEL\r\n        };\r\n        var deferred = new Deferred;\r\n        this._checkZipState();\r\n        this._generateContent();\r\n        if (this._zip.generateAsync) {\r\n            this._zip.generateAsync(options).then(deferred.resolve)\r\n        } else {\r\n            deferred.resolve(this._zip.generate(options))\r\n        }\r\n        return deferred\r\n    }\r\n});\r\nExcelCreator.JSZip = JSZip;\r\nexport function getData(data, options) {\r\n    var excelCreator = new ExcelCreator(data, options);\r\n    excelCreator._checkZipState();\r\n    return excelCreator.ready().then(() => excelCreator.getData(isFunction(getWindow().Blob)))\r\n}\r\n"]},"metadata":{},"sourceType":"module"}