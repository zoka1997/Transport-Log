{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/data_grid/ui.data_grid.grouping.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport gridCore from \"./ui.data_grid.core\";\nimport { GroupingHelper as ExpandedGroupingHelper } from \"./ui.data_grid.grouping.expanded\";\nimport { GroupingHelper as CollapsedGroupingHelper } from \"./ui.data_grid.grouping.collapsed\";\nimport messageLocalization from \"../../localization/message\";\nimport dataSourceAdapter from \"./ui.data_grid.data_source_adapter\";\nimport { isDefined, isString } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport devices from \"../../core/devices\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nimport { registerKeyboardAction } from \"../grid_core/ui.grid_core.accessibility\";\nimport { setTabIndex, restoreFocus } from \"../shared/accessibility\";\nvar DATAGRID_GROUP_PANEL_CLASS = \"dx-datagrid-group-panel\";\nvar DATAGRID_GROUP_PANEL_MESSAGE_CLASS = \"dx-group-panel-message\";\nvar DATAGRID_GROUP_PANEL_ITEM_CLASS = \"dx-group-panel-item\";\nvar DATAGRID_GROUP_PANEL_LABEL_CLASS = \"dx-toolbar-label\";\nvar DATAGRID_GROUP_PANEL_CONTAINER_CLASS = \"dx-toolbar-item\";\nvar DATAGRID_EXPAND_CLASS = \"dx-datagrid-expand\";\nvar DATAGRID_GROUP_ROW_CLASS = \"dx-group-row\";\nvar HEADER_FILTER_CLASS_SELECTOR = \".dx-header-filter\";\nvar GroupingDataSourceAdapterExtender = {\n  init: function () {\n    this.callBase.apply(this, arguments);\n\n    this._initGroupingHelper();\n  },\n  _initGroupingHelper: function (options) {\n    var grouping = this._grouping;\n    var isAutoExpandAll = this.option(\"grouping.autoExpandAll\");\n    var isFocusedRowEnabled = this.option(\"focusedRowEnabled\");\n    var remoteOperations = options ? options.remoteOperations : this.remoteOperations();\n    var isODataRemoteOperations = remoteOperations.filtering && remoteOperations.sorting && remoteOperations.paging;\n\n    if (isODataRemoteOperations && !remoteOperations.grouping && (isAutoExpandAll || !isFocusedRowEnabled)) {\n      if (!grouping || grouping instanceof CollapsedGroupingHelper) {\n        this._grouping = new ExpandedGroupingHelper(this);\n      }\n    } else if (!grouping || grouping instanceof ExpandedGroupingHelper) {\n      this._grouping = new CollapsedGroupingHelper(this);\n    }\n  },\n  totalItemsCount: function () {\n    var totalCount = this.callBase();\n    return totalCount > 0 && this._dataSource.group() && this._dataSource.requireTotalCount() ? totalCount + this._grouping.totalCountCorrection() : totalCount;\n  },\n  itemsCount: function () {\n    return this._dataSource.group() ? this._grouping.itemsCount() || 0 : this.callBase.apply(this, arguments);\n  },\n  allowCollapseAll: function () {\n    return this._grouping.allowCollapseAll();\n  },\n  isGroupItemCountable: function (item) {\n    return this._grouping.isGroupItemCountable(item);\n  },\n  isRowExpanded: function (key) {\n    var groupInfo = this._grouping.findGroupInfo(key);\n\n    return groupInfo ? groupInfo.isExpanded : !this._grouping.allowCollapseAll();\n  },\n  collapseAll: function (groupIndex) {\n    return this._collapseExpandAll(groupIndex, false);\n  },\n  expandAll: function (groupIndex) {\n    return this._collapseExpandAll(groupIndex, true);\n  },\n  _collapseExpandAll: function (groupIndex, isExpand) {\n    var dataSource = this._dataSource;\n    var group = dataSource.group();\n    var groups = gridCore.normalizeSortingInfo(group || []);\n\n    if (groups.length) {\n      for (var i = 0; i < groups.length; i++) {\n        if (void 0 === groupIndex || groupIndex === i) {\n          groups[i].isExpanded = isExpand;\n        } else if (group && group[i]) {\n          groups[i].isExpanded = group[i].isExpanded;\n        }\n      }\n\n      dataSource.group(groups);\n\n      this._grouping.foreachGroups(function (groupInfo, parents) {\n        if (void 0 === groupIndex || groupIndex === parents.length - 1) {\n          groupInfo.isExpanded = isExpand;\n        }\n      }, false, true);\n\n      this.resetPagesCache();\n    }\n\n    return true;\n  },\n  refresh: function () {\n    this.callBase.apply(this, arguments);\n    return this._grouping.refresh.apply(this._grouping, arguments);\n  },\n  changeRowExpand: function (path) {\n    var dataSource = this._dataSource;\n\n    if (dataSource.group()) {\n      dataSource.beginLoading();\n\n      if (this._lastLoadOptions) {\n        this._lastLoadOptions.groupExpand = true;\n      }\n\n      return this._changeRowExpandCore(path).always(function () {\n        dataSource.endLoading();\n      });\n    }\n  },\n  _changeRowExpandCore: function (path) {\n    return this._grouping.changeRowExpand(path);\n  },\n  _hasGroupLevelsExpandState: function (group, isExpanded) {\n    if (group && Array.isArray(group)) {\n      for (var i = 0; i < group.length; i++) {\n        if (group[i].isExpanded === isExpanded) {\n          return true;\n        }\n      }\n    }\n  },\n  _customizeRemoteOperations: function (options, operationTypes) {\n    var remoteOperations = options.remoteOperations;\n\n    if (options.storeLoadOptions.group) {\n      if (remoteOperations.grouping && !options.isCustomLoading) {\n        if (!remoteOperations.groupPaging || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, true)) {\n          remoteOperations.paging = false;\n        }\n      }\n\n      if (!remoteOperations.grouping && (!remoteOperations.sorting || !remoteOperations.filtering || options.isCustomLoading || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, false))) {\n        remoteOperations.paging = false;\n      }\n    } else if (!options.isCustomLoading && remoteOperations.paging && operationTypes.grouping) {\n      this.resetCache();\n    }\n\n    this.callBase.apply(this, arguments);\n  },\n  _handleDataLoading: function (options) {\n    this.callBase(options);\n\n    this._initGroupingHelper(options);\n\n    return this._grouping.handleDataLoading(options);\n  },\n  _handleDataLoaded: function (options) {\n    return this._grouping.handleDataLoaded(options, this.callBase.bind(this));\n  },\n  _handleDataLoadedCore: function (options) {\n    return this._grouping.handleDataLoadedCore(options, this.callBase.bind(this));\n  }\n};\ndataSourceAdapter.extend(GroupingDataSourceAdapterExtender);\nvar GroupingDataControllerExtender = {\n  init: function () {\n    this.callBase();\n    this.createAction(\"onRowExpanding\");\n    this.createAction(\"onRowExpanded\");\n    this.createAction(\"onRowCollapsing\");\n    this.createAction(\"onRowCollapsed\");\n  },\n  _beforeProcessItems: function (items) {\n    var groupColumns = this._columnsController.getGroupColumns();\n\n    items = this.callBase(items);\n\n    if (items.length && groupColumns.length) {\n      items = this._processGroupItems(items, groupColumns.length);\n    }\n\n    return items;\n  },\n  _processItem: function (item, options) {\n    if (isDefined(item.groupIndex) && isString(item.rowType) && 0 === item.rowType.indexOf(\"group\")) {\n      item = this._processGroupItem(item, options);\n      options.dataIndex = 0;\n    } else {\n      item = this.callBase.apply(this, arguments);\n    }\n\n    return item;\n  },\n  _processGroupItem: function (item) {\n    return item;\n  },\n  _processGroupItems: function (items, groupsCount, options) {\n    var groupedColumns = this._columnsController.getGroupColumns();\n\n    var column = groupedColumns[groupedColumns.length - groupsCount];\n\n    if (!options) {\n      var scrollingMode = this.option(\"scrolling.mode\");\n      options = {\n        collectContinuationItems: \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode,\n        resultItems: [],\n        path: [],\n        values: []\n      };\n    }\n\n    var resultItems = options.resultItems;\n\n    if (options.data) {\n      if (options.collectContinuationItems || !options.data.isContinuation) {\n        resultItems.push({\n          rowType: \"group\",\n          data: options.data,\n          groupIndex: options.path.length - 1,\n          isExpanded: !!options.data.items,\n          key: options.path.slice(0),\n          values: options.values.slice(0)\n        });\n      }\n    }\n\n    if (items) {\n      if (0 === groupsCount) {\n        resultItems.push.apply(resultItems, items);\n      } else {\n        for (var i = 0; i < items.length; i++) {\n          var item = items[i];\n\n          if (item && \"items\" in item) {\n            options.data = item;\n            options.path.push(item.key);\n            options.values.push(column && column.deserializeValue && !column.calculateDisplayValue ? column.deserializeValue(item.key) : item.key);\n\n            this._processGroupItems(item.items, groupsCount - 1, options);\n\n            options.data = void 0;\n            options.path.pop();\n            options.values.pop();\n          } else {\n            resultItems.push(item);\n          }\n        }\n      }\n    }\n\n    return resultItems;\n  },\n  publicMethods: function () {\n    return this.callBase().concat([\"collapseAll\", \"expandAll\", \"isRowExpanded\", \"expandRow\", \"collapseRow\"]);\n  },\n  collapseAll: function (groupIndex) {\n    var dataSource = this._dataSource;\n\n    if (dataSource && dataSource.collapseAll(groupIndex)) {\n      dataSource.pageIndex(0);\n      dataSource.reload();\n    }\n  },\n  expandAll: function (groupIndex) {\n    var dataSource = this._dataSource;\n\n    if (dataSource && dataSource.expandAll(groupIndex)) {\n      dataSource.pageIndex(0);\n      dataSource.reload();\n    }\n  },\n  changeRowExpand: function (key) {\n    var that = this;\n    var expanded = that.isRowExpanded(key);\n    var args = {\n      key: key,\n      expanded: expanded\n    };\n    that.executeAction(expanded ? \"onRowCollapsing\" : \"onRowExpanding\", args);\n\n    if (!args.cancel) {\n      return when(that._changeRowExpandCore(key)).done(function () {\n        args.expanded = !expanded;\n        that.executeAction(expanded ? \"onRowCollapsed\" : \"onRowExpanded\", args);\n      });\n    }\n\n    return new Deferred().resolve();\n  },\n  _changeRowExpandCore: function (key) {\n    var that = this;\n    var dataSource = this._dataSource;\n    var d = new Deferred();\n\n    if (!dataSource) {\n      d.resolve();\n    } else {\n      when(dataSource.changeRowExpand(key)).done(function () {\n        that.load().done(d.resolve).fail(d.reject);\n      }).fail(d.reject);\n    }\n\n    return d;\n  },\n  isRowExpanded: function (key) {\n    var dataSource = this._dataSource;\n    return dataSource && dataSource.isRowExpanded(key);\n  },\n  expandRow: function (key) {\n    if (!this.isRowExpanded(key)) {\n      return this.changeRowExpand(key);\n    }\n\n    return new Deferred().resolve();\n  },\n  collapseRow: function (key) {\n    if (this.isRowExpanded(key)) {\n      return this.changeRowExpand(key);\n    }\n\n    return new Deferred().resolve();\n  },\n  optionChanged: function (args) {\n    if (\"grouping\" === args.name) {\n      args.name = \"dataSource\";\n    }\n\n    this.callBase(args);\n  }\n};\n\nvar onGroupingMenuItemClick = function (column, params) {\n  var columnsController = this._columnsController;\n\n  switch (params.itemData.value) {\n    case \"group\":\n      var groups = columnsController._dataSource.group() || [];\n      columnsController.columnOption(column.dataField, \"groupIndex\", groups.length);\n      break;\n\n    case \"ungroup\":\n      columnsController.columnOption(column.dataField, \"groupIndex\", -1);\n      break;\n\n    case \"ungroupAll\":\n      this.component.clearGrouping();\n  }\n};\n\nexport var GroupingHeaderPanelExtender = {\n  _getToolbarItems: function () {\n    var items = this.callBase();\n    return this._appendGroupingItem(items);\n  },\n  _appendGroupingItem: function (items) {\n    if (this._isGroupPanelVisible()) {\n      var isRendered = false;\n      var toolbarItem = {\n        template: () => {\n          var $groupPanel = $(\"<div>\").addClass(DATAGRID_GROUP_PANEL_CLASS);\n\n          this._updateGroupPanelContent($groupPanel);\n\n          registerKeyboardAction(\"groupPanel\", this, $groupPanel, void 0, this._handleActionKeyDown.bind(this));\n          return $groupPanel;\n        },\n        name: \"groupPanel\",\n        onItemRendered: () => {\n          isRendered && this.renderCompleted.fire();\n          isRendered = true;\n        },\n        location: \"before\",\n        locateInMenu: \"never\",\n        sortIndex: 1\n      };\n      items.push(toolbarItem);\n    }\n\n    return items;\n  },\n  _handleActionKeyDown: function (args) {\n    var event = args.event;\n    var $target = $(event.target);\n    var groupColumnIndex = $target.closest(\".\".concat(DATAGRID_GROUP_PANEL_ITEM_CLASS)).index();\n\n    var column = this._columnsController.getGroupColumns()[groupColumnIndex];\n\n    var columnIndex = column && column.index;\n\n    if ($target.is(HEADER_FILTER_CLASS_SELECTOR)) {\n      this.getController(\"headerFilter\").showHeaderFilterMenu(columnIndex, true);\n    } else {\n      this._processGroupItemAction(columnIndex);\n    }\n\n    event.preventDefault();\n  },\n  _isGroupPanelVisible: function () {\n    var groupPanelOptions = this.option(\"groupPanel\");\n    var isVisible;\n\n    if (groupPanelOptions) {\n      isVisible = groupPanelOptions.visible;\n\n      if (\"auto\" === isVisible) {\n        isVisible = \"desktop\" === devices.current().deviceType ? true : false;\n      }\n    }\n\n    return isVisible;\n  },\n  _renderGroupPanelItems: function ($groupPanel, groupColumns) {\n    var that = this;\n    $groupPanel.empty();\n    each(groupColumns, function (index, groupColumn) {\n      that._createGroupPanelItem($groupPanel, groupColumn);\n    });\n    restoreFocus(this);\n  },\n  _createGroupPanelItem: function ($rootElement, groupColumn) {\n    var $groupPanelItem = $(\"<div>\").addClass(groupColumn.cssClass).addClass(DATAGRID_GROUP_PANEL_ITEM_CLASS).data(\"columnData\", groupColumn).appendTo($rootElement).text(groupColumn.caption);\n    setTabIndex(this, $groupPanelItem);\n    return $groupPanelItem;\n  },\n  _columnOptionChanged: function (e) {\n    if (!this._requireReady && !gridCore.checkChanges(e.optionNames, [\"width\", \"visibleWidth\"])) {\n      var $toolbarElement = this.element();\n      var $groupPanel = $toolbarElement && $toolbarElement.find(\".\" + DATAGRID_GROUP_PANEL_CLASS);\n\n      if ($groupPanel && $groupPanel.length) {\n        this._updateGroupPanelContent($groupPanel);\n\n        this.renderCompleted.fire();\n      }\n    }\n\n    this.callBase();\n  },\n  _updateGroupPanelContent: function ($groupPanel) {\n    var groupColumns = this.getController(\"columns\").getGroupColumns();\n    var groupPanelOptions = this.option(\"groupPanel\");\n\n    this._renderGroupPanelItems($groupPanel, groupColumns);\n\n    if (groupPanelOptions.allowColumnDragging && !groupColumns.length) {\n      $(\"<div>\").addClass(DATAGRID_GROUP_PANEL_MESSAGE_CLASS).text(groupPanelOptions.emptyPanelText).appendTo($groupPanel);\n      $groupPanel.closest(\".\" + DATAGRID_GROUP_PANEL_CONTAINER_CLASS).addClass(DATAGRID_GROUP_PANEL_LABEL_CLASS);\n      $groupPanel.closest(\".\" + DATAGRID_GROUP_PANEL_LABEL_CLASS).css(\"maxWidth\", \"none\");\n      this.updateToolbarDimensions();\n    }\n  },\n  allowDragging: function (column) {\n    var groupPanelOptions = this.option(\"groupPanel\");\n    return this._isGroupPanelVisible() && groupPanelOptions.allowColumnDragging && column && column.allowGrouping;\n  },\n  getColumnElements: function () {\n    var $element = this.element();\n    return $element && $element.find(\".\" + DATAGRID_GROUP_PANEL_ITEM_CLASS);\n  },\n  getColumns: function () {\n    return this.getController(\"columns\").getGroupColumns();\n  },\n  getBoundingRect: function () {\n    var $element = this.element();\n\n    if ($element && $element.find(\".\" + DATAGRID_GROUP_PANEL_CLASS).length) {\n      var offset = $element.offset();\n      return {\n        top: offset.top,\n        bottom: offset.top + getHeight($element)\n      };\n    }\n\n    return null;\n  },\n  getName: function () {\n    return \"group\";\n  },\n  getContextMenuItems: function (options) {\n    var contextMenuEnabled = this.option(\"grouping.contextMenuEnabled\");\n    var $groupedColumnElement = $(options.targetElement).closest(\".\" + DATAGRID_GROUP_PANEL_ITEM_CLASS);\n    var items;\n\n    if ($groupedColumnElement.length) {\n      options.column = $groupedColumnElement.data(\"columnData\");\n    }\n\n    if (contextMenuEnabled && options.column) {\n      var column = options.column;\n      var isGroupingAllowed = isDefined(column.allowGrouping) ? column.allowGrouping : true;\n\n      if (isGroupingAllowed) {\n        var isColumnGrouped = isDefined(column.groupIndex) && column.groupIndex > -1;\n        var groupingTexts = this.option(\"grouping.texts\");\n        var onItemClick = onGroupingMenuItemClick.bind(this, column);\n        items = [{\n          text: groupingTexts.ungroup,\n          value: \"ungroup\",\n          disabled: !isColumnGrouped,\n          onItemClick: onItemClick\n        }, {\n          text: groupingTexts.ungroupAll,\n          value: \"ungroupAll\",\n          onItemClick: onItemClick\n        }];\n      }\n    }\n\n    return items;\n  },\n  isVisible: function () {\n    return this.callBase() || this._isGroupPanelVisible();\n  },\n  optionChanged: function (args) {\n    if (\"groupPanel\" === args.name) {\n      this._invalidate();\n\n      args.handled = true;\n    } else {\n      this.callBase(args);\n    }\n  }\n};\nvar GroupingRowsViewExtender = {\n  getContextMenuItems: function (options) {\n    var contextMenuEnabled = this.option(\"grouping.contextMenuEnabled\");\n    var items;\n\n    if (contextMenuEnabled && options.row && \"group\" === options.row.rowType) {\n      var columnsController = this._columnsController;\n      var column = columnsController.columnOption(\"groupIndex:\" + options.row.groupIndex);\n\n      if (column && column.allowGrouping) {\n        var groupingTexts = this.option(\"grouping.texts\");\n        var onItemClick = onGroupingMenuItemClick.bind(this, column);\n        items = [];\n        items.push({\n          text: groupingTexts.ungroup,\n          value: \"ungroup\",\n          onItemClick: onItemClick\n        }, {\n          text: groupingTexts.ungroupAll,\n          value: \"ungroupAll\",\n          onItemClick: onItemClick\n        });\n      }\n    }\n\n    return items;\n  },\n  _rowClick: function (e) {\n    var expandMode = this.option(\"grouping.expandMode\");\n    var scrollingMode = this.option(\"scrolling.mode\");\n    var isGroupRowStateChanged = \"infinite\" !== scrollingMode && \"rowClick\" === expandMode && $(e.event.target).closest(\".\" + DATAGRID_GROUP_ROW_CLASS).length;\n    var isExpandButtonClicked = $(e.event.target).closest(\".\" + DATAGRID_EXPAND_CLASS).length;\n\n    if (isGroupRowStateChanged || isExpandButtonClicked) {\n      this._changeGroupRowState(e);\n    }\n\n    this.callBase(e);\n  },\n  _changeGroupRowState: function (e) {\n    var dataController = this.getController(\"data\");\n    var row = dataController.items()[e.rowIndex];\n\n    var allowCollapsing = this._columnsController.columnOption(\"groupIndex:\" + row.groupIndex, \"allowCollapsing\");\n\n    if (\"data\" === row.rowType || \"group\" === row.rowType && false !== allowCollapsing) {\n      dataController.changeRowExpand(row.key, true);\n      e.event.preventDefault();\n      e.handled = true;\n    }\n  }\n};\nvar columnHeadersViewExtender = {\n  getContextMenuItems: function (options) {\n    var contextMenuEnabled = this.option(\"grouping.contextMenuEnabled\");\n    var items = this.callBase(options);\n\n    if (contextMenuEnabled && options.row && (\"header\" === options.row.rowType || \"detailAdaptive\" === options.row.rowType)) {\n      var column = options.column;\n\n      if (!column.command && (!isDefined(column.allowGrouping) || column.allowGrouping)) {\n        var groupingTexts = this.option(\"grouping.texts\");\n        var isColumnGrouped = isDefined(column.groupIndex) && column.groupIndex > -1;\n        var onItemClick = onGroupingMenuItemClick.bind(this, column);\n        items = items || [];\n        items.push({\n          text: groupingTexts.groupByThisColumn,\n          value: \"group\",\n          beginGroup: true,\n          disabled: isColumnGrouped,\n          onItemClick: onItemClick\n        });\n\n        if (column.showWhenGrouped) {\n          items.push({\n            text: groupingTexts.ungroup,\n            value: \"ungroup\",\n            disabled: !isColumnGrouped,\n            onItemClick: onItemClick\n          });\n        }\n\n        items.push({\n          text: groupingTexts.ungroupAll,\n          value: \"ungroupAll\",\n          onItemClick: onItemClick\n        });\n      }\n    }\n\n    return items;\n  }\n};\ngridCore.registerModule(\"grouping\", {\n  defaultOptions: function () {\n    return {\n      grouping: {\n        autoExpandAll: true,\n        allowCollapsing: true,\n        contextMenuEnabled: false,\n        expandMode: \"buttonClick\",\n        texts: {\n          groupContinuesMessage: messageLocalization.format(\"dxDataGrid-groupContinuesMessage\"),\n          groupContinuedMessage: messageLocalization.format(\"dxDataGrid-groupContinuedMessage\"),\n          groupByThisColumn: messageLocalization.format(\"dxDataGrid-groupHeaderText\"),\n          ungroup: messageLocalization.format(\"dxDataGrid-ungroupHeaderText\"),\n          ungroupAll: messageLocalization.format(\"dxDataGrid-ungroupAllText\")\n        }\n      },\n      groupPanel: {\n        visible: false,\n        emptyPanelText: messageLocalization.format(\"dxDataGrid-groupPanelEmptyText\"),\n        allowColumnDragging: true\n      }\n    };\n  },\n  extenders: {\n    controllers: {\n      data: GroupingDataControllerExtender,\n      columns: {\n        _getExpandColumnOptions: function () {\n          var options = this.callBase.apply(this, arguments);\n          options.cellTemplate = gridCore.getExpandCellTemplate();\n          return options;\n        }\n      },\n      editing: {\n        _isProcessedItem: function (item) {\n          return isDefined(item.groupIndex) && isString(item.rowType) && 0 === item.rowType.indexOf(\"group\");\n        }\n      }\n    },\n    views: {\n      headerPanel: GroupingHeaderPanelExtender,\n      rowsView: GroupingRowsViewExtender,\n      columnHeadersView: columnHeadersViewExtender\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/data_grid/ui.data_grid.grouping.js"],"names":["getHeight","$","gridCore","GroupingHelper","ExpandedGroupingHelper","CollapsedGroupingHelper","messageLocalization","dataSourceAdapter","isDefined","isString","each","devices","when","Deferred","registerKeyboardAction","setTabIndex","restoreFocus","DATAGRID_GROUP_PANEL_CLASS","DATAGRID_GROUP_PANEL_MESSAGE_CLASS","DATAGRID_GROUP_PANEL_ITEM_CLASS","DATAGRID_GROUP_PANEL_LABEL_CLASS","DATAGRID_GROUP_PANEL_CONTAINER_CLASS","DATAGRID_EXPAND_CLASS","DATAGRID_GROUP_ROW_CLASS","HEADER_FILTER_CLASS_SELECTOR","GroupingDataSourceAdapterExtender","init","callBase","apply","arguments","_initGroupingHelper","options","grouping","_grouping","isAutoExpandAll","option","isFocusedRowEnabled","remoteOperations","isODataRemoteOperations","filtering","sorting","paging","totalItemsCount","totalCount","_dataSource","group","requireTotalCount","totalCountCorrection","itemsCount","allowCollapseAll","isGroupItemCountable","item","isRowExpanded","key","groupInfo","findGroupInfo","isExpanded","collapseAll","groupIndex","_collapseExpandAll","expandAll","isExpand","dataSource","groups","normalizeSortingInfo","length","i","foreachGroups","parents","resetPagesCache","refresh","changeRowExpand","path","beginLoading","_lastLoadOptions","groupExpand","_changeRowExpandCore","always","endLoading","_hasGroupLevelsExpandState","Array","isArray","_customizeRemoteOperations","operationTypes","storeLoadOptions","isCustomLoading","groupPaging","resetCache","_handleDataLoading","handleDataLoading","_handleDataLoaded","handleDataLoaded","bind","_handleDataLoadedCore","handleDataLoadedCore","extend","GroupingDataControllerExtender","createAction","_beforeProcessItems","items","groupColumns","_columnsController","getGroupColumns","_processGroupItems","_processItem","rowType","indexOf","_processGroupItem","dataIndex","groupsCount","groupedColumns","column","scrollingMode","collectContinuationItems","resultItems","values","data","isContinuation","push","slice","deserializeValue","calculateDisplayValue","pop","publicMethods","concat","pageIndex","reload","that","expanded","args","executeAction","cancel","done","resolve","d","load","fail","reject","expandRow","collapseRow","optionChanged","name","onGroupingMenuItemClick","params","columnsController","itemData","value","columnOption","dataField","component","clearGrouping","GroupingHeaderPanelExtender","_getToolbarItems","_appendGroupingItem","_isGroupPanelVisible","isRendered","toolbarItem","template","$groupPanel","addClass","_updateGroupPanelContent","_handleActionKeyDown","onItemRendered","renderCompleted","fire","location","locateInMenu","sortIndex","event","$target","target","groupColumnIndex","closest","index","columnIndex","is","getController","showHeaderFilterMenu","_processGroupItemAction","preventDefault","groupPanelOptions","isVisible","visible","current","deviceType","_renderGroupPanelItems","empty","groupColumn","_createGroupPanelItem","$rootElement","$groupPanelItem","cssClass","appendTo","text","caption","_columnOptionChanged","e","_requireReady","checkChanges","optionNames","$toolbarElement","element","find","allowColumnDragging","emptyPanelText","css","updateToolbarDimensions","allowDragging","allowGrouping","getColumnElements","$element","getColumns","getBoundingRect","offset","top","bottom","getName","getContextMenuItems","contextMenuEnabled","$groupedColumnElement","targetElement","isGroupingAllowed","isColumnGrouped","groupingTexts","onItemClick","ungroup","disabled","ungroupAll","_invalidate","handled","GroupingRowsViewExtender","row","_rowClick","expandMode","isGroupRowStateChanged","isExpandButtonClicked","_changeGroupRowState","dataController","rowIndex","allowCollapsing","columnHeadersViewExtender","command","groupByThisColumn","beginGroup","showWhenGrouped","registerModule","defaultOptions","autoExpandAll","texts","groupContinuesMessage","format","groupContinuedMessage","groupPanel","extenders","controllers","columns","_getExpandColumnOptions","cellTemplate","getExpandCellTemplate","editing","_isProcessedItem","views","headerPanel","rowsView","columnHeadersView"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/data_grid/ui.data_grid.grouping.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getHeight\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport gridCore from \"./ui.data_grid.core\";\r\nimport {\r\n    GroupingHelper as ExpandedGroupingHelper\r\n} from \"./ui.data_grid.grouping.expanded\";\r\nimport {\r\n    GroupingHelper as CollapsedGroupingHelper\r\n} from \"./ui.data_grid.grouping.collapsed\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport dataSourceAdapter from \"./ui.data_grid.data_source_adapter\";\r\nimport {\r\n    isDefined,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport devices from \"../../core/devices\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    registerKeyboardAction\r\n} from \"../grid_core/ui.grid_core.accessibility\";\r\nimport {\r\n    setTabIndex,\r\n    restoreFocus\r\n} from \"../shared/accessibility\";\r\nvar DATAGRID_GROUP_PANEL_CLASS = \"dx-datagrid-group-panel\";\r\nvar DATAGRID_GROUP_PANEL_MESSAGE_CLASS = \"dx-group-panel-message\";\r\nvar DATAGRID_GROUP_PANEL_ITEM_CLASS = \"dx-group-panel-item\";\r\nvar DATAGRID_GROUP_PANEL_LABEL_CLASS = \"dx-toolbar-label\";\r\nvar DATAGRID_GROUP_PANEL_CONTAINER_CLASS = \"dx-toolbar-item\";\r\nvar DATAGRID_EXPAND_CLASS = \"dx-datagrid-expand\";\r\nvar DATAGRID_GROUP_ROW_CLASS = \"dx-group-row\";\r\nvar HEADER_FILTER_CLASS_SELECTOR = \".dx-header-filter\";\r\nvar GroupingDataSourceAdapterExtender = {\r\n    init: function() {\r\n        this.callBase.apply(this, arguments);\r\n        this._initGroupingHelper()\r\n    },\r\n    _initGroupingHelper: function(options) {\r\n        var grouping = this._grouping;\r\n        var isAutoExpandAll = this.option(\"grouping.autoExpandAll\");\r\n        var isFocusedRowEnabled = this.option(\"focusedRowEnabled\");\r\n        var remoteOperations = options ? options.remoteOperations : this.remoteOperations();\r\n        var isODataRemoteOperations = remoteOperations.filtering && remoteOperations.sorting && remoteOperations.paging;\r\n        if (isODataRemoteOperations && !remoteOperations.grouping && (isAutoExpandAll || !isFocusedRowEnabled)) {\r\n            if (!grouping || grouping instanceof CollapsedGroupingHelper) {\r\n                this._grouping = new ExpandedGroupingHelper(this)\r\n            }\r\n        } else if (!grouping || grouping instanceof ExpandedGroupingHelper) {\r\n            this._grouping = new CollapsedGroupingHelper(this)\r\n        }\r\n    },\r\n    totalItemsCount: function() {\r\n        var totalCount = this.callBase();\r\n        return totalCount > 0 && this._dataSource.group() && this._dataSource.requireTotalCount() ? totalCount + this._grouping.totalCountCorrection() : totalCount\r\n    },\r\n    itemsCount: function() {\r\n        return this._dataSource.group() ? this._grouping.itemsCount() || 0 : this.callBase.apply(this, arguments)\r\n    },\r\n    allowCollapseAll: function() {\r\n        return this._grouping.allowCollapseAll()\r\n    },\r\n    isGroupItemCountable: function(item) {\r\n        return this._grouping.isGroupItemCountable(item)\r\n    },\r\n    isRowExpanded: function(key) {\r\n        var groupInfo = this._grouping.findGroupInfo(key);\r\n        return groupInfo ? groupInfo.isExpanded : !this._grouping.allowCollapseAll()\r\n    },\r\n    collapseAll: function(groupIndex) {\r\n        return this._collapseExpandAll(groupIndex, false)\r\n    },\r\n    expandAll: function(groupIndex) {\r\n        return this._collapseExpandAll(groupIndex, true)\r\n    },\r\n    _collapseExpandAll: function(groupIndex, isExpand) {\r\n        var dataSource = this._dataSource;\r\n        var group = dataSource.group();\r\n        var groups = gridCore.normalizeSortingInfo(group || []);\r\n        if (groups.length) {\r\n            for (var i = 0; i < groups.length; i++) {\r\n                if (void 0 === groupIndex || groupIndex === i) {\r\n                    groups[i].isExpanded = isExpand\r\n                } else if (group && group[i]) {\r\n                    groups[i].isExpanded = group[i].isExpanded\r\n                }\r\n            }\r\n            dataSource.group(groups);\r\n            this._grouping.foreachGroups((function(groupInfo, parents) {\r\n                if (void 0 === groupIndex || groupIndex === parents.length - 1) {\r\n                    groupInfo.isExpanded = isExpand\r\n                }\r\n            }), false, true);\r\n            this.resetPagesCache()\r\n        }\r\n        return true\r\n    },\r\n    refresh: function() {\r\n        this.callBase.apply(this, arguments);\r\n        return this._grouping.refresh.apply(this._grouping, arguments)\r\n    },\r\n    changeRowExpand: function(path) {\r\n        var dataSource = this._dataSource;\r\n        if (dataSource.group()) {\r\n            dataSource.beginLoading();\r\n            if (this._lastLoadOptions) {\r\n                this._lastLoadOptions.groupExpand = true\r\n            }\r\n            return this._changeRowExpandCore(path).always((function() {\r\n                dataSource.endLoading()\r\n            }))\r\n        }\r\n    },\r\n    _changeRowExpandCore: function(path) {\r\n        return this._grouping.changeRowExpand(path)\r\n    },\r\n    _hasGroupLevelsExpandState: function(group, isExpanded) {\r\n        if (group && Array.isArray(group)) {\r\n            for (var i = 0; i < group.length; i++) {\r\n                if (group[i].isExpanded === isExpanded) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _customizeRemoteOperations: function(options, operationTypes) {\r\n        var remoteOperations = options.remoteOperations;\r\n        if (options.storeLoadOptions.group) {\r\n            if (remoteOperations.grouping && !options.isCustomLoading) {\r\n                if (!remoteOperations.groupPaging || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, true)) {\r\n                    remoteOperations.paging = false\r\n                }\r\n            }\r\n            if (!remoteOperations.grouping && (!remoteOperations.sorting || !remoteOperations.filtering || options.isCustomLoading || this._hasGroupLevelsExpandState(options.storeLoadOptions.group, false))) {\r\n                remoteOperations.paging = false\r\n            }\r\n        } else if (!options.isCustomLoading && remoteOperations.paging && operationTypes.grouping) {\r\n            this.resetCache()\r\n        }\r\n        this.callBase.apply(this, arguments)\r\n    },\r\n    _handleDataLoading: function(options) {\r\n        this.callBase(options);\r\n        this._initGroupingHelper(options);\r\n        return this._grouping.handleDataLoading(options)\r\n    },\r\n    _handleDataLoaded: function(options) {\r\n        return this._grouping.handleDataLoaded(options, this.callBase.bind(this))\r\n    },\r\n    _handleDataLoadedCore: function(options) {\r\n        return this._grouping.handleDataLoadedCore(options, this.callBase.bind(this))\r\n    }\r\n};\r\ndataSourceAdapter.extend(GroupingDataSourceAdapterExtender);\r\nvar GroupingDataControllerExtender = {\r\n    init: function() {\r\n        this.callBase();\r\n        this.createAction(\"onRowExpanding\");\r\n        this.createAction(\"onRowExpanded\");\r\n        this.createAction(\"onRowCollapsing\");\r\n        this.createAction(\"onRowCollapsed\")\r\n    },\r\n    _beforeProcessItems: function(items) {\r\n        var groupColumns = this._columnsController.getGroupColumns();\r\n        items = this.callBase(items);\r\n        if (items.length && groupColumns.length) {\r\n            items = this._processGroupItems(items, groupColumns.length)\r\n        }\r\n        return items\r\n    },\r\n    _processItem: function(item, options) {\r\n        if (isDefined(item.groupIndex) && isString(item.rowType) && 0 === item.rowType.indexOf(\"group\")) {\r\n            item = this._processGroupItem(item, options);\r\n            options.dataIndex = 0\r\n        } else {\r\n            item = this.callBase.apply(this, arguments)\r\n        }\r\n        return item\r\n    },\r\n    _processGroupItem: function(item) {\r\n        return item\r\n    },\r\n    _processGroupItems: function(items, groupsCount, options) {\r\n        var groupedColumns = this._columnsController.getGroupColumns();\r\n        var column = groupedColumns[groupedColumns.length - groupsCount];\r\n        if (!options) {\r\n            var scrollingMode = this.option(\"scrolling.mode\");\r\n            options = {\r\n                collectContinuationItems: \"virtual\" !== scrollingMode && \"infinite\" !== scrollingMode,\r\n                resultItems: [],\r\n                path: [],\r\n                values: []\r\n            }\r\n        }\r\n        var resultItems = options.resultItems;\r\n        if (options.data) {\r\n            if (options.collectContinuationItems || !options.data.isContinuation) {\r\n                resultItems.push({\r\n                    rowType: \"group\",\r\n                    data: options.data,\r\n                    groupIndex: options.path.length - 1,\r\n                    isExpanded: !!options.data.items,\r\n                    key: options.path.slice(0),\r\n                    values: options.values.slice(0)\r\n                })\r\n            }\r\n        }\r\n        if (items) {\r\n            if (0 === groupsCount) {\r\n                resultItems.push.apply(resultItems, items)\r\n            } else {\r\n                for (var i = 0; i < items.length; i++) {\r\n                    var item = items[i];\r\n                    if (item && \"items\" in item) {\r\n                        options.data = item;\r\n                        options.path.push(item.key);\r\n                        options.values.push(column && column.deserializeValue && !column.calculateDisplayValue ? column.deserializeValue(item.key) : item.key);\r\n                        this._processGroupItems(item.items, groupsCount - 1, options);\r\n                        options.data = void 0;\r\n                        options.path.pop();\r\n                        options.values.pop()\r\n                    } else {\r\n                        resultItems.push(item)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return resultItems\r\n    },\r\n    publicMethods: function() {\r\n        return this.callBase().concat([\"collapseAll\", \"expandAll\", \"isRowExpanded\", \"expandRow\", \"collapseRow\"])\r\n    },\r\n    collapseAll: function(groupIndex) {\r\n        var dataSource = this._dataSource;\r\n        if (dataSource && dataSource.collapseAll(groupIndex)) {\r\n            dataSource.pageIndex(0);\r\n            dataSource.reload()\r\n        }\r\n    },\r\n    expandAll: function(groupIndex) {\r\n        var dataSource = this._dataSource;\r\n        if (dataSource && dataSource.expandAll(groupIndex)) {\r\n            dataSource.pageIndex(0);\r\n            dataSource.reload()\r\n        }\r\n    },\r\n    changeRowExpand: function(key) {\r\n        var that = this;\r\n        var expanded = that.isRowExpanded(key);\r\n        var args = {\r\n            key: key,\r\n            expanded: expanded\r\n        };\r\n        that.executeAction(expanded ? \"onRowCollapsing\" : \"onRowExpanding\", args);\r\n        if (!args.cancel) {\r\n            return when(that._changeRowExpandCore(key)).done((function() {\r\n                args.expanded = !expanded;\r\n                that.executeAction(expanded ? \"onRowCollapsed\" : \"onRowExpanded\", args)\r\n            }))\r\n        }\r\n        return (new Deferred).resolve()\r\n    },\r\n    _changeRowExpandCore: function(key) {\r\n        var that = this;\r\n        var dataSource = this._dataSource;\r\n        var d = new Deferred;\r\n        if (!dataSource) {\r\n            d.resolve()\r\n        } else {\r\n            when(dataSource.changeRowExpand(key)).done((function() {\r\n                that.load().done(d.resolve).fail(d.reject)\r\n            })).fail(d.reject)\r\n        }\r\n        return d\r\n    },\r\n    isRowExpanded: function(key) {\r\n        var dataSource = this._dataSource;\r\n        return dataSource && dataSource.isRowExpanded(key)\r\n    },\r\n    expandRow: function(key) {\r\n        if (!this.isRowExpanded(key)) {\r\n            return this.changeRowExpand(key)\r\n        }\r\n        return (new Deferred).resolve()\r\n    },\r\n    collapseRow: function(key) {\r\n        if (this.isRowExpanded(key)) {\r\n            return this.changeRowExpand(key)\r\n        }\r\n        return (new Deferred).resolve()\r\n    },\r\n    optionChanged: function(args) {\r\n        if (\"grouping\" === args.name) {\r\n            args.name = \"dataSource\"\r\n        }\r\n        this.callBase(args)\r\n    }\r\n};\r\nvar onGroupingMenuItemClick = function(column, params) {\r\n    var columnsController = this._columnsController;\r\n    switch (params.itemData.value) {\r\n        case \"group\":\r\n            var groups = columnsController._dataSource.group() || [];\r\n            columnsController.columnOption(column.dataField, \"groupIndex\", groups.length);\r\n            break;\r\n        case \"ungroup\":\r\n            columnsController.columnOption(column.dataField, \"groupIndex\", -1);\r\n            break;\r\n        case \"ungroupAll\":\r\n            this.component.clearGrouping()\r\n    }\r\n};\r\nexport var GroupingHeaderPanelExtender = {\r\n    _getToolbarItems: function() {\r\n        var items = this.callBase();\r\n        return this._appendGroupingItem(items)\r\n    },\r\n    _appendGroupingItem: function(items) {\r\n        if (this._isGroupPanelVisible()) {\r\n            var isRendered = false;\r\n            var toolbarItem = {\r\n                template: () => {\r\n                    var $groupPanel = $(\"<div>\").addClass(DATAGRID_GROUP_PANEL_CLASS);\r\n                    this._updateGroupPanelContent($groupPanel);\r\n                    registerKeyboardAction(\"groupPanel\", this, $groupPanel, void 0, this._handleActionKeyDown.bind(this));\r\n                    return $groupPanel\r\n                },\r\n                name: \"groupPanel\",\r\n                onItemRendered: () => {\r\n                    isRendered && this.renderCompleted.fire();\r\n                    isRendered = true\r\n                },\r\n                location: \"before\",\r\n                locateInMenu: \"never\",\r\n                sortIndex: 1\r\n            };\r\n            items.push(toolbarItem)\r\n        }\r\n        return items\r\n    },\r\n    _handleActionKeyDown: function(args) {\r\n        var event = args.event;\r\n        var $target = $(event.target);\r\n        var groupColumnIndex = $target.closest(\".\".concat(DATAGRID_GROUP_PANEL_ITEM_CLASS)).index();\r\n        var column = this._columnsController.getGroupColumns()[groupColumnIndex];\r\n        var columnIndex = column && column.index;\r\n        if ($target.is(HEADER_FILTER_CLASS_SELECTOR)) {\r\n            this.getController(\"headerFilter\").showHeaderFilterMenu(columnIndex, true)\r\n        } else {\r\n            this._processGroupItemAction(columnIndex)\r\n        }\r\n        event.preventDefault()\r\n    },\r\n    _isGroupPanelVisible: function() {\r\n        var groupPanelOptions = this.option(\"groupPanel\");\r\n        var isVisible;\r\n        if (groupPanelOptions) {\r\n            isVisible = groupPanelOptions.visible;\r\n            if (\"auto\" === isVisible) {\r\n                isVisible = \"desktop\" === devices.current().deviceType ? true : false\r\n            }\r\n        }\r\n        return isVisible\r\n    },\r\n    _renderGroupPanelItems: function($groupPanel, groupColumns) {\r\n        var that = this;\r\n        $groupPanel.empty();\r\n        each(groupColumns, (function(index, groupColumn) {\r\n            that._createGroupPanelItem($groupPanel, groupColumn)\r\n        }));\r\n        restoreFocus(this)\r\n    },\r\n    _createGroupPanelItem: function($rootElement, groupColumn) {\r\n        var $groupPanelItem = $(\"<div>\").addClass(groupColumn.cssClass).addClass(DATAGRID_GROUP_PANEL_ITEM_CLASS).data(\"columnData\", groupColumn).appendTo($rootElement).text(groupColumn.caption);\r\n        setTabIndex(this, $groupPanelItem);\r\n        return $groupPanelItem\r\n    },\r\n    _columnOptionChanged: function(e) {\r\n        if (!this._requireReady && !gridCore.checkChanges(e.optionNames, [\"width\", \"visibleWidth\"])) {\r\n            var $toolbarElement = this.element();\r\n            var $groupPanel = $toolbarElement && $toolbarElement.find(\".\" + DATAGRID_GROUP_PANEL_CLASS);\r\n            if ($groupPanel && $groupPanel.length) {\r\n                this._updateGroupPanelContent($groupPanel);\r\n                this.renderCompleted.fire()\r\n            }\r\n        }\r\n        this.callBase()\r\n    },\r\n    _updateGroupPanelContent: function($groupPanel) {\r\n        var groupColumns = this.getController(\"columns\").getGroupColumns();\r\n        var groupPanelOptions = this.option(\"groupPanel\");\r\n        this._renderGroupPanelItems($groupPanel, groupColumns);\r\n        if (groupPanelOptions.allowColumnDragging && !groupColumns.length) {\r\n            $(\"<div>\").addClass(DATAGRID_GROUP_PANEL_MESSAGE_CLASS).text(groupPanelOptions.emptyPanelText).appendTo($groupPanel);\r\n            $groupPanel.closest(\".\" + DATAGRID_GROUP_PANEL_CONTAINER_CLASS).addClass(DATAGRID_GROUP_PANEL_LABEL_CLASS);\r\n            $groupPanel.closest(\".\" + DATAGRID_GROUP_PANEL_LABEL_CLASS).css(\"maxWidth\", \"none\");\r\n            this.updateToolbarDimensions()\r\n        }\r\n    },\r\n    allowDragging: function(column) {\r\n        var groupPanelOptions = this.option(\"groupPanel\");\r\n        return this._isGroupPanelVisible() && groupPanelOptions.allowColumnDragging && column && column.allowGrouping\r\n    },\r\n    getColumnElements: function() {\r\n        var $element = this.element();\r\n        return $element && $element.find(\".\" + DATAGRID_GROUP_PANEL_ITEM_CLASS)\r\n    },\r\n    getColumns: function() {\r\n        return this.getController(\"columns\").getGroupColumns()\r\n    },\r\n    getBoundingRect: function() {\r\n        var $element = this.element();\r\n        if ($element && $element.find(\".\" + DATAGRID_GROUP_PANEL_CLASS).length) {\r\n            var offset = $element.offset();\r\n            return {\r\n                top: offset.top,\r\n                bottom: offset.top + getHeight($element)\r\n            }\r\n        }\r\n        return null\r\n    },\r\n    getName: function() {\r\n        return \"group\"\r\n    },\r\n    getContextMenuItems: function(options) {\r\n        var contextMenuEnabled = this.option(\"grouping.contextMenuEnabled\");\r\n        var $groupedColumnElement = $(options.targetElement).closest(\".\" + DATAGRID_GROUP_PANEL_ITEM_CLASS);\r\n        var items;\r\n        if ($groupedColumnElement.length) {\r\n            options.column = $groupedColumnElement.data(\"columnData\")\r\n        }\r\n        if (contextMenuEnabled && options.column) {\r\n            var column = options.column;\r\n            var isGroupingAllowed = isDefined(column.allowGrouping) ? column.allowGrouping : true;\r\n            if (isGroupingAllowed) {\r\n                var isColumnGrouped = isDefined(column.groupIndex) && column.groupIndex > -1;\r\n                var groupingTexts = this.option(\"grouping.texts\");\r\n                var onItemClick = onGroupingMenuItemClick.bind(this, column);\r\n                items = [{\r\n                    text: groupingTexts.ungroup,\r\n                    value: \"ungroup\",\r\n                    disabled: !isColumnGrouped,\r\n                    onItemClick: onItemClick\r\n                }, {\r\n                    text: groupingTexts.ungroupAll,\r\n                    value: \"ungroupAll\",\r\n                    onItemClick: onItemClick\r\n                }]\r\n            }\r\n        }\r\n        return items\r\n    },\r\n    isVisible: function() {\r\n        return this.callBase() || this._isGroupPanelVisible()\r\n    },\r\n    optionChanged: function(args) {\r\n        if (\"groupPanel\" === args.name) {\r\n            this._invalidate();\r\n            args.handled = true\r\n        } else {\r\n            this.callBase(args)\r\n        }\r\n    }\r\n};\r\nvar GroupingRowsViewExtender = {\r\n    getContextMenuItems: function(options) {\r\n        var contextMenuEnabled = this.option(\"grouping.contextMenuEnabled\");\r\n        var items;\r\n        if (contextMenuEnabled && options.row && \"group\" === options.row.rowType) {\r\n            var columnsController = this._columnsController;\r\n            var column = columnsController.columnOption(\"groupIndex:\" + options.row.groupIndex);\r\n            if (column && column.allowGrouping) {\r\n                var groupingTexts = this.option(\"grouping.texts\");\r\n                var onItemClick = onGroupingMenuItemClick.bind(this, column);\r\n                items = [];\r\n                items.push({\r\n                    text: groupingTexts.ungroup,\r\n                    value: \"ungroup\",\r\n                    onItemClick: onItemClick\r\n                }, {\r\n                    text: groupingTexts.ungroupAll,\r\n                    value: \"ungroupAll\",\r\n                    onItemClick: onItemClick\r\n                })\r\n            }\r\n        }\r\n        return items\r\n    },\r\n    _rowClick: function(e) {\r\n        var expandMode = this.option(\"grouping.expandMode\");\r\n        var scrollingMode = this.option(\"scrolling.mode\");\r\n        var isGroupRowStateChanged = \"infinite\" !== scrollingMode && \"rowClick\" === expandMode && $(e.event.target).closest(\".\" + DATAGRID_GROUP_ROW_CLASS).length;\r\n        var isExpandButtonClicked = $(e.event.target).closest(\".\" + DATAGRID_EXPAND_CLASS).length;\r\n        if (isGroupRowStateChanged || isExpandButtonClicked) {\r\n            this._changeGroupRowState(e)\r\n        }\r\n        this.callBase(e)\r\n    },\r\n    _changeGroupRowState: function(e) {\r\n        var dataController = this.getController(\"data\");\r\n        var row = dataController.items()[e.rowIndex];\r\n        var allowCollapsing = this._columnsController.columnOption(\"groupIndex:\" + row.groupIndex, \"allowCollapsing\");\r\n        if (\"data\" === row.rowType || \"group\" === row.rowType && false !== allowCollapsing) {\r\n            dataController.changeRowExpand(row.key, true);\r\n            e.event.preventDefault();\r\n            e.handled = true\r\n        }\r\n    }\r\n};\r\nvar columnHeadersViewExtender = {\r\n    getContextMenuItems: function(options) {\r\n        var contextMenuEnabled = this.option(\"grouping.contextMenuEnabled\");\r\n        var items = this.callBase(options);\r\n        if (contextMenuEnabled && options.row && (\"header\" === options.row.rowType || \"detailAdaptive\" === options.row.rowType)) {\r\n            var column = options.column;\r\n            if (!column.command && (!isDefined(column.allowGrouping) || column.allowGrouping)) {\r\n                var groupingTexts = this.option(\"grouping.texts\");\r\n                var isColumnGrouped = isDefined(column.groupIndex) && column.groupIndex > -1;\r\n                var onItemClick = onGroupingMenuItemClick.bind(this, column);\r\n                items = items || [];\r\n                items.push({\r\n                    text: groupingTexts.groupByThisColumn,\r\n                    value: \"group\",\r\n                    beginGroup: true,\r\n                    disabled: isColumnGrouped,\r\n                    onItemClick: onItemClick\r\n                });\r\n                if (column.showWhenGrouped) {\r\n                    items.push({\r\n                        text: groupingTexts.ungroup,\r\n                        value: \"ungroup\",\r\n                        disabled: !isColumnGrouped,\r\n                        onItemClick: onItemClick\r\n                    })\r\n                }\r\n                items.push({\r\n                    text: groupingTexts.ungroupAll,\r\n                    value: \"ungroupAll\",\r\n                    onItemClick: onItemClick\r\n                })\r\n            }\r\n        }\r\n        return items\r\n    }\r\n};\r\ngridCore.registerModule(\"grouping\", {\r\n    defaultOptions: function() {\r\n        return {\r\n            grouping: {\r\n                autoExpandAll: true,\r\n                allowCollapsing: true,\r\n                contextMenuEnabled: false,\r\n                expandMode: \"buttonClick\",\r\n                texts: {\r\n                    groupContinuesMessage: messageLocalization.format(\"dxDataGrid-groupContinuesMessage\"),\r\n                    groupContinuedMessage: messageLocalization.format(\"dxDataGrid-groupContinuedMessage\"),\r\n                    groupByThisColumn: messageLocalization.format(\"dxDataGrid-groupHeaderText\"),\r\n                    ungroup: messageLocalization.format(\"dxDataGrid-ungroupHeaderText\"),\r\n                    ungroupAll: messageLocalization.format(\"dxDataGrid-ungroupAllText\")\r\n                }\r\n            },\r\n            groupPanel: {\r\n                visible: false,\r\n                emptyPanelText: messageLocalization.format(\"dxDataGrid-groupPanelEmptyText\"),\r\n                allowColumnDragging: true\r\n            }\r\n        }\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: GroupingDataControllerExtender,\r\n            columns: {\r\n                _getExpandColumnOptions: function() {\r\n                    var options = this.callBase.apply(this, arguments);\r\n                    options.cellTemplate = gridCore.getExpandCellTemplate();\r\n                    return options\r\n                }\r\n            },\r\n            editing: {\r\n                _isProcessedItem: function(item) {\r\n                    return isDefined(item.groupIndex) && isString(item.rowType) && 0 === item.rowType.indexOf(\"group\")\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            headerPanel: GroupingHeaderPanelExtender,\r\n            rowsView: GroupingRowsViewExtender,\r\n            columnHeadersView: columnHeadersViewExtender\r\n        }\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}