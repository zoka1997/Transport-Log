{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.data_controller.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport modules from \"./ui.grid_core.modules\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport ArrayStore from \"../../data/array_store\";\nimport CustomStore from \"../../data/custom_store\";\nimport errors from \"../widget/ui.errors\";\nimport { noop, deferRender, equalByValue } from \"../../core/utils/common\";\nimport { each } from \"../../core/utils/iterator\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport DataHelperMixin from \"../../data_helper\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nimport { findChanges } from \"../../core/utils/array_compare\";\nexport var dataControllerModule = {\n  defaultOptions: function () {\n    return {\n      loadingTimeout: 0,\n      dataSource: null,\n      cacheEnabled: true,\n      repaintChangesOnly: false,\n      highlightChanges: false,\n      onDataErrorOccurred: null,\n      remoteOperations: \"auto\",\n      paging: {\n        enabled: true,\n        pageSize: void 0,\n        pageIndex: void 0\n      }\n    };\n  },\n  controllers: {\n    data: modules.Controller.inherit({}).include(DataHelperMixin).inherit(function () {\n      var changePaging = function (that, optionName, value) {\n        var dataSource = that._dataSource;\n\n        if (dataSource) {\n          if (void 0 !== value) {\n            var oldValue = that._getPagingOptionValue(optionName);\n\n            if (oldValue !== value) {\n              if (\"pageSize\" === optionName) {\n                dataSource.pageIndex(0);\n              }\n\n              dataSource[optionName](value);\n              that._skipProcessingPagingChange = true;\n              that.option(\"paging.\" + optionName, value);\n              that._skipProcessingPagingChange = false;\n              var pageIndex = dataSource.pageIndex();\n              that._isPaging = \"pageIndex\" === optionName;\n              return dataSource[\"pageIndex\" === optionName ? \"load\" : \"reload\"]().done(() => {\n                that._isPaging = false;\n                that.pageChanged.fire(pageIndex);\n              });\n            }\n\n            return Deferred().resolve().promise();\n          }\n\n          return dataSource[optionName]();\n        }\n\n        return 0;\n      };\n\n      var members = {\n        init: function () {\n          var that = this;\n          that._items = [];\n          that._cachedProcessedItems = null;\n          that._columnsController = that.getController(\"columns\");\n          that._isPaging = false;\n          that._currentOperationTypes = null;\n\n          that._dataChangedHandler = e => {\n            that._currentOperationTypes = this._dataSource.operationTypes();\n\n            that._handleDataChanged(e);\n\n            that._currentOperationTypes = null;\n          };\n\n          that._columnsChangedHandler = that._handleColumnsChanged.bind(that);\n          that._loadingChangedHandler = that._handleLoadingChanged.bind(that);\n          that._loadErrorHandler = that._handleLoadError.bind(that);\n          that._customizeStoreLoadOptionsHandler = that._handleCustomizeStoreLoadOptions.bind(that);\n          that._changingHandler = that._handleChanging.bind(that);\n          that._dataPushedHandler = that._handleDataPushed.bind(that);\n\n          that._columnsController.columnsChanged.add(that._columnsChangedHandler);\n\n          that._isLoading = false;\n          that._isCustomLoading = false;\n          that._repaintChangesOnly = void 0;\n          that._changes = [];\n          that.createAction(\"onDataErrorOccurred\");\n          that.dataErrorOccurred.add(function (error) {\n            return that.executeAction(\"onDataErrorOccurred\", {\n              error: error\n            });\n          });\n\n          that._refreshDataSource();\n        },\n        _getPagingOptionValue: function (optionName) {\n          return this._dataSource[optionName]();\n        },\n        callbackNames: function () {\n          return [\"changed\", \"loadingChanged\", \"dataErrorOccurred\", \"pageChanged\", \"dataSourceChanged\", \"pushed\"];\n        },\n        callbackFlags: function (name) {\n          if (\"dataErrorOccurred\" === name) {\n            return {\n              stopOnFalse: true\n            };\n          }\n        },\n        publicMethods: function () {\n          return [\"beginCustomLoading\", \"endCustomLoading\", \"refresh\", \"filter\", \"clearFilter\", \"getCombinedFilter\", \"keyOf\", \"byKey\", \"getDataByKeys\", \"pageIndex\", \"pageSize\", \"pageCount\", \"totalCount\", \"_disposeDataSource\", \"getKeyByRowIndex\", \"getRowIndexByKey\", \"getDataSource\", \"getVisibleRows\", \"repaintRows\"];\n        },\n        reset: function () {\n          this._columnsController.reset();\n\n          this._items = [];\n\n          this._refreshDataSource();\n        },\n\n        _handleDataSourceChange(args) {\n          if (args.value === args.previousValue || this.option(\"columns\") && Array.isArray(args.value) && Array.isArray(args.previousValue)) {\n            var isValueChanged = args.value !== args.previousValue;\n\n            if (isValueChanged) {\n              var store = this.store();\n\n              if (store) {\n                store._array = args.value;\n              }\n            }\n\n            if (this.needToRefreshOnDataSourceChange(args)) {\n              this.refresh(this.option(\"repaintChangesOnly\"));\n            }\n\n            return true;\n          }\n\n          return false;\n        },\n\n        needToRefreshOnDataSourceChange: function (args) {\n          return true;\n        },\n        optionChanged: function (args) {\n          var that = this;\n          var dataSource;\n          var changedPagingOptions;\n\n          function handled() {\n            args.handled = true;\n          }\n\n          if (\"dataSource\" === args.name && args.name === args.fullName && this._handleDataSourceChange(args)) {\n            handled();\n            return;\n          }\n\n          switch (args.name) {\n            case \"cacheEnabled\":\n            case \"repaintChangesOnly\":\n            case \"highlightChanges\":\n            case \"loadingTimeout\":\n              handled();\n              break;\n\n            case \"remoteOperations\":\n            case \"keyExpr\":\n            case \"dataSource\":\n            case \"scrolling\":\n              handled();\n              that.reset();\n              break;\n\n            case \"paging\":\n              dataSource = that.dataSource();\n\n              if (dataSource) {\n                changedPagingOptions = that._setPagingOptions(dataSource);\n\n                if (changedPagingOptions) {\n                  var pageIndex = dataSource.pageIndex();\n                  this._isPaging = changedPagingOptions.isPageIndexChanged;\n                  dataSource.load().done(() => {\n                    this._isPaging = false;\n                    that.pageChanged.fire(pageIndex);\n                  });\n                }\n              }\n\n              handled();\n              break;\n\n            case \"rtlEnabled\":\n              that.reset();\n              break;\n\n            case \"columns\":\n              dataSource = that.dataSource();\n\n              if (dataSource && dataSource.isLoading() && args.name === args.fullName) {\n                this._useSortingGroupingFromColumns = true;\n                dataSource.load();\n              }\n\n              break;\n\n            default:\n              that.callBase(args);\n          }\n        },\n        isReady: function () {\n          return !this._isLoading;\n        },\n        getDataSource: function () {\n          return this._dataSource && this._dataSource._dataSource;\n        },\n        getCombinedFilter: function (returnDataField) {\n          return this.combinedFilter(void 0, returnDataField);\n        },\n        combinedFilter: function (filter, returnDataField) {\n          var dataSource = this._dataSource;\n          var columnsController = this._columnsController;\n\n          if (dataSource) {\n            if (void 0 === filter) {\n              filter = dataSource.filter();\n            }\n\n            var additionalFilter = this._calculateAdditionalFilter();\n\n            if (additionalFilter) {\n              if (columnsController.isDataSourceApplied() || columnsController.isAllDataTypesDefined()) {\n                filter = gridCoreUtils.combineFilters([additionalFilter, filter]);\n              }\n            }\n\n            filter = columnsController.updateFilter(filter, returnDataField || dataSource.remoteOperations().filtering);\n          }\n\n          return filter;\n        },\n        waitReady: function () {\n          if (this._updateLockCount) {\n            this._readyDeferred = new Deferred();\n            return this._readyDeferred;\n          }\n\n          return when();\n        },\n        _endUpdateCore: function () {\n          var changes = this._changes;\n\n          if (changes.length) {\n            this._changes = [];\n            var repaintChangesOnly = changes.every(change => change.repaintChangesOnly);\n            this.updateItems(1 === changes.length ? changes[0] : {\n              repaintChangesOnly: repaintChangesOnly\n            });\n          }\n\n          if (this._readyDeferred) {\n            this._readyDeferred.resolve();\n\n            this._readyDeferred = null;\n          }\n        },\n        _handleCustomizeStoreLoadOptions: function (e) {\n          var _storeLoadOptions$fil;\n\n          var columnsController = this._columnsController;\n          var dataSource = this._dataSource;\n          var storeLoadOptions = e.storeLoadOptions;\n\n          if (e.isCustomLoading && !storeLoadOptions.isLoadingAll) {\n            return;\n          }\n\n          storeLoadOptions.filter = this.combinedFilter(storeLoadOptions.filter);\n\n          if (1 === (null === (_storeLoadOptions$fil = storeLoadOptions.filter) || void 0 === _storeLoadOptions$fil ? void 0 : _storeLoadOptions$fil.length) && \"!\" === storeLoadOptions.filter[0]) {\n            e.data = [];\n            e.extra = e.extra || {};\n            e.extra.totalCount = 0;\n          }\n\n          if (!columnsController.isDataSourceApplied()) {\n            columnsController.updateColumnDataTypes(dataSource);\n          }\n\n          this._columnsUpdating = true;\n          columnsController.updateSortingGrouping(dataSource, !this._useSortingGroupingFromColumns);\n          this._columnsUpdating = false;\n          storeLoadOptions.sort = columnsController.getSortDataSourceParameters();\n          storeLoadOptions.group = columnsController.getGroupDataSourceParameters();\n          dataSource.sort(storeLoadOptions.sort);\n          dataSource.group(storeLoadOptions.group);\n          storeLoadOptions.sort = columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().sorting);\n          e.group = columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().grouping);\n        },\n        _handleColumnsChanged: function (e) {\n          var that = this;\n          var changeTypes = e.changeTypes;\n          var optionNames = e.optionNames;\n          var filterValue;\n          var filterValues;\n          var filterApplied;\n\n          if (changeTypes.sorting || changeTypes.grouping) {\n            if (that._dataSource && !that._columnsUpdating) {\n              that._dataSource.group(that._columnsController.getGroupDataSourceParameters());\n\n              that._dataSource.sort(that._columnsController.getSortDataSourceParameters());\n\n              that.reload();\n            }\n          } else if (changeTypes.columns) {\n            filterValues = that._columnsController.columnOption(e.columnIndex, \"filterValues\");\n\n            if (optionNames.filterValues || optionNames.filterType && Array.isArray(filterValues) || optionNames.filterValue || optionNames.selectedFilterOperation || optionNames.allowFiltering) {\n              filterValue = that._columnsController.columnOption(e.columnIndex, \"filterValue\");\n\n              if (Array.isArray(filterValues) || void 0 === e.columnIndex || isDefined(filterValue) || !optionNames.selectedFilterOperation || optionNames.filterValue) {\n                that._applyFilter();\n\n                filterApplied = true;\n              }\n            }\n\n            if (!that._needApplyFilter && !gridCoreUtils.checkChanges(optionNames, [\"width\", \"visibleWidth\", \"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"filterValues\", \"filterType\"])) {\n              that._columnsController.columnsChanged.add(function updateItemsHandler(change) {\n                var _change$changeTypes;\n\n                that._columnsController.columnsChanged.remove(updateItemsHandler);\n\n                that.updateItems({\n                  repaintChangesOnly: false,\n                  virtualColumnsScrolling: null === change || void 0 === change ? void 0 : null === (_change$changeTypes = change.changeTypes) || void 0 === _change$changeTypes ? void 0 : _change$changeTypes.virtualColumnsScrolling\n                });\n              });\n            }\n\n            if (isDefined(optionNames.visible)) {\n              var column = that._columnsController.columnOption(e.columnIndex);\n\n              if (column && (isDefined(column.filterValue) || isDefined(column.filterValues))) {\n                that._applyFilter();\n\n                filterApplied = true;\n              }\n            }\n          }\n\n          if (!filterApplied && changeTypes.filtering) {\n            that.reload();\n          }\n        },\n        _handleDataChanged: function (e) {\n          var that = this;\n          var dataSource = that._dataSource;\n          var columnsController = that._columnsController;\n          var isAsyncDataSourceApplying = false;\n          this._useSortingGroupingFromColumns = false;\n\n          if (dataSource && !that._isDataSourceApplying) {\n            that._isDataSourceApplying = true;\n            when(that._columnsController.applyDataSource(dataSource)).done(function () {\n              if (that._isLoading) {\n                that._handleLoadingChanged(false);\n              }\n\n              if (isAsyncDataSourceApplying && e && e.isDelayed) {\n                e.isDelayed = false;\n              }\n\n              that._isDataSourceApplying = false;\n              var needApplyFilter = that._needApplyFilter;\n              that._needApplyFilter = false;\n\n              if (needApplyFilter && !that._isAllDataTypesDefined && (additionalFilter = that._calculateAdditionalFilter(), additionalFilter && additionalFilter.length)) {\n                errors.log(\"W1005\", that.component.NAME);\n\n                that._applyFilter();\n              } else {\n                that.updateItems(e, true);\n              }\n\n              var additionalFilter;\n            }).fail(function () {\n              that._isDataSourceApplying = false;\n            });\n\n            if (that._isDataSourceApplying) {\n              isAsyncDataSourceApplying = true;\n\n              that._handleLoadingChanged(true);\n            }\n\n            that._needApplyFilter = !that._columnsController.isDataSourceApplied();\n            that._isAllDataTypesDefined = columnsController.isAllDataTypesDefined();\n          }\n        },\n        _handleLoadingChanged: function (isLoading) {\n          this._isLoading = isLoading;\n\n          this._fireLoadingChanged();\n        },\n        _handleLoadError: function (e) {\n          this.dataErrorOccurred.fire(e);\n        },\n        _handleDataPushed: function (changes) {\n          this.pushed.fire(changes);\n        },\n        fireError: function () {\n          this.dataErrorOccurred.fire(errors.Error.apply(errors, arguments));\n        },\n        _setPagingOptions: function (dataSource) {\n          var pageIndex = this.option(\"paging.pageIndex\");\n          var pageSize = this.option(\"paging.pageSize\");\n          var pagingEnabled = this.option(\"paging.enabled\");\n          var scrollingMode = this.option(\"scrolling.mode\");\n          var appendMode = \"infinite\" === scrollingMode;\n          var virtualMode = \"virtual\" === scrollingMode;\n          var paginate = pagingEnabled || virtualMode || appendMode;\n          var isPaginateChanged = false;\n          var isPageSizeChanged = false;\n          var isPageIndexChanged = false;\n          dataSource.requireTotalCount(!appendMode);\n\n          if (void 0 !== pagingEnabled && dataSource.paginate() !== paginate) {\n            dataSource.paginate(paginate);\n            isPaginateChanged = true;\n          }\n\n          if (void 0 !== pageSize && dataSource.pageSize() !== pageSize) {\n            dataSource.pageSize(pageSize);\n            isPageSizeChanged = true;\n          }\n\n          if (void 0 !== pageIndex && dataSource.pageIndex() !== pageIndex) {\n            dataSource.pageIndex(pageIndex);\n            isPageIndexChanged = true;\n          }\n\n          if (isPaginateChanged || isPageSizeChanged || isPageIndexChanged) {\n            return {\n              isPaginateChanged: isPaginateChanged,\n              isPageSizeChanged: isPageSizeChanged,\n              isPageIndexChanged: isPageIndexChanged\n            };\n          }\n\n          return false;\n        },\n        _getSpecificDataSourceOption: function () {\n          var dataSource = this.option(\"dataSource\");\n\n          if (Array.isArray(dataSource)) {\n            return {\n              store: {\n                type: \"array\",\n                data: dataSource,\n                key: this.option(\"keyExpr\")\n              }\n            };\n          }\n\n          return dataSource;\n        },\n        _initDataSource: function () {\n          var oldDataSource = this._dataSource;\n          this.callBase();\n          var dataSource = this._dataSource;\n          this._useSortingGroupingFromColumns = true;\n          this._cachedProcessedItems = null;\n\n          if (dataSource) {\n            var changedPagingOptions = this._setPagingOptions(dataSource);\n\n            this._isPaging = null === changedPagingOptions || void 0 === changedPagingOptions ? void 0 : changedPagingOptions.isPageIndexChanged;\n            this.setDataSource(dataSource);\n          } else if (oldDataSource) {\n            this.updateItems();\n          }\n        },\n        _loadDataSource: function () {\n          var that = this;\n          var dataSource = that._dataSource;\n          var result = new Deferred();\n          when(this._columnsController.refresh(true)).always(function () {\n            if (dataSource) {\n              dataSource.load().done(function () {\n                that._isPaging = false;\n                result.resolve.apply(result, arguments);\n              }).fail(result.reject);\n            } else {\n              result.resolve();\n            }\n          });\n          return result.promise();\n        },\n        _beforeProcessItems: function (items) {\n          return items.slice(0);\n        },\n        getRowIndexDelta: function () {\n          return 0;\n        },\n        _processItems: function (items, change) {\n          var that = this;\n          var rowIndexDelta = that.getRowIndexDelta();\n          var changeType = change.changeType;\n\n          var visibleColumns = that._columnsController.getVisibleColumns(null, \"loadingAll\" === changeType);\n\n          var visibleItems = that._items;\n          var lastVisibleItem = \"append\" === changeType && visibleItems.length > 0 ? visibleItems[visibleItems.length - 1] : null;\n          var dataIndex = isDefined(null === lastVisibleItem || void 0 === lastVisibleItem ? void 0 : lastVisibleItem.dataIndex) ? lastVisibleItem.dataIndex + 1 : 0;\n          var options = {\n            visibleColumns: visibleColumns,\n            dataIndex: dataIndex\n          };\n          var result = [];\n          each(items, function (index, item) {\n            if (isDefined(item)) {\n              options.rowIndex = index - rowIndexDelta;\n              item = that._processItem(item, options);\n              result.push(item);\n            }\n          });\n          return result;\n        },\n        _processItem: function (item, options) {\n          item = this._generateDataItem(item, options);\n          item = this._processDataItem(item, options);\n          item.dataIndex = options.dataIndex++;\n          return item;\n        },\n        _generateDataItem: function (data) {\n          return {\n            rowType: \"data\",\n            data: data,\n            key: this.keyOf(data)\n          };\n        },\n        _processDataItem: function (dataItem, options) {\n          dataItem.values = this.generateDataValues(dataItem.data, options.visibleColumns);\n          return dataItem;\n        },\n        generateDataValues: function (data, columns, isModified) {\n          var values = [];\n          var value;\n\n          for (var i = 0; i < columns.length; i++) {\n            var column = columns[i];\n            value = isModified ? void 0 : null;\n\n            if (!column.command) {\n              if (column.calculateCellValue) {\n                value = column.calculateCellValue(data);\n              } else if (column.dataField) {\n                value = data[column.dataField];\n              }\n            }\n\n            values.push(value);\n          }\n\n          return values;\n        },\n        _applyChange: function (change) {\n          if (\"update\" === change.changeType) {\n            this._applyChangeUpdate(change);\n          } else if (this.items().length && change.repaintChangesOnly && \"refresh\" === change.changeType) {\n            this._applyChangesOnly(change);\n          } else if (\"refresh\" === change.changeType) {\n            this._applyChangeFull(change);\n          }\n        },\n        _applyChangeFull: function (change) {\n          this._items = change.items.slice(0);\n        },\n        _getRowIndices: function (change) {\n          var rowIndices = change.rowIndices.slice(0);\n          var rowIndexDelta = this.getRowIndexDelta();\n          rowIndices.sort(function (a, b) {\n            return a - b;\n          });\n\n          for (var i = 0; i < rowIndices.length; i++) {\n            var correctedRowIndex = rowIndices[i];\n\n            if (change.allowInvisibleRowIndices) {\n              correctedRowIndex += rowIndexDelta;\n            }\n\n            if (correctedRowIndex < 0) {\n              rowIndices.splice(i, 1);\n              i--;\n            }\n          }\n\n          return rowIndices;\n        },\n        _applyChangeUpdate: function (change) {\n          var that = this;\n          var items = change.items;\n\n          var rowIndices = that._getRowIndices(change);\n\n          var rowIndexDelta = that.getRowIndexDelta();\n          var repaintChangesOnly = that.option(\"repaintChangesOnly\");\n          var prevIndex = -1;\n          var rowIndexCorrection = 0;\n          var changeType;\n          change.items = [];\n          change.rowIndices = [];\n          change.columnIndices = [];\n          change.changeTypes = [];\n\n          var equalItems = function (item1, item2, strict) {\n            var result = item1 && item2 && equalByValue(item1.key, item2.key);\n\n            if (result && strict) {\n              result = item1.rowType === item2.rowType && (\"detail\" !== item2.rowType || item1.isEditing === item2.isEditing);\n            }\n\n            return result;\n          };\n\n          each(rowIndices, function (index, rowIndex) {\n            var columnIndices;\n            rowIndex += rowIndexCorrection + rowIndexDelta;\n\n            if (prevIndex === rowIndex) {\n              return;\n            }\n\n            prevIndex = rowIndex;\n            var oldItem = that._items[rowIndex];\n            var oldNextItem = that._items[rowIndex + 1];\n            var newItem = items[rowIndex];\n            var newNextItem = items[rowIndex + 1];\n            var strict = equalItems(oldItem, oldNextItem) || equalItems(newItem, newNextItem);\n\n            if (newItem) {\n              newItem.rowIndex = rowIndex;\n              change.items.push(newItem);\n            }\n\n            if (oldItem && newItem && equalItems(oldItem, newItem, strict)) {\n              changeType = \"update\";\n              that._items[rowIndex] = newItem;\n\n              if (oldItem.visible !== newItem.visible) {\n                change.items.splice(-1, 1, {\n                  visible: newItem.visible\n                });\n              } else if (repaintChangesOnly && !change.isFullUpdate) {\n                columnIndices = that._partialUpdateRow(oldItem, newItem, rowIndex - rowIndexDelta);\n              }\n            } else if (newItem && !oldItem || newNextItem && equalItems(oldItem, newNextItem, strict)) {\n              changeType = \"insert\";\n\n              that._items.splice(rowIndex, 0, newItem);\n\n              rowIndexCorrection++;\n            } else if (oldItem && !newItem || oldNextItem && equalItems(newItem, oldNextItem, strict)) {\n              changeType = \"remove\";\n\n              that._items.splice(rowIndex, 1);\n\n              rowIndexCorrection--;\n              prevIndex = -1;\n            } else if (newItem) {\n              changeType = \"update\";\n              that._items[rowIndex] = newItem;\n            } else {\n              return;\n            }\n\n            change.rowIndices.push(rowIndex - rowIndexDelta);\n            change.changeTypes.push(changeType);\n            change.columnIndices.push(columnIndices);\n          });\n        },\n        _isCellChanged: function (oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\n          if (JSON.stringify(oldRow.values[columnIndex]) !== JSON.stringify(newRow.values[columnIndex])) {\n            return true;\n          }\n\n          function isCellModified(row, columnIndex) {\n            return row.modifiedValues ? void 0 !== row.modifiedValues[columnIndex] : false;\n          }\n\n          if (isCellModified(oldRow, columnIndex) !== isCellModified(newRow, columnIndex)) {\n            return true;\n          }\n\n          return false;\n        },\n        _getChangedColumnIndices: function (oldItem, newItem, visibleRowIndex, isLiveUpdate) {\n          var columnIndices;\n\n          if (oldItem.rowType === newItem.rowType) {\n            if (\"group\" !== newItem.rowType && \"groupFooter\" !== newItem.rowType) {\n              columnIndices = [];\n\n              if (\"detail\" !== newItem.rowType) {\n                for (var columnIndex = 0; columnIndex < oldItem.values.length; columnIndex++) {\n                  if (this._isCellChanged(oldItem, newItem, visibleRowIndex, columnIndex, isLiveUpdate)) {\n                    columnIndices.push(columnIndex);\n                  }\n                }\n              }\n            }\n\n            if (\"group\" === newItem.rowType && newItem.isExpanded === oldItem.isExpanded && oldItem.cells) {\n              columnIndices = oldItem.cells.map((cell, index) => {\n                var _cell$column;\n\n                return \"groupExpand\" !== (null === (_cell$column = cell.column) || void 0 === _cell$column ? void 0 : _cell$column.type) ? index : -1;\n              }).filter(index => index >= 0);\n            }\n          }\n\n          return columnIndices;\n        },\n        _partialUpdateRow: function (oldItem, newItem, visibleRowIndex, isLiveUpdate) {\n          var _changedColumnIndices;\n\n          var changedColumnIndices = this._getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate);\n\n          if (null !== (_changedColumnIndices = changedColumnIndices) && void 0 !== _changedColumnIndices && _changedColumnIndices.length && this.option(\"dataRowTemplate\")) {\n            changedColumnIndices = void 0;\n          }\n\n          if (changedColumnIndices) {\n            oldItem.cells && oldItem.cells.forEach(function (cell, columnIndex) {\n              var isCellChanged = changedColumnIndices.indexOf(columnIndex) >= 0;\n\n              if (!isCellChanged && cell && cell.update) {\n                cell.update(newItem);\n              }\n            });\n            newItem.update = oldItem.update;\n            newItem.watch = oldItem.watch;\n            newItem.cells = oldItem.cells;\n\n            if (isLiveUpdate) {\n              newItem.oldValues = oldItem.values;\n            }\n\n            oldItem.update && oldItem.update(newItem);\n          }\n\n          return changedColumnIndices;\n        },\n        _isItemEquals: function (item1, item2) {\n          if (JSON.stringify(item1.values) !== JSON.stringify(item2.values)) {\n            return false;\n          }\n\n          if ([\"modified\", \"isNewRow\", \"removed\", \"isEditing\"].some(field => item1[field] !== item2[field])) {\n            return false;\n          }\n\n          if (\"group\" === item1.rowType || \"groupFooter\" === item1.rowType) {\n            var _item1$data, _item2$data, _item1$data2, _item2$data2;\n\n            var expandedMatch = item1.isExpanded === item2.isExpanded;\n            var summaryCellsMatch = JSON.stringify(item1.summaryCells) === JSON.stringify(item2.summaryCells);\n            var continuationMatch = (null === (_item1$data = item1.data) || void 0 === _item1$data ? void 0 : _item1$data.isContinuation) === (null === (_item2$data = item2.data) || void 0 === _item2$data ? void 0 : _item2$data.isContinuation) && (null === (_item1$data2 = item1.data) || void 0 === _item1$data2 ? void 0 : _item1$data2.isContinuationOnNextPage) === (null === (_item2$data2 = item2.data) || void 0 === _item2$data2 ? void 0 : _item2$data2.isContinuationOnNextPage);\n\n            if (!expandedMatch || !summaryCellsMatch || !continuationMatch) {\n              return false;\n            }\n          }\n\n          return true;\n        },\n        _applyChangesOnly: function (change) {\n          var _change$isLiveUpdate;\n\n          var rowIndices = [];\n          var columnIndices = [];\n          var changeTypes = [];\n          var items = [];\n          var newIndexByKey = {};\n          var isLiveUpdate = null !== (_change$isLiveUpdate = null === change || void 0 === change ? void 0 : change.isLiveUpdate) && void 0 !== _change$isLiveUpdate ? _change$isLiveUpdate : true;\n\n          function getRowKey(row) {\n            if (row) {\n              return row.rowType + \",\" + JSON.stringify(row.key);\n            }\n          }\n\n          var currentItems = this._items;\n          var oldItems = currentItems.slice();\n          change.items.forEach(function (item, index) {\n            var key = getRowKey(item);\n            newIndexByKey[key] = index;\n            item.rowIndex = index;\n          });\n          var result = findChanges(oldItems, change.items, getRowKey, (item1, item2) => {\n            if (!this._isItemEquals(item1, item2)) {\n              return false;\n            }\n\n            if (item1.cells) {\n              item1.update && item1.update(item2);\n              item1.cells.forEach(function (cell) {\n                if (cell && cell.update) {\n                  cell.update(item2, true);\n                }\n              });\n            }\n\n            return true;\n          });\n\n          if (!result) {\n            this._applyChangeFull(change);\n\n            return;\n          }\n\n          result.forEach(change => {\n            switch (change.type) {\n              case \"update\":\n                var index = change.index;\n                var newItem = change.data;\n                var oldItem = change.oldItem;\n\n                var changedColumnIndices = this._partialUpdateRow(oldItem, newItem, index, isLiveUpdate);\n\n                rowIndices.push(index);\n                changeTypes.push(\"update\");\n                items.push(newItem);\n                currentItems[index] = newItem;\n                columnIndices.push(changedColumnIndices);\n                break;\n\n              case \"insert\":\n                rowIndices.push(change.index);\n                changeTypes.push(\"insert\");\n                items.push(change.data);\n                columnIndices.push(void 0);\n                currentItems.splice(change.index, 0, change.data);\n                break;\n\n              case \"remove\":\n                rowIndices.push(change.index);\n                changeTypes.push(\"remove\");\n                currentItems.splice(change.index, 1);\n                items.push(change.oldItem);\n                columnIndices.push(void 0);\n            }\n          });\n          change.repaintChangesOnly = true;\n          change.changeType = \"update\";\n          change.rowIndices = rowIndices;\n          change.columnIndices = columnIndices;\n          change.changeTypes = changeTypes;\n          change.items = items;\n\n          if (oldItems.length) {\n            change.isLiveUpdate = true;\n          }\n\n          this._correctRowIndices(rowIndex => {\n            var oldRowIndexOffset = this._rowIndexOffset || 0;\n            var rowIndexOffset = this.getRowIndexOffset();\n            var oldItem = oldItems[rowIndex - oldRowIndexOffset];\n            var key = getRowKey(oldItem);\n            var newVisibleRowIndex = newIndexByKey[key];\n            return newVisibleRowIndex >= 0 ? newVisibleRowIndex + rowIndexOffset - rowIndex : 0;\n          });\n        },\n        _correctRowIndices: noop,\n        _afterProcessItems: function (items) {\n          return items;\n        },\n        _updateItemsCore: function (change) {\n          var items;\n          var dataSource = this._dataSource;\n          var changeType = change.changeType || \"refresh\";\n          change.changeType = changeType;\n\n          if (dataSource) {\n            var cachedProcessedItems = this._cachedProcessedItems;\n\n            if (change.useProcessedItemsCache && cachedProcessedItems) {\n              items = cachedProcessedItems;\n            } else {\n              items = change.items || dataSource.items();\n              items = this._beforeProcessItems(items);\n              items = this._processItems(items, change);\n              this._cachedProcessedItems = items;\n            }\n\n            items = this._afterProcessItems(items, change);\n            change.items = items;\n            var oldItems = this._items.length === items.length && this._items;\n\n            this._applyChange(change);\n\n            var rowIndexDelta = this.getRowIndexDelta();\n            each(this._items, (index, item) => {\n              item.rowIndex = index - rowIndexDelta;\n\n              if (oldItems) {\n                item.cells = oldItems[index].cells || [];\n              }\n\n              var newItem = items[index];\n\n              if (newItem) {\n                item.loadIndex = newItem.loadIndex;\n              }\n            });\n            this._rowIndexOffset = this.getRowIndexOffset();\n          } else {\n            this._items = [];\n          }\n        },\n        _handleChanging: function (e) {\n          var rows = this.getVisibleRows();\n          var dataSource = this.dataSource();\n\n          if (dataSource) {\n            e.changes.forEach(function (change) {\n              if (\"insert\" === change.type && change.index >= 0) {\n                var dataIndex = 0;\n\n                for (var i = 0; i < change.index; i++) {\n                  var row = rows[i];\n\n                  if (row && (\"data\" === row.rowType || \"group\" === row.rowType)) {\n                    dataIndex++;\n                  }\n                }\n\n                change.index = dataIndex;\n              }\n            });\n          }\n        },\n        updateItems: function (change, isDataChanged) {\n          change = change || {};\n\n          if (void 0 !== this._repaintChangesOnly) {\n            var _change$repaintChange;\n\n            change.repaintChangesOnly = null !== (_change$repaintChange = change.repaintChangesOnly) && void 0 !== _change$repaintChange ? _change$repaintChange : this._repaintChangesOnly;\n            change.needUpdateDimensions = change.needUpdateDimensions || this._needUpdateDimensions;\n          } else if (change.changes) {\n            change.repaintChangesOnly = this.option(\"repaintChangesOnly\");\n          } else if (isDataChanged) {\n            var operationTypes = this.dataSource().operationTypes();\n            change.repaintChangesOnly = operationTypes && !operationTypes.grouping && !operationTypes.filtering && this.option(\"repaintChangesOnly\");\n            change.isDataChanged = true;\n\n            if (operationTypes && (operationTypes.reload || operationTypes.paging || operationTypes.groupExpanding)) {\n              change.needUpdateDimensions = true;\n            }\n          }\n\n          if (this._updateLockCount && !change.cancel) {\n            this._changes.push(change);\n\n            return;\n          }\n\n          this._updateItemsCore(change);\n\n          if (change.cancel) {\n            return;\n          }\n\n          this._fireChanged(change);\n        },\n        loadingOperationTypes: function () {\n          var dataSource = this.dataSource();\n          return dataSource && dataSource.loadingOperationTypes() || {};\n        },\n        _fireChanged: function (change) {\n          if (this._currentOperationTypes) {\n            change.operationTypes = this._currentOperationTypes;\n            this._currentOperationTypes = null;\n          }\n\n          deferRender(() => {\n            this.changed.fire(change);\n          });\n        },\n        isLoading: function () {\n          return this._isLoading || this._isCustomLoading;\n        },\n        _fireLoadingChanged: function () {\n          this.loadingChanged.fire(this.isLoading(), this._loadingText);\n        },\n        _calculateAdditionalFilter: function () {\n          return null;\n        },\n        _applyFilter: function () {\n          var dataSource = this._dataSource;\n\n          if (dataSource) {\n            dataSource.pageIndex(0);\n            this._isFilterApplying = true;\n            return this.reload().done(() => {\n              if (this._isFilterApplying) {\n                this.pageChanged.fire();\n              }\n            });\n          }\n        },\n        resetFilterApplying: function () {\n          this._isFilterApplying = false;\n        },\n        filter: function (filterExpr) {\n          var dataSource = this._dataSource;\n          var filter = dataSource && dataSource.filter();\n\n          if (0 === arguments.length) {\n            return filter;\n          }\n\n          filterExpr = arguments.length > 1 ? Array.prototype.slice.call(arguments, 0) : filterExpr;\n\n          if (gridCoreUtils.equalFilterParameters(filter, filterExpr)) {\n            return;\n          }\n\n          if (dataSource) {\n            dataSource.filter(filterExpr);\n          }\n\n          this._applyFilter();\n        },\n        clearFilter: function (filterName) {\n          var that = this;\n          var columnsController = that._columnsController;\n\n          var clearColumnOption = function (optionName) {\n            var columnCount = columnsController.columnCount();\n\n            for (var index = 0; index < columnCount; index++) {\n              columnsController.columnOption(index, optionName, void 0);\n            }\n          };\n\n          that.component.beginUpdate();\n\n          if (arguments.length > 0) {\n            switch (filterName) {\n              case \"dataSource\":\n                that.filter(null);\n                break;\n\n              case \"search\":\n                that.searchByText(\"\");\n                break;\n\n              case \"header\":\n                clearColumnOption(\"filterValues\");\n                break;\n\n              case \"row\":\n                clearColumnOption(\"filterValue\");\n            }\n          } else {\n            that.filter(null);\n            that.searchByText(\"\");\n            clearColumnOption(\"filterValue\");\n            clearColumnOption(\"bufferedFilterValue\");\n            clearColumnOption(\"filterValues\");\n          }\n\n          that.component.endUpdate();\n        },\n        _fireDataSourceChanged: function () {\n          var that = this;\n          that.changed.add(function changedHandler() {\n            that.changed.remove(changedHandler);\n            that.dataSourceChanged.fire();\n          });\n        },\n        _getDataSourceAdapter: noop,\n        _createDataSourceAdapterCore: function (dataSource, remoteOperations) {\n          var dataSourceAdapterProvider = this._getDataSourceAdapter();\n\n          var dataSourceAdapter = dataSourceAdapterProvider.create(this.component);\n          dataSourceAdapter.init(dataSource, remoteOperations);\n          return dataSourceAdapter;\n        },\n        isLocalStore: function (store) {\n          store = store || this.store();\n          return store instanceof ArrayStore;\n        },\n        isCustomStore: function (store) {\n          store = store || this.store();\n          return store instanceof CustomStore;\n        },\n        _createDataSourceAdapter: function (dataSource) {\n          var remoteOperations = this.option(\"remoteOperations\");\n          var store = dataSource.store();\n          var enabledRemoteOperations = {\n            filtering: true,\n            sorting: true,\n            paging: true,\n            grouping: true,\n            summary: true\n          };\n\n          if (remoteOperations && remoteOperations.groupPaging) {\n            remoteOperations = extend({}, enabledRemoteOperations, remoteOperations);\n          }\n\n          if (\"auto\" === remoteOperations) {\n            remoteOperations = this.isLocalStore(store) || this.isCustomStore(store) ? {} : {\n              filtering: true,\n              sorting: true,\n              paging: true\n            };\n          }\n\n          if (true === remoteOperations) {\n            remoteOperations = enabledRemoteOperations;\n          }\n\n          return this._createDataSourceAdapterCore(dataSource, remoteOperations);\n        },\n        setDataSource: function (dataSource) {\n          var oldDataSource = this._dataSource;\n\n          if (!dataSource && oldDataSource) {\n            oldDataSource.cancelAll();\n            oldDataSource.changed.remove(this._dataChangedHandler);\n            oldDataSource.loadingChanged.remove(this._loadingChangedHandler);\n            oldDataSource.loadError.remove(this._loadErrorHandler);\n            oldDataSource.customizeStoreLoadOptions.remove(this._customizeStoreLoadOptionsHandler);\n            oldDataSource.changing.remove(this._changingHandler);\n            oldDataSource.pushed.remove(this._dataPushedHandler);\n            oldDataSource.dispose(this._isSharedDataSource);\n          }\n\n          if (dataSource) {\n            dataSource = this._createDataSourceAdapter(dataSource);\n          }\n\n          this._dataSource = dataSource;\n\n          if (dataSource) {\n            this._fireDataSourceChanged();\n\n            this._isLoading = !dataSource.isLoaded();\n            this._needApplyFilter = true;\n            this._isAllDataTypesDefined = this._columnsController.isAllDataTypesDefined();\n            dataSource.changed.add(this._dataChangedHandler);\n            dataSource.loadingChanged.add(this._loadingChangedHandler);\n            dataSource.loadError.add(this._loadErrorHandler);\n            dataSource.customizeStoreLoadOptions.add(this._customizeStoreLoadOptionsHandler);\n            dataSource.changing.add(this._changingHandler);\n            dataSource.pushed.add(this._dataPushedHandler);\n          }\n        },\n        items: function () {\n          return this._items;\n        },\n        isEmpty: function () {\n          return !this.items().length;\n        },\n        pageCount: function () {\n          return this._dataSource ? this._dataSource.pageCount() : 1;\n        },\n        dataSource: function () {\n          return this._dataSource;\n        },\n        store: function () {\n          var dataSource = this._dataSource;\n          return dataSource && dataSource.store();\n        },\n        loadAll: function (data) {\n          var that = this;\n          var d = new Deferred();\n          var dataSource = that._dataSource;\n\n          if (dataSource) {\n            if (data) {\n              var options = {\n                data: data,\n                isCustomLoading: true,\n                storeLoadOptions: {\n                  isLoadingAll: true\n                },\n                loadOptions: {\n                  filter: that.getCombinedFilter(),\n                  group: dataSource.group(),\n                  sort: dataSource.sort()\n                }\n              };\n\n              dataSource._handleDataLoaded(options);\n\n              when(options.data).done(function (data) {\n                data = that._beforeProcessItems(data);\n                d.resolve(that._processItems(data, {\n                  changeType: \"loadingAll\"\n                }), options.extra && options.extra.summary);\n              }).fail(d.reject);\n            } else if (!dataSource.isLoading()) {\n              var loadOptions = extend({}, dataSource.loadOptions(), {\n                isLoadingAll: true,\n                requireTotalCount: false\n              });\n              dataSource.load(loadOptions).done(function (items, extra) {\n                items = that._beforeProcessItems(items);\n                items = that._processItems(items, {\n                  changeType: \"loadingAll\"\n                });\n                d.resolve(items, extra && extra.summary);\n              }).fail(d.reject);\n            } else {\n              d.reject();\n            }\n          } else {\n            d.resolve([]);\n          }\n\n          return d;\n        },\n        getKeyByRowIndex: function (rowIndex, byLoaded) {\n          var item = this.items(byLoaded)[rowIndex];\n\n          if (item) {\n            return item.key;\n          }\n        },\n        getRowIndexByKey: function (key, byLoaded) {\n          return gridCoreUtils.getIndexByKey(key, this.items(byLoaded));\n        },\n        keyOf: function (data) {\n          var store = this.store();\n\n          if (store) {\n            return store.keyOf(data);\n          }\n        },\n        byKey: function (key) {\n          var store = this.store();\n          var rowIndex = this.getRowIndexByKey(key);\n          var result;\n\n          if (!store) {\n            return;\n          }\n\n          if (rowIndex >= 0) {\n            result = new Deferred().resolve(this.items()[rowIndex].data);\n          }\n\n          return result || store.byKey(key);\n        },\n        key: function () {\n          var store = this.store();\n\n          if (store) {\n            return store.key();\n          }\n        },\n        getRowIndexOffset: function () {\n          return 0;\n        },\n        getDataByKeys: function (rowKeys) {\n          var that = this;\n          var result = new Deferred();\n          var deferreds = [];\n          var data = [];\n          each(rowKeys, function (index, key) {\n            deferreds.push(that.byKey(key).done(function (keyData) {\n              data[index] = keyData;\n            }));\n          });\n          when.apply($, deferreds).always(function () {\n            result.resolve(data);\n          });\n          return result;\n        },\n        pageIndex: function (value) {\n          return changePaging(this, \"pageIndex\", value);\n        },\n        pageSize: function (value) {\n          return changePaging(this, \"pageSize\", value);\n        },\n        beginCustomLoading: function (messageText) {\n          this._isCustomLoading = true;\n          this._loadingText = messageText || \"\";\n\n          this._fireLoadingChanged();\n        },\n        endCustomLoading: function () {\n          this._isCustomLoading = false;\n          this._loadingText = void 0;\n\n          this._fireLoadingChanged();\n        },\n        refresh: function (options) {\n          if (true === options) {\n            options = {\n              reload: true,\n              changesOnly: true\n            };\n          } else if (!options) {\n            options = {\n              lookup: true,\n              selection: true,\n              reload: true\n            };\n          }\n\n          var that = this;\n          var dataSource = that.getDataSource();\n          var changesOnly = options.changesOnly;\n          var d = new Deferred();\n\n          var customizeLoadResult = function () {\n            that._repaintChangesOnly = !!changesOnly;\n          };\n\n          when(!options.lookup || that._columnsController.refresh()).always(function () {\n            if (options.load || options.reload) {\n              dataSource && dataSource.on(\"customizeLoadResult\", customizeLoadResult);\n              when(that.reload(options.reload, changesOnly)).always(function () {\n                dataSource && dataSource.off(\"customizeLoadResult\", customizeLoadResult);\n                that._repaintChangesOnly = void 0;\n              }).done(d.resolve).fail(d.reject);\n            } else {\n              that.updateItems({\n                repaintChangesOnly: options.changesOnly\n              });\n              d.resolve();\n            }\n          });\n          return d.promise();\n        },\n        getVisibleRows: function () {\n          return this.items();\n        },\n        _disposeDataSource: function () {\n          this.setDataSource(null);\n        },\n        dispose: function () {\n          this._disposeDataSource();\n\n          this.callBase.apply(this, arguments);\n        },\n        repaintRows: function (rowIndexes, changesOnly) {\n          rowIndexes = Array.isArray(rowIndexes) ? rowIndexes : [rowIndexes];\n\n          if (rowIndexes.length > 1 || isDefined(rowIndexes[0])) {\n            this.updateItems({\n              changeType: \"update\",\n              rowIndices: rowIndexes,\n              isFullUpdate: !changesOnly\n            });\n          }\n        },\n        skipProcessingPagingChange: function (fullName) {\n          return this._skipProcessingPagingChange && (\"paging.pageIndex\" === fullName || \"paging.pageSize\" === fullName);\n        },\n        getUserState: function () {\n          return {\n            searchText: this.option(\"searchPanel.text\"),\n            pageIndex: this.pageIndex(),\n            pageSize: this.pageSize()\n          };\n        },\n        getCachedStoreData: function () {\n          return this._dataSource && this._dataSource.getCachedStoreData();\n        },\n        isLastPageLoaded: function () {\n          var pageIndex = this.pageIndex();\n          var pageCount = this.pageCount();\n          return pageIndex === pageCount - 1;\n        }\n      };\n      gridCoreUtils.proxyMethod(members, \"load\");\n      gridCoreUtils.proxyMethod(members, \"reload\");\n      gridCoreUtils.proxyMethod(members, \"push\");\n      gridCoreUtils.proxyMethod(members, \"itemsCount\", 0);\n      gridCoreUtils.proxyMethod(members, \"totalItemsCount\", 0);\n      gridCoreUtils.proxyMethod(members, \"hasKnownLastPage\", true);\n      gridCoreUtils.proxyMethod(members, \"isLoaded\", true);\n      gridCoreUtils.proxyMethod(members, \"totalCount\", 0);\n      return members;\n    }())\n  }\n};","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.data_controller.js"],"names":["$","modules","gridCoreUtils","ArrayStore","CustomStore","errors","noop","deferRender","equalByValue","each","isDefined","extend","DataHelperMixin","when","Deferred","findChanges","dataControllerModule","defaultOptions","loadingTimeout","dataSource","cacheEnabled","repaintChangesOnly","highlightChanges","onDataErrorOccurred","remoteOperations","paging","enabled","pageSize","pageIndex","controllers","data","Controller","inherit","include","changePaging","that","optionName","value","_dataSource","oldValue","_getPagingOptionValue","_skipProcessingPagingChange","option","_isPaging","done","pageChanged","fire","resolve","promise","members","init","_items","_cachedProcessedItems","_columnsController","getController","_currentOperationTypes","_dataChangedHandler","e","operationTypes","_handleDataChanged","_columnsChangedHandler","_handleColumnsChanged","bind","_loadingChangedHandler","_handleLoadingChanged","_loadErrorHandler","_handleLoadError","_customizeStoreLoadOptionsHandler","_handleCustomizeStoreLoadOptions","_changingHandler","_handleChanging","_dataPushedHandler","_handleDataPushed","columnsChanged","add","_isLoading","_isCustomLoading","_repaintChangesOnly","_changes","createAction","dataErrorOccurred","error","executeAction","_refreshDataSource","callbackNames","callbackFlags","name","stopOnFalse","publicMethods","reset","_handleDataSourceChange","args","previousValue","Array","isArray","isValueChanged","store","_array","needToRefreshOnDataSourceChange","refresh","optionChanged","changedPagingOptions","handled","fullName","_setPagingOptions","isPageIndexChanged","load","isLoading","_useSortingGroupingFromColumns","callBase","isReady","getDataSource","getCombinedFilter","returnDataField","combinedFilter","filter","columnsController","additionalFilter","_calculateAdditionalFilter","isDataSourceApplied","isAllDataTypesDefined","combineFilters","updateFilter","filtering","waitReady","_updateLockCount","_readyDeferred","_endUpdateCore","changes","length","every","change","updateItems","_storeLoadOptions$fil","storeLoadOptions","isCustomLoading","isLoadingAll","extra","totalCount","updateColumnDataTypes","_columnsUpdating","updateSortingGrouping","sort","getSortDataSourceParameters","group","getGroupDataSourceParameters","sorting","grouping","changeTypes","optionNames","filterValue","filterValues","filterApplied","reload","columns","columnOption","columnIndex","filterType","selectedFilterOperation","allowFiltering","_applyFilter","_needApplyFilter","checkChanges","updateItemsHandler","_change$changeTypes","remove","virtualColumnsScrolling","visible","column","isAsyncDataSourceApplying","_isDataSourceApplying","applyDataSource","isDelayed","needApplyFilter","_isAllDataTypesDefined","log","component","NAME","fail","_fireLoadingChanged","pushed","fireError","Error","apply","arguments","pagingEnabled","scrollingMode","appendMode","virtualMode","paginate","isPaginateChanged","isPageSizeChanged","requireTotalCount","_getSpecificDataSourceOption","type","key","_initDataSource","oldDataSource","setDataSource","_loadDataSource","result","always","reject","_beforeProcessItems","items","slice","getRowIndexDelta","_processItems","rowIndexDelta","changeType","visibleColumns","getVisibleColumns","visibleItems","lastVisibleItem","dataIndex","options","index","item","rowIndex","_processItem","push","_generateDataItem","_processDataItem","rowType","keyOf","dataItem","values","generateDataValues","isModified","i","command","calculateCellValue","dataField","_applyChange","_applyChangeUpdate","_applyChangesOnly","_applyChangeFull","_getRowIndices","rowIndices","a","b","correctedRowIndex","allowInvisibleRowIndices","splice","prevIndex","rowIndexCorrection","columnIndices","equalItems","item1","item2","strict","isEditing","oldItem","oldNextItem","newItem","newNextItem","isFullUpdate","_partialUpdateRow","_isCellChanged","oldRow","newRow","visibleRowIndex","isLiveUpdate","JSON","stringify","isCellModified","row","modifiedValues","_getChangedColumnIndices","isExpanded","cells","map","cell","_cell$column","_changedColumnIndices","changedColumnIndices","forEach","isCellChanged","indexOf","update","watch","oldValues","_isItemEquals","some","field","_item1$data","_item2$data","_item1$data2","_item2$data2","expandedMatch","summaryCellsMatch","summaryCells","continuationMatch","isContinuation","isContinuationOnNextPage","_change$isLiveUpdate","newIndexByKey","getRowKey","currentItems","oldItems","_correctRowIndices","oldRowIndexOffset","_rowIndexOffset","rowIndexOffset","getRowIndexOffset","newVisibleRowIndex","_afterProcessItems","_updateItemsCore","cachedProcessedItems","useProcessedItemsCache","loadIndex","rows","getVisibleRows","isDataChanged","_change$repaintChange","needUpdateDimensions","_needUpdateDimensions","groupExpanding","cancel","_fireChanged","loadingOperationTypes","changed","loadingChanged","_loadingText","_isFilterApplying","resetFilterApplying","filterExpr","prototype","call","equalFilterParameters","clearFilter","filterName","clearColumnOption","columnCount","beginUpdate","searchByText","endUpdate","_fireDataSourceChanged","changedHandler","dataSourceChanged","_getDataSourceAdapter","_createDataSourceAdapterCore","dataSourceAdapterProvider","dataSourceAdapter","create","isLocalStore","isCustomStore","_createDataSourceAdapter","enabledRemoteOperations","summary","groupPaging","cancelAll","loadError","customizeStoreLoadOptions","changing","dispose","_isSharedDataSource","isLoaded","isEmpty","pageCount","loadAll","d","loadOptions","_handleDataLoaded","getKeyByRowIndex","byLoaded","getRowIndexByKey","getIndexByKey","byKey","getDataByKeys","rowKeys","deferreds","keyData","beginCustomLoading","messageText","endCustomLoading","changesOnly","lookup","selection","customizeLoadResult","on","off","_disposeDataSource","repaintRows","rowIndexes","skipProcessingPagingChange","getUserState","searchText","getCachedStoreData","isLastPageLoaded","proxyMethod"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.data_controller.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport modules from \"./ui.grid_core.modules\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport ArrayStore from \"../../data/array_store\";\r\nimport CustomStore from \"../../data/custom_store\";\r\nimport errors from \"../widget/ui.errors\";\r\nimport {\r\n    noop,\r\n    deferRender,\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport DataHelperMixin from \"../../data_helper\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    findChanges\r\n} from \"../../core/utils/array_compare\";\r\nexport var dataControllerModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            loadingTimeout: 0,\r\n            dataSource: null,\r\n            cacheEnabled: true,\r\n            repaintChangesOnly: false,\r\n            highlightChanges: false,\r\n            onDataErrorOccurred: null,\r\n            remoteOperations: \"auto\",\r\n            paging: {\r\n                enabled: true,\r\n                pageSize: void 0,\r\n                pageIndex: void 0\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        data: modules.Controller.inherit({}).include(DataHelperMixin).inherit(function() {\r\n            var changePaging = function(that, optionName, value) {\r\n                var dataSource = that._dataSource;\r\n                if (dataSource) {\r\n                    if (void 0 !== value) {\r\n                        var oldValue = that._getPagingOptionValue(optionName);\r\n                        if (oldValue !== value) {\r\n                            if (\"pageSize\" === optionName) {\r\n                                dataSource.pageIndex(0)\r\n                            }\r\n                            dataSource[optionName](value);\r\n                            that._skipProcessingPagingChange = true;\r\n                            that.option(\"paging.\" + optionName, value);\r\n                            that._skipProcessingPagingChange = false;\r\n                            var pageIndex = dataSource.pageIndex();\r\n                            that._isPaging = \"pageIndex\" === optionName;\r\n                            return dataSource[\"pageIndex\" === optionName ? \"load\" : \"reload\"]().done(() => {\r\n                                that._isPaging = false;\r\n                                that.pageChanged.fire(pageIndex)\r\n                            })\r\n                        }\r\n                        return Deferred().resolve().promise()\r\n                    }\r\n                    return dataSource[optionName]()\r\n                }\r\n                return 0\r\n            };\r\n            var members = {\r\n                init: function() {\r\n                    var that = this;\r\n                    that._items = [];\r\n                    that._cachedProcessedItems = null;\r\n                    that._columnsController = that.getController(\"columns\");\r\n                    that._isPaging = false;\r\n                    that._currentOperationTypes = null;\r\n                    that._dataChangedHandler = e => {\r\n                        that._currentOperationTypes = this._dataSource.operationTypes();\r\n                        that._handleDataChanged(e);\r\n                        that._currentOperationTypes = null\r\n                    };\r\n                    that._columnsChangedHandler = that._handleColumnsChanged.bind(that);\r\n                    that._loadingChangedHandler = that._handleLoadingChanged.bind(that);\r\n                    that._loadErrorHandler = that._handleLoadError.bind(that);\r\n                    that._customizeStoreLoadOptionsHandler = that._handleCustomizeStoreLoadOptions.bind(that);\r\n                    that._changingHandler = that._handleChanging.bind(that);\r\n                    that._dataPushedHandler = that._handleDataPushed.bind(that);\r\n                    that._columnsController.columnsChanged.add(that._columnsChangedHandler);\r\n                    that._isLoading = false;\r\n                    that._isCustomLoading = false;\r\n                    that._repaintChangesOnly = void 0;\r\n                    that._changes = [];\r\n                    that.createAction(\"onDataErrorOccurred\");\r\n                    that.dataErrorOccurred.add((function(error) {\r\n                        return that.executeAction(\"onDataErrorOccurred\", {\r\n                            error: error\r\n                        })\r\n                    }));\r\n                    that._refreshDataSource()\r\n                },\r\n                _getPagingOptionValue: function(optionName) {\r\n                    return this._dataSource[optionName]()\r\n                },\r\n                callbackNames: function() {\r\n                    return [\"changed\", \"loadingChanged\", \"dataErrorOccurred\", \"pageChanged\", \"dataSourceChanged\", \"pushed\"]\r\n                },\r\n                callbackFlags: function(name) {\r\n                    if (\"dataErrorOccurred\" === name) {\r\n                        return {\r\n                            stopOnFalse: true\r\n                        }\r\n                    }\r\n                },\r\n                publicMethods: function() {\r\n                    return [\"beginCustomLoading\", \"endCustomLoading\", \"refresh\", \"filter\", \"clearFilter\", \"getCombinedFilter\", \"keyOf\", \"byKey\", \"getDataByKeys\", \"pageIndex\", \"pageSize\", \"pageCount\", \"totalCount\", \"_disposeDataSource\", \"getKeyByRowIndex\", \"getRowIndexByKey\", \"getDataSource\", \"getVisibleRows\", \"repaintRows\"]\r\n                },\r\n                reset: function() {\r\n                    this._columnsController.reset();\r\n                    this._items = [];\r\n                    this._refreshDataSource()\r\n                },\r\n                _handleDataSourceChange(args) {\r\n                    if (args.value === args.previousValue || this.option(\"columns\") && Array.isArray(args.value) && Array.isArray(args.previousValue)) {\r\n                        var isValueChanged = args.value !== args.previousValue;\r\n                        if (isValueChanged) {\r\n                            var store = this.store();\r\n                            if (store) {\r\n                                store._array = args.value\r\n                            }\r\n                        }\r\n                        if (this.needToRefreshOnDataSourceChange(args)) {\r\n                            this.refresh(this.option(\"repaintChangesOnly\"))\r\n                        }\r\n                        return true\r\n                    }\r\n                    return false\r\n                },\r\n                needToRefreshOnDataSourceChange: function(args) {\r\n                    return true\r\n                },\r\n                optionChanged: function(args) {\r\n                    var that = this;\r\n                    var dataSource;\r\n                    var changedPagingOptions;\r\n\r\n                    function handled() {\r\n                        args.handled = true\r\n                    }\r\n                    if (\"dataSource\" === args.name && args.name === args.fullName && this._handleDataSourceChange(args)) {\r\n                        handled();\r\n                        return\r\n                    }\r\n                    switch (args.name) {\r\n                        case \"cacheEnabled\":\r\n                        case \"repaintChangesOnly\":\r\n                        case \"highlightChanges\":\r\n                        case \"loadingTimeout\":\r\n                            handled();\r\n                            break;\r\n                        case \"remoteOperations\":\r\n                        case \"keyExpr\":\r\n                        case \"dataSource\":\r\n                        case \"scrolling\":\r\n                            handled();\r\n                            that.reset();\r\n                            break;\r\n                        case \"paging\":\r\n                            dataSource = that.dataSource();\r\n                            if (dataSource) {\r\n                                changedPagingOptions = that._setPagingOptions(dataSource);\r\n                                if (changedPagingOptions) {\r\n                                    var pageIndex = dataSource.pageIndex();\r\n                                    this._isPaging = changedPagingOptions.isPageIndexChanged;\r\n                                    dataSource.load().done(() => {\r\n                                        this._isPaging = false;\r\n                                        that.pageChanged.fire(pageIndex)\r\n                                    })\r\n                                }\r\n                            }\r\n                            handled();\r\n                            break;\r\n                        case \"rtlEnabled\":\r\n                            that.reset();\r\n                            break;\r\n                        case \"columns\":\r\n                            dataSource = that.dataSource();\r\n                            if (dataSource && dataSource.isLoading() && args.name === args.fullName) {\r\n                                this._useSortingGroupingFromColumns = true;\r\n                                dataSource.load()\r\n                            }\r\n                            break;\r\n                        default:\r\n                            that.callBase(args)\r\n                    }\r\n                },\r\n                isReady: function() {\r\n                    return !this._isLoading\r\n                },\r\n                getDataSource: function() {\r\n                    return this._dataSource && this._dataSource._dataSource\r\n                },\r\n                getCombinedFilter: function(returnDataField) {\r\n                    return this.combinedFilter(void 0, returnDataField)\r\n                },\r\n                combinedFilter: function(filter, returnDataField) {\r\n                    var dataSource = this._dataSource;\r\n                    var columnsController = this._columnsController;\r\n                    if (dataSource) {\r\n                        if (void 0 === filter) {\r\n                            filter = dataSource.filter()\r\n                        }\r\n                        var additionalFilter = this._calculateAdditionalFilter();\r\n                        if (additionalFilter) {\r\n                            if (columnsController.isDataSourceApplied() || columnsController.isAllDataTypesDefined()) {\r\n                                filter = gridCoreUtils.combineFilters([additionalFilter, filter])\r\n                            }\r\n                        }\r\n                        filter = columnsController.updateFilter(filter, returnDataField || dataSource.remoteOperations().filtering)\r\n                    }\r\n                    return filter\r\n                },\r\n                waitReady: function() {\r\n                    if (this._updateLockCount) {\r\n                        this._readyDeferred = new Deferred;\r\n                        return this._readyDeferred\r\n                    }\r\n                    return when()\r\n                },\r\n                _endUpdateCore: function() {\r\n                    var changes = this._changes;\r\n                    if (changes.length) {\r\n                        this._changes = [];\r\n                        var repaintChangesOnly = changes.every(change => change.repaintChangesOnly);\r\n                        this.updateItems(1 === changes.length ? changes[0] : {\r\n                            repaintChangesOnly: repaintChangesOnly\r\n                        })\r\n                    }\r\n                    if (this._readyDeferred) {\r\n                        this._readyDeferred.resolve();\r\n                        this._readyDeferred = null\r\n                    }\r\n                },\r\n                _handleCustomizeStoreLoadOptions: function(e) {\r\n                    var _storeLoadOptions$fil;\r\n                    var columnsController = this._columnsController;\r\n                    var dataSource = this._dataSource;\r\n                    var storeLoadOptions = e.storeLoadOptions;\r\n                    if (e.isCustomLoading && !storeLoadOptions.isLoadingAll) {\r\n                        return\r\n                    }\r\n                    storeLoadOptions.filter = this.combinedFilter(storeLoadOptions.filter);\r\n                    if (1 === (null === (_storeLoadOptions$fil = storeLoadOptions.filter) || void 0 === _storeLoadOptions$fil ? void 0 : _storeLoadOptions$fil.length) && \"!\" === storeLoadOptions.filter[0]) {\r\n                        e.data = [];\r\n                        e.extra = e.extra || {};\r\n                        e.extra.totalCount = 0\r\n                    }\r\n                    if (!columnsController.isDataSourceApplied()) {\r\n                        columnsController.updateColumnDataTypes(dataSource)\r\n                    }\r\n                    this._columnsUpdating = true;\r\n                    columnsController.updateSortingGrouping(dataSource, !this._useSortingGroupingFromColumns);\r\n                    this._columnsUpdating = false;\r\n                    storeLoadOptions.sort = columnsController.getSortDataSourceParameters();\r\n                    storeLoadOptions.group = columnsController.getGroupDataSourceParameters();\r\n                    dataSource.sort(storeLoadOptions.sort);\r\n                    dataSource.group(storeLoadOptions.group);\r\n                    storeLoadOptions.sort = columnsController.getSortDataSourceParameters(!dataSource.remoteOperations().sorting);\r\n                    e.group = columnsController.getGroupDataSourceParameters(!dataSource.remoteOperations().grouping)\r\n                },\r\n                _handleColumnsChanged: function(e) {\r\n                    var that = this;\r\n                    var changeTypes = e.changeTypes;\r\n                    var optionNames = e.optionNames;\r\n                    var filterValue;\r\n                    var filterValues;\r\n                    var filterApplied;\r\n                    if (changeTypes.sorting || changeTypes.grouping) {\r\n                        if (that._dataSource && !that._columnsUpdating) {\r\n                            that._dataSource.group(that._columnsController.getGroupDataSourceParameters());\r\n                            that._dataSource.sort(that._columnsController.getSortDataSourceParameters());\r\n                            that.reload()\r\n                        }\r\n                    } else if (changeTypes.columns) {\r\n                        filterValues = that._columnsController.columnOption(e.columnIndex, \"filterValues\");\r\n                        if (optionNames.filterValues || optionNames.filterType && Array.isArray(filterValues) || optionNames.filterValue || optionNames.selectedFilterOperation || optionNames.allowFiltering) {\r\n                            filterValue = that._columnsController.columnOption(e.columnIndex, \"filterValue\");\r\n                            if (Array.isArray(filterValues) || void 0 === e.columnIndex || isDefined(filterValue) || !optionNames.selectedFilterOperation || optionNames.filterValue) {\r\n                                that._applyFilter();\r\n                                filterApplied = true\r\n                            }\r\n                        }\r\n                        if (!that._needApplyFilter && !gridCoreUtils.checkChanges(optionNames, [\"width\", \"visibleWidth\", \"filterValue\", \"bufferedFilterValue\", \"selectedFilterOperation\", \"filterValues\", \"filterType\"])) {\r\n                            that._columnsController.columnsChanged.add((function updateItemsHandler(change) {\r\n                                var _change$changeTypes;\r\n                                that._columnsController.columnsChanged.remove(updateItemsHandler);\r\n                                that.updateItems({\r\n                                    repaintChangesOnly: false,\r\n                                    virtualColumnsScrolling: null === change || void 0 === change ? void 0 : null === (_change$changeTypes = change.changeTypes) || void 0 === _change$changeTypes ? void 0 : _change$changeTypes.virtualColumnsScrolling\r\n                                })\r\n                            }))\r\n                        }\r\n                        if (isDefined(optionNames.visible)) {\r\n                            var column = that._columnsController.columnOption(e.columnIndex);\r\n                            if (column && (isDefined(column.filterValue) || isDefined(column.filterValues))) {\r\n                                that._applyFilter();\r\n                                filterApplied = true\r\n                            }\r\n                        }\r\n                    }\r\n                    if (!filterApplied && changeTypes.filtering) {\r\n                        that.reload()\r\n                    }\r\n                },\r\n                _handleDataChanged: function(e) {\r\n                    var that = this;\r\n                    var dataSource = that._dataSource;\r\n                    var columnsController = that._columnsController;\r\n                    var isAsyncDataSourceApplying = false;\r\n                    this._useSortingGroupingFromColumns = false;\r\n                    if (dataSource && !that._isDataSourceApplying) {\r\n                        that._isDataSourceApplying = true;\r\n                        when(that._columnsController.applyDataSource(dataSource)).done((function() {\r\n                            if (that._isLoading) {\r\n                                that._handleLoadingChanged(false)\r\n                            }\r\n                            if (isAsyncDataSourceApplying && e && e.isDelayed) {\r\n                                e.isDelayed = false\r\n                            }\r\n                            that._isDataSourceApplying = false;\r\n                            var needApplyFilter = that._needApplyFilter;\r\n                            that._needApplyFilter = false;\r\n                            if (needApplyFilter && !that._isAllDataTypesDefined && (additionalFilter = that._calculateAdditionalFilter(), additionalFilter && additionalFilter.length)) {\r\n                                errors.log(\"W1005\", that.component.NAME);\r\n                                that._applyFilter()\r\n                            } else {\r\n                                that.updateItems(e, true)\r\n                            }\r\n                            var additionalFilter\r\n                        })).fail((function() {\r\n                            that._isDataSourceApplying = false\r\n                        }));\r\n                        if (that._isDataSourceApplying) {\r\n                            isAsyncDataSourceApplying = true;\r\n                            that._handleLoadingChanged(true)\r\n                        }\r\n                        that._needApplyFilter = !that._columnsController.isDataSourceApplied();\r\n                        that._isAllDataTypesDefined = columnsController.isAllDataTypesDefined()\r\n                    }\r\n                },\r\n                _handleLoadingChanged: function(isLoading) {\r\n                    this._isLoading = isLoading;\r\n                    this._fireLoadingChanged()\r\n                },\r\n                _handleLoadError: function(e) {\r\n                    this.dataErrorOccurred.fire(e)\r\n                },\r\n                _handleDataPushed: function(changes) {\r\n                    this.pushed.fire(changes)\r\n                },\r\n                fireError: function() {\r\n                    this.dataErrorOccurred.fire(errors.Error.apply(errors, arguments))\r\n                },\r\n                _setPagingOptions: function(dataSource) {\r\n                    var pageIndex = this.option(\"paging.pageIndex\");\r\n                    var pageSize = this.option(\"paging.pageSize\");\r\n                    var pagingEnabled = this.option(\"paging.enabled\");\r\n                    var scrollingMode = this.option(\"scrolling.mode\");\r\n                    var appendMode = \"infinite\" === scrollingMode;\r\n                    var virtualMode = \"virtual\" === scrollingMode;\r\n                    var paginate = pagingEnabled || virtualMode || appendMode;\r\n                    var isPaginateChanged = false;\r\n                    var isPageSizeChanged = false;\r\n                    var isPageIndexChanged = false;\r\n                    dataSource.requireTotalCount(!appendMode);\r\n                    if (void 0 !== pagingEnabled && dataSource.paginate() !== paginate) {\r\n                        dataSource.paginate(paginate);\r\n                        isPaginateChanged = true\r\n                    }\r\n                    if (void 0 !== pageSize && dataSource.pageSize() !== pageSize) {\r\n                        dataSource.pageSize(pageSize);\r\n                        isPageSizeChanged = true\r\n                    }\r\n                    if (void 0 !== pageIndex && dataSource.pageIndex() !== pageIndex) {\r\n                        dataSource.pageIndex(pageIndex);\r\n                        isPageIndexChanged = true\r\n                    }\r\n                    if (isPaginateChanged || isPageSizeChanged || isPageIndexChanged) {\r\n                        return {\r\n                            isPaginateChanged: isPaginateChanged,\r\n                            isPageSizeChanged: isPageSizeChanged,\r\n                            isPageIndexChanged: isPageIndexChanged\r\n                        }\r\n                    }\r\n                    return false\r\n                },\r\n                _getSpecificDataSourceOption: function() {\r\n                    var dataSource = this.option(\"dataSource\");\r\n                    if (Array.isArray(dataSource)) {\r\n                        return {\r\n                            store: {\r\n                                type: \"array\",\r\n                                data: dataSource,\r\n                                key: this.option(\"keyExpr\")\r\n                            }\r\n                        }\r\n                    }\r\n                    return dataSource\r\n                },\r\n                _initDataSource: function() {\r\n                    var oldDataSource = this._dataSource;\r\n                    this.callBase();\r\n                    var dataSource = this._dataSource;\r\n                    this._useSortingGroupingFromColumns = true;\r\n                    this._cachedProcessedItems = null;\r\n                    if (dataSource) {\r\n                        var changedPagingOptions = this._setPagingOptions(dataSource);\r\n                        this._isPaging = null === changedPagingOptions || void 0 === changedPagingOptions ? void 0 : changedPagingOptions.isPageIndexChanged;\r\n                        this.setDataSource(dataSource)\r\n                    } else if (oldDataSource) {\r\n                        this.updateItems()\r\n                    }\r\n                },\r\n                _loadDataSource: function() {\r\n                    var that = this;\r\n                    var dataSource = that._dataSource;\r\n                    var result = new Deferred;\r\n                    when(this._columnsController.refresh(true)).always((function() {\r\n                        if (dataSource) {\r\n                            dataSource.load().done((function() {\r\n                                that._isPaging = false;\r\n                                result.resolve.apply(result, arguments)\r\n                            })).fail(result.reject)\r\n                        } else {\r\n                            result.resolve()\r\n                        }\r\n                    }));\r\n                    return result.promise()\r\n                },\r\n                _beforeProcessItems: function(items) {\r\n                    return items.slice(0)\r\n                },\r\n                getRowIndexDelta: function() {\r\n                    return 0\r\n                },\r\n                _processItems: function(items, change) {\r\n                    var that = this;\r\n                    var rowIndexDelta = that.getRowIndexDelta();\r\n                    var changeType = change.changeType;\r\n                    var visibleColumns = that._columnsController.getVisibleColumns(null, \"loadingAll\" === changeType);\r\n                    var visibleItems = that._items;\r\n                    var lastVisibleItem = \"append\" === changeType && visibleItems.length > 0 ? visibleItems[visibleItems.length - 1] : null;\r\n                    var dataIndex = isDefined(null === lastVisibleItem || void 0 === lastVisibleItem ? void 0 : lastVisibleItem.dataIndex) ? lastVisibleItem.dataIndex + 1 : 0;\r\n                    var options = {\r\n                        visibleColumns: visibleColumns,\r\n                        dataIndex: dataIndex\r\n                    };\r\n                    var result = [];\r\n                    each(items, (function(index, item) {\r\n                        if (isDefined(item)) {\r\n                            options.rowIndex = index - rowIndexDelta;\r\n                            item = that._processItem(item, options);\r\n                            result.push(item)\r\n                        }\r\n                    }));\r\n                    return result\r\n                },\r\n                _processItem: function(item, options) {\r\n                    item = this._generateDataItem(item, options);\r\n                    item = this._processDataItem(item, options);\r\n                    item.dataIndex = options.dataIndex++;\r\n                    return item\r\n                },\r\n                _generateDataItem: function(data) {\r\n                    return {\r\n                        rowType: \"data\",\r\n                        data: data,\r\n                        key: this.keyOf(data)\r\n                    }\r\n                },\r\n                _processDataItem: function(dataItem, options) {\r\n                    dataItem.values = this.generateDataValues(dataItem.data, options.visibleColumns);\r\n                    return dataItem\r\n                },\r\n                generateDataValues: function(data, columns, isModified) {\r\n                    var values = [];\r\n                    var value;\r\n                    for (var i = 0; i < columns.length; i++) {\r\n                        var column = columns[i];\r\n                        value = isModified ? void 0 : null;\r\n                        if (!column.command) {\r\n                            if (column.calculateCellValue) {\r\n                                value = column.calculateCellValue(data)\r\n                            } else if (column.dataField) {\r\n                                value = data[column.dataField]\r\n                            }\r\n                        }\r\n                        values.push(value)\r\n                    }\r\n                    return values\r\n                },\r\n                _applyChange: function(change) {\r\n                    if (\"update\" === change.changeType) {\r\n                        this._applyChangeUpdate(change)\r\n                    } else if (this.items().length && change.repaintChangesOnly && \"refresh\" === change.changeType) {\r\n                        this._applyChangesOnly(change)\r\n                    } else if (\"refresh\" === change.changeType) {\r\n                        this._applyChangeFull(change)\r\n                    }\r\n                },\r\n                _applyChangeFull: function(change) {\r\n                    this._items = change.items.slice(0)\r\n                },\r\n                _getRowIndices: function(change) {\r\n                    var rowIndices = change.rowIndices.slice(0);\r\n                    var rowIndexDelta = this.getRowIndexDelta();\r\n                    rowIndices.sort((function(a, b) {\r\n                        return a - b\r\n                    }));\r\n                    for (var i = 0; i < rowIndices.length; i++) {\r\n                        var correctedRowIndex = rowIndices[i];\r\n                        if (change.allowInvisibleRowIndices) {\r\n                            correctedRowIndex += rowIndexDelta\r\n                        }\r\n                        if (correctedRowIndex < 0) {\r\n                            rowIndices.splice(i, 1);\r\n                            i--\r\n                        }\r\n                    }\r\n                    return rowIndices\r\n                },\r\n                _applyChangeUpdate: function(change) {\r\n                    var that = this;\r\n                    var items = change.items;\r\n                    var rowIndices = that._getRowIndices(change);\r\n                    var rowIndexDelta = that.getRowIndexDelta();\r\n                    var repaintChangesOnly = that.option(\"repaintChangesOnly\");\r\n                    var prevIndex = -1;\r\n                    var rowIndexCorrection = 0;\r\n                    var changeType;\r\n                    change.items = [];\r\n                    change.rowIndices = [];\r\n                    change.columnIndices = [];\r\n                    change.changeTypes = [];\r\n                    var equalItems = function(item1, item2, strict) {\r\n                        var result = item1 && item2 && equalByValue(item1.key, item2.key);\r\n                        if (result && strict) {\r\n                            result = item1.rowType === item2.rowType && (\"detail\" !== item2.rowType || item1.isEditing === item2.isEditing)\r\n                        }\r\n                        return result\r\n                    };\r\n                    each(rowIndices, (function(index, rowIndex) {\r\n                        var columnIndices;\r\n                        rowIndex += rowIndexCorrection + rowIndexDelta;\r\n                        if (prevIndex === rowIndex) {\r\n                            return\r\n                        }\r\n                        prevIndex = rowIndex;\r\n                        var oldItem = that._items[rowIndex];\r\n                        var oldNextItem = that._items[rowIndex + 1];\r\n                        var newItem = items[rowIndex];\r\n                        var newNextItem = items[rowIndex + 1];\r\n                        var strict = equalItems(oldItem, oldNextItem) || equalItems(newItem, newNextItem);\r\n                        if (newItem) {\r\n                            newItem.rowIndex = rowIndex;\r\n                            change.items.push(newItem)\r\n                        }\r\n                        if (oldItem && newItem && equalItems(oldItem, newItem, strict)) {\r\n                            changeType = \"update\";\r\n                            that._items[rowIndex] = newItem;\r\n                            if (oldItem.visible !== newItem.visible) {\r\n                                change.items.splice(-1, 1, {\r\n                                    visible: newItem.visible\r\n                                })\r\n                            } else if (repaintChangesOnly && !change.isFullUpdate) {\r\n                                columnIndices = that._partialUpdateRow(oldItem, newItem, rowIndex - rowIndexDelta)\r\n                            }\r\n                        } else if (newItem && !oldItem || newNextItem && equalItems(oldItem, newNextItem, strict)) {\r\n                            changeType = \"insert\";\r\n                            that._items.splice(rowIndex, 0, newItem);\r\n                            rowIndexCorrection++\r\n                        } else if (oldItem && !newItem || oldNextItem && equalItems(newItem, oldNextItem, strict)) {\r\n                            changeType = \"remove\";\r\n                            that._items.splice(rowIndex, 1);\r\n                            rowIndexCorrection--;\r\n                            prevIndex = -1\r\n                        } else if (newItem) {\r\n                            changeType = \"update\";\r\n                            that._items[rowIndex] = newItem\r\n                        } else {\r\n                            return\r\n                        }\r\n                        change.rowIndices.push(rowIndex - rowIndexDelta);\r\n                        change.changeTypes.push(changeType);\r\n                        change.columnIndices.push(columnIndices)\r\n                    }))\r\n                },\r\n                _isCellChanged: function(oldRow, newRow, visibleRowIndex, columnIndex, isLiveUpdate) {\r\n                    if (JSON.stringify(oldRow.values[columnIndex]) !== JSON.stringify(newRow.values[columnIndex])) {\r\n                        return true\r\n                    }\r\n\r\n                    function isCellModified(row, columnIndex) {\r\n                        return row.modifiedValues ? void 0 !== row.modifiedValues[columnIndex] : false\r\n                    }\r\n                    if (isCellModified(oldRow, columnIndex) !== isCellModified(newRow, columnIndex)) {\r\n                        return true\r\n                    }\r\n                    return false\r\n                },\r\n                _getChangedColumnIndices: function(oldItem, newItem, visibleRowIndex, isLiveUpdate) {\r\n                    var columnIndices;\r\n                    if (oldItem.rowType === newItem.rowType) {\r\n                        if (\"group\" !== newItem.rowType && \"groupFooter\" !== newItem.rowType) {\r\n                            columnIndices = [];\r\n                            if (\"detail\" !== newItem.rowType) {\r\n                                for (var columnIndex = 0; columnIndex < oldItem.values.length; columnIndex++) {\r\n                                    if (this._isCellChanged(oldItem, newItem, visibleRowIndex, columnIndex, isLiveUpdate)) {\r\n                                        columnIndices.push(columnIndex)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        if (\"group\" === newItem.rowType && newItem.isExpanded === oldItem.isExpanded && oldItem.cells) {\r\n                            columnIndices = oldItem.cells.map((cell, index) => {\r\n                                var _cell$column;\r\n                                return \"groupExpand\" !== (null === (_cell$column = cell.column) || void 0 === _cell$column ? void 0 : _cell$column.type) ? index : -1\r\n                            }).filter(index => index >= 0)\r\n                        }\r\n                    }\r\n                    return columnIndices\r\n                },\r\n                _partialUpdateRow: function(oldItem, newItem, visibleRowIndex, isLiveUpdate) {\r\n                    var _changedColumnIndices;\r\n                    var changedColumnIndices = this._getChangedColumnIndices(oldItem, newItem, visibleRowIndex, isLiveUpdate);\r\n                    if (null !== (_changedColumnIndices = changedColumnIndices) && void 0 !== _changedColumnIndices && _changedColumnIndices.length && this.option(\"dataRowTemplate\")) {\r\n                        changedColumnIndices = void 0\r\n                    }\r\n                    if (changedColumnIndices) {\r\n                        oldItem.cells && oldItem.cells.forEach((function(cell, columnIndex) {\r\n                            var isCellChanged = changedColumnIndices.indexOf(columnIndex) >= 0;\r\n                            if (!isCellChanged && cell && cell.update) {\r\n                                cell.update(newItem)\r\n                            }\r\n                        }));\r\n                        newItem.update = oldItem.update;\r\n                        newItem.watch = oldItem.watch;\r\n                        newItem.cells = oldItem.cells;\r\n                        if (isLiveUpdate) {\r\n                            newItem.oldValues = oldItem.values\r\n                        }\r\n                        oldItem.update && oldItem.update(newItem)\r\n                    }\r\n                    return changedColumnIndices\r\n                },\r\n                _isItemEquals: function(item1, item2) {\r\n                    if (JSON.stringify(item1.values) !== JSON.stringify(item2.values)) {\r\n                        return false\r\n                    }\r\n                    if ([\"modified\", \"isNewRow\", \"removed\", \"isEditing\"].some(field => item1[field] !== item2[field])) {\r\n                        return false\r\n                    }\r\n                    if (\"group\" === item1.rowType || \"groupFooter\" === item1.rowType) {\r\n                        var _item1$data, _item2$data, _item1$data2, _item2$data2;\r\n                        var expandedMatch = item1.isExpanded === item2.isExpanded;\r\n                        var summaryCellsMatch = JSON.stringify(item1.summaryCells) === JSON.stringify(item2.summaryCells);\r\n                        var continuationMatch = (null === (_item1$data = item1.data) || void 0 === _item1$data ? void 0 : _item1$data.isContinuation) === (null === (_item2$data = item2.data) || void 0 === _item2$data ? void 0 : _item2$data.isContinuation) && (null === (_item1$data2 = item1.data) || void 0 === _item1$data2 ? void 0 : _item1$data2.isContinuationOnNextPage) === (null === (_item2$data2 = item2.data) || void 0 === _item2$data2 ? void 0 : _item2$data2.isContinuationOnNextPage);\r\n                        if (!expandedMatch || !summaryCellsMatch || !continuationMatch) {\r\n                            return false\r\n                        }\r\n                    }\r\n                    return true\r\n                },\r\n                _applyChangesOnly: function(change) {\r\n                    var _change$isLiveUpdate;\r\n                    var rowIndices = [];\r\n                    var columnIndices = [];\r\n                    var changeTypes = [];\r\n                    var items = [];\r\n                    var newIndexByKey = {};\r\n                    var isLiveUpdate = null !== (_change$isLiveUpdate = null === change || void 0 === change ? void 0 : change.isLiveUpdate) && void 0 !== _change$isLiveUpdate ? _change$isLiveUpdate : true;\r\n\r\n                    function getRowKey(row) {\r\n                        if (row) {\r\n                            return row.rowType + \",\" + JSON.stringify(row.key)\r\n                        }\r\n                    }\r\n                    var currentItems = this._items;\r\n                    var oldItems = currentItems.slice();\r\n                    change.items.forEach((function(item, index) {\r\n                        var key = getRowKey(item);\r\n                        newIndexByKey[key] = index;\r\n                        item.rowIndex = index\r\n                    }));\r\n                    var result = findChanges(oldItems, change.items, getRowKey, (item1, item2) => {\r\n                        if (!this._isItemEquals(item1, item2)) {\r\n                            return false\r\n                        }\r\n                        if (item1.cells) {\r\n                            item1.update && item1.update(item2);\r\n                            item1.cells.forEach((function(cell) {\r\n                                if (cell && cell.update) {\r\n                                    cell.update(item2, true)\r\n                                }\r\n                            }))\r\n                        }\r\n                        return true\r\n                    });\r\n                    if (!result) {\r\n                        this._applyChangeFull(change);\r\n                        return\r\n                    }\r\n                    result.forEach(change => {\r\n                        switch (change.type) {\r\n                            case \"update\":\r\n                                var index = change.index;\r\n                                var newItem = change.data;\r\n                                var oldItem = change.oldItem;\r\n                                var changedColumnIndices = this._partialUpdateRow(oldItem, newItem, index, isLiveUpdate);\r\n                                rowIndices.push(index);\r\n                                changeTypes.push(\"update\");\r\n                                items.push(newItem);\r\n                                currentItems[index] = newItem;\r\n                                columnIndices.push(changedColumnIndices);\r\n                                break;\r\n                            case \"insert\":\r\n                                rowIndices.push(change.index);\r\n                                changeTypes.push(\"insert\");\r\n                                items.push(change.data);\r\n                                columnIndices.push(void 0);\r\n                                currentItems.splice(change.index, 0, change.data);\r\n                                break;\r\n                            case \"remove\":\r\n                                rowIndices.push(change.index);\r\n                                changeTypes.push(\"remove\");\r\n                                currentItems.splice(change.index, 1);\r\n                                items.push(change.oldItem);\r\n                                columnIndices.push(void 0)\r\n                        }\r\n                    });\r\n                    change.repaintChangesOnly = true;\r\n                    change.changeType = \"update\";\r\n                    change.rowIndices = rowIndices;\r\n                    change.columnIndices = columnIndices;\r\n                    change.changeTypes = changeTypes;\r\n                    change.items = items;\r\n                    if (oldItems.length) {\r\n                        change.isLiveUpdate = true\r\n                    }\r\n                    this._correctRowIndices(rowIndex => {\r\n                        var oldRowIndexOffset = this._rowIndexOffset || 0;\r\n                        var rowIndexOffset = this.getRowIndexOffset();\r\n                        var oldItem = oldItems[rowIndex - oldRowIndexOffset];\r\n                        var key = getRowKey(oldItem);\r\n                        var newVisibleRowIndex = newIndexByKey[key];\r\n                        return newVisibleRowIndex >= 0 ? newVisibleRowIndex + rowIndexOffset - rowIndex : 0\r\n                    })\r\n                },\r\n                _correctRowIndices: noop,\r\n                _afterProcessItems: function(items) {\r\n                    return items\r\n                },\r\n                _updateItemsCore: function(change) {\r\n                    var items;\r\n                    var dataSource = this._dataSource;\r\n                    var changeType = change.changeType || \"refresh\";\r\n                    change.changeType = changeType;\r\n                    if (dataSource) {\r\n                        var cachedProcessedItems = this._cachedProcessedItems;\r\n                        if (change.useProcessedItemsCache && cachedProcessedItems) {\r\n                            items = cachedProcessedItems\r\n                        } else {\r\n                            items = change.items || dataSource.items();\r\n                            items = this._beforeProcessItems(items);\r\n                            items = this._processItems(items, change);\r\n                            this._cachedProcessedItems = items\r\n                        }\r\n                        items = this._afterProcessItems(items, change);\r\n                        change.items = items;\r\n                        var oldItems = this._items.length === items.length && this._items;\r\n                        this._applyChange(change);\r\n                        var rowIndexDelta = this.getRowIndexDelta();\r\n                        each(this._items, (index, item) => {\r\n                            item.rowIndex = index - rowIndexDelta;\r\n                            if (oldItems) {\r\n                                item.cells = oldItems[index].cells || []\r\n                            }\r\n                            var newItem = items[index];\r\n                            if (newItem) {\r\n                                item.loadIndex = newItem.loadIndex\r\n                            }\r\n                        });\r\n                        this._rowIndexOffset = this.getRowIndexOffset()\r\n                    } else {\r\n                        this._items = []\r\n                    }\r\n                },\r\n                _handleChanging: function(e) {\r\n                    var rows = this.getVisibleRows();\r\n                    var dataSource = this.dataSource();\r\n                    if (dataSource) {\r\n                        e.changes.forEach((function(change) {\r\n                            if (\"insert\" === change.type && change.index >= 0) {\r\n                                var dataIndex = 0;\r\n                                for (var i = 0; i < change.index; i++) {\r\n                                    var row = rows[i];\r\n                                    if (row && (\"data\" === row.rowType || \"group\" === row.rowType)) {\r\n                                        dataIndex++\r\n                                    }\r\n                                }\r\n                                change.index = dataIndex\r\n                            }\r\n                        }))\r\n                    }\r\n                },\r\n                updateItems: function(change, isDataChanged) {\r\n                    change = change || {};\r\n                    if (void 0 !== this._repaintChangesOnly) {\r\n                        var _change$repaintChange;\r\n                        change.repaintChangesOnly = null !== (_change$repaintChange = change.repaintChangesOnly) && void 0 !== _change$repaintChange ? _change$repaintChange : this._repaintChangesOnly;\r\n                        change.needUpdateDimensions = change.needUpdateDimensions || this._needUpdateDimensions\r\n                    } else if (change.changes) {\r\n                        change.repaintChangesOnly = this.option(\"repaintChangesOnly\")\r\n                    } else if (isDataChanged) {\r\n                        var operationTypes = this.dataSource().operationTypes();\r\n                        change.repaintChangesOnly = operationTypes && !operationTypes.grouping && !operationTypes.filtering && this.option(\"repaintChangesOnly\");\r\n                        change.isDataChanged = true;\r\n                        if (operationTypes && (operationTypes.reload || operationTypes.paging || operationTypes.groupExpanding)) {\r\n                            change.needUpdateDimensions = true\r\n                        }\r\n                    }\r\n                    if (this._updateLockCount && !change.cancel) {\r\n                        this._changes.push(change);\r\n                        return\r\n                    }\r\n                    this._updateItemsCore(change);\r\n                    if (change.cancel) {\r\n                        return\r\n                    }\r\n                    this._fireChanged(change)\r\n                },\r\n                loadingOperationTypes: function() {\r\n                    var dataSource = this.dataSource();\r\n                    return dataSource && dataSource.loadingOperationTypes() || {}\r\n                },\r\n                _fireChanged: function(change) {\r\n                    if (this._currentOperationTypes) {\r\n                        change.operationTypes = this._currentOperationTypes;\r\n                        this._currentOperationTypes = null\r\n                    }\r\n                    deferRender(() => {\r\n                        this.changed.fire(change)\r\n                    })\r\n                },\r\n                isLoading: function() {\r\n                    return this._isLoading || this._isCustomLoading\r\n                },\r\n                _fireLoadingChanged: function() {\r\n                    this.loadingChanged.fire(this.isLoading(), this._loadingText)\r\n                },\r\n                _calculateAdditionalFilter: function() {\r\n                    return null\r\n                },\r\n                _applyFilter: function() {\r\n                    var dataSource = this._dataSource;\r\n                    if (dataSource) {\r\n                        dataSource.pageIndex(0);\r\n                        this._isFilterApplying = true;\r\n                        return this.reload().done(() => {\r\n                            if (this._isFilterApplying) {\r\n                                this.pageChanged.fire()\r\n                            }\r\n                        })\r\n                    }\r\n                },\r\n                resetFilterApplying: function() {\r\n                    this._isFilterApplying = false\r\n                },\r\n                filter: function(filterExpr) {\r\n                    var dataSource = this._dataSource;\r\n                    var filter = dataSource && dataSource.filter();\r\n                    if (0 === arguments.length) {\r\n                        return filter\r\n                    }\r\n                    filterExpr = arguments.length > 1 ? Array.prototype.slice.call(arguments, 0) : filterExpr;\r\n                    if (gridCoreUtils.equalFilterParameters(filter, filterExpr)) {\r\n                        return\r\n                    }\r\n                    if (dataSource) {\r\n                        dataSource.filter(filterExpr)\r\n                    }\r\n                    this._applyFilter()\r\n                },\r\n                clearFilter: function(filterName) {\r\n                    var that = this;\r\n                    var columnsController = that._columnsController;\r\n                    var clearColumnOption = function(optionName) {\r\n                        var columnCount = columnsController.columnCount();\r\n                        for (var index = 0; index < columnCount; index++) {\r\n                            columnsController.columnOption(index, optionName, void 0)\r\n                        }\r\n                    };\r\n                    that.component.beginUpdate();\r\n                    if (arguments.length > 0) {\r\n                        switch (filterName) {\r\n                            case \"dataSource\":\r\n                                that.filter(null);\r\n                                break;\r\n                            case \"search\":\r\n                                that.searchByText(\"\");\r\n                                break;\r\n                            case \"header\":\r\n                                clearColumnOption(\"filterValues\");\r\n                                break;\r\n                            case \"row\":\r\n                                clearColumnOption(\"filterValue\")\r\n                        }\r\n                    } else {\r\n                        that.filter(null);\r\n                        that.searchByText(\"\");\r\n                        clearColumnOption(\"filterValue\");\r\n                        clearColumnOption(\"bufferedFilterValue\");\r\n                        clearColumnOption(\"filterValues\")\r\n                    }\r\n                    that.component.endUpdate()\r\n                },\r\n                _fireDataSourceChanged: function() {\r\n                    var that = this;\r\n                    that.changed.add((function changedHandler() {\r\n                        that.changed.remove(changedHandler);\r\n                        that.dataSourceChanged.fire()\r\n                    }))\r\n                },\r\n                _getDataSourceAdapter: noop,\r\n                _createDataSourceAdapterCore: function(dataSource, remoteOperations) {\r\n                    var dataSourceAdapterProvider = this._getDataSourceAdapter();\r\n                    var dataSourceAdapter = dataSourceAdapterProvider.create(this.component);\r\n                    dataSourceAdapter.init(dataSource, remoteOperations);\r\n                    return dataSourceAdapter\r\n                },\r\n                isLocalStore: function(store) {\r\n                    store = store || this.store();\r\n                    return store instanceof ArrayStore\r\n                },\r\n                isCustomStore: function(store) {\r\n                    store = store || this.store();\r\n                    return store instanceof CustomStore\r\n                },\r\n                _createDataSourceAdapter: function(dataSource) {\r\n                    var remoteOperations = this.option(\"remoteOperations\");\r\n                    var store = dataSource.store();\r\n                    var enabledRemoteOperations = {\r\n                        filtering: true,\r\n                        sorting: true,\r\n                        paging: true,\r\n                        grouping: true,\r\n                        summary: true\r\n                    };\r\n                    if (remoteOperations && remoteOperations.groupPaging) {\r\n                        remoteOperations = extend({}, enabledRemoteOperations, remoteOperations)\r\n                    }\r\n                    if (\"auto\" === remoteOperations) {\r\n                        remoteOperations = this.isLocalStore(store) || this.isCustomStore(store) ? {} : {\r\n                            filtering: true,\r\n                            sorting: true,\r\n                            paging: true\r\n                        }\r\n                    }\r\n                    if (true === remoteOperations) {\r\n                        remoteOperations = enabledRemoteOperations\r\n                    }\r\n                    return this._createDataSourceAdapterCore(dataSource, remoteOperations)\r\n                },\r\n                setDataSource: function(dataSource) {\r\n                    var oldDataSource = this._dataSource;\r\n                    if (!dataSource && oldDataSource) {\r\n                        oldDataSource.cancelAll();\r\n                        oldDataSource.changed.remove(this._dataChangedHandler);\r\n                        oldDataSource.loadingChanged.remove(this._loadingChangedHandler);\r\n                        oldDataSource.loadError.remove(this._loadErrorHandler);\r\n                        oldDataSource.customizeStoreLoadOptions.remove(this._customizeStoreLoadOptionsHandler);\r\n                        oldDataSource.changing.remove(this._changingHandler);\r\n                        oldDataSource.pushed.remove(this._dataPushedHandler);\r\n                        oldDataSource.dispose(this._isSharedDataSource)\r\n                    }\r\n                    if (dataSource) {\r\n                        dataSource = this._createDataSourceAdapter(dataSource)\r\n                    }\r\n                    this._dataSource = dataSource;\r\n                    if (dataSource) {\r\n                        this._fireDataSourceChanged();\r\n                        this._isLoading = !dataSource.isLoaded();\r\n                        this._needApplyFilter = true;\r\n                        this._isAllDataTypesDefined = this._columnsController.isAllDataTypesDefined();\r\n                        dataSource.changed.add(this._dataChangedHandler);\r\n                        dataSource.loadingChanged.add(this._loadingChangedHandler);\r\n                        dataSource.loadError.add(this._loadErrorHandler);\r\n                        dataSource.customizeStoreLoadOptions.add(this._customizeStoreLoadOptionsHandler);\r\n                        dataSource.changing.add(this._changingHandler);\r\n                        dataSource.pushed.add(this._dataPushedHandler)\r\n                    }\r\n                },\r\n                items: function() {\r\n                    return this._items\r\n                },\r\n                isEmpty: function() {\r\n                    return !this.items().length\r\n                },\r\n                pageCount: function() {\r\n                    return this._dataSource ? this._dataSource.pageCount() : 1\r\n                },\r\n                dataSource: function() {\r\n                    return this._dataSource\r\n                },\r\n                store: function() {\r\n                    var dataSource = this._dataSource;\r\n                    return dataSource && dataSource.store()\r\n                },\r\n                loadAll: function(data) {\r\n                    var that = this;\r\n                    var d = new Deferred;\r\n                    var dataSource = that._dataSource;\r\n                    if (dataSource) {\r\n                        if (data) {\r\n                            var options = {\r\n                                data: data,\r\n                                isCustomLoading: true,\r\n                                storeLoadOptions: {\r\n                                    isLoadingAll: true\r\n                                },\r\n                                loadOptions: {\r\n                                    filter: that.getCombinedFilter(),\r\n                                    group: dataSource.group(),\r\n                                    sort: dataSource.sort()\r\n                                }\r\n                            };\r\n                            dataSource._handleDataLoaded(options);\r\n                            when(options.data).done((function(data) {\r\n                                data = that._beforeProcessItems(data);\r\n                                d.resolve(that._processItems(data, {\r\n                                    changeType: \"loadingAll\"\r\n                                }), options.extra && options.extra.summary)\r\n                            })).fail(d.reject)\r\n                        } else if (!dataSource.isLoading()) {\r\n                            var loadOptions = extend({}, dataSource.loadOptions(), {\r\n                                isLoadingAll: true,\r\n                                requireTotalCount: false\r\n                            });\r\n                            dataSource.load(loadOptions).done((function(items, extra) {\r\n                                items = that._beforeProcessItems(items);\r\n                                items = that._processItems(items, {\r\n                                    changeType: \"loadingAll\"\r\n                                });\r\n                                d.resolve(items, extra && extra.summary)\r\n                            })).fail(d.reject)\r\n                        } else {\r\n                            d.reject()\r\n                        }\r\n                    } else {\r\n                        d.resolve([])\r\n                    }\r\n                    return d\r\n                },\r\n                getKeyByRowIndex: function(rowIndex, byLoaded) {\r\n                    var item = this.items(byLoaded)[rowIndex];\r\n                    if (item) {\r\n                        return item.key\r\n                    }\r\n                },\r\n                getRowIndexByKey: function(key, byLoaded) {\r\n                    return gridCoreUtils.getIndexByKey(key, this.items(byLoaded))\r\n                },\r\n                keyOf: function(data) {\r\n                    var store = this.store();\r\n                    if (store) {\r\n                        return store.keyOf(data)\r\n                    }\r\n                },\r\n                byKey: function(key) {\r\n                    var store = this.store();\r\n                    var rowIndex = this.getRowIndexByKey(key);\r\n                    var result;\r\n                    if (!store) {\r\n                        return\r\n                    }\r\n                    if (rowIndex >= 0) {\r\n                        result = (new Deferred).resolve(this.items()[rowIndex].data)\r\n                    }\r\n                    return result || store.byKey(key)\r\n                },\r\n                key: function() {\r\n                    var store = this.store();\r\n                    if (store) {\r\n                        return store.key()\r\n                    }\r\n                },\r\n                getRowIndexOffset: function() {\r\n                    return 0\r\n                },\r\n                getDataByKeys: function(rowKeys) {\r\n                    var that = this;\r\n                    var result = new Deferred;\r\n                    var deferreds = [];\r\n                    var data = [];\r\n                    each(rowKeys, (function(index, key) {\r\n                        deferreds.push(that.byKey(key).done((function(keyData) {\r\n                            data[index] = keyData\r\n                        })))\r\n                    }));\r\n                    when.apply($, deferreds).always((function() {\r\n                        result.resolve(data)\r\n                    }));\r\n                    return result\r\n                },\r\n                pageIndex: function(value) {\r\n                    return changePaging(this, \"pageIndex\", value)\r\n                },\r\n                pageSize: function(value) {\r\n                    return changePaging(this, \"pageSize\", value)\r\n                },\r\n                beginCustomLoading: function(messageText) {\r\n                    this._isCustomLoading = true;\r\n                    this._loadingText = messageText || \"\";\r\n                    this._fireLoadingChanged()\r\n                },\r\n                endCustomLoading: function() {\r\n                    this._isCustomLoading = false;\r\n                    this._loadingText = void 0;\r\n                    this._fireLoadingChanged()\r\n                },\r\n                refresh: function(options) {\r\n                    if (true === options) {\r\n                        options = {\r\n                            reload: true,\r\n                            changesOnly: true\r\n                        }\r\n                    } else if (!options) {\r\n                        options = {\r\n                            lookup: true,\r\n                            selection: true,\r\n                            reload: true\r\n                        }\r\n                    }\r\n                    var that = this;\r\n                    var dataSource = that.getDataSource();\r\n                    var changesOnly = options.changesOnly;\r\n                    var d = new Deferred;\r\n                    var customizeLoadResult = function() {\r\n                        that._repaintChangesOnly = !!changesOnly\r\n                    };\r\n                    when(!options.lookup || that._columnsController.refresh()).always((function() {\r\n                        if (options.load || options.reload) {\r\n                            dataSource && dataSource.on(\"customizeLoadResult\", customizeLoadResult);\r\n                            when(that.reload(options.reload, changesOnly)).always((function() {\r\n                                dataSource && dataSource.off(\"customizeLoadResult\", customizeLoadResult);\r\n                                that._repaintChangesOnly = void 0\r\n                            })).done(d.resolve).fail(d.reject)\r\n                        } else {\r\n                            that.updateItems({\r\n                                repaintChangesOnly: options.changesOnly\r\n                            });\r\n                            d.resolve()\r\n                        }\r\n                    }));\r\n                    return d.promise()\r\n                },\r\n                getVisibleRows: function() {\r\n                    return this.items()\r\n                },\r\n                _disposeDataSource: function() {\r\n                    this.setDataSource(null)\r\n                },\r\n                dispose: function() {\r\n                    this._disposeDataSource();\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                repaintRows: function(rowIndexes, changesOnly) {\r\n                    rowIndexes = Array.isArray(rowIndexes) ? rowIndexes : [rowIndexes];\r\n                    if (rowIndexes.length > 1 || isDefined(rowIndexes[0])) {\r\n                        this.updateItems({\r\n                            changeType: \"update\",\r\n                            rowIndices: rowIndexes,\r\n                            isFullUpdate: !changesOnly\r\n                        })\r\n                    }\r\n                },\r\n                skipProcessingPagingChange: function(fullName) {\r\n                    return this._skipProcessingPagingChange && (\"paging.pageIndex\" === fullName || \"paging.pageSize\" === fullName)\r\n                },\r\n                getUserState: function() {\r\n                    return {\r\n                        searchText: this.option(\"searchPanel.text\"),\r\n                        pageIndex: this.pageIndex(),\r\n                        pageSize: this.pageSize()\r\n                    }\r\n                },\r\n                getCachedStoreData: function() {\r\n                    return this._dataSource && this._dataSource.getCachedStoreData()\r\n                },\r\n                isLastPageLoaded: function() {\r\n                    var pageIndex = this.pageIndex();\r\n                    var pageCount = this.pageCount();\r\n                    return pageIndex === pageCount - 1\r\n                }\r\n            };\r\n            gridCoreUtils.proxyMethod(members, \"load\");\r\n            gridCoreUtils.proxyMethod(members, \"reload\");\r\n            gridCoreUtils.proxyMethod(members, \"push\");\r\n            gridCoreUtils.proxyMethod(members, \"itemsCount\", 0);\r\n            gridCoreUtils.proxyMethod(members, \"totalItemsCount\", 0);\r\n            gridCoreUtils.proxyMethod(members, \"hasKnownLastPage\", true);\r\n            gridCoreUtils.proxyMethod(members, \"isLoaded\", true);\r\n            gridCoreUtils.proxyMethod(members, \"totalCount\", 0);\r\n            return members\r\n        }())\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}