{"ast":null,"code":"/**\r\n * DevExtreme (esm/renovation/ui/scheduler/workspaces/base/utils.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport dateUtils from \"../../../../../core/utils/date\";\nimport { getGroupCount as _getGroupCount } from \"../../../../../ui/scheduler/resources/utils\";\nimport { isHorizontalGroupingApplied, isVerticalGroupingApplied } from \"../utils\";\nimport { ALL_DAY_PANEL_CELL_CLASS, ALL_DAY_ROW_CLASS, DATE_TABLE_CELL_CLASS, DATE_TABLE_ROW_CLASS } from \"../const\";\nvar DAY_MS = dateUtils.dateToMilliseconds(\"day\");\nvar HOUR_MS = dateUtils.dateToMilliseconds(\"hour\");\nexport var DATE_TABLE_MIN_CELL_WIDTH = 75;\nexport var getTotalRowCount = (rowCount, groupOrientation, groups, isAllDayPanelVisible) => {\n  var isVerticalGrouping = isVerticalGroupingApplied(groups, groupOrientation);\n\n  var groupCount = _getGroupCount(groups);\n\n  var totalRowCount = isVerticalGrouping ? rowCount * groupCount : rowCount;\n  return isAllDayPanelVisible ? totalRowCount + groupCount : totalRowCount;\n};\nexport var getTotalCellCount = (cellCount, groupOrientation, groups) => {\n  var isHorizontalGrouping = isHorizontalGroupingApplied(groups, groupOrientation);\n\n  var groupCount = _getGroupCount(groups);\n\n  return isHorizontalGrouping ? cellCount * groupCount : cellCount;\n};\nexport var getRowCountWithAllDayRow = (rowCount, isAllDayPanelVisible) => isAllDayPanelVisible ? rowCount + 1 : rowCount;\nexport var getHiddenInterval = (hoursInterval, cellCountInDay) => {\n  var visibleInterval = hoursInterval * cellCountInDay * HOUR_MS;\n  return DAY_MS - visibleInterval;\n};\nexport var createCellElementMetaData = (tableRect, cellRect) => {\n  var {\n    bottom: bottom,\n    height: height,\n    left: left,\n    right: right,\n    top: top,\n    width: width,\n    x: x,\n    y: y\n  } = cellRect;\n  return {\n    right: right,\n    bottom: bottom,\n    left: left - tableRect.left,\n    top: top - tableRect.top,\n    width: width,\n    height: height,\n    x: x,\n    y: y\n  };\n};\nexport var getDateForHeaderText = (_, date) => date;\nexport var getDateTableWidth = (scrollableWidth, dateTable, viewDataProvider, workSpaceConfig) => {\n  var dateTableCell = dateTable.querySelector(\"td:not(.dx-scheduler-virtual-cell)\");\n  var cellWidth = dateTableCell.getBoundingClientRect().width;\n\n  if (cellWidth < DATE_TABLE_MIN_CELL_WIDTH) {\n    cellWidth = DATE_TABLE_MIN_CELL_WIDTH;\n  }\n\n  var cellCount = viewDataProvider.getCellCount(workSpaceConfig);\n  var totalCellCount = getTotalCellCount(cellCount, workSpaceConfig.groupOrientation, workSpaceConfig.groups);\n  var minTablesWidth = totalCellCount * cellWidth;\n  return scrollableWidth < minTablesWidth ? minTablesWidth : scrollableWidth;\n};\nexport var createVirtualScrollingOptions = options => ({\n  getCellHeight: () => options.cellHeight,\n  getCellWidth: () => options.cellWidth,\n  getCellMinWidth: () => DATE_TABLE_MIN_CELL_WIDTH,\n  isRTL: () => options.rtlEnabled,\n  getSchedulerHeight: () => options.schedulerHeight,\n  getSchedulerWidth: () => options.schedulerWidth,\n  getViewHeight: () => options.viewHeight,\n  getViewWidth: () => options.viewWidth,\n  getScrolling: () => options.scrolling,\n  getScrollableOuterWidth: () => options.scrollableWidth,\n  getGroupCount: () => _getGroupCount(options.groups),\n  isVerticalGrouping: () => options.isVerticalGrouping,\n  getTotalRowCount: () => options.completeRowCount,\n  getTotalCellCount: () => options.completeColumnCount,\n  getWindowHeight: () => options.windowHeight,\n  getWindowWidth: () => options.windowWidth\n});\nexport var getCellIndices = cell => {\n  var row = cell.closest(\".\".concat(DATE_TABLE_ROW_CLASS, \", .\").concat(ALL_DAY_ROW_CLASS));\n  var rowParent = row.parentNode;\n  var cellParent = cell.parentNode;\n  var columnIndex = [...Array.from(cellParent.children)].filter(child => child.className.includes(DATE_TABLE_CELL_CLASS) || child.className.includes(ALL_DAY_PANEL_CELL_CLASS)).indexOf(cell);\n  var rowIndex = [...Array.from(rowParent.children)].filter(child => child.className.includes(DATE_TABLE_ROW_CLASS)).indexOf(row);\n  return {\n    columnIndex: columnIndex,\n    rowIndex: rowIndex\n  };\n};\nexport var compareCellsByDateAndIndex = daysAndIndexes => {\n  var {\n    date: date,\n    firstDate: firstDate,\n    firstIndex: firstIndex,\n    index: index,\n    lastDate: lastDate,\n    lastIndex: lastIndex\n  } = daysAndIndexes;\n\n  if (firstDate === lastDate) {\n    var validFirstIndex = firstIndex;\n    var validLastIndex = lastIndex;\n\n    if (validFirstIndex > validLastIndex) {\n      [validFirstIndex, validLastIndex] = [validLastIndex, validFirstIndex];\n    }\n\n    return firstDate === date && index >= validFirstIndex && index <= validLastIndex;\n  }\n\n  return date === firstDate && index >= firstIndex || date === lastDate && index <= lastIndex || firstDate < date && date < lastDate;\n};\n\nvar filterCellsByDateAndIndex = (cellsRow, filterData) => {\n  var {\n    firstDate: firstDate,\n    firstIndex: firstIndex,\n    lastDate: lastDate,\n    lastIndex: lastIndex\n  } = filterData;\n  var firstDay = dateUtils.trimTime(firstDate).getTime();\n  var lastDay = dateUtils.trimTime(lastDate).getTime();\n  return cellsRow.filter(cell => {\n    var {\n      index: index,\n      startDate: startDate\n    } = cell;\n    var day = dateUtils.trimTime(startDate).getTime();\n    var daysAndIndexes = {\n      date: day,\n      index: index,\n      firstDate: firstDay,\n      firstIndex: firstIndex,\n      lastDate: lastDay,\n      lastIndex: lastIndex\n    };\n    return compareCellsByDateAndIndex(daysAndIndexes);\n  });\n};\n\nexport var getSelectedCells = (viewDataProvider, firstSelectedCell, lastSelectedCell, isLastSelectedCellAllDay) => {\n  var firstCell = firstSelectedCell;\n  var lastCell = lastSelectedCell;\n\n  if (firstCell.startDate.getTime() > lastCell.startDate.getTime()) {\n    [firstCell, lastCell] = [lastCell, firstCell];\n  }\n\n  var {\n    groupIndex: firstGroupIndex,\n    index: firstCellIndex,\n    startDate: firstStartDate\n  } = firstCell;\n  var {\n    index: lastCellIndex,\n    startDate: lastStartDate\n  } = lastCell;\n  var cells = viewDataProvider.getCellsByGroupIndexAndAllDay(null !== firstGroupIndex && void 0 !== firstGroupIndex ? firstGroupIndex : 0, isLastSelectedCellAllDay);\n  var filteredCells = cells.reduce((selectedCells, cellsRow) => {\n    var filterData = {\n      firstDate: firstStartDate,\n      lastDate: lastStartDate,\n      firstIndex: firstCellIndex,\n      lastIndex: lastCellIndex\n    };\n    var filteredRow = filterCellsByDateAndIndex(cellsRow, filterData);\n    selectedCells.push(...filteredRow);\n    return selectedCells;\n  }, []);\n  var selectedCells = filteredCells.sort((firstArg, secondArg) => firstArg.startDate.getTime() - secondArg.startDate.getTime());\n  return selectedCells;\n};\nexport var isCellAllDay = cell => cell.className.includes(ALL_DAY_PANEL_CELL_CLASS);","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/renovation/ui/scheduler/workspaces/base/utils.js"],"names":["dateUtils","getGroupCount","_getGroupCount","isHorizontalGroupingApplied","isVerticalGroupingApplied","ALL_DAY_PANEL_CELL_CLASS","ALL_DAY_ROW_CLASS","DATE_TABLE_CELL_CLASS","DATE_TABLE_ROW_CLASS","DAY_MS","dateToMilliseconds","HOUR_MS","DATE_TABLE_MIN_CELL_WIDTH","getTotalRowCount","rowCount","groupOrientation","groups","isAllDayPanelVisible","isVerticalGrouping","groupCount","totalRowCount","getTotalCellCount","cellCount","isHorizontalGrouping","getRowCountWithAllDayRow","getHiddenInterval","hoursInterval","cellCountInDay","visibleInterval","createCellElementMetaData","tableRect","cellRect","bottom","height","left","right","top","width","x","y","getDateForHeaderText","_","date","getDateTableWidth","scrollableWidth","dateTable","viewDataProvider","workSpaceConfig","dateTableCell","querySelector","cellWidth","getBoundingClientRect","getCellCount","totalCellCount","minTablesWidth","createVirtualScrollingOptions","options","getCellHeight","cellHeight","getCellWidth","getCellMinWidth","isRTL","rtlEnabled","getSchedulerHeight","schedulerHeight","getSchedulerWidth","schedulerWidth","getViewHeight","viewHeight","getViewWidth","viewWidth","getScrolling","scrolling","getScrollableOuterWidth","completeRowCount","completeColumnCount","getWindowHeight","windowHeight","getWindowWidth","windowWidth","getCellIndices","cell","row","closest","concat","rowParent","parentNode","cellParent","columnIndex","Array","from","children","filter","child","className","includes","indexOf","rowIndex","compareCellsByDateAndIndex","daysAndIndexes","firstDate","firstIndex","index","lastDate","lastIndex","validFirstIndex","validLastIndex","filterCellsByDateAndIndex","cellsRow","filterData","firstDay","trimTime","getTime","lastDay","startDate","day","getSelectedCells","firstSelectedCell","lastSelectedCell","isLastSelectedCellAllDay","firstCell","lastCell","groupIndex","firstGroupIndex","firstCellIndex","firstStartDate","lastCellIndex","lastStartDate","cells","getCellsByGroupIndexAndAllDay","filteredCells","reduce","selectedCells","filteredRow","push","sort","firstArg","secondArg","isCellAllDay"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/renovation/ui/scheduler/workspaces/base/utils.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport dateUtils from \"../../../../../core/utils/date\";\r\nimport {\r\n    getGroupCount as _getGroupCount\r\n} from \"../../../../../ui/scheduler/resources/utils\";\r\nimport {\r\n    isHorizontalGroupingApplied,\r\n    isVerticalGroupingApplied\r\n} from \"../utils\";\r\nimport {\r\n    ALL_DAY_PANEL_CELL_CLASS,\r\n    ALL_DAY_ROW_CLASS,\r\n    DATE_TABLE_CELL_CLASS,\r\n    DATE_TABLE_ROW_CLASS\r\n} from \"../const\";\r\nvar DAY_MS = dateUtils.dateToMilliseconds(\"day\");\r\nvar HOUR_MS = dateUtils.dateToMilliseconds(\"hour\");\r\nexport var DATE_TABLE_MIN_CELL_WIDTH = 75;\r\nexport var getTotalRowCount = (rowCount, groupOrientation, groups, isAllDayPanelVisible) => {\r\n    var isVerticalGrouping = isVerticalGroupingApplied(groups, groupOrientation);\r\n    var groupCount = _getGroupCount(groups);\r\n    var totalRowCount = isVerticalGrouping ? rowCount * groupCount : rowCount;\r\n    return isAllDayPanelVisible ? totalRowCount + groupCount : totalRowCount\r\n};\r\nexport var getTotalCellCount = (cellCount, groupOrientation, groups) => {\r\n    var isHorizontalGrouping = isHorizontalGroupingApplied(groups, groupOrientation);\r\n    var groupCount = _getGroupCount(groups);\r\n    return isHorizontalGrouping ? cellCount * groupCount : cellCount\r\n};\r\nexport var getRowCountWithAllDayRow = (rowCount, isAllDayPanelVisible) => isAllDayPanelVisible ? rowCount + 1 : rowCount;\r\nexport var getHiddenInterval = (hoursInterval, cellCountInDay) => {\r\n    var visibleInterval = hoursInterval * cellCountInDay * HOUR_MS;\r\n    return DAY_MS - visibleInterval\r\n};\r\nexport var createCellElementMetaData = (tableRect, cellRect) => {\r\n    var {\r\n        bottom: bottom,\r\n        height: height,\r\n        left: left,\r\n        right: right,\r\n        top: top,\r\n        width: width,\r\n        x: x,\r\n        y: y\r\n    } = cellRect;\r\n    return {\r\n        right: right,\r\n        bottom: bottom,\r\n        left: left - tableRect.left,\r\n        top: top - tableRect.top,\r\n        width: width,\r\n        height: height,\r\n        x: x,\r\n        y: y\r\n    }\r\n};\r\nexport var getDateForHeaderText = (_, date) => date;\r\nexport var getDateTableWidth = (scrollableWidth, dateTable, viewDataProvider, workSpaceConfig) => {\r\n    var dateTableCell = dateTable.querySelector(\"td:not(.dx-scheduler-virtual-cell)\");\r\n    var cellWidth = dateTableCell.getBoundingClientRect().width;\r\n    if (cellWidth < DATE_TABLE_MIN_CELL_WIDTH) {\r\n        cellWidth = DATE_TABLE_MIN_CELL_WIDTH\r\n    }\r\n    var cellCount = viewDataProvider.getCellCount(workSpaceConfig);\r\n    var totalCellCount = getTotalCellCount(cellCount, workSpaceConfig.groupOrientation, workSpaceConfig.groups);\r\n    var minTablesWidth = totalCellCount * cellWidth;\r\n    return scrollableWidth < minTablesWidth ? minTablesWidth : scrollableWidth\r\n};\r\nexport var createVirtualScrollingOptions = options => ({\r\n    getCellHeight: () => options.cellHeight,\r\n    getCellWidth: () => options.cellWidth,\r\n    getCellMinWidth: () => DATE_TABLE_MIN_CELL_WIDTH,\r\n    isRTL: () => options.rtlEnabled,\r\n    getSchedulerHeight: () => options.schedulerHeight,\r\n    getSchedulerWidth: () => options.schedulerWidth,\r\n    getViewHeight: () => options.viewHeight,\r\n    getViewWidth: () => options.viewWidth,\r\n    getScrolling: () => options.scrolling,\r\n    getScrollableOuterWidth: () => options.scrollableWidth,\r\n    getGroupCount: () => _getGroupCount(options.groups),\r\n    isVerticalGrouping: () => options.isVerticalGrouping,\r\n    getTotalRowCount: () => options.completeRowCount,\r\n    getTotalCellCount: () => options.completeColumnCount,\r\n    getWindowHeight: () => options.windowHeight,\r\n    getWindowWidth: () => options.windowWidth\r\n});\r\nexport var getCellIndices = cell => {\r\n    var row = cell.closest(\".\".concat(DATE_TABLE_ROW_CLASS, \", .\").concat(ALL_DAY_ROW_CLASS));\r\n    var rowParent = row.parentNode;\r\n    var cellParent = cell.parentNode;\r\n    var columnIndex = [...Array.from(cellParent.children)].filter(child => child.className.includes(DATE_TABLE_CELL_CLASS) || child.className.includes(ALL_DAY_PANEL_CELL_CLASS)).indexOf(cell);\r\n    var rowIndex = [...Array.from(rowParent.children)].filter(child => child.className.includes(DATE_TABLE_ROW_CLASS)).indexOf(row);\r\n    return {\r\n        columnIndex: columnIndex,\r\n        rowIndex: rowIndex\r\n    }\r\n};\r\nexport var compareCellsByDateAndIndex = daysAndIndexes => {\r\n    var {\r\n        date: date,\r\n        firstDate: firstDate,\r\n        firstIndex: firstIndex,\r\n        index: index,\r\n        lastDate: lastDate,\r\n        lastIndex: lastIndex\r\n    } = daysAndIndexes;\r\n    if (firstDate === lastDate) {\r\n        var validFirstIndex = firstIndex;\r\n        var validLastIndex = lastIndex;\r\n        if (validFirstIndex > validLastIndex) {\r\n            [validFirstIndex, validLastIndex] = [validLastIndex, validFirstIndex]\r\n        }\r\n        return firstDate === date && index >= validFirstIndex && index <= validLastIndex\r\n    }\r\n    return date === firstDate && index >= firstIndex || date === lastDate && index <= lastIndex || firstDate < date && date < lastDate\r\n};\r\nvar filterCellsByDateAndIndex = (cellsRow, filterData) => {\r\n    var {\r\n        firstDate: firstDate,\r\n        firstIndex: firstIndex,\r\n        lastDate: lastDate,\r\n        lastIndex: lastIndex\r\n    } = filterData;\r\n    var firstDay = dateUtils.trimTime(firstDate).getTime();\r\n    var lastDay = dateUtils.trimTime(lastDate).getTime();\r\n    return cellsRow.filter(cell => {\r\n        var {\r\n            index: index,\r\n            startDate: startDate\r\n        } = cell;\r\n        var day = dateUtils.trimTime(startDate).getTime();\r\n        var daysAndIndexes = {\r\n            date: day,\r\n            index: index,\r\n            firstDate: firstDay,\r\n            firstIndex: firstIndex,\r\n            lastDate: lastDay,\r\n            lastIndex: lastIndex\r\n        };\r\n        return compareCellsByDateAndIndex(daysAndIndexes)\r\n    })\r\n};\r\nexport var getSelectedCells = (viewDataProvider, firstSelectedCell, lastSelectedCell, isLastSelectedCellAllDay) => {\r\n    var firstCell = firstSelectedCell;\r\n    var lastCell = lastSelectedCell;\r\n    if (firstCell.startDate.getTime() > lastCell.startDate.getTime()) {\r\n        [firstCell, lastCell] = [lastCell, firstCell]\r\n    }\r\n    var {\r\n        groupIndex: firstGroupIndex,\r\n        index: firstCellIndex,\r\n        startDate: firstStartDate\r\n    } = firstCell;\r\n    var {\r\n        index: lastCellIndex,\r\n        startDate: lastStartDate\r\n    } = lastCell;\r\n    var cells = viewDataProvider.getCellsByGroupIndexAndAllDay(null !== firstGroupIndex && void 0 !== firstGroupIndex ? firstGroupIndex : 0, isLastSelectedCellAllDay);\r\n    var filteredCells = cells.reduce((selectedCells, cellsRow) => {\r\n        var filterData = {\r\n            firstDate: firstStartDate,\r\n            lastDate: lastStartDate,\r\n            firstIndex: firstCellIndex,\r\n            lastIndex: lastCellIndex\r\n        };\r\n        var filteredRow = filterCellsByDateAndIndex(cellsRow, filterData);\r\n        selectedCells.push(...filteredRow);\r\n        return selectedCells\r\n    }, []);\r\n    var selectedCells = filteredCells.sort((firstArg, secondArg) => firstArg.startDate.getTime() - secondArg.startDate.getTime());\r\n    return selectedCells\r\n};\r\nexport var isCellAllDay = cell => cell.className.includes(ALL_DAY_PANEL_CELL_CLASS);\r\n"]},"metadata":{},"sourceType":"module"}