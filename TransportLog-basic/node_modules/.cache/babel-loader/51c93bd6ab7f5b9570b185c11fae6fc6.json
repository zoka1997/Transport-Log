{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.selection.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport gridCore from \"../data_grid/ui.data_grid.core\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport { touch } from \"../../core/utils/support\";\nimport { name as clickEventName } from \"../../events/click\";\nimport messageLocalization from \"../../localization/message\";\nimport { addNamespace, isCommandKeyPressed } from \"../../events/utils/index\";\nimport holdEvent from \"../../events/hold\";\nimport Selection from \"../selection/selection\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport errors from \"../widget/ui.errors\";\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\nvar ROW_CLASS = \"dx-row\";\nvar ROW_SELECTION_CLASS = \"dx-selection\";\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\nvar CHECKBOXES_HIDDEN_CLASS = \"dx-select-checkboxes-hidden\";\nvar COMMAND_SELECT_CLASS = \"dx-command-select\";\nvar SELECTION_DISABLED_CLASS = \"dx-selection-disabled\";\nvar DATA_ROW_CLASS = \"dx-data-row\";\nvar SHOW_CHECKBOXES_MODE = \"selection.showCheckBoxesMode\";\nvar SELECTION_MODE = \"selection.mode\";\n\nvar processLongTap = function (that, dxEvent) {\n  var selectionController = that.getController(\"selection\");\n  var rowsView = that.getView(\"rowsView\");\n  var $row = $(dxEvent.target).closest(\".\" + DATA_ROW_CLASS);\n  var rowIndex = rowsView.getRowIndex($row);\n\n  if (rowIndex < 0) {\n    return;\n  }\n\n  if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE)) {\n    if (selectionController.isSelectionWithCheckboxes()) {\n      selectionController.stopSelectionWithCheckboxes();\n    } else {\n      selectionController.startSelectionWithCheckboxes();\n    }\n  } else {\n    if (\"onClick\" === that.option(SHOW_CHECKBOXES_MODE)) {\n      selectionController.startSelectionWithCheckboxes();\n    }\n\n    if (\"always\" !== that.option(SHOW_CHECKBOXES_MODE)) {\n      selectionController.changeItemSelection(rowIndex, {\n        control: true\n      });\n    }\n  }\n};\n\nvar SelectionController = gridCore.Controller.inherit(function () {\n  var selectionCellTemplate = (container, options) => {\n    var component = options.component;\n    var rowsView = component.getView(\"rowsView\");\n\n    if (component.option(\"renderAsync\") && !component.option(\"selection.deferred\")) {\n      options.value = component.isRowSelected(options.row.key);\n    }\n\n    rowsView.renderSelectCheckBoxContainer($(container), options);\n  };\n\n  var selectionHeaderTemplate = (container, options) => {\n    var column = options.column;\n    var $cellElement = $(container);\n    var columnHeadersView = options.component.getView(\"columnHeadersView\");\n    $cellElement.addClass(EDITOR_CELL_CLASS);\n\n    columnHeadersView._renderSelectAllCheckBox($cellElement, column);\n\n    columnHeadersView._attachSelectAllCheckBoxClickEvent($cellElement);\n  };\n\n  return {\n    init: function () {\n      var {\n        deferred: deferred,\n        selectAllMode: selectAllMode,\n        mode: mode\n      } = this.option(\"selection\") || {};\n\n      if (\"infinite\" === this.option(\"scrolling.mode\") && !deferred && \"multiple\" === mode && \"allPages\" === selectAllMode) {\n        errors.log(\"W1018\");\n      }\n\n      this._dataController = this.getController(\"data\");\n      this._selectionMode = mode;\n      this._isSelectionWithCheckboxes = false;\n      this._selection = this._createSelection();\n\n      this._updateSelectColumn();\n\n      this.createAction(\"onSelectionChanged\", {\n        excludeValidators: [\"disabled\", \"readOnly\"]\n      });\n      this._dataController && this._dataController.pushed.add(this._handleDataPushed.bind(this));\n    },\n    _handleDataPushed: function (changes) {\n      var removedKeys = changes.filter(change => \"remove\" === change.type).map(change => change.key);\n      removedKeys.length && this.deselectRows(removedKeys);\n    },\n    _getSelectionConfig: function () {\n      var dataController = this._dataController;\n      var columnsController = this.getController(\"columns\");\n      var selectionOptions = this.option(\"selection\") || {};\n      var deferred = selectionOptions.deferred;\n      var scrollingMode = this.option(\"scrolling.mode\");\n      var virtualPaging = \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\n      var allowSelectAll = this.option(\"selection.allowSelectAll\");\n      var legacyScrollingMode = this.option(\"scrolling.legacyMode\");\n      return {\n        selectedKeys: this.option(\"selectedRowKeys\"),\n        mode: this._selectionMode,\n        deferred: deferred,\n        maxFilterLengthInRequest: selectionOptions.maxFilterLengthInRequest,\n        selectionFilter: this.option(\"selectionFilter\"),\n        ignoreDisabledItems: true,\n        allowLoadByRange: function () {\n          var hasGroupColumns = columnsController.getGroupColumns().length > 0;\n          return virtualPaging && !legacyScrollingMode && !hasGroupColumns && allowSelectAll && !deferred;\n        },\n        key: function () {\n          return null === dataController || void 0 === dataController ? void 0 : dataController.key();\n        },\n        keyOf: function (item) {\n          return null === dataController || void 0 === dataController ? void 0 : dataController.keyOf(item);\n        },\n        dataFields: function () {\n          var _dataController$dataS;\n\n          return null === (_dataController$dataS = dataController.dataSource()) || void 0 === _dataController$dataS ? void 0 : _dataController$dataS.select();\n        },\n        load: function (options) {\n          var _dataController$dataS2;\n\n          return (null === (_dataController$dataS2 = dataController.dataSource()) || void 0 === _dataController$dataS2 ? void 0 : _dataController$dataS2.load(options)) || new Deferred().resolve([]);\n        },\n        plainItems: function () {\n          return dataController.items(true);\n        },\n        isItemSelected: function (item) {\n          return item.selected;\n        },\n        isSelectableItem: function (item) {\n          return \"data\" === (null === item || void 0 === item ? void 0 : item.rowType) && !item.isNewRow;\n        },\n        getItemData: function (item) {\n          return (null === item || void 0 === item ? void 0 : item.oldData) || (null === item || void 0 === item ? void 0 : item.data) || item;\n        },\n        filter: function () {\n          return dataController.getCombinedFilter(deferred);\n        },\n        totalCount: () => dataController.totalCount(),\n        getLoadOptions: function (loadItemIndex, focusedItemIndex, shiftItemIndex) {\n          var _dataController$dataS3, _dataController$dataS4;\n\n          var {\n            sort: sort,\n            filter: filter\n          } = null !== (_dataController$dataS3 = null === (_dataController$dataS4 = dataController.dataSource()) || void 0 === _dataController$dataS4 ? void 0 : _dataController$dataS4.lastLoadOptions()) && void 0 !== _dataController$dataS3 ? _dataController$dataS3 : {};\n          var minIndex = Math.min(loadItemIndex, focusedItemIndex);\n          var maxIndex = Math.max(loadItemIndex, focusedItemIndex);\n\n          if (isDefined(shiftItemIndex)) {\n            minIndex = Math.min(shiftItemIndex, minIndex);\n            maxIndex = Math.max(shiftItemIndex, maxIndex);\n          }\n\n          var take = maxIndex - minIndex + 1;\n          return {\n            skip: minIndex,\n            take: take,\n            filter: filter,\n            sort: sort\n          };\n        },\n        onSelectionChanged: this._updateSelectedItems.bind(this)\n      };\n    },\n    _updateSelectColumn: function () {\n      var columnsController = this.getController(\"columns\");\n      var isSelectColumnVisible = this.isSelectColumnVisible();\n      columnsController.addCommandColumn({\n        type: \"selection\",\n        command: \"select\",\n        visible: isSelectColumnVisible,\n        visibleIndex: -1,\n        dataType: \"boolean\",\n        alignment: \"center\",\n        cssClass: COMMAND_SELECT_CLASS,\n        width: \"auto\",\n        cellTemplate: selectionCellTemplate,\n        headerCellTemplate: selectionHeaderTemplate\n      });\n      columnsController.columnOption(\"command:select\", \"visible\", isSelectColumnVisible);\n    },\n    _createSelection: function () {\n      var options = this._getSelectionConfig();\n\n      return new Selection(options);\n    },\n    _fireSelectionChanged: function (options) {\n      var argument = this.option(\"selection.deferred\") ? {\n        selectionFilter: this.option(\"selectionFilter\")\n      } : {\n        selectedRowKeys: this.option(\"selectedRowKeys\")\n      };\n      this.selectionChanged.fire(argument);\n\n      if (options) {\n        this.executeAction(\"onSelectionChanged\", options);\n      }\n    },\n    _updateCheckboxesState: function (options) {\n      var isDeferredMode = options.isDeferredMode;\n      var selectionFilter = options.selectionFilter;\n      var selectedItemKeys = options.selectedItemKeys;\n      var removedItemKeys = options.removedItemKeys;\n\n      if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\n        if (isDeferredMode ? selectionFilter && function (that, selectionFilter) {\n          var keyIndex = 0;\n\n          var store = that._dataController.store();\n\n          var key = store && store.key();\n          var isComplexKey = Array.isArray(key);\n\n          if (!selectionFilter.length) {\n            return false;\n          }\n\n          if (isComplexKey && Array.isArray(selectionFilter[0]) && \"and\" === selectionFilter[1]) {\n            for (var i = 0; i < selectionFilter.length; i++) {\n              if (Array.isArray(selectionFilter[i])) {\n                if (selectionFilter[i][0] !== key[keyIndex] || \"=\" !== selectionFilter[i][1]) {\n                  return true;\n                }\n\n                keyIndex++;\n              }\n            }\n\n            return false;\n          }\n\n          return key !== selectionFilter[0];\n        }(this, selectionFilter) : selectedItemKeys.length > 1) {\n          this.startSelectionWithCheckboxes();\n        } else if (isDeferredMode ? selectionFilter && !selectionFilter.length : 0 === selectedItemKeys.length && removedItemKeys.length) {\n          this.stopSelectionWithCheckboxes();\n        }\n      }\n    },\n    _updateSelectedItems: function (args) {\n      var selectionChangedOptions;\n      var isDeferredMode = this.option(\"selection.deferred\");\n\n      var selectionFilter = this._selection.selectionFilter();\n\n      var dataController = this._dataController;\n      var items = dataController.items(true);\n      var visibleItems = dataController.items();\n\n      if (!items) {\n        return;\n      }\n\n      var isSelectionWithCheckboxes = this.isSelectionWithCheckboxes();\n      var changedItemIndexes = this.getChangedItemIndexes(items);\n      var visibleChangedItemIndexes = this.getChangedItemIndexes(visibleItems);\n\n      this._updateCheckboxesState({\n        selectedItemKeys: args.selectedItemKeys,\n        removedItemKeys: args.removedItemKeys,\n        selectionFilter: selectionFilter,\n        isDeferredMode: isDeferredMode\n      });\n\n      if (changedItemIndexes.length || isSelectionWithCheckboxes !== this.isSelectionWithCheckboxes()) {\n        dataController.updateItems({\n          changeType: \"updateSelection\",\n          itemIndexes: visibleChangedItemIndexes\n        });\n      }\n\n      if (isDeferredMode) {\n        this.option(\"selectionFilter\", selectionFilter);\n        selectionChangedOptions = {};\n      } else if (args.addedItemKeys.length || args.removedItemKeys.length) {\n        this._selectedItemsInternalChange = true;\n        this.option(\"selectedRowKeys\", args.selectedItemKeys.slice(0));\n        this._selectedItemsInternalChange = false;\n        selectionChangedOptions = {\n          selectedRowsData: args.selectedItems.slice(0),\n          selectedRowKeys: args.selectedItemKeys.slice(0),\n          currentSelectedRowKeys: args.addedItemKeys.slice(0),\n          currentDeselectedRowKeys: args.removedItemKeys.slice(0)\n        };\n      }\n\n      this._fireSelectionChanged(selectionChangedOptions);\n    },\n    getChangedItemIndexes: function (items) {\n      var itemIndexes = [];\n      var isDeferredSelection = this.option(\"selection.deferred\");\n\n      for (var i = 0, length = items.length; i < length; i++) {\n        var row = items[i];\n        var isItemSelected = this.isRowSelected(isDeferredSelection ? row.data : row.key);\n\n        if (this._selection.isDataItem(row) && row.isSelected !== isItemSelected) {\n          itemIndexes.push(i);\n        }\n      }\n\n      return itemIndexes;\n    },\n    callbackNames: function () {\n      return [\"selectionChanged\"];\n    },\n    optionChanged: function (args) {\n      this.callBase(args);\n\n      switch (args.name) {\n        case \"selection\":\n          var oldSelectionMode = this._selectionMode;\n          this.init();\n\n          if (\"selection.showCheckBoxesMode\" !== args.fullName) {\n            var selectionMode = this._selectionMode;\n            var selectedRowKeys = this.option(\"selectedRowKeys\");\n\n            if (oldSelectionMode !== selectionMode) {\n              if (\"single\" === selectionMode) {\n                if (selectedRowKeys.length > 1) {\n                  selectedRowKeys = [selectedRowKeys[0]];\n                }\n              } else if (\"multiple\" !== selectionMode) {\n                selectedRowKeys = [];\n              }\n            }\n\n            this.selectRows(selectedRowKeys).always(() => {\n              this._fireSelectionChanged();\n            });\n          }\n\n          this.getController(\"columns\").updateColumns();\n          args.handled = true;\n          break;\n\n        case \"selectionFilter\":\n          this._selection.selectionFilter(args.value);\n\n          args.handled = true;\n          break;\n\n        case \"selectedRowKeys\":\n          var value = args.value || [];\n\n          if (Array.isArray(value) && !this._selectedItemsInternalChange && (this.component.getDataSource() || !value.length)) {\n            this.selectRows(value);\n          }\n\n          args.handled = true;\n      }\n    },\n    publicMethods: function () {\n      return [\"selectRows\", \"deselectRows\", \"selectRowsByIndexes\", \"getSelectedRowKeys\", \"getSelectedRowsData\", \"clearSelection\", \"selectAll\", \"deselectAll\", \"startSelectionWithCheckboxes\", \"stopSelectionWithCheckboxes\", \"isRowSelected\"];\n    },\n    isRowSelected: function (arg) {\n      return this._selection.isItemSelected(arg);\n    },\n    isSelectColumnVisible: function () {\n      return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || \"onClick\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes);\n    },\n    _isOnePageSelectAll: function () {\n      return \"page\" === this.option(\"selection.selectAllMode\");\n    },\n    isSelectAll: function () {\n      return this._selection.getSelectAllState(this._isOnePageSelectAll());\n    },\n    selectAll: function () {\n      if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\n        this.startSelectionWithCheckboxes();\n      }\n\n      return this._selection.selectAll(this._isOnePageSelectAll());\n    },\n    deselectAll: function () {\n      return this._selection.deselectAll(this._isOnePageSelectAll());\n    },\n    clearSelection: function () {\n      return this.selectedItemKeys([]);\n    },\n    refresh: function () {\n      var selectedRowKeys = this.option(\"selectedRowKeys\") || [];\n\n      if (!this.option(\"selection.deferred\") && selectedRowKeys.length) {\n        return this.selectedItemKeys(selectedRowKeys);\n      }\n\n      return new Deferred().resolve().promise();\n    },\n    selectedItemKeys: function (value, preserve, isDeselect, isSelectAll) {\n      return this._selection.selectedItemKeys(value, preserve, isDeselect, isSelectAll);\n    },\n    getSelectedRowKeys: function () {\n      return this._selection.getSelectedItemKeys();\n    },\n    selectRows: function (keys, preserve) {\n      return this.selectedItemKeys(keys, preserve);\n    },\n    deselectRows: function (keys) {\n      return this.selectedItemKeys(keys, true, true);\n    },\n    selectRowsByIndexes: function (indexes) {\n      var items = this._dataController.items();\n\n      var keys = [];\n\n      if (!Array.isArray(indexes)) {\n        indexes = Array.prototype.slice.call(arguments, 0);\n      }\n\n      each(indexes, function () {\n        var item = items[this];\n\n        if (item && \"data\" === item.rowType) {\n          keys.push(item.key);\n        }\n      });\n      return this.selectRows(keys);\n    },\n    getSelectedRowsData: function () {\n      return this._selection.getSelectedItems();\n    },\n    changeItemSelection: function (visibleItemIndex, keys, setFocusOnly) {\n      keys = keys || {};\n\n      if (this.isSelectionWithCheckboxes()) {\n        keys.control = true;\n      }\n\n      var loadedItemIndex = visibleItemIndex + this._dataController.getRowIndexOffset() - this._dataController.getRowIndexOffset(true);\n\n      return this._selection.changeItemSelection(loadedItemIndex, keys, setFocusOnly);\n    },\n    focusedItemIndex: function (itemIndex) {\n      if (isDefined(itemIndex)) {\n        this._selection._focusedItemIndex = itemIndex;\n      } else {\n        return this._selection._focusedItemIndex;\n      }\n    },\n    isSelectionWithCheckboxes: function () {\n      return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes);\n    },\n    startSelectionWithCheckboxes: function () {\n      if (\"multiple\" === this.option(SELECTION_MODE) && !this.isSelectionWithCheckboxes()) {\n        this._isSelectionWithCheckboxes = true;\n\n        this._updateSelectColumn();\n\n        return true;\n      }\n\n      return false;\n    },\n    stopSelectionWithCheckboxes: function () {\n      if (this._isSelectionWithCheckboxes) {\n        this._isSelectionWithCheckboxes = false;\n\n        this._updateSelectColumn();\n\n        return true;\n      }\n\n      return false;\n    }\n  };\n}());\nexport var selectionModule = {\n  defaultOptions: function () {\n    return {\n      selection: {\n        mode: \"none\",\n        showCheckBoxesMode: \"onClick\",\n        allowSelectAll: true,\n        selectAllMode: \"allPages\",\n        maxFilterLengthInRequest: 1500,\n        deferred: false\n      },\n      selectionFilter: [],\n      selectedRowKeys: []\n    };\n  },\n  controllers: {\n    selection: SelectionController\n  },\n  extenders: {\n    controllers: {\n      data: {\n        init: function () {\n          var selectionController = this.getController(\"selection\");\n          var isDeferredMode = this.option(\"selection.deferred\");\n          this.callBase.apply(this, arguments);\n\n          if (isDeferredMode) {\n            selectionController._updateCheckboxesState({\n              isDeferredMode: true,\n              selectionFilter: this.option(\"selectionFilter\")\n            });\n          }\n        },\n        _loadDataSource: function () {\n          var that = this;\n          return that.callBase().done(function () {\n            that.getController(\"selection\").refresh();\n          });\n        },\n        _processDataItem: function (item, options) {\n          var that = this;\n          var selectionController = that.getController(\"selection\");\n          var hasSelectColumn = selectionController.isSelectColumnVisible();\n          var isDeferredSelection = options.isDeferredSelection = void 0 === options.isDeferredSelection ? this.option(\"selection.deferred\") : options.isDeferredSelection;\n          var dataItem = this.callBase.apply(this, arguments);\n          dataItem.isSelected = selectionController.isRowSelected(isDeferredSelection ? dataItem.data : dataItem.key);\n\n          if (hasSelectColumn && dataItem.values) {\n            for (var i = 0; i < options.visibleColumns.length; i++) {\n              if (\"select\" === options.visibleColumns[i].command) {\n                dataItem.values[i] = dataItem.isSelected;\n                break;\n              }\n            }\n          }\n\n          return dataItem;\n        },\n        refresh: function (options) {\n          var that = this;\n          var d = new Deferred();\n          this.callBase.apply(this, arguments).done(function () {\n            if (!options || options.selection) {\n              that.getController(\"selection\").refresh().done(d.resolve).fail(d.reject);\n            } else {\n              d.resolve();\n            }\n          }).fail(d.reject);\n          return d.promise();\n        },\n        _handleDataChanged: function (e) {\n          this.callBase.apply(this, arguments);\n\n          if ((!e || \"refresh\" === e.changeType) && !this._repaintChangesOnly) {\n            this.getController(\"selection\").focusedItemIndex(-1);\n          }\n        },\n        _applyChange: function (change) {\n          if (change && \"updateSelection\" === change.changeType) {\n            change.items.forEach((item, index) => {\n              var currentItem = this._items[index];\n\n              if (currentItem) {\n                currentItem.isSelected = item.isSelected;\n                currentItem.values = item.values;\n              }\n            });\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _endUpdateCore: function () {\n          var changes = this._changes;\n          var isUpdateSelection = changes.length > 1 && changes.every(change => \"updateSelection\" === change.changeType);\n\n          if (isUpdateSelection) {\n            var itemIndexes = changes.map(change => change.itemIndexes || []).reduce((a, b) => a.concat(b));\n            this._changes = [{\n              changeType: \"updateSelection\",\n              itemIndexes: itemIndexes\n            }];\n          }\n\n          this.callBase.apply(this, arguments);\n        }\n      },\n      contextMenu: {\n        _contextMenuPrepared: function (options) {\n          var dxEvent = options.event;\n\n          if (dxEvent.originalEvent && \"dxhold\" !== dxEvent.originalEvent.type || options.items && options.items.length > 0) {\n            return;\n          }\n\n          processLongTap(this, dxEvent);\n        }\n      }\n    },\n    views: {\n      columnHeadersView: {\n        init: function () {\n          this.callBase();\n          this.getController(\"selection\").selectionChanged.add(this._updateSelectAllValue.bind(this));\n        },\n        _updateSelectAllValue: function () {\n          var $element = this.element();\n          var $editor = $element && $element.find(\".\" + SELECT_CHECKBOX_CLASS);\n\n          if ($element && $editor.length && \"multiple\" === this.option(\"selection.mode\")) {\n            var selectAllValue = this.getController(\"selection\").isSelectAll();\n            var hasSelection = false !== selectAllValue;\n            var isVisible = this.option(\"selection.allowSelectAll\") ? !this.getController(\"data\").isEmpty() : hasSelection;\n            $editor.dxCheckBox(\"instance\").option({\n              visible: isVisible,\n              value: selectAllValue\n            });\n          }\n        },\n        _handleDataChanged: function (e) {\n          this.callBase(e);\n\n          if (!e || \"refresh\" === e.changeType || e.repaintChangesOnly && \"update\" === e.changeType) {\n            this._updateSelectAllValue();\n          }\n        },\n        _renderSelectAllCheckBox: function ($container, column) {\n          var that = this;\n          var selectionController = that.getController(\"selection\");\n          var isEmptyData = that.getController(\"data\").isEmpty();\n          var groupElement = $(\"<div>\").appendTo($container).addClass(SELECT_CHECKBOX_CLASS);\n          that.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectAll\"), groupElement);\n          that.getController(\"editorFactory\").createEditor(groupElement, extend({}, column, {\n            parentType: \"headerRow\",\n            dataType: \"boolean\",\n            value: selectionController.isSelectAll(),\n            editorOptions: {\n              visible: !isEmptyData && (that.option(\"selection.allowSelectAll\") || false !== selectionController.isSelectAll())\n            },\n            tabIndex: that.option(\"useLegacyKeyboardNavigation\") ? -1 : that.option(\"tabIndex\") || 0,\n            setValue: function (value, e) {\n              var allowSelectAll = that.option(\"selection.allowSelectAll\");\n              e.component.option(\"visible\", allowSelectAll || false !== e.component.option(\"value\"));\n\n              if (!e.event || selectionController.isSelectAll() === value) {\n                return;\n              }\n\n              if (e.value && !allowSelectAll) {\n                e.component.option(\"value\", false);\n              } else {\n                e.value ? selectionController.selectAll() : selectionController.deselectAll();\n              }\n\n              e.event.preventDefault();\n            }\n          }));\n          return groupElement;\n        },\n        _attachSelectAllCheckBoxClickEvent: function ($element) {\n          eventsEngine.on($element, clickEventName, this.createAction(function (e) {\n            var event = e.event;\n\n            if (!$(event.target).closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\n              eventsEngine.trigger($(event.currentTarget).children(\".\" + SELECT_CHECKBOX_CLASS), clickEventName);\n            }\n\n            event.preventDefault();\n          }));\n        }\n      },\n      rowsView: {\n        renderSelectCheckBoxContainer: function ($container, options) {\n          if (\"data\" === options.rowType && !options.row.isNewRow) {\n            $container.addClass(EDITOR_CELL_CLASS);\n\n            this._attachCheckBoxClickEvent($container);\n\n            this._renderSelectCheckBox($container, options);\n          } else {\n            gridCoreUtils.setEmptyText($container);\n          }\n        },\n        _renderSelectCheckBox: function (container, options) {\n          var groupElement = $(\"<div>\").addClass(SELECT_CHECKBOX_CLASS).appendTo(container);\n          this.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectRow\"), groupElement);\n          this.getController(\"editorFactory\").createEditor(groupElement, extend({}, options.column, {\n            parentType: \"dataRow\",\n            dataType: \"boolean\",\n            lookup: null,\n            value: options.value,\n            setValue: function (value, e) {\n              var _e$event;\n\n              if (\"keydown\" === (null === e || void 0 === e ? void 0 : null === (_e$event = e.event) || void 0 === _e$event ? void 0 : _e$event.type)) {\n                eventsEngine.trigger(e.element, clickEventName, e);\n              }\n            },\n            row: options.row\n          }));\n          return groupElement;\n        },\n        _attachCheckBoxClickEvent: function ($element) {\n          eventsEngine.on($element, clickEventName, this.createAction(function (e) {\n            var selectionController = this.getController(\"selection\");\n            var event = e.event;\n            var rowIndex = this.getRowIndex($(event.currentTarget).closest(\".\" + ROW_CLASS));\n\n            if (rowIndex >= 0) {\n              selectionController.startSelectionWithCheckboxes();\n              selectionController.changeItemSelection(rowIndex, {\n                shift: event.shiftKey\n              });\n\n              if ($(event.target).closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\n                this.getController(\"data\").updateItems({\n                  changeType: \"updateSelection\",\n                  itemIndexes: [rowIndex]\n                });\n              }\n            }\n          }));\n        },\n        _update: function (change) {\n          var that = this;\n          var tableElements = that.getTableElements();\n\n          if (\"updateSelection\" === change.changeType) {\n            if (tableElements.length > 0) {\n              each(tableElements, function (_, tableElement) {\n                each(change.itemIndexes || [], function (_, index) {\n                  var $row;\n\n                  if (change.items[index]) {\n                    $row = that._getRowElements($(tableElement)).eq(index);\n\n                    if ($row.length) {\n                      var isSelected = change.items[index].isSelected;\n                      $row.toggleClass(ROW_SELECTION_CLASS, void 0 === isSelected ? false : isSelected).find(\".\" + SELECT_CHECKBOX_CLASS).dxCheckBox(\"option\", \"value\", isSelected);\n                      that.setAria(\"selected\", isSelected, $row);\n                    }\n                  }\n                });\n              });\n\n              that._updateCheckboxesClass();\n            }\n          } else {\n            that.callBase(change);\n          }\n        },\n        _createTable: function () {\n          var that = this;\n          var selectionMode = that.option(\"selection.mode\");\n          var $table = that.callBase.apply(that, arguments);\n\n          if (\"none\" !== selectionMode) {\n            if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE) || !touch) {\n              eventsEngine.on($table, addNamespace(holdEvent.name, \"dxDataGridRowsView\"), \".\" + DATA_ROW_CLASS, that.createAction(function (e) {\n                processLongTap(that.component, e.event);\n                e.event.stopPropagation();\n              }));\n            }\n\n            eventsEngine.on($table, \"mousedown selectstart\", that.createAction(function (e) {\n              var event = e.event;\n\n              if (event.shiftKey) {\n                event.preventDefault();\n              }\n            }));\n          }\n\n          return $table;\n        },\n        _createRow: function (row) {\n          var $row = this.callBase.apply(this, arguments);\n\n          if (row) {\n            var isSelected = row.isSelected;\n\n            if (isSelected) {\n              $row.addClass(ROW_SELECTION_CLASS);\n            }\n\n            var selectionMode = this.option(SELECTION_MODE);\n\n            if (\"none\" !== selectionMode) {\n              this.setAria(\"selected\", isSelected, $row);\n            }\n          }\n\n          return $row;\n        },\n        _rowClick: function (e) {\n          var dxEvent = e.event;\n          var isSelectionDisabled = $(dxEvent.target).closest(\".\" + SELECTION_DISABLED_CLASS).length;\n\n          if (!this.isClickableElement($(dxEvent.target))) {\n            if (!isSelectionDisabled && (\"multiple\" !== this.option(SELECTION_MODE) || \"always\" !== this.option(SHOW_CHECKBOXES_MODE))) {\n              if (this.getController(\"selection\").changeItemSelection(e.rowIndex, {\n                control: isCommandKeyPressed(dxEvent),\n                shift: dxEvent.shiftKey\n              })) {\n                dxEvent.preventDefault();\n                e.handled = true;\n              }\n            }\n\n            this.callBase(e);\n          }\n        },\n        isClickableElement: function ($target) {\n          var isCommandSelect = $target.closest(\".\" + COMMAND_SELECT_CLASS).length;\n          return !!isCommandSelect;\n        },\n        _renderCore: function (change) {\n          this.callBase(change);\n\n          this._updateCheckboxesClass();\n        },\n        _updateCheckboxesClass: function () {\n          var tableElements = this.getTableElements();\n          var selectionController = this.getController(\"selection\");\n          var isCheckBoxesHidden = selectionController.isSelectColumnVisible() && !selectionController.isSelectionWithCheckboxes();\n          each(tableElements, function (_, tableElement) {\n            $(tableElement).toggleClass(CHECKBOXES_HIDDEN_CLASS, isCheckBoxesHidden);\n          });\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.selection.js"],"names":["$","eventsEngine","gridCore","gridCoreUtils","isDefined","each","extend","touch","name","clickEventName","messageLocalization","addNamespace","isCommandKeyPressed","holdEvent","Selection","Deferred","errors","EDITOR_CELL_CLASS","ROW_CLASS","ROW_SELECTION_CLASS","SELECT_CHECKBOX_CLASS","CHECKBOXES_HIDDEN_CLASS","COMMAND_SELECT_CLASS","SELECTION_DISABLED_CLASS","DATA_ROW_CLASS","SHOW_CHECKBOXES_MODE","SELECTION_MODE","processLongTap","that","dxEvent","selectionController","getController","rowsView","getView","$row","target","closest","rowIndex","getRowIndex","option","isSelectionWithCheckboxes","stopSelectionWithCheckboxes","startSelectionWithCheckboxes","changeItemSelection","control","SelectionController","Controller","inherit","selectionCellTemplate","container","options","component","value","isRowSelected","row","key","renderSelectCheckBoxContainer","selectionHeaderTemplate","column","$cellElement","columnHeadersView","addClass","_renderSelectAllCheckBox","_attachSelectAllCheckBoxClickEvent","init","deferred","selectAllMode","mode","log","_dataController","_selectionMode","_isSelectionWithCheckboxes","_selection","_createSelection","_updateSelectColumn","createAction","excludeValidators","pushed","add","_handleDataPushed","bind","changes","removedKeys","filter","change","type","map","length","deselectRows","_getSelectionConfig","dataController","columnsController","selectionOptions","scrollingMode","virtualPaging","allowSelectAll","legacyScrollingMode","selectedKeys","maxFilterLengthInRequest","selectionFilter","ignoreDisabledItems","allowLoadByRange","hasGroupColumns","getGroupColumns","keyOf","item","dataFields","_dataController$dataS","dataSource","select","load","_dataController$dataS2","resolve","plainItems","items","isItemSelected","selected","isSelectableItem","rowType","isNewRow","getItemData","oldData","data","getCombinedFilter","totalCount","getLoadOptions","loadItemIndex","focusedItemIndex","shiftItemIndex","_dataController$dataS3","_dataController$dataS4","sort","lastLoadOptions","minIndex","Math","min","maxIndex","max","take","skip","onSelectionChanged","_updateSelectedItems","isSelectColumnVisible","addCommandColumn","command","visible","visibleIndex","dataType","alignment","cssClass","width","cellTemplate","headerCellTemplate","columnOption","_fireSelectionChanged","argument","selectedRowKeys","selectionChanged","fire","executeAction","_updateCheckboxesState","isDeferredMode","selectedItemKeys","removedItemKeys","keyIndex","store","isComplexKey","Array","isArray","i","args","selectionChangedOptions","visibleItems","changedItemIndexes","getChangedItemIndexes","visibleChangedItemIndexes","updateItems","changeType","itemIndexes","addedItemKeys","_selectedItemsInternalChange","slice","selectedRowsData","selectedItems","currentSelectedRowKeys","currentDeselectedRowKeys","isDeferredSelection","isDataItem","isSelected","push","callbackNames","optionChanged","callBase","oldSelectionMode","fullName","selectionMode","selectRows","always","updateColumns","handled","getDataSource","publicMethods","arg","_isOnePageSelectAll","isSelectAll","getSelectAllState","selectAll","deselectAll","clearSelection","refresh","promise","preserve","isDeselect","getSelectedRowKeys","getSelectedItemKeys","keys","selectRowsByIndexes","indexes","prototype","call","arguments","getSelectedRowsData","getSelectedItems","visibleItemIndex","setFocusOnly","loadedItemIndex","getRowIndexOffset","itemIndex","_focusedItemIndex","selectionModule","defaultOptions","selection","showCheckBoxesMode","controllers","extenders","apply","_loadDataSource","done","_processDataItem","hasSelectColumn","dataItem","values","visibleColumns","d","fail","reject","_handleDataChanged","e","_repaintChangesOnly","_applyChange","forEach","index","currentItem","_items","_endUpdateCore","_changes","isUpdateSelection","every","reduce","a","b","concat","contextMenu","_contextMenuPrepared","event","originalEvent","views","_updateSelectAllValue","$element","element","$editor","find","selectAllValue","hasSelection","isVisible","isEmpty","dxCheckBox","repaintChangesOnly","$container","isEmptyData","groupElement","appendTo","setAria","format","createEditor","parentType","editorOptions","tabIndex","setValue","preventDefault","on","trigger","currentTarget","children","_attachCheckBoxClickEvent","_renderSelectCheckBox","setEmptyText","lookup","_e$event","shift","shiftKey","_update","tableElements","getTableElements","_","tableElement","_getRowElements","eq","toggleClass","_updateCheckboxesClass","_createTable","$table","stopPropagation","_createRow","_rowClick","isSelectionDisabled","isClickableElement","$target","isCommandSelect","_renderCore","isCheckBoxesHidden"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.selection.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport gridCore from \"../data_grid/ui.data_grid.core\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    touch\r\n} from \"../../core/utils/support\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../events/click\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport {\r\n    addNamespace,\r\n    isCommandKeyPressed\r\n} from \"../../events/utils/index\";\r\nimport holdEvent from \"../../events/hold\";\r\nimport Selection from \"../selection/selection\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport errors from \"../widget/ui.errors\";\r\nvar EDITOR_CELL_CLASS = \"dx-editor-cell\";\r\nvar ROW_CLASS = \"dx-row\";\r\nvar ROW_SELECTION_CLASS = \"dx-selection\";\r\nvar SELECT_CHECKBOX_CLASS = \"dx-select-checkbox\";\r\nvar CHECKBOXES_HIDDEN_CLASS = \"dx-select-checkboxes-hidden\";\r\nvar COMMAND_SELECT_CLASS = \"dx-command-select\";\r\nvar SELECTION_DISABLED_CLASS = \"dx-selection-disabled\";\r\nvar DATA_ROW_CLASS = \"dx-data-row\";\r\nvar SHOW_CHECKBOXES_MODE = \"selection.showCheckBoxesMode\";\r\nvar SELECTION_MODE = \"selection.mode\";\r\nvar processLongTap = function(that, dxEvent) {\r\n    var selectionController = that.getController(\"selection\");\r\n    var rowsView = that.getView(\"rowsView\");\r\n    var $row = $(dxEvent.target).closest(\".\" + DATA_ROW_CLASS);\r\n    var rowIndex = rowsView.getRowIndex($row);\r\n    if (rowIndex < 0) {\r\n        return\r\n    }\r\n    if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE)) {\r\n        if (selectionController.isSelectionWithCheckboxes()) {\r\n            selectionController.stopSelectionWithCheckboxes()\r\n        } else {\r\n            selectionController.startSelectionWithCheckboxes()\r\n        }\r\n    } else {\r\n        if (\"onClick\" === that.option(SHOW_CHECKBOXES_MODE)) {\r\n            selectionController.startSelectionWithCheckboxes()\r\n        }\r\n        if (\"always\" !== that.option(SHOW_CHECKBOXES_MODE)) {\r\n            selectionController.changeItemSelection(rowIndex, {\r\n                control: true\r\n            })\r\n        }\r\n    }\r\n};\r\nvar SelectionController = gridCore.Controller.inherit(function() {\r\n    var selectionCellTemplate = (container, options) => {\r\n        var component = options.component;\r\n        var rowsView = component.getView(\"rowsView\");\r\n        if (component.option(\"renderAsync\") && !component.option(\"selection.deferred\")) {\r\n            options.value = component.isRowSelected(options.row.key)\r\n        }\r\n        rowsView.renderSelectCheckBoxContainer($(container), options)\r\n    };\r\n    var selectionHeaderTemplate = (container, options) => {\r\n        var column = options.column;\r\n        var $cellElement = $(container);\r\n        var columnHeadersView = options.component.getView(\"columnHeadersView\");\r\n        $cellElement.addClass(EDITOR_CELL_CLASS);\r\n        columnHeadersView._renderSelectAllCheckBox($cellElement, column);\r\n        columnHeadersView._attachSelectAllCheckBoxClickEvent($cellElement)\r\n    };\r\n    return {\r\n        init: function() {\r\n            var {\r\n                deferred: deferred,\r\n                selectAllMode: selectAllMode,\r\n                mode: mode\r\n            } = this.option(\"selection\") || {};\r\n            if (\"infinite\" === this.option(\"scrolling.mode\") && !deferred && \"multiple\" === mode && \"allPages\" === selectAllMode) {\r\n                errors.log(\"W1018\")\r\n            }\r\n            this._dataController = this.getController(\"data\");\r\n            this._selectionMode = mode;\r\n            this._isSelectionWithCheckboxes = false;\r\n            this._selection = this._createSelection();\r\n            this._updateSelectColumn();\r\n            this.createAction(\"onSelectionChanged\", {\r\n                excludeValidators: [\"disabled\", \"readOnly\"]\r\n            });\r\n            this._dataController && this._dataController.pushed.add(this._handleDataPushed.bind(this))\r\n        },\r\n        _handleDataPushed: function(changes) {\r\n            var removedKeys = changes.filter(change => \"remove\" === change.type).map(change => change.key);\r\n            removedKeys.length && this.deselectRows(removedKeys)\r\n        },\r\n        _getSelectionConfig: function() {\r\n            var dataController = this._dataController;\r\n            var columnsController = this.getController(\"columns\");\r\n            var selectionOptions = this.option(\"selection\") || {};\r\n            var deferred = selectionOptions.deferred;\r\n            var scrollingMode = this.option(\"scrolling.mode\");\r\n            var virtualPaging = \"virtual\" === scrollingMode || \"infinite\" === scrollingMode;\r\n            var allowSelectAll = this.option(\"selection.allowSelectAll\");\r\n            var legacyScrollingMode = this.option(\"scrolling.legacyMode\");\r\n            return {\r\n                selectedKeys: this.option(\"selectedRowKeys\"),\r\n                mode: this._selectionMode,\r\n                deferred: deferred,\r\n                maxFilterLengthInRequest: selectionOptions.maxFilterLengthInRequest,\r\n                selectionFilter: this.option(\"selectionFilter\"),\r\n                ignoreDisabledItems: true,\r\n                allowLoadByRange: function() {\r\n                    var hasGroupColumns = columnsController.getGroupColumns().length > 0;\r\n                    return virtualPaging && !legacyScrollingMode && !hasGroupColumns && allowSelectAll && !deferred\r\n                },\r\n                key: function() {\r\n                    return null === dataController || void 0 === dataController ? void 0 : dataController.key()\r\n                },\r\n                keyOf: function(item) {\r\n                    return null === dataController || void 0 === dataController ? void 0 : dataController.keyOf(item)\r\n                },\r\n                dataFields: function() {\r\n                    var _dataController$dataS;\r\n                    return null === (_dataController$dataS = dataController.dataSource()) || void 0 === _dataController$dataS ? void 0 : _dataController$dataS.select()\r\n                },\r\n                load: function(options) {\r\n                    var _dataController$dataS2;\r\n                    return (null === (_dataController$dataS2 = dataController.dataSource()) || void 0 === _dataController$dataS2 ? void 0 : _dataController$dataS2.load(options)) || (new Deferred).resolve([])\r\n                },\r\n                plainItems: function() {\r\n                    return dataController.items(true)\r\n                },\r\n                isItemSelected: function(item) {\r\n                    return item.selected\r\n                },\r\n                isSelectableItem: function(item) {\r\n                    return \"data\" === (null === item || void 0 === item ? void 0 : item.rowType) && !item.isNewRow\r\n                },\r\n                getItemData: function(item) {\r\n                    return (null === item || void 0 === item ? void 0 : item.oldData) || (null === item || void 0 === item ? void 0 : item.data) || item\r\n                },\r\n                filter: function() {\r\n                    return dataController.getCombinedFilter(deferred)\r\n                },\r\n                totalCount: () => dataController.totalCount(),\r\n                getLoadOptions: function(loadItemIndex, focusedItemIndex, shiftItemIndex) {\r\n                    var _dataController$dataS3, _dataController$dataS4;\r\n                    var {\r\n                        sort: sort,\r\n                        filter: filter\r\n                    } = null !== (_dataController$dataS3 = null === (_dataController$dataS4 = dataController.dataSource()) || void 0 === _dataController$dataS4 ? void 0 : _dataController$dataS4.lastLoadOptions()) && void 0 !== _dataController$dataS3 ? _dataController$dataS3 : {};\r\n                    var minIndex = Math.min(loadItemIndex, focusedItemIndex);\r\n                    var maxIndex = Math.max(loadItemIndex, focusedItemIndex);\r\n                    if (isDefined(shiftItemIndex)) {\r\n                        minIndex = Math.min(shiftItemIndex, minIndex);\r\n                        maxIndex = Math.max(shiftItemIndex, maxIndex)\r\n                    }\r\n                    var take = maxIndex - minIndex + 1;\r\n                    return {\r\n                        skip: minIndex,\r\n                        take: take,\r\n                        filter: filter,\r\n                        sort: sort\r\n                    }\r\n                },\r\n                onSelectionChanged: this._updateSelectedItems.bind(this)\r\n            }\r\n        },\r\n        _updateSelectColumn: function() {\r\n            var columnsController = this.getController(\"columns\");\r\n            var isSelectColumnVisible = this.isSelectColumnVisible();\r\n            columnsController.addCommandColumn({\r\n                type: \"selection\",\r\n                command: \"select\",\r\n                visible: isSelectColumnVisible,\r\n                visibleIndex: -1,\r\n                dataType: \"boolean\",\r\n                alignment: \"center\",\r\n                cssClass: COMMAND_SELECT_CLASS,\r\n                width: \"auto\",\r\n                cellTemplate: selectionCellTemplate,\r\n                headerCellTemplate: selectionHeaderTemplate\r\n            });\r\n            columnsController.columnOption(\"command:select\", \"visible\", isSelectColumnVisible)\r\n        },\r\n        _createSelection: function() {\r\n            var options = this._getSelectionConfig();\r\n            return new Selection(options)\r\n        },\r\n        _fireSelectionChanged: function(options) {\r\n            var argument = this.option(\"selection.deferred\") ? {\r\n                selectionFilter: this.option(\"selectionFilter\")\r\n            } : {\r\n                selectedRowKeys: this.option(\"selectedRowKeys\")\r\n            };\r\n            this.selectionChanged.fire(argument);\r\n            if (options) {\r\n                this.executeAction(\"onSelectionChanged\", options)\r\n            }\r\n        },\r\n        _updateCheckboxesState: function(options) {\r\n            var isDeferredMode = options.isDeferredMode;\r\n            var selectionFilter = options.selectionFilter;\r\n            var selectedItemKeys = options.selectedItemKeys;\r\n            var removedItemKeys = options.removedItemKeys;\r\n            if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\r\n                if (isDeferredMode ? selectionFilter && function(that, selectionFilter) {\r\n                        var keyIndex = 0;\r\n                        var store = that._dataController.store();\r\n                        var key = store && store.key();\r\n                        var isComplexKey = Array.isArray(key);\r\n                        if (!selectionFilter.length) {\r\n                            return false\r\n                        }\r\n                        if (isComplexKey && Array.isArray(selectionFilter[0]) && \"and\" === selectionFilter[1]) {\r\n                            for (var i = 0; i < selectionFilter.length; i++) {\r\n                                if (Array.isArray(selectionFilter[i])) {\r\n                                    if (selectionFilter[i][0] !== key[keyIndex] || \"=\" !== selectionFilter[i][1]) {\r\n                                        return true\r\n                                    }\r\n                                    keyIndex++\r\n                                }\r\n                            }\r\n                            return false\r\n                        }\r\n                        return key !== selectionFilter[0]\r\n                    }(this, selectionFilter) : selectedItemKeys.length > 1) {\r\n                    this.startSelectionWithCheckboxes()\r\n                } else if (isDeferredMode ? selectionFilter && !selectionFilter.length : 0 === selectedItemKeys.length && removedItemKeys.length) {\r\n                    this.stopSelectionWithCheckboxes()\r\n                }\r\n            }\r\n        },\r\n        _updateSelectedItems: function(args) {\r\n            var selectionChangedOptions;\r\n            var isDeferredMode = this.option(\"selection.deferred\");\r\n            var selectionFilter = this._selection.selectionFilter();\r\n            var dataController = this._dataController;\r\n            var items = dataController.items(true);\r\n            var visibleItems = dataController.items();\r\n            if (!items) {\r\n                return\r\n            }\r\n            var isSelectionWithCheckboxes = this.isSelectionWithCheckboxes();\r\n            var changedItemIndexes = this.getChangedItemIndexes(items);\r\n            var visibleChangedItemIndexes = this.getChangedItemIndexes(visibleItems);\r\n            this._updateCheckboxesState({\r\n                selectedItemKeys: args.selectedItemKeys,\r\n                removedItemKeys: args.removedItemKeys,\r\n                selectionFilter: selectionFilter,\r\n                isDeferredMode: isDeferredMode\r\n            });\r\n            if (changedItemIndexes.length || isSelectionWithCheckboxes !== this.isSelectionWithCheckboxes()) {\r\n                dataController.updateItems({\r\n                    changeType: \"updateSelection\",\r\n                    itemIndexes: visibleChangedItemIndexes\r\n                })\r\n            }\r\n            if (isDeferredMode) {\r\n                this.option(\"selectionFilter\", selectionFilter);\r\n                selectionChangedOptions = {}\r\n            } else if (args.addedItemKeys.length || args.removedItemKeys.length) {\r\n                this._selectedItemsInternalChange = true;\r\n                this.option(\"selectedRowKeys\", args.selectedItemKeys.slice(0));\r\n                this._selectedItemsInternalChange = false;\r\n                selectionChangedOptions = {\r\n                    selectedRowsData: args.selectedItems.slice(0),\r\n                    selectedRowKeys: args.selectedItemKeys.slice(0),\r\n                    currentSelectedRowKeys: args.addedItemKeys.slice(0),\r\n                    currentDeselectedRowKeys: args.removedItemKeys.slice(0)\r\n                }\r\n            }\r\n            this._fireSelectionChanged(selectionChangedOptions)\r\n        },\r\n        getChangedItemIndexes: function(items) {\r\n            var itemIndexes = [];\r\n            var isDeferredSelection = this.option(\"selection.deferred\");\r\n            for (var i = 0, length = items.length; i < length; i++) {\r\n                var row = items[i];\r\n                var isItemSelected = this.isRowSelected(isDeferredSelection ? row.data : row.key);\r\n                if (this._selection.isDataItem(row) && row.isSelected !== isItemSelected) {\r\n                    itemIndexes.push(i)\r\n                }\r\n            }\r\n            return itemIndexes\r\n        },\r\n        callbackNames: function() {\r\n            return [\"selectionChanged\"]\r\n        },\r\n        optionChanged: function(args) {\r\n            this.callBase(args);\r\n            switch (args.name) {\r\n                case \"selection\":\r\n                    var oldSelectionMode = this._selectionMode;\r\n                    this.init();\r\n                    if (\"selection.showCheckBoxesMode\" !== args.fullName) {\r\n                        var selectionMode = this._selectionMode;\r\n                        var selectedRowKeys = this.option(\"selectedRowKeys\");\r\n                        if (oldSelectionMode !== selectionMode) {\r\n                            if (\"single\" === selectionMode) {\r\n                                if (selectedRowKeys.length > 1) {\r\n                                    selectedRowKeys = [selectedRowKeys[0]]\r\n                                }\r\n                            } else if (\"multiple\" !== selectionMode) {\r\n                                selectedRowKeys = []\r\n                            }\r\n                        }\r\n                        this.selectRows(selectedRowKeys).always(() => {\r\n                            this._fireSelectionChanged()\r\n                        })\r\n                    }\r\n                    this.getController(\"columns\").updateColumns();\r\n                    args.handled = true;\r\n                    break;\r\n                case \"selectionFilter\":\r\n                    this._selection.selectionFilter(args.value);\r\n                    args.handled = true;\r\n                    break;\r\n                case \"selectedRowKeys\":\r\n                    var value = args.value || [];\r\n                    if (Array.isArray(value) && !this._selectedItemsInternalChange && (this.component.getDataSource() || !value.length)) {\r\n                        this.selectRows(value)\r\n                    }\r\n                    args.handled = true\r\n            }\r\n        },\r\n        publicMethods: function() {\r\n            return [\"selectRows\", \"deselectRows\", \"selectRowsByIndexes\", \"getSelectedRowKeys\", \"getSelectedRowsData\", \"clearSelection\", \"selectAll\", \"deselectAll\", \"startSelectionWithCheckboxes\", \"stopSelectionWithCheckboxes\", \"isRowSelected\"]\r\n        },\r\n        isRowSelected: function(arg) {\r\n            return this._selection.isItemSelected(arg)\r\n        },\r\n        isSelectColumnVisible: function() {\r\n            return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || \"onClick\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes)\r\n        },\r\n        _isOnePageSelectAll: function() {\r\n            return \"page\" === this.option(\"selection.selectAllMode\")\r\n        },\r\n        isSelectAll: function() {\r\n            return this._selection.getSelectAllState(this._isOnePageSelectAll())\r\n        },\r\n        selectAll: function() {\r\n            if (\"onClick\" === this.option(SHOW_CHECKBOXES_MODE)) {\r\n                this.startSelectionWithCheckboxes()\r\n            }\r\n            return this._selection.selectAll(this._isOnePageSelectAll())\r\n        },\r\n        deselectAll: function() {\r\n            return this._selection.deselectAll(this._isOnePageSelectAll())\r\n        },\r\n        clearSelection: function() {\r\n            return this.selectedItemKeys([])\r\n        },\r\n        refresh: function() {\r\n            var selectedRowKeys = this.option(\"selectedRowKeys\") || [];\r\n            if (!this.option(\"selection.deferred\") && selectedRowKeys.length) {\r\n                return this.selectedItemKeys(selectedRowKeys)\r\n            }\r\n            return (new Deferred).resolve().promise()\r\n        },\r\n        selectedItemKeys: function(value, preserve, isDeselect, isSelectAll) {\r\n            return this._selection.selectedItemKeys(value, preserve, isDeselect, isSelectAll)\r\n        },\r\n        getSelectedRowKeys: function() {\r\n            return this._selection.getSelectedItemKeys()\r\n        },\r\n        selectRows: function(keys, preserve) {\r\n            return this.selectedItemKeys(keys, preserve)\r\n        },\r\n        deselectRows: function(keys) {\r\n            return this.selectedItemKeys(keys, true, true)\r\n        },\r\n        selectRowsByIndexes: function(indexes) {\r\n            var items = this._dataController.items();\r\n            var keys = [];\r\n            if (!Array.isArray(indexes)) {\r\n                indexes = Array.prototype.slice.call(arguments, 0)\r\n            }\r\n            each(indexes, (function() {\r\n                var item = items[this];\r\n                if (item && \"data\" === item.rowType) {\r\n                    keys.push(item.key)\r\n                }\r\n            }));\r\n            return this.selectRows(keys)\r\n        },\r\n        getSelectedRowsData: function() {\r\n            return this._selection.getSelectedItems()\r\n        },\r\n        changeItemSelection: function(visibleItemIndex, keys, setFocusOnly) {\r\n            keys = keys || {};\r\n            if (this.isSelectionWithCheckboxes()) {\r\n                keys.control = true\r\n            }\r\n            var loadedItemIndex = visibleItemIndex + this._dataController.getRowIndexOffset() - this._dataController.getRowIndexOffset(true);\r\n            return this._selection.changeItemSelection(loadedItemIndex, keys, setFocusOnly)\r\n        },\r\n        focusedItemIndex: function(itemIndex) {\r\n            if (isDefined(itemIndex)) {\r\n                this._selection._focusedItemIndex = itemIndex\r\n            } else {\r\n                return this._selection._focusedItemIndex\r\n            }\r\n        },\r\n        isSelectionWithCheckboxes: function() {\r\n            return \"multiple\" === this.option(SELECTION_MODE) && (\"always\" === this.option(SHOW_CHECKBOXES_MODE) || this._isSelectionWithCheckboxes)\r\n        },\r\n        startSelectionWithCheckboxes: function() {\r\n            if (\"multiple\" === this.option(SELECTION_MODE) && !this.isSelectionWithCheckboxes()) {\r\n                this._isSelectionWithCheckboxes = true;\r\n                this._updateSelectColumn();\r\n                return true\r\n            }\r\n            return false\r\n        },\r\n        stopSelectionWithCheckboxes: function() {\r\n            if (this._isSelectionWithCheckboxes) {\r\n                this._isSelectionWithCheckboxes = false;\r\n                this._updateSelectColumn();\r\n                return true\r\n            }\r\n            return false\r\n        }\r\n    }\r\n}());\r\nexport var selectionModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            selection: {\r\n                mode: \"none\",\r\n                showCheckBoxesMode: \"onClick\",\r\n                allowSelectAll: true,\r\n                selectAllMode: \"allPages\",\r\n                maxFilterLengthInRequest: 1500,\r\n                deferred: false\r\n            },\r\n            selectionFilter: [],\r\n            selectedRowKeys: []\r\n        }\r\n    },\r\n    controllers: {\r\n        selection: SelectionController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            data: {\r\n                init: function() {\r\n                    var selectionController = this.getController(\"selection\");\r\n                    var isDeferredMode = this.option(\"selection.deferred\");\r\n                    this.callBase.apply(this, arguments);\r\n                    if (isDeferredMode) {\r\n                        selectionController._updateCheckboxesState({\r\n                            isDeferredMode: true,\r\n                            selectionFilter: this.option(\"selectionFilter\")\r\n                        })\r\n                    }\r\n                },\r\n                _loadDataSource: function() {\r\n                    var that = this;\r\n                    return that.callBase().done((function() {\r\n                        that.getController(\"selection\").refresh()\r\n                    }))\r\n                },\r\n                _processDataItem: function(item, options) {\r\n                    var that = this;\r\n                    var selectionController = that.getController(\"selection\");\r\n                    var hasSelectColumn = selectionController.isSelectColumnVisible();\r\n                    var isDeferredSelection = options.isDeferredSelection = void 0 === options.isDeferredSelection ? this.option(\"selection.deferred\") : options.isDeferredSelection;\r\n                    var dataItem = this.callBase.apply(this, arguments);\r\n                    dataItem.isSelected = selectionController.isRowSelected(isDeferredSelection ? dataItem.data : dataItem.key);\r\n                    if (hasSelectColumn && dataItem.values) {\r\n                        for (var i = 0; i < options.visibleColumns.length; i++) {\r\n                            if (\"select\" === options.visibleColumns[i].command) {\r\n                                dataItem.values[i] = dataItem.isSelected;\r\n                                break\r\n                            }\r\n                        }\r\n                    }\r\n                    return dataItem\r\n                },\r\n                refresh: function(options) {\r\n                    var that = this;\r\n                    var d = new Deferred;\r\n                    this.callBase.apply(this, arguments).done((function() {\r\n                        if (!options || options.selection) {\r\n                            that.getController(\"selection\").refresh().done(d.resolve).fail(d.reject)\r\n                        } else {\r\n                            d.resolve()\r\n                        }\r\n                    })).fail(d.reject);\r\n                    return d.promise()\r\n                },\r\n                _handleDataChanged: function(e) {\r\n                    this.callBase.apply(this, arguments);\r\n                    if ((!e || \"refresh\" === e.changeType) && !this._repaintChangesOnly) {\r\n                        this.getController(\"selection\").focusedItemIndex(-1)\r\n                    }\r\n                },\r\n                _applyChange: function(change) {\r\n                    if (change && \"updateSelection\" === change.changeType) {\r\n                        change.items.forEach((item, index) => {\r\n                            var currentItem = this._items[index];\r\n                            if (currentItem) {\r\n                                currentItem.isSelected = item.isSelected;\r\n                                currentItem.values = item.values\r\n                            }\r\n                        });\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _endUpdateCore: function() {\r\n                    var changes = this._changes;\r\n                    var isUpdateSelection = changes.length > 1 && changes.every(change => \"updateSelection\" === change.changeType);\r\n                    if (isUpdateSelection) {\r\n                        var itemIndexes = changes.map(change => change.itemIndexes || []).reduce((a, b) => a.concat(b));\r\n                        this._changes = [{\r\n                            changeType: \"updateSelection\",\r\n                            itemIndexes: itemIndexes\r\n                        }]\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                }\r\n            },\r\n            contextMenu: {\r\n                _contextMenuPrepared: function(options) {\r\n                    var dxEvent = options.event;\r\n                    if (dxEvent.originalEvent && \"dxhold\" !== dxEvent.originalEvent.type || options.items && options.items.length > 0) {\r\n                        return\r\n                    }\r\n                    processLongTap(this, dxEvent)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            columnHeadersView: {\r\n                init: function() {\r\n                    this.callBase();\r\n                    this.getController(\"selection\").selectionChanged.add(this._updateSelectAllValue.bind(this))\r\n                },\r\n                _updateSelectAllValue: function() {\r\n                    var $element = this.element();\r\n                    var $editor = $element && $element.find(\".\" + SELECT_CHECKBOX_CLASS);\r\n                    if ($element && $editor.length && \"multiple\" === this.option(\"selection.mode\")) {\r\n                        var selectAllValue = this.getController(\"selection\").isSelectAll();\r\n                        var hasSelection = false !== selectAllValue;\r\n                        var isVisible = this.option(\"selection.allowSelectAll\") ? !this.getController(\"data\").isEmpty() : hasSelection;\r\n                        $editor.dxCheckBox(\"instance\").option({\r\n                            visible: isVisible,\r\n                            value: selectAllValue\r\n                        })\r\n                    }\r\n                },\r\n                _handleDataChanged: function(e) {\r\n                    this.callBase(e);\r\n                    if (!e || \"refresh\" === e.changeType || e.repaintChangesOnly && \"update\" === e.changeType) {\r\n                        this._updateSelectAllValue()\r\n                    }\r\n                },\r\n                _renderSelectAllCheckBox: function($container, column) {\r\n                    var that = this;\r\n                    var selectionController = that.getController(\"selection\");\r\n                    var isEmptyData = that.getController(\"data\").isEmpty();\r\n                    var groupElement = $(\"<div>\").appendTo($container).addClass(SELECT_CHECKBOX_CLASS);\r\n                    that.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectAll\"), groupElement);\r\n                    that.getController(\"editorFactory\").createEditor(groupElement, extend({}, column, {\r\n                        parentType: \"headerRow\",\r\n                        dataType: \"boolean\",\r\n                        value: selectionController.isSelectAll(),\r\n                        editorOptions: {\r\n                            visible: !isEmptyData && (that.option(\"selection.allowSelectAll\") || false !== selectionController.isSelectAll())\r\n                        },\r\n                        tabIndex: that.option(\"useLegacyKeyboardNavigation\") ? -1 : that.option(\"tabIndex\") || 0,\r\n                        setValue: function(value, e) {\r\n                            var allowSelectAll = that.option(\"selection.allowSelectAll\");\r\n                            e.component.option(\"visible\", allowSelectAll || false !== e.component.option(\"value\"));\r\n                            if (!e.event || selectionController.isSelectAll() === value) {\r\n                                return\r\n                            }\r\n                            if (e.value && !allowSelectAll) {\r\n                                e.component.option(\"value\", false)\r\n                            } else {\r\n                                e.value ? selectionController.selectAll() : selectionController.deselectAll()\r\n                            }\r\n                            e.event.preventDefault()\r\n                        }\r\n                    }));\r\n                    return groupElement\r\n                },\r\n                _attachSelectAllCheckBoxClickEvent: function($element) {\r\n                    eventsEngine.on($element, clickEventName, this.createAction((function(e) {\r\n                        var event = e.event;\r\n                        if (!$(event.target).closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\r\n                            eventsEngine.trigger($(event.currentTarget).children(\".\" + SELECT_CHECKBOX_CLASS), clickEventName)\r\n                        }\r\n                        event.preventDefault()\r\n                    })))\r\n                }\r\n            },\r\n            rowsView: {\r\n                renderSelectCheckBoxContainer: function($container, options) {\r\n                    if (\"data\" === options.rowType && !options.row.isNewRow) {\r\n                        $container.addClass(EDITOR_CELL_CLASS);\r\n                        this._attachCheckBoxClickEvent($container);\r\n                        this._renderSelectCheckBox($container, options)\r\n                    } else {\r\n                        gridCoreUtils.setEmptyText($container)\r\n                    }\r\n                },\r\n                _renderSelectCheckBox: function(container, options) {\r\n                    var groupElement = $(\"<div>\").addClass(SELECT_CHECKBOX_CLASS).appendTo(container);\r\n                    this.setAria(\"label\", messageLocalization.format(\"dxDataGrid-ariaSelectRow\"), groupElement);\r\n                    this.getController(\"editorFactory\").createEditor(groupElement, extend({}, options.column, {\r\n                        parentType: \"dataRow\",\r\n                        dataType: \"boolean\",\r\n                        lookup: null,\r\n                        value: options.value,\r\n                        setValue: function(value, e) {\r\n                            var _e$event;\r\n                            if (\"keydown\" === (null === e || void 0 === e ? void 0 : null === (_e$event = e.event) || void 0 === _e$event ? void 0 : _e$event.type)) {\r\n                                eventsEngine.trigger(e.element, clickEventName, e)\r\n                            }\r\n                        },\r\n                        row: options.row\r\n                    }));\r\n                    return groupElement\r\n                },\r\n                _attachCheckBoxClickEvent: function($element) {\r\n                    eventsEngine.on($element, clickEventName, this.createAction((function(e) {\r\n                        var selectionController = this.getController(\"selection\");\r\n                        var event = e.event;\r\n                        var rowIndex = this.getRowIndex($(event.currentTarget).closest(\".\" + ROW_CLASS));\r\n                        if (rowIndex >= 0) {\r\n                            selectionController.startSelectionWithCheckboxes();\r\n                            selectionController.changeItemSelection(rowIndex, {\r\n                                shift: event.shiftKey\r\n                            });\r\n                            if ($(event.target).closest(\".\" + SELECT_CHECKBOX_CLASS).length) {\r\n                                this.getController(\"data\").updateItems({\r\n                                    changeType: \"updateSelection\",\r\n                                    itemIndexes: [rowIndex]\r\n                                })\r\n                            }\r\n                        }\r\n                    })))\r\n                },\r\n                _update: function(change) {\r\n                    var that = this;\r\n                    var tableElements = that.getTableElements();\r\n                    if (\"updateSelection\" === change.changeType) {\r\n                        if (tableElements.length > 0) {\r\n                            each(tableElements, (function(_, tableElement) {\r\n                                each(change.itemIndexes || [], (function(_, index) {\r\n                                    var $row;\r\n                                    if (change.items[index]) {\r\n                                        $row = that._getRowElements($(tableElement)).eq(index);\r\n                                        if ($row.length) {\r\n                                            var isSelected = change.items[index].isSelected;\r\n                                            $row.toggleClass(ROW_SELECTION_CLASS, void 0 === isSelected ? false : isSelected).find(\".\" + SELECT_CHECKBOX_CLASS).dxCheckBox(\"option\", \"value\", isSelected);\r\n                                            that.setAria(\"selected\", isSelected, $row)\r\n                                        }\r\n                                    }\r\n                                }))\r\n                            }));\r\n                            that._updateCheckboxesClass()\r\n                        }\r\n                    } else {\r\n                        that.callBase(change)\r\n                    }\r\n                },\r\n                _createTable: function() {\r\n                    var that = this;\r\n                    var selectionMode = that.option(\"selection.mode\");\r\n                    var $table = that.callBase.apply(that, arguments);\r\n                    if (\"none\" !== selectionMode) {\r\n                        if (\"onLongTap\" === that.option(SHOW_CHECKBOXES_MODE) || !touch) {\r\n                            eventsEngine.on($table, addNamespace(holdEvent.name, \"dxDataGridRowsView\"), \".\" + DATA_ROW_CLASS, that.createAction((function(e) {\r\n                                processLongTap(that.component, e.event);\r\n                                e.event.stopPropagation()\r\n                            })))\r\n                        }\r\n                        eventsEngine.on($table, \"mousedown selectstart\", that.createAction((function(e) {\r\n                            var event = e.event;\r\n                            if (event.shiftKey) {\r\n                                event.preventDefault()\r\n                            }\r\n                        })))\r\n                    }\r\n                    return $table\r\n                },\r\n                _createRow: function(row) {\r\n                    var $row = this.callBase.apply(this, arguments);\r\n                    if (row) {\r\n                        var isSelected = row.isSelected;\r\n                        if (isSelected) {\r\n                            $row.addClass(ROW_SELECTION_CLASS)\r\n                        }\r\n                        var selectionMode = this.option(SELECTION_MODE);\r\n                        if (\"none\" !== selectionMode) {\r\n                            this.setAria(\"selected\", isSelected, $row)\r\n                        }\r\n                    }\r\n                    return $row\r\n                },\r\n                _rowClick: function(e) {\r\n                    var dxEvent = e.event;\r\n                    var isSelectionDisabled = $(dxEvent.target).closest(\".\" + SELECTION_DISABLED_CLASS).length;\r\n                    if (!this.isClickableElement($(dxEvent.target))) {\r\n                        if (!isSelectionDisabled && (\"multiple\" !== this.option(SELECTION_MODE) || \"always\" !== this.option(SHOW_CHECKBOXES_MODE))) {\r\n                            if (this.getController(\"selection\").changeItemSelection(e.rowIndex, {\r\n                                    control: isCommandKeyPressed(dxEvent),\r\n                                    shift: dxEvent.shiftKey\r\n                                })) {\r\n                                dxEvent.preventDefault();\r\n                                e.handled = true\r\n                            }\r\n                        }\r\n                        this.callBase(e)\r\n                    }\r\n                },\r\n                isClickableElement: function($target) {\r\n                    var isCommandSelect = $target.closest(\".\" + COMMAND_SELECT_CLASS).length;\r\n                    return !!isCommandSelect\r\n                },\r\n                _renderCore: function(change) {\r\n                    this.callBase(change);\r\n                    this._updateCheckboxesClass()\r\n                },\r\n                _updateCheckboxesClass: function() {\r\n                    var tableElements = this.getTableElements();\r\n                    var selectionController = this.getController(\"selection\");\r\n                    var isCheckBoxesHidden = selectionController.isSelectColumnVisible() && !selectionController.isSelectionWithCheckboxes();\r\n                    each(tableElements, (function(_, tableElement) {\r\n                        $(tableElement).toggleClass(CHECKBOXES_HIDDEN_CLASS, isCheckBoxesHidden)\r\n                    }))\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}