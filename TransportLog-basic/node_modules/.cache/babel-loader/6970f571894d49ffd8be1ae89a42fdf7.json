{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments/resizing/utils.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nvar normalizeDate = (options, date, sourceDate, isStartDate) => {\n  if (!options.considerTime) {\n    return date;\n  }\n\n  var result = new Date(date);\n  result.setHours(sourceDate.getHours(), sourceDate.getMinutes(), sourceDate.getSeconds());\n  var {\n    startDayHour: startDayHour,\n    endDayHour: endDayHour,\n    appointmentSettings: {\n      allDay: allDay\n    }\n  } = options;\n  var minDate = new Date(date);\n  var maxDate = new Date(date);\n  minDate.setHours(startDayHour, 0, 0, 0);\n  maxDate.setHours(endDayHour, 0, 0, 0);\n  var isDateOutInterval = isStartDate ? result < minDate.getTime() || result >= maxDate.getTime() : result <= minDate.getTime() || result > maxDate.getTime();\n\n  if (isDateOutInterval) {\n    result = !allDay ? maxDate : minDate;\n  }\n\n  return result;\n};\n\nexport var normalizeStartDate = (options, startDate, sourceStartDate) => normalizeDate(options, startDate, sourceStartDate, true);\nexport var normalizeEndDate = (options, endDate, sourceEndDate) => normalizeDate(options, endDate, sourceEndDate, false);","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/scheduler/appointments/resizing/utils.js"],"names":["normalizeDate","options","date","sourceDate","isStartDate","considerTime","result","Date","setHours","getHours","getMinutes","getSeconds","startDayHour","endDayHour","appointmentSettings","allDay","minDate","maxDate","isDateOutInterval","getTime","normalizeStartDate","startDate","sourceStartDate","normalizeEndDate","endDate","sourceEndDate"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,aAAa,GAAG,CAACC,OAAD,EAAUC,IAAV,EAAgBC,UAAhB,EAA4BC,WAA5B,KAA4C;AAC5D,MAAI,CAACH,OAAO,CAACI,YAAb,EAA2B;AACvB,WAAOH,IAAP;AACH;;AACD,MAAII,MAAM,GAAG,IAAIC,IAAJ,CAASL,IAAT,CAAb;AACAI,EAAAA,MAAM,CAACE,QAAP,CAAgBL,UAAU,CAACM,QAAX,EAAhB,EAAuCN,UAAU,CAACO,UAAX,EAAvC,EAAgEP,UAAU,CAACQ,UAAX,EAAhE;AACA,MAAI;AACAC,IAAAA,YAAY,EAAEA,YADd;AAEAC,IAAAA,UAAU,EAAEA,UAFZ;AAGAC,IAAAA,mBAAmB,EAAE;AACjBC,MAAAA,MAAM,EAAEA;AADS;AAHrB,MAMAd,OANJ;AAOA,MAAIe,OAAO,GAAG,IAAIT,IAAJ,CAASL,IAAT,CAAd;AACA,MAAIe,OAAO,GAAG,IAAIV,IAAJ,CAASL,IAAT,CAAd;AACAc,EAAAA,OAAO,CAACR,QAAR,CAAiBI,YAAjB,EAA+B,CAA/B,EAAkC,CAAlC,EAAqC,CAArC;AACAK,EAAAA,OAAO,CAACT,QAAR,CAAiBK,UAAjB,EAA6B,CAA7B,EAAgC,CAAhC,EAAmC,CAAnC;AACA,MAAIK,iBAAiB,GAAGd,WAAW,GAAGE,MAAM,GAAGU,OAAO,CAACG,OAAR,EAAT,IAA8Bb,MAAM,IAAIW,OAAO,CAACE,OAAR,EAA3C,GAA+Db,MAAM,IAAIU,OAAO,CAACG,OAAR,EAAV,IAA+Bb,MAAM,GAAGW,OAAO,CAACE,OAAR,EAA1I;;AACA,MAAID,iBAAJ,EAAuB;AACnBZ,IAAAA,MAAM,GAAG,CAACS,MAAD,GAAUE,OAAV,GAAoBD,OAA7B;AACH;;AACD,SAAOV,MAAP;AACH,CAtBD;;AAuBA,OAAO,IAAIc,kBAAkB,GAAG,CAACnB,OAAD,EAAUoB,SAAV,EAAqBC,eAArB,KAAyCtB,aAAa,CAACC,OAAD,EAAUoB,SAAV,EAAqBC,eAArB,EAAsC,IAAtC,CAA/E;AACP,OAAO,IAAIC,gBAAgB,GAAG,CAACtB,OAAD,EAAUuB,OAAV,EAAmBC,aAAnB,KAAqCzB,aAAa,CAACC,OAAD,EAAUuB,OAAV,EAAmBC,aAAnB,EAAkC,KAAlC,CAAzE","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/appointments/resizing/utils.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nvar normalizeDate = (options, date, sourceDate, isStartDate) => {\r\n    if (!options.considerTime) {\r\n        return date\r\n    }\r\n    var result = new Date(date);\r\n    result.setHours(sourceDate.getHours(), sourceDate.getMinutes(), sourceDate.getSeconds());\r\n    var {\r\n        startDayHour: startDayHour,\r\n        endDayHour: endDayHour,\r\n        appointmentSettings: {\r\n            allDay: allDay\r\n        }\r\n    } = options;\r\n    var minDate = new Date(date);\r\n    var maxDate = new Date(date);\r\n    minDate.setHours(startDayHour, 0, 0, 0);\r\n    maxDate.setHours(endDayHour, 0, 0, 0);\r\n    var isDateOutInterval = isStartDate ? result < minDate.getTime() || result >= maxDate.getTime() : result <= minDate.getTime() || result > maxDate.getTime();\r\n    if (isDateOutInterval) {\r\n        result = !allDay ? maxDate : minDate\r\n    }\r\n    return result\r\n};\r\nexport var normalizeStartDate = (options, startDate, sourceStartDate) => normalizeDate(options, startDate, sourceStartDate, true);\r\nexport var normalizeEndDate = (options, endDate, sourceEndDate) => normalizeDate(options, endDate, sourceEndDate, false);\r\n"]},"metadata":{},"sourceType":"module"}