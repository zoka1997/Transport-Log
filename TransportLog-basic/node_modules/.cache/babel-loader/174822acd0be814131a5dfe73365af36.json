{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.virtual_columns_core.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { extend } from \"../../core/utils/extend\";\nexport function foreachColumnInfo(info, callback, rowIndex, offsets, columnCount, lastProcessedIndexes) {\n  rowIndex = rowIndex || 0;\n  offsets = offsets || [];\n  lastProcessedIndexes = lastProcessedIndexes || [];\n  offsets[rowIndex] = offsets[rowIndex] || 0;\n  var row = info[rowIndex];\n  var startIndex = lastProcessedIndexes[rowIndex] + 1 || 0;\n  var processedColumnCount = 0;\n  var colIndex;\n\n  if (!row) {\n    return;\n  }\n\n  for (colIndex = startIndex; colIndex < row.length; colIndex++) {\n    var cell = row[colIndex];\n    var visibleIndex = colIndex + offsets[rowIndex];\n    var colspan = cell.colspan || 1;\n    foreachColumnInfo(info, callback, rowIndex + (cell.rowspan || 1), offsets, colspan, lastProcessedIndexes);\n    offsets[rowIndex] += colspan - 1;\n    processedColumnCount += colspan;\n\n    if (cell.rowspan) {\n      for (var i = rowIndex + 1; i < rowIndex + cell.rowspan; i++) {\n        offsets[i] = offsets[i] || 0;\n        offsets[i] += cell.colspan || 1;\n      }\n    }\n\n    if (false === callback(cell, visibleIndex, rowIndex, colIndex)) {\n      break;\n    }\n\n    if (void 0 !== columnCount && processedColumnCount >= columnCount) {\n      break;\n    }\n  }\n\n  lastProcessedIndexes[rowIndex] = colIndex;\n}\nexport function createColumnsInfo(info, startIndex, endIndex) {\n  var newInfo = [];\n  foreachColumnInfo(info, function (columnInfo, visibleIndex, rowIndex) {\n    var cell = columnInfo;\n    var colspan;\n    var cellColspan = cell.colspan || 1;\n    var isVisible = visibleIndex + cellColspan - 1 >= startIndex && visibleIndex < endIndex;\n    newInfo[rowIndex] = newInfo[rowIndex] || [];\n\n    if (isVisible) {\n      if (visibleIndex < startIndex) {\n        colspan = cellColspan - (startIndex - visibleIndex);\n        visibleIndex = startIndex;\n      } else {\n        colspan = cellColspan;\n      }\n\n      if (visibleIndex + colspan > endIndex) {\n        colspan = endIndex - visibleIndex;\n      }\n\n      if (colspan !== cellColspan) {\n        cell = extend({}, cell, {\n          colspan: colspan\n        });\n      }\n\n      newInfo[rowIndex].push(cell);\n    } else if (visibleIndex > endIndex) {\n      return false;\n    }\n  });\n\n  for (var i = 0; i < newInfo.length; i++) {\n    newInfo[i] = newInfo[i] || [];\n  }\n\n  return newInfo;\n}","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.virtual_columns_core.js"],"names":["extend","foreachColumnInfo","info","callback","rowIndex","offsets","columnCount","lastProcessedIndexes","row","startIndex","processedColumnCount","colIndex","length","cell","visibleIndex","colspan","rowspan","i","createColumnsInfo","endIndex","newInfo","columnInfo","cellColspan","isVisible","push"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.virtual_columns_core.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nexport function foreachColumnInfo(info, callback, rowIndex, offsets, columnCount, lastProcessedIndexes) {\r\n    rowIndex = rowIndex || 0;\r\n    offsets = offsets || [];\r\n    lastProcessedIndexes = lastProcessedIndexes || [];\r\n    offsets[rowIndex] = offsets[rowIndex] || 0;\r\n    var row = info[rowIndex];\r\n    var startIndex = lastProcessedIndexes[rowIndex] + 1 || 0;\r\n    var processedColumnCount = 0;\r\n    var colIndex;\r\n    if (!row) {\r\n        return\r\n    }\r\n    for (colIndex = startIndex; colIndex < row.length; colIndex++) {\r\n        var cell = row[colIndex];\r\n        var visibleIndex = colIndex + offsets[rowIndex];\r\n        var colspan = cell.colspan || 1;\r\n        foreachColumnInfo(info, callback, rowIndex + (cell.rowspan || 1), offsets, colspan, lastProcessedIndexes);\r\n        offsets[rowIndex] += colspan - 1;\r\n        processedColumnCount += colspan;\r\n        if (cell.rowspan) {\r\n            for (var i = rowIndex + 1; i < rowIndex + cell.rowspan; i++) {\r\n                offsets[i] = offsets[i] || 0;\r\n                offsets[i] += cell.colspan || 1\r\n            }\r\n        }\r\n        if (false === callback(cell, visibleIndex, rowIndex, colIndex)) {\r\n            break\r\n        }\r\n        if (void 0 !== columnCount && processedColumnCount >= columnCount) {\r\n            break\r\n        }\r\n    }\r\n    lastProcessedIndexes[rowIndex] = colIndex\r\n}\r\nexport function createColumnsInfo(info, startIndex, endIndex) {\r\n    var newInfo = [];\r\n    foreachColumnInfo(info, (function(columnInfo, visibleIndex, rowIndex) {\r\n        var cell = columnInfo;\r\n        var colspan;\r\n        var cellColspan = cell.colspan || 1;\r\n        var isVisible = visibleIndex + cellColspan - 1 >= startIndex && visibleIndex < endIndex;\r\n        newInfo[rowIndex] = newInfo[rowIndex] || [];\r\n        if (isVisible) {\r\n            if (visibleIndex < startIndex) {\r\n                colspan = cellColspan - (startIndex - visibleIndex);\r\n                visibleIndex = startIndex\r\n            } else {\r\n                colspan = cellColspan\r\n            }\r\n            if (visibleIndex + colspan > endIndex) {\r\n                colspan = endIndex - visibleIndex\r\n            }\r\n            if (colspan !== cellColspan) {\r\n                cell = extend({}, cell, {\r\n                    colspan: colspan\r\n                })\r\n            }\r\n            newInfo[rowIndex].push(cell)\r\n        } else if (visibleIndex > endIndex) {\r\n            return false\r\n        }\r\n    }));\r\n    for (var i = 0; i < newInfo.length; i++) {\r\n        newInfo[i] = newInfo[i] || []\r\n    }\r\n    return newInfo\r\n}\r\n"]},"metadata":{},"sourceType":"module"}