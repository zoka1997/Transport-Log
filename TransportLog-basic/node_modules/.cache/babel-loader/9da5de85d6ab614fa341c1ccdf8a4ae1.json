{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing_form_based.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport { getWindow } from \"../../core/utils/window\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport Guid from \"../../core/guid\";\nimport { isDefined, isString } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { extend } from \"../../core/utils/extend\";\nimport Button from \"../button\";\nimport devices from \"../../core/devices\";\nimport Form from \"../form\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { equalByValue } from \"../../core/utils/common\";\nimport Scrollable from \"../scroll_view/ui.scrollable\";\nimport Popup from \"../popup\";\nimport { EDIT_MODE_FORM, EDIT_MODE_POPUP, FOCUSABLE_ELEMENT_SELECTOR, EDITING_EDITROWKEY_OPTION_NAME, EDITING_POPUP_OPTION_NAME, DATA_EDIT_DATA_INSERT_TYPE, EDITING_FORM_OPTION_NAME } from \"./ui.grid_core.editing_constants\";\nvar isRenovatedScrollable = !!Scrollable.IS_RENOVATED_WIDGET;\nvar EDIT_FORM_ITEM_CLASS = \"edit-form-item\";\nvar EDIT_POPUP_CLASS = \"edit-popup\";\nvar EDIT_POPUP_FORM_CLASS = \"edit-popup-form\";\nvar FOCUSABLE_ELEMENT_CLASS = isRenovatedScrollable ? \"dx-scrollable\" : \"dx-scrollable-container\";\nvar BUTTON_CLASS = \"dx-button\";\nvar FORM_BUTTONS_CONTAINER_CLASS = \"form-buttons-container\";\n\nvar getEditorType = item => {\n  var _column$formItem;\n\n  var column = item.column;\n  return item.isCustomEditorType ? item.editorType : null === (_column$formItem = column.formItem) || void 0 === _column$formItem ? void 0 : _column$formItem.editorType;\n};\n\nvar forEachFormItems = (items, callBack) => {\n  items.forEach(item => {\n    if (item.items || item.tabs) {\n      forEachFormItems(item.items || item.tabs, callBack);\n    } else {\n      callBack(item);\n    }\n  });\n};\n\nexport var editingFormBasedModule = {\n  extenders: {\n    controllers: {\n      editing: {\n        init: function () {\n          this._editForm = null;\n          this._updateEditFormDeferred = null;\n          this.callBase.apply(this, arguments);\n        },\n        isFormOrPopupEditMode: function () {\n          return this.isPopupEditMode() || this.isFormEditMode();\n        },\n        isPopupEditMode: function () {\n          var editMode = this.option(\"editing.mode\");\n          return editMode === EDIT_MODE_POPUP;\n        },\n        isFormEditMode: function () {\n          var editMode = this.option(\"editing.mode\");\n          return editMode === EDIT_MODE_FORM;\n        },\n        getFirstEditableColumnIndex: function () {\n          var firstFormItem = this._firstFormItem;\n\n          if (this.isFormEditMode() && firstFormItem) {\n            var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\n\n            var editRowIndex = this._dataController.getRowIndexByKey(editRowKey);\n\n            var $editFormElements = this._rowsView.getCellElements(editRowIndex);\n\n            return this._rowsView._getEditFormEditorVisibleIndex($editFormElements, firstFormItem.column);\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        getEditFormRowIndex: function () {\n          return this.isFormOrPopupEditMode() ? this._getVisibleEditRowIndex() : this.callBase.apply(this, arguments);\n        },\n        _isEditColumnVisible: function () {\n          var result = this.callBase.apply(this, arguments);\n          var editingOptions = this.option(\"editing\");\n          return this.isFormOrPopupEditMode() ? editingOptions.allowUpdating || result : result;\n        },\n        _handleDataChanged: function (args) {\n          if (this.isPopupEditMode()) {\n            var _args$items, _args$changeTypes;\n\n            var editRowKey = this.option(\"editing.editRowKey\");\n            var hasEditRow = null === args || void 0 === args ? void 0 : null === (_args$items = args.items) || void 0 === _args$items ? void 0 : _args$items.some(item => equalByValue(item.key, editRowKey));\n            var onlyInsertChanges = (null === (_args$changeTypes = args.changeTypes) || void 0 === _args$changeTypes ? void 0 : _args$changeTypes.length) && args.changeTypes.every(item => \"insert\" === item);\n\n            if ((\"refresh\" === args.changeType || hasEditRow) && !onlyInsertChanges) {\n              this._repaintEditPopup();\n            }\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        getPopupContent: function () {\n          var _this$_editPopup;\n\n          var popupVisible = null === (_this$_editPopup = this._editPopup) || void 0 === _this$_editPopup ? void 0 : _this$_editPopup.option(\"visible\");\n\n          if (this.isPopupEditMode() && popupVisible) {\n            return this._$popupContent;\n          }\n        },\n        _showAddedRow: function (rowIndex) {\n          if (this.isPopupEditMode()) {\n            this._showEditPopup(rowIndex);\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _cancelEditDataCore: function () {\n          this.callBase.apply(this, arguments);\n\n          if (this.isPopupEditMode()) {\n            this._hideEditPopup();\n          }\n        },\n        _updateEditRowCore: function (row, skipCurrentRow, isCustomSetCellValue) {\n          var editForm = this._editForm;\n\n          if (this.isPopupEditMode()) {\n            if (this.option(\"repaintChangesOnly\")) {\n              var _row$update;\n\n              null === (_row$update = row.update) || void 0 === _row$update ? void 0 : _row$update.call(row, row);\n\n              this._rowsView.renderDelayedTemplates();\n            } else if (editForm) {\n              this._updateEditFormDeferred = new Deferred().done(() => editForm.repaint());\n\n              if (!this._updateLockCount) {\n                this._updateEditFormDeferred.resolve();\n              }\n            }\n          } else {\n            this.callBase.apply(this, arguments);\n          }\n        },\n        _showEditPopup: function (rowIndex, repaintForm) {\n          var isMobileDevice = \"desktop\" !== devices.current().deviceType;\n          var popupOptions = extend({\n            showTitle: false,\n            fullScreen: isMobileDevice,\n            copyRootClassesToWrapper: true,\n            _ignoreCopyRootClassesToWrapperDeprecation: true,\n            toolbarItems: [{\n              toolbar: \"bottom\",\n              location: \"after\",\n              widget: \"dxButton\",\n              options: this._getSaveButtonConfig()\n            }, {\n              toolbar: \"bottom\",\n              location: \"after\",\n              widget: \"dxButton\",\n              options: this._getCancelButtonConfig()\n            }],\n            contentTemplate: this._getPopupEditFormTemplate(rowIndex)\n          }, this.option(EDITING_POPUP_OPTION_NAME));\n\n          if (!this._editPopup) {\n            var $popupContainer = $(\"<div>\").appendTo(this.component.$element()).addClass(this.addWidgetPrefix(EDIT_POPUP_CLASS));\n            this._editPopup = this._createComponent($popupContainer, Popup, {\n              copyRootClassesToWrapper: true,\n              _ignoreCopyRootClassesToWrapperDeprecation: true\n            });\n\n            this._editPopup.on(\"hiding\", this._getEditPopupHiddenHandler());\n\n            this._editPopup.on(\"shown\", e => {\n              eventsEngine.trigger(e.component.$content().find(FOCUSABLE_ELEMENT_SELECTOR).not(\".\".concat(FOCUSABLE_ELEMENT_CLASS)).first(), \"focus\");\n\n              if (repaintForm) {\n                var _this$_editForm;\n\n                null === (_this$_editForm = this._editForm) || void 0 === _this$_editForm ? void 0 : _this$_editForm.repaint();\n              }\n            });\n          }\n\n          this._editPopup.option(popupOptions);\n\n          this._editPopup.show();\n\n          this.callBase.apply(this, arguments);\n        },\n        _getPopupEditFormTemplate: function (rowIndex) {\n          var row = this.component.getVisibleRows()[rowIndex];\n          var templateOptions = {\n            row: row,\n            values: row.values,\n            rowType: row.rowType,\n            key: row.key,\n            rowIndex: rowIndex\n          };\n\n          this._rowsView._addWatchMethod(templateOptions, row);\n\n          return container => {\n            var formTemplate = this.getEditFormTemplate();\n\n            var scrollable = this._createComponent($(\"<div>\").appendTo(container), Scrollable);\n\n            this._$popupContent = $(scrollable.content());\n            formTemplate(this._$popupContent, templateOptions, {\n              isPopupForm: true\n            });\n\n            this._rowsView.renderDelayedTemplates();\n          };\n        },\n        _repaintEditPopup: function () {\n          var rowIndex = this._getVisibleEditRowIndex();\n\n          if (rowIndex >= 0) {\n            var _this$_editPopup2, _this$_editPopup3;\n\n            var defaultAnimation = null === (_this$_editPopup2 = this._editPopup) || void 0 === _this$_editPopup2 ? void 0 : _this$_editPopup2.option(\"animation\");\n            null === (_this$_editPopup3 = this._editPopup) || void 0 === _this$_editPopup3 ? void 0 : _this$_editPopup3.option(\"animation\", null);\n\n            this._showEditPopup(rowIndex, true);\n\n            if (void 0 !== defaultAnimation) {\n              this._editPopup.option(\"animation\", defaultAnimation);\n            }\n          }\n        },\n        _hideEditPopup: function () {\n          var _this$_editPopup4;\n\n          null === (_this$_editPopup4 = this._editPopup) || void 0 === _this$_editPopup4 ? void 0 : _this$_editPopup4.option(\"visible\", false);\n        },\n        optionChanged: function (args) {\n          if (\"editing\" === args.name && this.isFormOrPopupEditMode()) {\n            var fullName = args.fullName;\n\n            if (0 === fullName.indexOf(EDITING_FORM_OPTION_NAME)) {\n              this._handleFormOptionChange(args);\n\n              args.handled = true;\n            } else if (0 === fullName.indexOf(EDITING_POPUP_OPTION_NAME)) {\n              this._handlePopupOptionChange(args);\n\n              args.handled = true;\n            }\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _handleFormOptionChange: function (args) {\n          var _this$_editPopup5;\n\n          if (this.isFormEditMode()) {\n            var editRowIndex = this._getVisibleEditRowIndex();\n\n            if (editRowIndex >= 0) {\n              this._dataController.updateItems({\n                changeType: \"update\",\n                rowIndices: [editRowIndex]\n              });\n            }\n          } else if (null !== (_this$_editPopup5 = this._editPopup) && void 0 !== _this$_editPopup5 && _this$_editPopup5.option(\"visible\") && 0 === args.fullName.indexOf(EDITING_FORM_OPTION_NAME)) {\n            this._repaintEditPopup();\n          }\n        },\n        _handlePopupOptionChange: function (args) {\n          var editPopup = this._editPopup;\n\n          if (editPopup) {\n            var popupOptionName = args.fullName.slice(EDITING_POPUP_OPTION_NAME.length + 1);\n\n            if (popupOptionName) {\n              editPopup.option(popupOptionName, args.value);\n            } else {\n              editPopup.option(args.value);\n            }\n          }\n        },\n        renderFormEditTemplate: function (detailCellOptions, item, formTemplateOptions, container, isReadOnly) {\n          var that = this;\n          var $container = $(container);\n          var column = item.column;\n          var editorType = getEditorType(item);\n          var rowData = null === detailCellOptions || void 0 === detailCellOptions ? void 0 : detailCellOptions.row.data;\n          var form = formTemplateOptions.component;\n          var {\n            label: label,\n            labelMark: labelMark,\n            labelMode: labelMode\n          } = formTemplateOptions.editorOptions || {};\n          var cellOptions = extend({}, detailCellOptions, {\n            data: rowData,\n            cellElement: null,\n            isOnForm: true,\n            item: item,\n            id: form.getItemID(item.name || item.dataField),\n            column: extend({}, column, {\n              editorType: editorType,\n              editorOptions: extend({\n                label: label,\n                labelMark: labelMark,\n                labelMode: labelMode\n              }, column.editorOptions, item.editorOptions)\n            }),\n            columnIndex: column.index,\n            setValue: !isReadOnly && column.allowEditing && function (value) {\n              that.updateFieldValue(cellOptions, value);\n            }\n          });\n          cellOptions.value = column.calculateCellValue(rowData);\n\n          var template = this._getFormEditItemTemplate.bind(this)(cellOptions, column);\n\n          this._rowsView.renderTemplate($container, template, cellOptions, !!$container.closest(getWindow().document).length).done(() => {\n            this._rowsView._updateCell($container, cellOptions);\n          });\n\n          return cellOptions;\n        },\n        getFormEditorTemplate: function (cellOptions, item) {\n          var column = this.component.columnOption(item.dataField);\n          return (options, container) => {\n            var _cellOptions$row$watc, _cellOptions$row;\n\n            var $container = $(container);\n            null === (_cellOptions$row$watc = (_cellOptions$row = cellOptions.row).watch) || void 0 === _cellOptions$row$watc ? void 0 : _cellOptions$row$watc.call(_cellOptions$row, function () {\n              return column.selector(cellOptions.row.data);\n            }, () => {\n              var _validator;\n\n              var $editorElement = $container.find(\".dx-widget\").first();\n              var validator = $editorElement.data(\"dxValidator\");\n              var validatorOptions = null === (_validator = validator) || void 0 === _validator ? void 0 : _validator.option();\n              $container.contents().remove();\n              cellOptions = this.renderFormEditTemplate.bind(this)(cellOptions, item, options, $container);\n              $editorElement = $container.find(\".dx-widget\").first();\n              validator = $editorElement.data(\"dxValidator\");\n\n              if (validatorOptions && !validator) {\n                $editorElement.dxValidator({\n                  validationRules: validatorOptions.validationRules,\n                  validationGroup: validatorOptions.validationGroup,\n                  dataGetter: validatorOptions.dataGetter\n                });\n              }\n            });\n            cellOptions = this.renderFormEditTemplate.bind(this)(cellOptions, item, options, $container);\n          };\n        },\n        getEditFormOptions: function (detailOptions) {\n          var _this$_getValidationG;\n\n          var editFormOptions = null === (_this$_getValidationG = this._getValidationGroupsInForm) || void 0 === _this$_getValidationG ? void 0 : _this$_getValidationG.call(this, detailOptions);\n          var userCustomizeItem = this.option(\"editing.form.customizeItem\");\n          var editFormItemClass = this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS);\n          var items = this.option(\"editing.form.items\");\n          var isCustomEditorType = {};\n\n          if (!items) {\n            var columns = this.getController(\"columns\").getColumns();\n            items = [];\n            each(columns, function (_, column) {\n              if (!column.isBand && !column.type) {\n                items.push({\n                  column: column,\n                  name: column.name,\n                  dataField: column.dataField\n                });\n              }\n            });\n          } else {\n            forEachFormItems(items, item => {\n              var itemId = (null === item || void 0 === item ? void 0 : item.name) || (null === item || void 0 === item ? void 0 : item.dataField);\n\n              if (itemId) {\n                isCustomEditorType[itemId] = !!item.editorType;\n              }\n            });\n          }\n\n          return extend({}, editFormOptions, {\n            items: items,\n            formID: \"dx-\" + new Guid(),\n            customizeItem: item => {\n              var column;\n              var itemId = item.name || item.dataField;\n\n              if (item.column || itemId) {\n                column = item.column || this._columnsController.columnOption(item.name ? \"name:\" + item.name : \"dataField:\" + item.dataField);\n              }\n\n              if (column) {\n                item.label = item.label || {};\n                item.label.text = item.label.text || column.caption;\n\n                if (\"boolean\" === column.dataType && void 0 === item.label.visible) {\n                  var labelMode = this.option(\"editing.form.labelMode\");\n\n                  if (\"floating\" === labelMode || \"static\" === labelMode) {\n                    item.label.visible = true;\n                  }\n                }\n\n                item.template = item.template || this.getFormEditorTemplate(detailOptions, item);\n                item.column = column;\n                item.isCustomEditorType = isCustomEditorType[itemId];\n\n                if (column.formItem) {\n                  extend(item, column.formItem);\n                }\n\n                if (void 0 === item.isRequired && column.validationRules) {\n                  item.isRequired = column.validationRules.some(function (rule) {\n                    return \"required\" === rule.type;\n                  });\n                  item.validationRules = [];\n                }\n\n                var itemVisible = isDefined(item.visible) ? item.visible : true;\n\n                if (!this._firstFormItem && itemVisible) {\n                  this._firstFormItem = item;\n                }\n              }\n\n              null === userCustomizeItem || void 0 === userCustomizeItem ? void 0 : userCustomizeItem.call(this, item);\n              item.cssClass = isString(item.cssClass) ? item.cssClass + \" \" + editFormItemClass : editFormItemClass;\n            }\n          });\n        },\n        getEditFormTemplate: function () {\n          return ($container, detailOptions, options) => {\n            var editFormOptions = this.option(EDITING_FORM_OPTION_NAME);\n            var baseEditFormOptions = this.getEditFormOptions(detailOptions);\n            var $formContainer = $(\"<div>\").appendTo($container);\n            var isPopupForm = null === options || void 0 === options ? void 0 : options.isPopupForm;\n            this._firstFormItem = void 0;\n\n            if (isPopupForm) {\n              $formContainer.addClass(this.addWidgetPrefix(EDIT_POPUP_FORM_CLASS));\n            }\n\n            this._editForm = this._createComponent($formContainer, Form, extend({}, editFormOptions, baseEditFormOptions));\n\n            if (!isPopupForm) {\n              var $buttonsContainer = $(\"<div>\").addClass(this.addWidgetPrefix(FORM_BUTTONS_CONTAINER_CLASS)).appendTo($container);\n\n              this._createComponent($(\"<div>\").appendTo($buttonsContainer), Button, this._getSaveButtonConfig());\n\n              this._createComponent($(\"<div>\").appendTo($buttonsContainer), Button, this._getCancelButtonConfig());\n            }\n\n            this._editForm.on(\"contentReady\", () => {\n              var _this$_editPopup6;\n\n              this._rowsView.renderDelayedTemplates();\n\n              null === (_this$_editPopup6 = this._editPopup) || void 0 === _this$_editPopup6 ? void 0 : _this$_editPopup6.repaint();\n            });\n          };\n        },\n        getEditForm: function () {\n          return this._editForm;\n        },\n        _endUpdateCore: function () {\n          var _this$_updateEditForm;\n\n          null === (_this$_updateEditForm = this._updateEditFormDeferred) || void 0 === _this$_updateEditForm ? void 0 : _this$_updateEditForm.resolve();\n        },\n        _beforeEndSaving: function () {\n          this.callBase.apply(this, arguments);\n\n          if (this.isPopupEditMode()) {\n            var _this$_editPopup7;\n\n            null === (_this$_editPopup7 = this._editPopup) || void 0 === _this$_editPopup7 ? void 0 : _this$_editPopup7.hide();\n          }\n        },\n        _processDataItemCore: function (item, _ref) {\n          var {\n            type: type\n          } = _ref;\n\n          if (this.isPopupEditMode() && type === DATA_EDIT_DATA_INSERT_TYPE) {\n            item.visible = false;\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        _editRowFromOptionChangedCore: function (rowIndices, rowIndex) {\n          var isPopupEditMode = this.isPopupEditMode();\n          this.callBase(rowIndices, rowIndex, isPopupEditMode);\n\n          if (isPopupEditMode) {\n            this._showEditPopup(rowIndex);\n          }\n        }\n      },\n      data: {\n        _updateEditItem: function (item) {\n          if (this._editingController.isFormEditMode()) {\n            item.rowType = \"detail\";\n          }\n        },\n        _getChangedColumnIndices: function (oldItem, newItem, visibleRowIndex, isLiveUpdate) {\n          if (false === isLiveUpdate && newItem.isEditing && this._editingController.isFormEditMode()) {\n            return;\n          }\n\n          return this.callBase.apply(this, arguments);\n        }\n      }\n    },\n    views: {\n      rowsView: {\n        _renderCellContent: function ($cell, options) {\n          if (\"data\" === options.rowType && this._editingController.isPopupEditMode() && false === options.row.visible) {\n            return;\n          }\n\n          this.callBase.apply(this, arguments);\n        },\n        getCellElements: function (rowIndex) {\n          var $cellElements = this.callBase(rowIndex);\n          var editingController = this._editingController;\n          var editForm = editingController.getEditForm();\n          var editFormRowIndex = editingController.getEditFormRowIndex();\n\n          if (editFormRowIndex === rowIndex && $cellElements && editForm) {\n            return editForm.$element().find(\".\" + this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS) + \", .\" + BUTTON_CLASS);\n          }\n\n          return $cellElements;\n        },\n        _getVisibleColumnIndex: function ($cells, rowIndex, columnIdentifier) {\n          var editFormRowIndex = this._editingController.getEditFormRowIndex();\n\n          if (editFormRowIndex === rowIndex && isString(columnIdentifier)) {\n            var column = this._columnsController.columnOption(columnIdentifier);\n\n            return this._getEditFormEditorVisibleIndex($cells, column);\n          }\n\n          return this.callBase.apply(this, arguments);\n        },\n        _getEditFormEditorVisibleIndex: function ($cells, column) {\n          var visibleIndex = -1;\n          each($cells, function (index, cellElement) {\n            var item = $(cellElement).find(\".dx-field-item-content\").data(\"dx-form-item\");\n\n            if (null !== item && void 0 !== item && item.column && column && item.column.index === column.index) {\n              visibleIndex = index;\n              return false;\n            }\n          });\n          return visibleIndex;\n        },\n        _isFormItem: function (parameters) {\n          var isDetailRow = \"detail\" === parameters.rowType || \"detailAdaptive\" === parameters.rowType;\n\n          var isPopupEditing = \"data\" === parameters.rowType && this._editingController.isPopupEditMode();\n\n          return (isDetailRow || isPopupEditing) && parameters.item;\n        },\n        _updateCell: function ($cell, parameters) {\n          if (this._isFormItem(parameters)) {\n            this._formItemPrepared(parameters, $cell);\n          } else {\n            this.callBase($cell, parameters);\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.editing_form_based.js"],"names":["$","getWindow","eventsEngine","Guid","isDefined","isString","each","extend","Button","devices","Form","Deferred","equalByValue","Scrollable","Popup","EDIT_MODE_FORM","EDIT_MODE_POPUP","FOCUSABLE_ELEMENT_SELECTOR","EDITING_EDITROWKEY_OPTION_NAME","EDITING_POPUP_OPTION_NAME","DATA_EDIT_DATA_INSERT_TYPE","EDITING_FORM_OPTION_NAME","isRenovatedScrollable","IS_RENOVATED_WIDGET","EDIT_FORM_ITEM_CLASS","EDIT_POPUP_CLASS","EDIT_POPUP_FORM_CLASS","FOCUSABLE_ELEMENT_CLASS","BUTTON_CLASS","FORM_BUTTONS_CONTAINER_CLASS","getEditorType","item","_column$formItem","column","isCustomEditorType","editorType","formItem","forEachFormItems","items","callBack","forEach","tabs","editingFormBasedModule","extenders","controllers","editing","init","_editForm","_updateEditFormDeferred","callBase","apply","arguments","isFormOrPopupEditMode","isPopupEditMode","isFormEditMode","editMode","option","getFirstEditableColumnIndex","firstFormItem","_firstFormItem","editRowKey","editRowIndex","_dataController","getRowIndexByKey","$editFormElements","_rowsView","getCellElements","_getEditFormEditorVisibleIndex","getEditFormRowIndex","_getVisibleEditRowIndex","_isEditColumnVisible","result","editingOptions","allowUpdating","_handleDataChanged","args","_args$items","_args$changeTypes","hasEditRow","some","key","onlyInsertChanges","changeTypes","length","every","changeType","_repaintEditPopup","getPopupContent","_this$_editPopup","popupVisible","_editPopup","_$popupContent","_showAddedRow","rowIndex","_showEditPopup","_cancelEditDataCore","_hideEditPopup","_updateEditRowCore","row","skipCurrentRow","isCustomSetCellValue","editForm","_row$update","update","call","renderDelayedTemplates","done","repaint","_updateLockCount","resolve","repaintForm","isMobileDevice","current","deviceType","popupOptions","showTitle","fullScreen","copyRootClassesToWrapper","_ignoreCopyRootClassesToWrapperDeprecation","toolbarItems","toolbar","location","widget","options","_getSaveButtonConfig","_getCancelButtonConfig","contentTemplate","_getPopupEditFormTemplate","$popupContainer","appendTo","component","$element","addClass","addWidgetPrefix","_createComponent","on","_getEditPopupHiddenHandler","e","trigger","$content","find","not","concat","first","_this$_editForm","show","getVisibleRows","templateOptions","values","rowType","_addWatchMethod","container","formTemplate","getEditFormTemplate","scrollable","content","isPopupForm","_this$_editPopup2","_this$_editPopup3","defaultAnimation","_this$_editPopup4","optionChanged","name","fullName","indexOf","_handleFormOptionChange","handled","_handlePopupOptionChange","_this$_editPopup5","updateItems","rowIndices","editPopup","popupOptionName","slice","value","renderFormEditTemplate","detailCellOptions","formTemplateOptions","isReadOnly","that","$container","rowData","data","form","label","labelMark","labelMode","editorOptions","cellOptions","cellElement","isOnForm","id","getItemID","dataField","columnIndex","index","setValue","allowEditing","updateFieldValue","calculateCellValue","template","_getFormEditItemTemplate","bind","renderTemplate","closest","document","_updateCell","getFormEditorTemplate","columnOption","_cellOptions$row$watc","_cellOptions$row","watch","selector","_validator","$editorElement","validator","validatorOptions","contents","remove","dxValidator","validationRules","validationGroup","dataGetter","getEditFormOptions","detailOptions","_this$_getValidationG","editFormOptions","_getValidationGroupsInForm","userCustomizeItem","editFormItemClass","columns","getController","getColumns","_","isBand","type","push","itemId","formID","customizeItem","_columnsController","text","caption","dataType","visible","isRequired","rule","itemVisible","cssClass","baseEditFormOptions","$formContainer","$buttonsContainer","_this$_editPopup6","getEditForm","_endUpdateCore","_this$_updateEditForm","_beforeEndSaving","_this$_editPopup7","hide","_processDataItemCore","_ref","_editRowFromOptionChangedCore","_updateEditItem","_editingController","_getChangedColumnIndices","oldItem","newItem","visibleRowIndex","isLiveUpdate","isEditing","views","rowsView","_renderCellContent","$cell","$cellElements","editingController","editFormRowIndex","_getVisibleColumnIndex","$cells","columnIdentifier","visibleIndex","_isFormItem","parameters","isDetailRow","isPopupEditing","_formItemPrepared"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.editing_form_based.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    getWindow\r\n} from \"../../core/utils/window\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport Guid from \"../../core/guid\";\r\nimport {\r\n    isDefined,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport Button from \"../button\";\r\nimport devices from \"../../core/devices\";\r\nimport Form from \"../form\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    equalByValue\r\n} from \"../../core/utils/common\";\r\nimport Scrollable from \"../scroll_view/ui.scrollable\";\r\nimport Popup from \"../popup\";\r\nimport {\r\n    EDIT_MODE_FORM,\r\n    EDIT_MODE_POPUP,\r\n    FOCUSABLE_ELEMENT_SELECTOR,\r\n    EDITING_EDITROWKEY_OPTION_NAME,\r\n    EDITING_POPUP_OPTION_NAME,\r\n    DATA_EDIT_DATA_INSERT_TYPE,\r\n    EDITING_FORM_OPTION_NAME\r\n} from \"./ui.grid_core.editing_constants\";\r\nvar isRenovatedScrollable = !!Scrollable.IS_RENOVATED_WIDGET;\r\nvar EDIT_FORM_ITEM_CLASS = \"edit-form-item\";\r\nvar EDIT_POPUP_CLASS = \"edit-popup\";\r\nvar EDIT_POPUP_FORM_CLASS = \"edit-popup-form\";\r\nvar FOCUSABLE_ELEMENT_CLASS = isRenovatedScrollable ? \"dx-scrollable\" : \"dx-scrollable-container\";\r\nvar BUTTON_CLASS = \"dx-button\";\r\nvar FORM_BUTTONS_CONTAINER_CLASS = \"form-buttons-container\";\r\nvar getEditorType = item => {\r\n    var _column$formItem;\r\n    var column = item.column;\r\n    return item.isCustomEditorType ? item.editorType : null === (_column$formItem = column.formItem) || void 0 === _column$formItem ? void 0 : _column$formItem.editorType\r\n};\r\nvar forEachFormItems = (items, callBack) => {\r\n    items.forEach(item => {\r\n        if (item.items || item.tabs) {\r\n            forEachFormItems(item.items || item.tabs, callBack)\r\n        } else {\r\n            callBack(item)\r\n        }\r\n    })\r\n};\r\nexport var editingFormBasedModule = {\r\n    extenders: {\r\n        controllers: {\r\n            editing: {\r\n                init: function() {\r\n                    this._editForm = null;\r\n                    this._updateEditFormDeferred = null;\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                isFormOrPopupEditMode: function() {\r\n                    return this.isPopupEditMode() || this.isFormEditMode()\r\n                },\r\n                isPopupEditMode: function() {\r\n                    var editMode = this.option(\"editing.mode\");\r\n                    return editMode === EDIT_MODE_POPUP\r\n                },\r\n                isFormEditMode: function() {\r\n                    var editMode = this.option(\"editing.mode\");\r\n                    return editMode === EDIT_MODE_FORM\r\n                },\r\n                getFirstEditableColumnIndex: function() {\r\n                    var firstFormItem = this._firstFormItem;\r\n                    if (this.isFormEditMode() && firstFormItem) {\r\n                        var editRowKey = this.option(EDITING_EDITROWKEY_OPTION_NAME);\r\n                        var editRowIndex = this._dataController.getRowIndexByKey(editRowKey);\r\n                        var $editFormElements = this._rowsView.getCellElements(editRowIndex);\r\n                        return this._rowsView._getEditFormEditorVisibleIndex($editFormElements, firstFormItem.column)\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                getEditFormRowIndex: function() {\r\n                    return this.isFormOrPopupEditMode() ? this._getVisibleEditRowIndex() : this.callBase.apply(this, arguments)\r\n                },\r\n                _isEditColumnVisible: function() {\r\n                    var result = this.callBase.apply(this, arguments);\r\n                    var editingOptions = this.option(\"editing\");\r\n                    return this.isFormOrPopupEditMode() ? editingOptions.allowUpdating || result : result\r\n                },\r\n                _handleDataChanged: function(args) {\r\n                    if (this.isPopupEditMode()) {\r\n                        var _args$items, _args$changeTypes;\r\n                        var editRowKey = this.option(\"editing.editRowKey\");\r\n                        var hasEditRow = null === args || void 0 === args ? void 0 : null === (_args$items = args.items) || void 0 === _args$items ? void 0 : _args$items.some(item => equalByValue(item.key, editRowKey));\r\n                        var onlyInsertChanges = (null === (_args$changeTypes = args.changeTypes) || void 0 === _args$changeTypes ? void 0 : _args$changeTypes.length) && args.changeTypes.every(item => \"insert\" === item);\r\n                        if ((\"refresh\" === args.changeType || hasEditRow) && !onlyInsertChanges) {\r\n                            this._repaintEditPopup()\r\n                        }\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                getPopupContent: function() {\r\n                    var _this$_editPopup;\r\n                    var popupVisible = null === (_this$_editPopup = this._editPopup) || void 0 === _this$_editPopup ? void 0 : _this$_editPopup.option(\"visible\");\r\n                    if (this.isPopupEditMode() && popupVisible) {\r\n                        return this._$popupContent\r\n                    }\r\n                },\r\n                _showAddedRow: function(rowIndex) {\r\n                    if (this.isPopupEditMode()) {\r\n                        this._showEditPopup(rowIndex)\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _cancelEditDataCore: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (this.isPopupEditMode()) {\r\n                        this._hideEditPopup()\r\n                    }\r\n                },\r\n                _updateEditRowCore: function(row, skipCurrentRow, isCustomSetCellValue) {\r\n                    var editForm = this._editForm;\r\n                    if (this.isPopupEditMode()) {\r\n                        if (this.option(\"repaintChangesOnly\")) {\r\n                            var _row$update;\r\n                            null === (_row$update = row.update) || void 0 === _row$update ? void 0 : _row$update.call(row, row);\r\n                            this._rowsView.renderDelayedTemplates()\r\n                        } else if (editForm) {\r\n                            this._updateEditFormDeferred = (new Deferred).done(() => editForm.repaint());\r\n                            if (!this._updateLockCount) {\r\n                                this._updateEditFormDeferred.resolve()\r\n                            }\r\n                        }\r\n                    } else {\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                },\r\n                _showEditPopup: function(rowIndex, repaintForm) {\r\n                    var isMobileDevice = \"desktop\" !== devices.current().deviceType;\r\n                    var popupOptions = extend({\r\n                        showTitle: false,\r\n                        fullScreen: isMobileDevice,\r\n                        copyRootClassesToWrapper: true,\r\n                        _ignoreCopyRootClassesToWrapperDeprecation: true,\r\n                        toolbarItems: [{\r\n                            toolbar: \"bottom\",\r\n                            location: \"after\",\r\n                            widget: \"dxButton\",\r\n                            options: this._getSaveButtonConfig()\r\n                        }, {\r\n                            toolbar: \"bottom\",\r\n                            location: \"after\",\r\n                            widget: \"dxButton\",\r\n                            options: this._getCancelButtonConfig()\r\n                        }],\r\n                        contentTemplate: this._getPopupEditFormTemplate(rowIndex)\r\n                    }, this.option(EDITING_POPUP_OPTION_NAME));\r\n                    if (!this._editPopup) {\r\n                        var $popupContainer = $(\"<div>\").appendTo(this.component.$element()).addClass(this.addWidgetPrefix(EDIT_POPUP_CLASS));\r\n                        this._editPopup = this._createComponent($popupContainer, Popup, {\r\n                            copyRootClassesToWrapper: true,\r\n                            _ignoreCopyRootClassesToWrapperDeprecation: true\r\n                        });\r\n                        this._editPopup.on(\"hiding\", this._getEditPopupHiddenHandler());\r\n                        this._editPopup.on(\"shown\", e => {\r\n                            eventsEngine.trigger(e.component.$content().find(FOCUSABLE_ELEMENT_SELECTOR).not(\".\".concat(FOCUSABLE_ELEMENT_CLASS)).first(), \"focus\");\r\n                            if (repaintForm) {\r\n                                var _this$_editForm;\r\n                                null === (_this$_editForm = this._editForm) || void 0 === _this$_editForm ? void 0 : _this$_editForm.repaint()\r\n                            }\r\n                        })\r\n                    }\r\n                    this._editPopup.option(popupOptions);\r\n                    this._editPopup.show();\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _getPopupEditFormTemplate: function(rowIndex) {\r\n                    var row = this.component.getVisibleRows()[rowIndex];\r\n                    var templateOptions = {\r\n                        row: row,\r\n                        values: row.values,\r\n                        rowType: row.rowType,\r\n                        key: row.key,\r\n                        rowIndex: rowIndex\r\n                    };\r\n                    this._rowsView._addWatchMethod(templateOptions, row);\r\n                    return container => {\r\n                        var formTemplate = this.getEditFormTemplate();\r\n                        var scrollable = this._createComponent($(\"<div>\").appendTo(container), Scrollable);\r\n                        this._$popupContent = $(scrollable.content());\r\n                        formTemplate(this._$popupContent, templateOptions, {\r\n                            isPopupForm: true\r\n                        });\r\n                        this._rowsView.renderDelayedTemplates()\r\n                    }\r\n                },\r\n                _repaintEditPopup: function() {\r\n                    var rowIndex = this._getVisibleEditRowIndex();\r\n                    if (rowIndex >= 0) {\r\n                        var _this$_editPopup2, _this$_editPopup3;\r\n                        var defaultAnimation = null === (_this$_editPopup2 = this._editPopup) || void 0 === _this$_editPopup2 ? void 0 : _this$_editPopup2.option(\"animation\");\r\n                        null === (_this$_editPopup3 = this._editPopup) || void 0 === _this$_editPopup3 ? void 0 : _this$_editPopup3.option(\"animation\", null);\r\n                        this._showEditPopup(rowIndex, true);\r\n                        if (void 0 !== defaultAnimation) {\r\n                            this._editPopup.option(\"animation\", defaultAnimation)\r\n                        }\r\n                    }\r\n                },\r\n                _hideEditPopup: function() {\r\n                    var _this$_editPopup4;\r\n                    null === (_this$_editPopup4 = this._editPopup) || void 0 === _this$_editPopup4 ? void 0 : _this$_editPopup4.option(\"visible\", false)\r\n                },\r\n                optionChanged: function(args) {\r\n                    if (\"editing\" === args.name && this.isFormOrPopupEditMode()) {\r\n                        var fullName = args.fullName;\r\n                        if (0 === fullName.indexOf(EDITING_FORM_OPTION_NAME)) {\r\n                            this._handleFormOptionChange(args);\r\n                            args.handled = true\r\n                        } else if (0 === fullName.indexOf(EDITING_POPUP_OPTION_NAME)) {\r\n                            this._handlePopupOptionChange(args);\r\n                            args.handled = true\r\n                        }\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _handleFormOptionChange: function(args) {\r\n                    var _this$_editPopup5;\r\n                    if (this.isFormEditMode()) {\r\n                        var editRowIndex = this._getVisibleEditRowIndex();\r\n                        if (editRowIndex >= 0) {\r\n                            this._dataController.updateItems({\r\n                                changeType: \"update\",\r\n                                rowIndices: [editRowIndex]\r\n                            })\r\n                        }\r\n                    } else if (null !== (_this$_editPopup5 = this._editPopup) && void 0 !== _this$_editPopup5 && _this$_editPopup5.option(\"visible\") && 0 === args.fullName.indexOf(EDITING_FORM_OPTION_NAME)) {\r\n                        this._repaintEditPopup()\r\n                    }\r\n                },\r\n                _handlePopupOptionChange: function(args) {\r\n                    var editPopup = this._editPopup;\r\n                    if (editPopup) {\r\n                        var popupOptionName = args.fullName.slice(EDITING_POPUP_OPTION_NAME.length + 1);\r\n                        if (popupOptionName) {\r\n                            editPopup.option(popupOptionName, args.value)\r\n                        } else {\r\n                            editPopup.option(args.value)\r\n                        }\r\n                    }\r\n                },\r\n                renderFormEditTemplate: function(detailCellOptions, item, formTemplateOptions, container, isReadOnly) {\r\n                    var that = this;\r\n                    var $container = $(container);\r\n                    var column = item.column;\r\n                    var editorType = getEditorType(item);\r\n                    var rowData = null === detailCellOptions || void 0 === detailCellOptions ? void 0 : detailCellOptions.row.data;\r\n                    var form = formTemplateOptions.component;\r\n                    var {\r\n                        label: label,\r\n                        labelMark: labelMark,\r\n                        labelMode: labelMode\r\n                    } = formTemplateOptions.editorOptions || {};\r\n                    var cellOptions = extend({}, detailCellOptions, {\r\n                        data: rowData,\r\n                        cellElement: null,\r\n                        isOnForm: true,\r\n                        item: item,\r\n                        id: form.getItemID(item.name || item.dataField),\r\n                        column: extend({}, column, {\r\n                            editorType: editorType,\r\n                            editorOptions: extend({\r\n                                label: label,\r\n                                labelMark: labelMark,\r\n                                labelMode: labelMode\r\n                            }, column.editorOptions, item.editorOptions)\r\n                        }),\r\n                        columnIndex: column.index,\r\n                        setValue: !isReadOnly && column.allowEditing && function(value) {\r\n                            that.updateFieldValue(cellOptions, value)\r\n                        }\r\n                    });\r\n                    cellOptions.value = column.calculateCellValue(rowData);\r\n                    var template = this._getFormEditItemTemplate.bind(this)(cellOptions, column);\r\n                    this._rowsView.renderTemplate($container, template, cellOptions, !!$container.closest(getWindow().document).length).done(() => {\r\n                        this._rowsView._updateCell($container, cellOptions)\r\n                    });\r\n                    return cellOptions\r\n                },\r\n                getFormEditorTemplate: function(cellOptions, item) {\r\n                    var column = this.component.columnOption(item.dataField);\r\n                    return (options, container) => {\r\n                        var _cellOptions$row$watc, _cellOptions$row;\r\n                        var $container = $(container);\r\n                        null === (_cellOptions$row$watc = (_cellOptions$row = cellOptions.row).watch) || void 0 === _cellOptions$row$watc ? void 0 : _cellOptions$row$watc.call(_cellOptions$row, (function() {\r\n                            return column.selector(cellOptions.row.data)\r\n                        }), () => {\r\n                            var _validator;\r\n                            var $editorElement = $container.find(\".dx-widget\").first();\r\n                            var validator = $editorElement.data(\"dxValidator\");\r\n                            var validatorOptions = null === (_validator = validator) || void 0 === _validator ? void 0 : _validator.option();\r\n                            $container.contents().remove();\r\n                            cellOptions = this.renderFormEditTemplate.bind(this)(cellOptions, item, options, $container);\r\n                            $editorElement = $container.find(\".dx-widget\").first();\r\n                            validator = $editorElement.data(\"dxValidator\");\r\n                            if (validatorOptions && !validator) {\r\n                                $editorElement.dxValidator({\r\n                                    validationRules: validatorOptions.validationRules,\r\n                                    validationGroup: validatorOptions.validationGroup,\r\n                                    dataGetter: validatorOptions.dataGetter\r\n                                })\r\n                            }\r\n                        });\r\n                        cellOptions = this.renderFormEditTemplate.bind(this)(cellOptions, item, options, $container)\r\n                    }\r\n                },\r\n                getEditFormOptions: function(detailOptions) {\r\n                    var _this$_getValidationG;\r\n                    var editFormOptions = null === (_this$_getValidationG = this._getValidationGroupsInForm) || void 0 === _this$_getValidationG ? void 0 : _this$_getValidationG.call(this, detailOptions);\r\n                    var userCustomizeItem = this.option(\"editing.form.customizeItem\");\r\n                    var editFormItemClass = this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS);\r\n                    var items = this.option(\"editing.form.items\");\r\n                    var isCustomEditorType = {};\r\n                    if (!items) {\r\n                        var columns = this.getController(\"columns\").getColumns();\r\n                        items = [];\r\n                        each(columns, (function(_, column) {\r\n                            if (!column.isBand && !column.type) {\r\n                                items.push({\r\n                                    column: column,\r\n                                    name: column.name,\r\n                                    dataField: column.dataField\r\n                                })\r\n                            }\r\n                        }))\r\n                    } else {\r\n                        forEachFormItems(items, item => {\r\n                            var itemId = (null === item || void 0 === item ? void 0 : item.name) || (null === item || void 0 === item ? void 0 : item.dataField);\r\n                            if (itemId) {\r\n                                isCustomEditorType[itemId] = !!item.editorType\r\n                            }\r\n                        })\r\n                    }\r\n                    return extend({}, editFormOptions, {\r\n                        items: items,\r\n                        formID: \"dx-\" + new Guid,\r\n                        customizeItem: item => {\r\n                            var column;\r\n                            var itemId = item.name || item.dataField;\r\n                            if (item.column || itemId) {\r\n                                column = item.column || this._columnsController.columnOption(item.name ? \"name:\" + item.name : \"dataField:\" + item.dataField)\r\n                            }\r\n                            if (column) {\r\n                                item.label = item.label || {};\r\n                                item.label.text = item.label.text || column.caption;\r\n                                if (\"boolean\" === column.dataType && void 0 === item.label.visible) {\r\n                                    var labelMode = this.option(\"editing.form.labelMode\");\r\n                                    if (\"floating\" === labelMode || \"static\" === labelMode) {\r\n                                        item.label.visible = true\r\n                                    }\r\n                                }\r\n                                item.template = item.template || this.getFormEditorTemplate(detailOptions, item);\r\n                                item.column = column;\r\n                                item.isCustomEditorType = isCustomEditorType[itemId];\r\n                                if (column.formItem) {\r\n                                    extend(item, column.formItem)\r\n                                }\r\n                                if (void 0 === item.isRequired && column.validationRules) {\r\n                                    item.isRequired = column.validationRules.some((function(rule) {\r\n                                        return \"required\" === rule.type\r\n                                    }));\r\n                                    item.validationRules = []\r\n                                }\r\n                                var itemVisible = isDefined(item.visible) ? item.visible : true;\r\n                                if (!this._firstFormItem && itemVisible) {\r\n                                    this._firstFormItem = item\r\n                                }\r\n                            }\r\n                            null === userCustomizeItem || void 0 === userCustomizeItem ? void 0 : userCustomizeItem.call(this, item);\r\n                            item.cssClass = isString(item.cssClass) ? item.cssClass + \" \" + editFormItemClass : editFormItemClass\r\n                        }\r\n                    })\r\n                },\r\n                getEditFormTemplate: function() {\r\n                    return ($container, detailOptions, options) => {\r\n                        var editFormOptions = this.option(EDITING_FORM_OPTION_NAME);\r\n                        var baseEditFormOptions = this.getEditFormOptions(detailOptions);\r\n                        var $formContainer = $(\"<div>\").appendTo($container);\r\n                        var isPopupForm = null === options || void 0 === options ? void 0 : options.isPopupForm;\r\n                        this._firstFormItem = void 0;\r\n                        if (isPopupForm) {\r\n                            $formContainer.addClass(this.addWidgetPrefix(EDIT_POPUP_FORM_CLASS))\r\n                        }\r\n                        this._editForm = this._createComponent($formContainer, Form, extend({}, editFormOptions, baseEditFormOptions));\r\n                        if (!isPopupForm) {\r\n                            var $buttonsContainer = $(\"<div>\").addClass(this.addWidgetPrefix(FORM_BUTTONS_CONTAINER_CLASS)).appendTo($container);\r\n                            this._createComponent($(\"<div>\").appendTo($buttonsContainer), Button, this._getSaveButtonConfig());\r\n                            this._createComponent($(\"<div>\").appendTo($buttonsContainer), Button, this._getCancelButtonConfig())\r\n                        }\r\n                        this._editForm.on(\"contentReady\", () => {\r\n                            var _this$_editPopup6;\r\n                            this._rowsView.renderDelayedTemplates();\r\n                            null === (_this$_editPopup6 = this._editPopup) || void 0 === _this$_editPopup6 ? void 0 : _this$_editPopup6.repaint()\r\n                        })\r\n                    }\r\n                },\r\n                getEditForm: function() {\r\n                    return this._editForm\r\n                },\r\n                _endUpdateCore: function() {\r\n                    var _this$_updateEditForm;\r\n                    null === (_this$_updateEditForm = this._updateEditFormDeferred) || void 0 === _this$_updateEditForm ? void 0 : _this$_updateEditForm.resolve()\r\n                },\r\n                _beforeEndSaving: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    if (this.isPopupEditMode()) {\r\n                        var _this$_editPopup7;\r\n                        null === (_this$_editPopup7 = this._editPopup) || void 0 === _this$_editPopup7 ? void 0 : _this$_editPopup7.hide()\r\n                    }\r\n                },\r\n                _processDataItemCore: function(item, _ref) {\r\n                    var {\r\n                        type: type\r\n                    } = _ref;\r\n                    if (this.isPopupEditMode() && type === DATA_EDIT_DATA_INSERT_TYPE) {\r\n                        item.visible = false\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                _editRowFromOptionChangedCore: function(rowIndices, rowIndex) {\r\n                    var isPopupEditMode = this.isPopupEditMode();\r\n                    this.callBase(rowIndices, rowIndex, isPopupEditMode);\r\n                    if (isPopupEditMode) {\r\n                        this._showEditPopup(rowIndex)\r\n                    }\r\n                }\r\n            },\r\n            data: {\r\n                _updateEditItem: function(item) {\r\n                    if (this._editingController.isFormEditMode()) {\r\n                        item.rowType = \"detail\"\r\n                    }\r\n                },\r\n                _getChangedColumnIndices: function(oldItem, newItem, visibleRowIndex, isLiveUpdate) {\r\n                    if (false === isLiveUpdate && newItem.isEditing && this._editingController.isFormEditMode()) {\r\n                        return\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: {\r\n                _renderCellContent: function($cell, options) {\r\n                    if (\"data\" === options.rowType && this._editingController.isPopupEditMode() && false === options.row.visible) {\r\n                        return\r\n                    }\r\n                    this.callBase.apply(this, arguments)\r\n                },\r\n                getCellElements: function(rowIndex) {\r\n                    var $cellElements = this.callBase(rowIndex);\r\n                    var editingController = this._editingController;\r\n                    var editForm = editingController.getEditForm();\r\n                    var editFormRowIndex = editingController.getEditFormRowIndex();\r\n                    if (editFormRowIndex === rowIndex && $cellElements && editForm) {\r\n                        return editForm.$element().find(\".\" + this.addWidgetPrefix(EDIT_FORM_ITEM_CLASS) + \", .\" + BUTTON_CLASS)\r\n                    }\r\n                    return $cellElements\r\n                },\r\n                _getVisibleColumnIndex: function($cells, rowIndex, columnIdentifier) {\r\n                    var editFormRowIndex = this._editingController.getEditFormRowIndex();\r\n                    if (editFormRowIndex === rowIndex && isString(columnIdentifier)) {\r\n                        var column = this._columnsController.columnOption(columnIdentifier);\r\n                        return this._getEditFormEditorVisibleIndex($cells, column)\r\n                    }\r\n                    return this.callBase.apply(this, arguments)\r\n                },\r\n                _getEditFormEditorVisibleIndex: function($cells, column) {\r\n                    var visibleIndex = -1;\r\n                    each($cells, (function(index, cellElement) {\r\n                        var item = $(cellElement).find(\".dx-field-item-content\").data(\"dx-form-item\");\r\n                        if (null !== item && void 0 !== item && item.column && column && item.column.index === column.index) {\r\n                            visibleIndex = index;\r\n                            return false\r\n                        }\r\n                    }));\r\n                    return visibleIndex\r\n                },\r\n                _isFormItem: function(parameters) {\r\n                    var isDetailRow = \"detail\" === parameters.rowType || \"detailAdaptive\" === parameters.rowType;\r\n                    var isPopupEditing = \"data\" === parameters.rowType && this._editingController.isPopupEditMode();\r\n                    return (isDetailRow || isPopupEditing) && parameters.item\r\n                },\r\n                _updateCell: function($cell, parameters) {\r\n                    if (this._isFormItem(parameters)) {\r\n                        this._formItemPrepared(parameters, $cell)\r\n                    } else {\r\n                        this.callBase($cell, parameters)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}