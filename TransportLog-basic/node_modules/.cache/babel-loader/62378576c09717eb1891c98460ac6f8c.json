{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/appointments/cellPositionCalculator.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { isDefined } from \"../../../core/utils/type\";\nimport dateUtils from \"../../../core/utils/date\";\n\nclass BaseStrategy {\n  constructor(options) {\n    this.options = options;\n  }\n\n  get DOMMetaData() {\n    return this.options.DOMMetaData;\n  }\n\n  get appointments() {\n    return this.options.dateSettings;\n  }\n\n  get viewDataProvider() {\n    return this.options.viewDataProvider;\n  }\n\n  get positionHelper() {\n    return this.options.positionHelper;\n  }\n\n  get startViewDate() {\n    return this.options.startViewDate;\n  }\n\n  get viewStartDayHour() {\n    return this.options.viewStartDayHour;\n  }\n\n  get viewEndDayHour() {\n    return this.options.viewEndDayHour;\n  }\n\n  get cellDuration() {\n    return this.options.cellDuration;\n  }\n\n  get getPositionShift() {\n    return this.options.getPositionShiftCallback;\n  }\n\n  get groupCount() {\n    return this.options.groupCount;\n  }\n\n  get rtlEnabled() {\n    return this.options.rtlEnabled;\n  }\n\n  get isVerticalGrouping() {\n    return this.options.isVerticalGroupOrientation;\n  }\n\n  get showAllDayPanel() {\n    return this.options.showAllDayPanel;\n  }\n\n  get supportAllDayRow() {\n    return this.options.supportAllDayRow;\n  }\n\n  get isGroupedAllDayPanel() {\n    return this.options.isGroupedAllDayPanel;\n  }\n\n  get isVirtualScrolling() {\n    return false;\n  }\n\n  calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment) {\n    var result = [];\n    this.appointments.forEach((dateSetting, index) => {\n      var coordinates = this.getCoordinateInfos({\n        appointment: dateSetting,\n        groupIndices: groupIndices,\n        isAllDayRowAppointment: isAllDayRowAppointment,\n        isRecurrentAppointment: isRecurrentAppointment\n      });\n      coordinates.forEach(item => {\n        !!item && result.push(this._prepareObject(item, index));\n      });\n    });\n    return result;\n  }\n\n  getCoordinateInfos(options) {\n    var {\n      appointment: appointment,\n      isAllDayRowAppointment: isAllDayRowAppointment,\n      groupIndices: groupIndices,\n      recurrent: recurrent\n    } = options;\n    var {\n      startDate: startDate\n    } = appointment;\n    var groupIndex = !recurrent ? appointment.source.groupIndex : void 0;\n    return this.getCoordinatesByDateInGroup(startDate, groupIndices, isAllDayRowAppointment, groupIndex);\n  }\n\n  _prepareObject(position, dateSettingIndex) {\n    position.dateSettingIndex = dateSettingIndex;\n    return {\n      coordinates: position,\n      dateSettingIndex: dateSettingIndex\n    };\n  }\n\n  getCoordinatesByDate(date, groupIndex, inAllDayRow) {\n    var validGroupIndex = groupIndex || 0;\n    var cellInfo = {\n      groupIndex: validGroupIndex,\n      startDate: date,\n      isAllDay: inAllDayRow\n    };\n    var positionByMap = this.viewDataProvider.findCellPositionInMap(cellInfo);\n\n    if (!positionByMap) {\n      return;\n    }\n\n    var position = this.getCellPosition(positionByMap, inAllDayRow && !this.isVerticalGrouping);\n    var timeShift = inAllDayRow ? 0 : this.getTimeShift(date);\n    var shift = this.getPositionShift(timeShift, inAllDayRow);\n    var horizontalHMax = this.positionHelper.getHorizontalMax(validGroupIndex, date);\n    var verticalMax = this.positionHelper.getVerticalMax({\n      groupIndex: validGroupIndex,\n      isVirtualScrolling: this.isVirtualScrolling,\n      showAllDayPanel: this.showAllDayPanel,\n      supportAllDayRow: this.supportAllDayRow,\n      isGroupedAllDayPanel: this.isGroupedAllDayPanel,\n      isVerticalGrouping: this.isVerticalGrouping\n    });\n    return {\n      positionByMap: positionByMap,\n      cellPosition: position.left + shift.cellPosition,\n      top: position.top + shift.top,\n      left: position.left + shift.left,\n      rowIndex: position.rowIndex,\n      columnIndex: position.columnIndex,\n      hMax: horizontalHMax,\n      vMax: verticalMax,\n      groupIndex: validGroupIndex\n    };\n  }\n\n  getCoordinatesByDateInGroup(startDate, groupIndices, inAllDayRow, groupIndex) {\n    var result = [];\n\n    if (this.viewDataProvider.isSkippedDate(startDate)) {\n      return result;\n    }\n\n    var validGroupIndices = [groupIndex];\n\n    if (!isDefined(groupIndex)) {\n      validGroupIndices = this.groupCount ? groupIndices : [0];\n    }\n\n    validGroupIndices.forEach(groupIndex => {\n      var coordinates = this.getCoordinatesByDate(startDate, groupIndex, inAllDayRow);\n\n      if (coordinates) {\n        result.push(coordinates);\n      }\n    });\n    return result;\n  }\n\n  getCellPosition(cellCoordinates, isAllDayPanel) {\n    var {\n      dateTableCellsMeta: dateTableCellsMeta,\n      allDayPanelCellsMeta: allDayPanelCellsMeta\n    } = this.DOMMetaData;\n    var {\n      columnIndex: columnIndex,\n      rowIndex: rowIndex\n    } = cellCoordinates;\n    var position = isAllDayPanel ? allDayPanelCellsMeta[columnIndex] : dateTableCellsMeta[rowIndex][columnIndex];\n\n    var validPosition = _extends({}, position);\n\n    if (this.rtlEnabled) {\n      validPosition.left += position.width;\n    }\n\n    if (validPosition) {\n      validPosition.rowIndex = cellCoordinates.rowIndex;\n      validPosition.columnIndex = cellCoordinates.columnIndex;\n    }\n\n    return validPosition;\n  }\n\n  getTimeShift(date) {\n    var currentDayStart = new Date(date);\n    var currentDayEndHour = new Date(new Date(date).setHours(this.viewEndDayHour, 0, 0));\n\n    if (date.getTime() <= currentDayEndHour.getTime()) {\n      currentDayStart.setHours(this.viewStartDayHour, 0, 0, 0);\n    }\n\n    var timeZoneDifference = dateUtils.getTimezonesDifference(date, currentDayStart);\n    var currentDateTime = date.getTime();\n    var currentDayStartTime = currentDayStart.getTime();\n    var minTime = this.startViewDate.getTime();\n    return currentDateTime > minTime ? (currentDateTime - currentDayStartTime + timeZoneDifference) % this.cellDuration / this.cellDuration : 0;\n  }\n\n}\n\nclass VirtualStrategy extends BaseStrategy {\n  get isVirtualScrolling() {\n    return true;\n  }\n\n  calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment) {\n    var appointments = isAllDayRowAppointment ? this.appointments : this.appointments.filter(_ref => {\n      var {\n        source: source,\n        startDate: startDate,\n        endDate: endDate\n      } = _ref;\n      return this.viewDataProvider.isGroupIntersectDateInterval(source.groupIndex, startDate, endDate);\n    });\n\n    if (isRecurrentAppointment) {\n      return this.createRecurrentAppointmentInfos(appointments, isAllDayRowAppointment);\n    }\n\n    return super.calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment);\n  }\n\n  createRecurrentAppointmentInfos(dateSettings, isAllDayRowAppointment) {\n    var result = [];\n    dateSettings.forEach((_ref2, index) => {\n      var {\n        source: source,\n        startDate: startDate\n      } = _ref2;\n      var coordinate = this.getCoordinatesByDate(startDate, source.groupIndex, isAllDayRowAppointment);\n\n      if (coordinate) {\n        result.push(this._prepareObject(coordinate, index));\n      }\n    });\n    return result;\n  }\n\n}\n\nexport class CellPositionCalculator {\n  constructor(options) {\n    this.options = options;\n  }\n\n  calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment) {\n    var strategy = this.options.isVirtualScrolling ? new VirtualStrategy(this.options) : new BaseStrategy(this.options);\n    return strategy.calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/scheduler/appointments/cellPositionCalculator.js"],"names":["_extends","isDefined","dateUtils","BaseStrategy","constructor","options","DOMMetaData","appointments","dateSettings","viewDataProvider","positionHelper","startViewDate","viewStartDayHour","viewEndDayHour","cellDuration","getPositionShift","getPositionShiftCallback","groupCount","rtlEnabled","isVerticalGrouping","isVerticalGroupOrientation","showAllDayPanel","supportAllDayRow","isGroupedAllDayPanel","isVirtualScrolling","calculateCellPositions","groupIndices","isAllDayRowAppointment","isRecurrentAppointment","result","forEach","dateSetting","index","coordinates","getCoordinateInfos","appointment","item","push","_prepareObject","recurrent","startDate","groupIndex","source","getCoordinatesByDateInGroup","position","dateSettingIndex","getCoordinatesByDate","date","inAllDayRow","validGroupIndex","cellInfo","isAllDay","positionByMap","findCellPositionInMap","getCellPosition","timeShift","getTimeShift","shift","horizontalHMax","getHorizontalMax","verticalMax","getVerticalMax","cellPosition","left","top","rowIndex","columnIndex","hMax","vMax","isSkippedDate","validGroupIndices","cellCoordinates","isAllDayPanel","dateTableCellsMeta","allDayPanelCellsMeta","validPosition","width","currentDayStart","Date","currentDayEndHour","setHours","getTime","timeZoneDifference","getTimezonesDifference","currentDateTime","currentDayStartTime","minTime","VirtualStrategy","filter","_ref","endDate","isGroupIntersectDateInterval","createRecurrentAppointmentInfos","_ref2","coordinate","CellPositionCalculator","strategy"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/appointments/cellPositionCalculator.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport {\r\n    isDefined\r\n} from \"../../../core/utils/type\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nclass BaseStrategy {\r\n    constructor(options) {\r\n        this.options = options\r\n    }\r\n    get DOMMetaData() {\r\n        return this.options.DOMMetaData\r\n    }\r\n    get appointments() {\r\n        return this.options.dateSettings\r\n    }\r\n    get viewDataProvider() {\r\n        return this.options.viewDataProvider\r\n    }\r\n    get positionHelper() {\r\n        return this.options.positionHelper\r\n    }\r\n    get startViewDate() {\r\n        return this.options.startViewDate\r\n    }\r\n    get viewStartDayHour() {\r\n        return this.options.viewStartDayHour\r\n    }\r\n    get viewEndDayHour() {\r\n        return this.options.viewEndDayHour\r\n    }\r\n    get cellDuration() {\r\n        return this.options.cellDuration\r\n    }\r\n    get getPositionShift() {\r\n        return this.options.getPositionShiftCallback\r\n    }\r\n    get groupCount() {\r\n        return this.options.groupCount\r\n    }\r\n    get rtlEnabled() {\r\n        return this.options.rtlEnabled\r\n    }\r\n    get isVerticalGrouping() {\r\n        return this.options.isVerticalGroupOrientation\r\n    }\r\n    get showAllDayPanel() {\r\n        return this.options.showAllDayPanel\r\n    }\r\n    get supportAllDayRow() {\r\n        return this.options.supportAllDayRow\r\n    }\r\n    get isGroupedAllDayPanel() {\r\n        return this.options.isGroupedAllDayPanel\r\n    }\r\n    get isVirtualScrolling() {\r\n        return false\r\n    }\r\n    calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment) {\r\n        var result = [];\r\n        this.appointments.forEach((dateSetting, index) => {\r\n            var coordinates = this.getCoordinateInfos({\r\n                appointment: dateSetting,\r\n                groupIndices: groupIndices,\r\n                isAllDayRowAppointment: isAllDayRowAppointment,\r\n                isRecurrentAppointment: isRecurrentAppointment\r\n            });\r\n            coordinates.forEach(item => {\r\n                !!item && result.push(this._prepareObject(item, index))\r\n            })\r\n        });\r\n        return result\r\n    }\r\n    getCoordinateInfos(options) {\r\n        var {\r\n            appointment: appointment,\r\n            isAllDayRowAppointment: isAllDayRowAppointment,\r\n            groupIndices: groupIndices,\r\n            recurrent: recurrent\r\n        } = options;\r\n        var {\r\n            startDate: startDate\r\n        } = appointment;\r\n        var groupIndex = !recurrent ? appointment.source.groupIndex : void 0;\r\n        return this.getCoordinatesByDateInGroup(startDate, groupIndices, isAllDayRowAppointment, groupIndex)\r\n    }\r\n    _prepareObject(position, dateSettingIndex) {\r\n        position.dateSettingIndex = dateSettingIndex;\r\n        return {\r\n            coordinates: position,\r\n            dateSettingIndex: dateSettingIndex\r\n        }\r\n    }\r\n    getCoordinatesByDate(date, groupIndex, inAllDayRow) {\r\n        var validGroupIndex = groupIndex || 0;\r\n        var cellInfo = {\r\n            groupIndex: validGroupIndex,\r\n            startDate: date,\r\n            isAllDay: inAllDayRow\r\n        };\r\n        var positionByMap = this.viewDataProvider.findCellPositionInMap(cellInfo);\r\n        if (!positionByMap) {\r\n            return\r\n        }\r\n        var position = this.getCellPosition(positionByMap, inAllDayRow && !this.isVerticalGrouping);\r\n        var timeShift = inAllDayRow ? 0 : this.getTimeShift(date);\r\n        var shift = this.getPositionShift(timeShift, inAllDayRow);\r\n        var horizontalHMax = this.positionHelper.getHorizontalMax(validGroupIndex, date);\r\n        var verticalMax = this.positionHelper.getVerticalMax({\r\n            groupIndex: validGroupIndex,\r\n            isVirtualScrolling: this.isVirtualScrolling,\r\n            showAllDayPanel: this.showAllDayPanel,\r\n            supportAllDayRow: this.supportAllDayRow,\r\n            isGroupedAllDayPanel: this.isGroupedAllDayPanel,\r\n            isVerticalGrouping: this.isVerticalGrouping\r\n        });\r\n        return {\r\n            positionByMap: positionByMap,\r\n            cellPosition: position.left + shift.cellPosition,\r\n            top: position.top + shift.top,\r\n            left: position.left + shift.left,\r\n            rowIndex: position.rowIndex,\r\n            columnIndex: position.columnIndex,\r\n            hMax: horizontalHMax,\r\n            vMax: verticalMax,\r\n            groupIndex: validGroupIndex\r\n        }\r\n    }\r\n    getCoordinatesByDateInGroup(startDate, groupIndices, inAllDayRow, groupIndex) {\r\n        var result = [];\r\n        if (this.viewDataProvider.isSkippedDate(startDate)) {\r\n            return result\r\n        }\r\n        var validGroupIndices = [groupIndex];\r\n        if (!isDefined(groupIndex)) {\r\n            validGroupIndices = this.groupCount ? groupIndices : [0]\r\n        }\r\n        validGroupIndices.forEach(groupIndex => {\r\n            var coordinates = this.getCoordinatesByDate(startDate, groupIndex, inAllDayRow);\r\n            if (coordinates) {\r\n                result.push(coordinates)\r\n            }\r\n        });\r\n        return result\r\n    }\r\n    getCellPosition(cellCoordinates, isAllDayPanel) {\r\n        var {\r\n            dateTableCellsMeta: dateTableCellsMeta,\r\n            allDayPanelCellsMeta: allDayPanelCellsMeta\r\n        } = this.DOMMetaData;\r\n        var {\r\n            columnIndex: columnIndex,\r\n            rowIndex: rowIndex\r\n        } = cellCoordinates;\r\n        var position = isAllDayPanel ? allDayPanelCellsMeta[columnIndex] : dateTableCellsMeta[rowIndex][columnIndex];\r\n        var validPosition = _extends({}, position);\r\n        if (this.rtlEnabled) {\r\n            validPosition.left += position.width\r\n        }\r\n        if (validPosition) {\r\n            validPosition.rowIndex = cellCoordinates.rowIndex;\r\n            validPosition.columnIndex = cellCoordinates.columnIndex\r\n        }\r\n        return validPosition\r\n    }\r\n    getTimeShift(date) {\r\n        var currentDayStart = new Date(date);\r\n        var currentDayEndHour = new Date(new Date(date).setHours(this.viewEndDayHour, 0, 0));\r\n        if (date.getTime() <= currentDayEndHour.getTime()) {\r\n            currentDayStart.setHours(this.viewStartDayHour, 0, 0, 0)\r\n        }\r\n        var timeZoneDifference = dateUtils.getTimezonesDifference(date, currentDayStart);\r\n        var currentDateTime = date.getTime();\r\n        var currentDayStartTime = currentDayStart.getTime();\r\n        var minTime = this.startViewDate.getTime();\r\n        return currentDateTime > minTime ? (currentDateTime - currentDayStartTime + timeZoneDifference) % this.cellDuration / this.cellDuration : 0\r\n    }\r\n}\r\nclass VirtualStrategy extends BaseStrategy {\r\n    get isVirtualScrolling() {\r\n        return true\r\n    }\r\n    calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment) {\r\n        var appointments = isAllDayRowAppointment ? this.appointments : this.appointments.filter(_ref => {\r\n            var {\r\n                source: source,\r\n                startDate: startDate,\r\n                endDate: endDate\r\n            } = _ref;\r\n            return this.viewDataProvider.isGroupIntersectDateInterval(source.groupIndex, startDate, endDate)\r\n        });\r\n        if (isRecurrentAppointment) {\r\n            return this.createRecurrentAppointmentInfos(appointments, isAllDayRowAppointment)\r\n        }\r\n        return super.calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment)\r\n    }\r\n    createRecurrentAppointmentInfos(dateSettings, isAllDayRowAppointment) {\r\n        var result = [];\r\n        dateSettings.forEach((_ref2, index) => {\r\n            var {\r\n                source: source,\r\n                startDate: startDate\r\n            } = _ref2;\r\n            var coordinate = this.getCoordinatesByDate(startDate, source.groupIndex, isAllDayRowAppointment);\r\n            if (coordinate) {\r\n                result.push(this._prepareObject(coordinate, index))\r\n            }\r\n        });\r\n        return result\r\n    }\r\n}\r\nexport class CellPositionCalculator {\r\n    constructor(options) {\r\n        this.options = options\r\n    }\r\n    calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment) {\r\n        var strategy = this.options.isVirtualScrolling ? new VirtualStrategy(this.options) : new BaseStrategy(this.options);\r\n        return strategy.calculateCellPositions(groupIndices, isAllDayRowAppointment, isRecurrentAppointment)\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}