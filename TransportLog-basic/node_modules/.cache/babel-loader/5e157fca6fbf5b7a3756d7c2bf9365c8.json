{"ast":null,"code":"/**\r\n * DevExtreme (esm/core/utils/date_serialization.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport config from \"../config\";\nimport { getFormatter as getLDMLFormatter } from \"../../localization/ldml/date.formatter\";\nimport defaultDateNames from \"../../localization/default_date_names\";\nimport { isString, isDate, isNumeric as isNumber } from \"./type\";\nvar NUMBER_SERIALIZATION_FORMAT = \"number\";\nvar DATE_SERIALIZATION_FORMAT = \"yyyy/MM/dd\";\nvar DATETIME_SERIALIZATION_FORMAT = \"yyyy/MM/dd HH:mm:ss\";\nvar ISO8601_PATTERN = /^(\\d{4,})(-)?(\\d{2})(-)?(\\d{2})(?:T(\\d{2})(:)?(\\d{2})?(:)?(\\d{2}(?:\\.(\\d{1,3})\\d*)?)?)?(Z|([+-])(\\d{2})(:)?(\\d{2})?)?$/;\nvar ISO8601_TIME_PATTERN = /^(\\d{2}):(\\d{2})(:(\\d{2}))?$/;\nvar ISO8601_PATTERN_PARTS = [\"\", \"yyyy\", \"\", \"MM\", \"\", \"dd\", \"THH\", \"\", \"mm\", \"\", \"ss\", \".SSS\"];\nvar DATE_SERIALIZATION_PATTERN = /^(\\d{4})\\/(\\d{2})\\/(\\d{2})$/;\nvar MILLISECOND_LENGHT = 3;\n\nvar dateParser = function (text, skipISO8601Parsing) {\n  var result;\n\n  if (isString(text) && !skipISO8601Parsing) {\n    result = parseISO8601String(text);\n  }\n\n  return result || parseDate(text);\n};\n\nfunction getTimePart(part) {\n  return +part || 0;\n}\n\nfunction parseDate(text) {\n  var isDefaultSerializationFormat = getDateSerializationFormat(text) === DATE_SERIALIZATION_FORMAT;\n  var parsedValue = !isDate(text) && Date.parse(text);\n\n  if (!parsedValue && isDefaultSerializationFormat) {\n    var parts = text.match(DATE_SERIALIZATION_PATTERN);\n\n    if (parts) {\n      var newDate = new Date(getTimePart(parts[1]), getTimePart(parts[2]), getTimePart(parts[3]));\n      newDate.setFullYear(getTimePart(parts[1]));\n      newDate.setMonth(getTimePart(parts[2]) - 1);\n      newDate.setDate(getTimePart(parts[3]));\n      return newDate;\n    }\n  }\n\n  return isNumber(parsedValue) ? new Date(parsedValue) : text;\n}\n\nfunction parseISO8601String(text) {\n  var parts = text.match(ISO8601_PATTERN);\n\n  if (!parts) {\n    parts = text.match(ISO8601_TIME_PATTERN);\n\n    if (parts) {\n      return new Date(0, 0, 0, getTimePart(parts[1]), getTimePart(parts[2]), getTimePart(parts[4]));\n    }\n\n    return;\n  }\n\n  var year = getTimePart(parts[1]);\n  var month = --parts[3];\n  var day = parts[5];\n  var timeZoneHour = 0;\n  var timeZoneMinute = 0;\n\n  var correctYear = d => {\n    year < 100 && d.setFullYear(year);\n    return d;\n  };\n\n  timeZoneHour = getTimePart(parts[14]);\n  timeZoneMinute = getTimePart(parts[16]);\n\n  if (\"-\" === parts[13]) {\n    timeZoneHour = -timeZoneHour;\n    timeZoneMinute = -timeZoneMinute;\n  }\n\n  var hour = getTimePart(parts[6]) - timeZoneHour;\n  var minute = getTimePart(parts[8]) - timeZoneMinute;\n  var second = getTimePart(parts[10]);\n\n  var millisecond = function (part) {\n    part = part || \"\";\n    return getTimePart(part) * Math.pow(10, MILLISECOND_LENGHT - part.length);\n  }(parts[11]);\n\n  if (parts[12]) {\n    return correctYear(new Date(Date.UTC(year, month, day, hour, minute, second, millisecond)));\n  }\n\n  return correctYear(new Date(year, month, day, hour, minute, second, millisecond));\n}\n\nvar getIso8601Format = function (text, useUtc) {\n  var parts = text.match(ISO8601_PATTERN);\n  var result = \"\";\n\n  if (!parts) {\n    parts = text.match(ISO8601_TIME_PATTERN);\n\n    if (parts) {\n      return parts[3] ? \"HH:mm:ss\" : \"HH:mm\";\n    }\n\n    return;\n  }\n\n  for (var i = 1; i < ISO8601_PATTERN_PARTS.length; i++) {\n    if (parts[i]) {\n      result += ISO8601_PATTERN_PARTS[i] || parts[i];\n    }\n  }\n\n  if (\"Z\" === parts[12]) {\n    result += \"'Z'\";\n  }\n\n  if (parts[14]) {\n    if (parts[15]) {\n      result += \"xxx\";\n    } else if (parts[16]) {\n      result += \"xx\";\n    } else {\n      result += \"x\";\n    }\n  }\n\n  return result;\n};\n\nvar deserializeDate = function (value) {\n  if (\"number\" === typeof value) {\n    return new Date(value);\n  }\n\n  return dateParser(value, !config().forceIsoDateParsing);\n};\n\nvar serializeDate = function (value, serializationFormat) {\n  if (!serializationFormat) {\n    return value;\n  }\n\n  if (!isDate(value)) {\n    return null;\n  }\n\n  if (serializationFormat === NUMBER_SERIALIZATION_FORMAT) {\n    return value && value.valueOf ? value.valueOf() : null;\n  }\n\n  return getLDMLFormatter(serializationFormat, defaultDateNames)(value);\n};\n\nvar getDateSerializationFormat = function (value) {\n  if (\"number\" === typeof value) {\n    return NUMBER_SERIALIZATION_FORMAT;\n  } else if (isString(value)) {\n    var format;\n\n    if (config().forceIsoDateParsing) {\n      format = getIso8601Format(value);\n    }\n\n    if (format) {\n      return format;\n    } else if (value.indexOf(\":\") >= 0) {\n      return DATETIME_SERIALIZATION_FORMAT;\n    } else {\n      return DATE_SERIALIZATION_FORMAT;\n    }\n  } else if (value) {\n    return null;\n  }\n};\n\nexport default {\n  dateParser: dateParser,\n  deserializeDate: deserializeDate,\n  serializeDate: serializeDate,\n  getDateSerializationFormat: getDateSerializationFormat\n};","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/core/utils/date_serialization.js"],"names":["config","getFormatter","getLDMLFormatter","defaultDateNames","isString","isDate","isNumeric","isNumber","NUMBER_SERIALIZATION_FORMAT","DATE_SERIALIZATION_FORMAT","DATETIME_SERIALIZATION_FORMAT","ISO8601_PATTERN","ISO8601_TIME_PATTERN","ISO8601_PATTERN_PARTS","DATE_SERIALIZATION_PATTERN","MILLISECOND_LENGHT","dateParser","text","skipISO8601Parsing","result","parseISO8601String","parseDate","getTimePart","part","isDefaultSerializationFormat","getDateSerializationFormat","parsedValue","Date","parse","parts","match","newDate","setFullYear","setMonth","setDate","year","month","day","timeZoneHour","timeZoneMinute","correctYear","d","hour","minute","second","millisecond","Math","pow","length","UTC","getIso8601Format","useUtc","i","deserializeDate","value","forceIsoDateParsing","serializeDate","serializationFormat","valueOf","format","indexOf"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/core/utils/date_serialization.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport config from \"../config\";\r\nimport {\r\n    getFormatter as getLDMLFormatter\r\n} from \"../../localization/ldml/date.formatter\";\r\nimport defaultDateNames from \"../../localization/default_date_names\";\r\nimport {\r\n    isString,\r\n    isDate,\r\n    isNumeric as isNumber\r\n} from \"./type\";\r\nvar NUMBER_SERIALIZATION_FORMAT = \"number\";\r\nvar DATE_SERIALIZATION_FORMAT = \"yyyy/MM/dd\";\r\nvar DATETIME_SERIALIZATION_FORMAT = \"yyyy/MM/dd HH:mm:ss\";\r\nvar ISO8601_PATTERN = /^(\\d{4,})(-)?(\\d{2})(-)?(\\d{2})(?:T(\\d{2})(:)?(\\d{2})?(:)?(\\d{2}(?:\\.(\\d{1,3})\\d*)?)?)?(Z|([+-])(\\d{2})(:)?(\\d{2})?)?$/;\r\nvar ISO8601_TIME_PATTERN = /^(\\d{2}):(\\d{2})(:(\\d{2}))?$/;\r\nvar ISO8601_PATTERN_PARTS = [\"\", \"yyyy\", \"\", \"MM\", \"\", \"dd\", \"THH\", \"\", \"mm\", \"\", \"ss\", \".SSS\"];\r\nvar DATE_SERIALIZATION_PATTERN = /^(\\d{4})\\/(\\d{2})\\/(\\d{2})$/;\r\nvar MILLISECOND_LENGHT = 3;\r\nvar dateParser = function(text, skipISO8601Parsing) {\r\n    var result;\r\n    if (isString(text) && !skipISO8601Parsing) {\r\n        result = parseISO8601String(text)\r\n    }\r\n    return result || parseDate(text)\r\n};\r\n\r\nfunction getTimePart(part) {\r\n    return +part || 0\r\n}\r\n\r\nfunction parseDate(text) {\r\n    var isDefaultSerializationFormat = getDateSerializationFormat(text) === DATE_SERIALIZATION_FORMAT;\r\n    var parsedValue = !isDate(text) && Date.parse(text);\r\n    if (!parsedValue && isDefaultSerializationFormat) {\r\n        var parts = text.match(DATE_SERIALIZATION_PATTERN);\r\n        if (parts) {\r\n            var newDate = new Date(getTimePart(parts[1]), getTimePart(parts[2]), getTimePart(parts[3]));\r\n            newDate.setFullYear(getTimePart(parts[1]));\r\n            newDate.setMonth(getTimePart(parts[2]) - 1);\r\n            newDate.setDate(getTimePart(parts[3]));\r\n            return newDate\r\n        }\r\n    }\r\n    return isNumber(parsedValue) ? new Date(parsedValue) : text\r\n}\r\n\r\nfunction parseISO8601String(text) {\r\n    var parts = text.match(ISO8601_PATTERN);\r\n    if (!parts) {\r\n        parts = text.match(ISO8601_TIME_PATTERN);\r\n        if (parts) {\r\n            return new Date(0, 0, 0, getTimePart(parts[1]), getTimePart(parts[2]), getTimePart(parts[4]))\r\n        }\r\n        return\r\n    }\r\n    var year = getTimePart(parts[1]);\r\n    var month = --parts[3];\r\n    var day = parts[5];\r\n    var timeZoneHour = 0;\r\n    var timeZoneMinute = 0;\r\n    var correctYear = d => {\r\n        year < 100 && d.setFullYear(year);\r\n        return d\r\n    };\r\n    timeZoneHour = getTimePart(parts[14]);\r\n    timeZoneMinute = getTimePart(parts[16]);\r\n    if (\"-\" === parts[13]) {\r\n        timeZoneHour = -timeZoneHour;\r\n        timeZoneMinute = -timeZoneMinute\r\n    }\r\n    var hour = getTimePart(parts[6]) - timeZoneHour;\r\n    var minute = getTimePart(parts[8]) - timeZoneMinute;\r\n    var second = getTimePart(parts[10]);\r\n    var millisecond = function(part) {\r\n        part = part || \"\";\r\n        return getTimePart(part) * Math.pow(10, MILLISECOND_LENGHT - part.length)\r\n    }(parts[11]);\r\n    if (parts[12]) {\r\n        return correctYear(new Date(Date.UTC(year, month, day, hour, minute, second, millisecond)))\r\n    }\r\n    return correctYear(new Date(year, month, day, hour, minute, second, millisecond))\r\n}\r\nvar getIso8601Format = function(text, useUtc) {\r\n    var parts = text.match(ISO8601_PATTERN);\r\n    var result = \"\";\r\n    if (!parts) {\r\n        parts = text.match(ISO8601_TIME_PATTERN);\r\n        if (parts) {\r\n            return parts[3] ? \"HH:mm:ss\" : \"HH:mm\"\r\n        }\r\n        return\r\n    }\r\n    for (var i = 1; i < ISO8601_PATTERN_PARTS.length; i++) {\r\n        if (parts[i]) {\r\n            result += ISO8601_PATTERN_PARTS[i] || parts[i]\r\n        }\r\n    }\r\n    if (\"Z\" === parts[12]) {\r\n        result += \"'Z'\"\r\n    }\r\n    if (parts[14]) {\r\n        if (parts[15]) {\r\n            result += \"xxx\"\r\n        } else if (parts[16]) {\r\n            result += \"xx\"\r\n        } else {\r\n            result += \"x\"\r\n        }\r\n    }\r\n    return result\r\n};\r\nvar deserializeDate = function(value) {\r\n    if (\"number\" === typeof value) {\r\n        return new Date(value)\r\n    }\r\n    return dateParser(value, !config().forceIsoDateParsing)\r\n};\r\nvar serializeDate = function(value, serializationFormat) {\r\n    if (!serializationFormat) {\r\n        return value\r\n    }\r\n    if (!isDate(value)) {\r\n        return null\r\n    }\r\n    if (serializationFormat === NUMBER_SERIALIZATION_FORMAT) {\r\n        return value && value.valueOf ? value.valueOf() : null\r\n    }\r\n    return getLDMLFormatter(serializationFormat, defaultDateNames)(value)\r\n};\r\nvar getDateSerializationFormat = function(value) {\r\n    if (\"number\" === typeof value) {\r\n        return NUMBER_SERIALIZATION_FORMAT\r\n    } else if (isString(value)) {\r\n        var format;\r\n        if (config().forceIsoDateParsing) {\r\n            format = getIso8601Format(value)\r\n        }\r\n        if (format) {\r\n            return format\r\n        } else if (value.indexOf(\":\") >= 0) {\r\n            return DATETIME_SERIALIZATION_FORMAT\r\n        } else {\r\n            return DATE_SERIALIZATION_FORMAT\r\n        }\r\n    } else if (value) {\r\n        return null\r\n    }\r\n};\r\nexport default {\r\n    dateParser: dateParser,\r\n    deserializeDate: deserializeDate,\r\n    serializeDate: serializeDate,\r\n    getDateSerializationFormat: getDateSerializationFormat\r\n};\r\n"]},"metadata":{},"sourceType":"module"}