{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.sorting.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { name as clickEventName } from \"../../events/click\";\nimport { isDefined } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport sortingMixin from \"../grid_core/ui.grid_core.sorting_mixin\";\nimport messageLocalization from \"../../localization/message\";\nimport { addNamespace, isCommandKeyPressed } from \"../../events/utils/index\";\nvar COLUMN_HEADERS_VIEW_NAMESPACE = \"dxDataGridColumnHeadersView\";\nvar ColumnHeadersViewSortingExtender = extend({}, sortingMixin, {\n  _createRow(row) {\n    var $row = this.callBase(row);\n\n    if (\"header\" === row.rowType) {\n      eventsEngine.on($row, addNamespace(clickEventName, COLUMN_HEADERS_VIEW_NAMESPACE), \"td\", this.createAction(e => {\n        this._processHeaderAction(e.event, $row);\n      }));\n    }\n\n    return $row;\n  },\n\n  _processHeaderAction: function (event, $row) {\n    if ($(event.currentTarget).parent().get(0) !== $row.get(0)) {\n      return;\n    }\n\n    var that = this;\n    var keyName = null;\n    var $cellElementFromEvent = $(event.currentTarget);\n    var rowIndex = $cellElementFromEvent.parent().index();\n    var columnIndex = -1;\n    [].slice.call(that.getCellElements(rowIndex)).some(($cellElement, index) => {\n      if ($cellElement === $cellElementFromEvent.get(0)) {\n        columnIndex = index;\n        return true;\n      }\n    });\n\n    var visibleColumns = that._columnsController.getVisibleColumns(rowIndex);\n\n    var column = visibleColumns[columnIndex];\n    var editingController = that.getController(\"editing\");\n    var editingMode = that.option(\"editing.mode\");\n    var isCellEditing = editingController && editingController.isEditing() && (\"batch\" === editingMode || \"cell\" === editingMode);\n\n    if (isCellEditing || !that._isSortableElement($(event.target))) {\n      return;\n    }\n\n    if (column && !isDefined(column.groupIndex) && !column.command) {\n      if (event.shiftKey) {\n        keyName = \"shift\";\n      } else if (isCommandKeyPressed(event)) {\n        keyName = \"ctrl\";\n      }\n\n      setTimeout(() => {\n        that._columnsController.changeSortOrder(column.index, keyName);\n      });\n    }\n  },\n\n  _renderCellContent($cell, options) {\n    var column = options.column;\n\n    if (!column.command && \"header\" === options.rowType) {\n      this._applyColumnState({\n        name: \"sort\",\n        rootElement: $cell,\n        column: column,\n        showColumnLines: this.option(\"showColumnLines\")\n      });\n    }\n\n    this.callBase.apply(this, arguments);\n  },\n\n  _columnOptionChanged(e) {\n    var changeTypes = e.changeTypes;\n\n    if (1 === changeTypes.length && changeTypes.sorting) {\n      this._updateIndicators(\"sort\");\n\n      return;\n    }\n\n    this.callBase(e);\n  },\n\n  optionChanged(args) {\n    switch (args.name) {\n      case \"sorting\":\n        this._invalidate();\n\n        args.handled = true;\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n\n});\nvar HeaderPanelSortingExtender = extend({}, sortingMixin, {\n  _createGroupPanelItem($rootElement, groupColumn) {\n    var that = this;\n    var $item = that.callBase(...arguments);\n    eventsEngine.on($item, addNamespace(clickEventName, \"dxDataGridHeaderPanel\"), that.createAction(() => {\n      that._processGroupItemAction(groupColumn.index);\n    }));\n\n    that._applyColumnState({\n      name: \"sort\",\n      rootElement: $item,\n      column: {\n        alignment: that.option(\"rtlEnabled\") ? \"right\" : \"left\",\n        allowSorting: groupColumn.allowSorting,\n        sortOrder: \"desc\" === groupColumn.sortOrder ? \"desc\" : \"asc\"\n      },\n      showColumnLines: true\n    });\n\n    return $item;\n  },\n\n  _processGroupItemAction(groupColumnIndex) {\n    setTimeout(() => this.getController(\"columns\").changeSortOrder(groupColumnIndex));\n  },\n\n  optionChanged(args) {\n    switch (args.name) {\n      case \"sorting\":\n        this._invalidate();\n\n        args.handled = true;\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  }\n\n});\nexport var sortingModule = {\n  defaultOptions: () => ({\n    sorting: {\n      mode: \"single\",\n      ascendingText: messageLocalization.format(\"dxDataGrid-sortingAscendingText\"),\n      descendingText: messageLocalization.format(\"dxDataGrid-sortingDescendingText\"),\n      clearText: messageLocalization.format(\"dxDataGrid-sortingClearText\"),\n      showSortIndexes: true\n    }\n  }),\n  extenders: {\n    views: {\n      columnHeadersView: ColumnHeadersViewSortingExtender,\n      headerPanel: HeaderPanelSortingExtender\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.sorting.js"],"names":["$","eventsEngine","name","clickEventName","isDefined","extend","sortingMixin","messageLocalization","addNamespace","isCommandKeyPressed","COLUMN_HEADERS_VIEW_NAMESPACE","ColumnHeadersViewSortingExtender","_createRow","row","$row","callBase","rowType","on","createAction","e","_processHeaderAction","event","currentTarget","parent","get","that","keyName","$cellElementFromEvent","rowIndex","index","columnIndex","slice","call","getCellElements","some","$cellElement","visibleColumns","_columnsController","getVisibleColumns","column","editingController","getController","editingMode","option","isCellEditing","isEditing","_isSortableElement","target","groupIndex","command","shiftKey","setTimeout","changeSortOrder","_renderCellContent","$cell","options","_applyColumnState","rootElement","showColumnLines","apply","arguments","_columnOptionChanged","changeTypes","length","sorting","_updateIndicators","optionChanged","args","_invalidate","handled","HeaderPanelSortingExtender","_createGroupPanelItem","$rootElement","groupColumn","$item","_processGroupItemAction","alignment","allowSorting","sortOrder","groupColumnIndex","sortingModule","defaultOptions","mode","ascendingText","format","descendingText","clearText","showSortIndexes","extenders","views","columnHeadersView","headerPanel"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.sorting.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    name as clickEventName\r\n} from \"../../events/click\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport sortingMixin from \"../grid_core/ui.grid_core.sorting_mixin\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport {\r\n    addNamespace,\r\n    isCommandKeyPressed\r\n} from \"../../events/utils/index\";\r\nvar COLUMN_HEADERS_VIEW_NAMESPACE = \"dxDataGridColumnHeadersView\";\r\nvar ColumnHeadersViewSortingExtender = extend({}, sortingMixin, {\r\n    _createRow(row) {\r\n        var $row = this.callBase(row);\r\n        if (\"header\" === row.rowType) {\r\n            eventsEngine.on($row, addNamespace(clickEventName, COLUMN_HEADERS_VIEW_NAMESPACE), \"td\", this.createAction(e => {\r\n                this._processHeaderAction(e.event, $row)\r\n            }))\r\n        }\r\n        return $row\r\n    },\r\n    _processHeaderAction: function(event, $row) {\r\n        if ($(event.currentTarget).parent().get(0) !== $row.get(0)) {\r\n            return\r\n        }\r\n        var that = this;\r\n        var keyName = null;\r\n        var $cellElementFromEvent = $(event.currentTarget);\r\n        var rowIndex = $cellElementFromEvent.parent().index();\r\n        var columnIndex = -1;\r\n        [].slice.call(that.getCellElements(rowIndex)).some(($cellElement, index) => {\r\n            if ($cellElement === $cellElementFromEvent.get(0)) {\r\n                columnIndex = index;\r\n                return true\r\n            }\r\n        });\r\n        var visibleColumns = that._columnsController.getVisibleColumns(rowIndex);\r\n        var column = visibleColumns[columnIndex];\r\n        var editingController = that.getController(\"editing\");\r\n        var editingMode = that.option(\"editing.mode\");\r\n        var isCellEditing = editingController && editingController.isEditing() && (\"batch\" === editingMode || \"cell\" === editingMode);\r\n        if (isCellEditing || !that._isSortableElement($(event.target))) {\r\n            return\r\n        }\r\n        if (column && !isDefined(column.groupIndex) && !column.command) {\r\n            if (event.shiftKey) {\r\n                keyName = \"shift\"\r\n            } else if (isCommandKeyPressed(event)) {\r\n                keyName = \"ctrl\"\r\n            }\r\n            setTimeout(() => {\r\n                that._columnsController.changeSortOrder(column.index, keyName)\r\n            })\r\n        }\r\n    },\r\n    _renderCellContent($cell, options) {\r\n        var column = options.column;\r\n        if (!column.command && \"header\" === options.rowType) {\r\n            this._applyColumnState({\r\n                name: \"sort\",\r\n                rootElement: $cell,\r\n                column: column,\r\n                showColumnLines: this.option(\"showColumnLines\")\r\n            })\r\n        }\r\n        this.callBase.apply(this, arguments)\r\n    },\r\n    _columnOptionChanged(e) {\r\n        var changeTypes = e.changeTypes;\r\n        if (1 === changeTypes.length && changeTypes.sorting) {\r\n            this._updateIndicators(\"sort\");\r\n            return\r\n        }\r\n        this.callBase(e)\r\n    },\r\n    optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"sorting\":\r\n                this._invalidate();\r\n                args.handled = true;\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nvar HeaderPanelSortingExtender = extend({}, sortingMixin, {\r\n    _createGroupPanelItem($rootElement, groupColumn) {\r\n        var that = this;\r\n        var $item = that.callBase(...arguments);\r\n        eventsEngine.on($item, addNamespace(clickEventName, \"dxDataGridHeaderPanel\"), that.createAction(() => {\r\n            that._processGroupItemAction(groupColumn.index)\r\n        }));\r\n        that._applyColumnState({\r\n            name: \"sort\",\r\n            rootElement: $item,\r\n            column: {\r\n                alignment: that.option(\"rtlEnabled\") ? \"right\" : \"left\",\r\n                allowSorting: groupColumn.allowSorting,\r\n                sortOrder: \"desc\" === groupColumn.sortOrder ? \"desc\" : \"asc\"\r\n            },\r\n            showColumnLines: true\r\n        });\r\n        return $item\r\n    },\r\n    _processGroupItemAction(groupColumnIndex) {\r\n        setTimeout(() => this.getController(\"columns\").changeSortOrder(groupColumnIndex))\r\n    },\r\n    optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"sorting\":\r\n                this._invalidate();\r\n                args.handled = true;\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    }\r\n});\r\nexport var sortingModule = {\r\n    defaultOptions: () => ({\r\n        sorting: {\r\n            mode: \"single\",\r\n            ascendingText: messageLocalization.format(\"dxDataGrid-sortingAscendingText\"),\r\n            descendingText: messageLocalization.format(\"dxDataGrid-sortingDescendingText\"),\r\n            clearText: messageLocalization.format(\"dxDataGrid-sortingClearText\"),\r\n            showSortIndexes: true\r\n        }\r\n    }),\r\n    extenders: {\r\n        views: {\r\n            columnHeadersView: ColumnHeadersViewSortingExtender,\r\n            headerPanel: HeaderPanelSortingExtender\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}