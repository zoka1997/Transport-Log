{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/data_grid/ui.data_grid.export.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../core/renderer\";\nimport Class from \"../../core/class\";\nimport { isDefined, isFunction } from \"../../core/utils/type\";\nimport { extend } from \"../../core/utils/extend\";\nimport { getDefaultAlignment } from \"../../core/utils/position\";\nimport dataGridCore from \"./ui.data_grid.core\";\nimport { prepareItems } from \"../grid_core/ui.grid_core.export\";\nimport { export as clientExport, excel } from \"../../exporter\";\nimport { format } from \"../../core/utils/string\";\nimport messageLocalization from \"../../localization/message\";\nimport \"../button\";\nimport \"../drop_down_button\";\nimport List from \"../list_light\";\nimport { when, Deferred } from \"../../core/utils/deferred\";\nvar DATAGRID_EXPORT_MENU_CLASS = \"dx-datagrid-export-menu\";\nvar DATAGRID_EXPORT_BUTTON_CLASS = \"dx-datagrid-export-button\";\nvar DATAGRID_EXPORT_TOOLBAR_BUTTON_NAME = \"exportButton\";\nvar DATAGRID_EXPORT_ICON = \"export\";\nvar DATAGRID_EXPORT_EXCEL_ICON = \"xlsxfile\";\nvar DATAGRID_EXPORT_SELECTED_ICON = \"exportselected\";\nvar DATAGRID_PDF_EXPORT_ICON = \"pdffile\";\nexport var DataProvider = Class.inherit({\n  ctor: function (exportController, initialColumnWidthsByColumnIndex, selectedRowsOnly) {\n    this._exportController = exportController;\n    this._initialColumnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;\n    this._selectedRowsOnly = selectedRowsOnly;\n  },\n  _getGroupValue: function (item) {\n    var {\n      key: key,\n      data: data,\n      rowType: rowType,\n      groupIndex: groupIndex,\n      summaryCells: summaryCells\n    } = item;\n    var groupColumn = this._options.groupColumns[groupIndex];\n    var value = dataGridCore.getDisplayValue(groupColumn, groupColumn.deserializeValue ? groupColumn.deserializeValue(key[groupIndex]) : key[groupIndex], data, rowType);\n    var result = groupColumn.caption + \": \" + dataGridCore.formatValue(value, groupColumn);\n\n    if (summaryCells && summaryCells[0] && summaryCells[0].length) {\n      result += \" \" + dataGridCore.getGroupRowSummaryText(summaryCells[0], this._options.summaryTexts);\n    }\n\n    return result;\n  },\n  _correctCellIndex: function (cellIndex) {\n    return cellIndex;\n  },\n  _initOptions: function () {\n    var exportController = this._exportController;\n\n    var groupColumns = exportController._columnsController.getGroupColumns();\n\n    var excelWrapTextEnabled = exportController.option(\"export.excelWrapTextEnabled\");\n    this._options = {\n      columns: exportController._getColumns(this._initialColumnWidthsByColumnIndex),\n      groupColumns: groupColumns,\n      items: this._selectedRowsOnly || exportController._selectionOnly ? exportController._getSelectedItems() : exportController._getAllItems(),\n      getVisibleIndex: exportController._columnsController.getVisibleIndex.bind(exportController._columnsController),\n      isHeadersVisible: exportController.option(\"showColumnHeaders\"),\n      summaryTexts: exportController.option(\"summary.texts\"),\n      customizeExportData: exportController.option(\"customizeExportData\"),\n      rtlEnabled: exportController.option(\"rtlEnabled\"),\n      wrapTextEnabled: isDefined(excelWrapTextEnabled) ? excelWrapTextEnabled : !!exportController.option(\"wordWrapEnabled\"),\n      customizeExcelCell: exportController.option(\"export.customizeExcelCell\")\n    };\n  },\n  hasCustomizeExcelCell: function () {\n    return isDefined(this._options.customizeExcelCell);\n  },\n  customizeExcelCell: function (e, cellSourceData) {\n    if (this._options.customizeExcelCell) {\n      e.gridCell = cellSourceData;\n\n      if (isDefined(this._exportController) && isDefined(this._exportController.component)) {\n        e.component = this._exportController.component;\n      }\n\n      this._options.customizeExcelCell(e);\n    }\n  },\n  getHeaderStyles: () => [{\n    bold: true,\n    alignment: \"center\",\n    wrapText: true\n  }, {\n    bold: true,\n    alignment: \"left\",\n    wrapText: true\n  }, {\n    bold: true,\n    alignment: \"right\",\n    wrapText: true\n  }],\n\n  getGroupRowStyle() {\n    return {\n      bold: true,\n      wrapText: false,\n      alignment: getDefaultAlignment(this._options.rtlEnabled)\n    };\n  },\n\n  getColumnStyles() {\n    var wrapTextEnabled = this._options.wrapTextEnabled;\n    var columnStyles = [];\n    this.getColumns().forEach(column => {\n      columnStyles.push({\n        alignment: column.alignment || \"left\",\n        format: column.format,\n        wrapText: wrapTextEnabled,\n        dataType: column.dataType\n      });\n    });\n    return columnStyles;\n  },\n\n  getStyles: function () {\n    return [...this.getHeaderStyles(), ...this.getColumnStyles(), this.getGroupRowStyle()];\n  },\n  _getTotalCellStyleId: function (cellIndex) {\n    var _this$getColumns$cell;\n\n    var alignment = (null === (_this$getColumns$cell = this.getColumns()[cellIndex]) || void 0 === _this$getColumns$cell ? void 0 : _this$getColumns$cell.alignment) || \"right\";\n    return this.getHeaderStyles().map(style => style.alignment).indexOf(alignment);\n  },\n  getStyleId: function (rowIndex, cellIndex) {\n    if (rowIndex < this.getHeaderRowCount()) {\n      return 0;\n    } else if (this.isTotalCell(rowIndex - this.getHeaderRowCount(), cellIndex)) {\n      return this._getTotalCellStyleId(cellIndex);\n    } else if (this.isGroupRow(rowIndex - this.getHeaderRowCount())) {\n      return this.getHeaderStyles().length + this.getColumns().length;\n    } else {\n      return cellIndex + this.getHeaderStyles().length;\n    }\n  },\n  getColumns: function (getColumnsByAllRows) {\n    var {\n      columns: columns\n    } = this._options;\n    return getColumnsByAllRows ? columns : columns[columns.length - 1];\n  },\n  getColumnsWidths: function () {\n    var columns = this.getColumns();\n    return isDefined(columns) ? columns.map(c => c.width) : void 0;\n  },\n  getRowsCount: function () {\n    return this._options.items.length + this.getHeaderRowCount();\n  },\n  getHeaderRowCount: function () {\n    if (this.isHeadersVisible()) {\n      return this._options.columns.length - 1;\n    }\n\n    return 0;\n  },\n  isGroupRow: function (rowIndex) {\n    return rowIndex < this._options.items.length && \"group\" === this._options.items[rowIndex].rowType;\n  },\n  getGroupLevel: function (rowIndex) {\n    var item = this._options.items[rowIndex - this.getHeaderRowCount()];\n\n    var groupIndex = item && item.groupIndex;\n\n    if (item && \"totalFooter\" === item.rowType) {\n      return 0;\n    }\n\n    return isDefined(groupIndex) ? groupIndex : this._options.groupColumns.length;\n  },\n  getCellType: function (rowIndex, cellIndex) {\n    var columns = this.getColumns();\n\n    if (rowIndex < this.getHeaderRowCount()) {\n      return \"string\";\n    } else {\n      rowIndex -= this.getHeaderRowCount();\n    }\n\n    if (cellIndex < columns.length) {\n      var item = this._options.items.length && this._options.items[rowIndex];\n      var column = columns[cellIndex];\n\n      if (item && \"data\" === item.rowType) {\n        if (isFinite(item.values[this._correctCellIndex(cellIndex)]) && !isDefined(column.customizeText)) {\n          return isDefined(column.lookup) ? column.lookup.dataType : column.dataType;\n        }\n      }\n\n      return \"string\";\n    }\n  },\n  ready: function () {\n    var that = this;\n\n    that._initOptions();\n\n    var options = that._options;\n    return when(options.items).done(function (items) {\n      options.customizeExportData && options.customizeExportData(that.getColumns(that.getHeaderRowCount() > 1), items);\n      options.items = items;\n    }).fail(function () {\n      options.items = [];\n    });\n  },\n  _convertFromGridGroupSummaryItems: function (gridGroupSummaryItems) {\n    if (isDefined(gridGroupSummaryItems) && gridGroupSummaryItems.length > 0) {\n      return gridGroupSummaryItems.map(function (item) {\n        return {\n          value: item.value,\n          name: item.name\n        };\n      });\n    }\n  },\n  getCellData: function (rowIndex, cellIndex, isExcelJS) {\n    var value;\n    var column;\n    var result = {\n      cellSourceData: {},\n      value: value\n    };\n    var columns = this.getColumns();\n\n    var correctedCellIndex = this._correctCellIndex(cellIndex);\n\n    if (rowIndex < this.getHeaderRowCount()) {\n      var columnsRow = this.getColumns(true)[rowIndex];\n      column = columnsRow[cellIndex];\n      result.cellSourceData.rowType = \"header\";\n      result.cellSourceData.column = column && column.gridColumn;\n      result.value = column && column.caption;\n    } else {\n      rowIndex -= this.getHeaderRowCount();\n      var item = this._options.items.length && this._options.items[rowIndex];\n\n      if (item) {\n        var itemValues = item.values;\n        result.cellSourceData.rowType = item.rowType;\n        result.cellSourceData.column = columns[cellIndex] && columns[cellIndex].gridColumn;\n\n        switch (item.rowType) {\n          case \"groupFooter\":\n          case \"totalFooter\":\n            if (correctedCellIndex < itemValues.length) {\n              value = itemValues[correctedCellIndex];\n\n              if (isDefined(value)) {\n                result.cellSourceData.value = value.value;\n                result.cellSourceData.totalSummaryItemName = value.name;\n                result.value = dataGridCore.getSummaryText(value, this._options.summaryTexts);\n              } else {\n                result.cellSourceData.value = void 0;\n              }\n            }\n\n            break;\n\n          case \"group\":\n            result.cellSourceData.groupIndex = item.groupIndex;\n\n            if (cellIndex < 1) {\n              result.cellSourceData.column = this._options.groupColumns[item.groupIndex];\n              result.cellSourceData.value = item.key[item.groupIndex];\n              result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(item.summaryCells[0]);\n              result.value = this._getGroupValue(item);\n            } else {\n              var summaryItems = item.values[correctedCellIndex];\n\n              if (Array.isArray(summaryItems)) {\n                result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(summaryItems);\n                value = \"\";\n\n                for (var i = 0; i < summaryItems.length; i++) {\n                  value += (i > 0 ? isExcelJS ? \"\\n\" : \" \\n \" : \"\") + dataGridCore.getSummaryText(summaryItems[i], this._options.summaryTexts);\n                }\n\n                result.value = value;\n              } else {\n                result.cellSourceData.value = void 0;\n              }\n            }\n\n            break;\n\n          default:\n            column = columns[cellIndex];\n\n            if (column) {\n              var _value = itemValues[correctedCellIndex];\n              var displayValue = dataGridCore.getDisplayValue(column, _value, item.data, item.rowType);\n\n              if (!isFinite(displayValue) || isDefined(column.customizeText)) {\n                if (isExcelJS && isDefined(column.customizeText) && column.customizeText === this._exportController._columnsController.getCustomizeTextByDataType(\"boolean\")) {\n                  result.value = displayValue;\n                } else {\n                  result.value = dataGridCore.formatValue(displayValue, column);\n                }\n              } else {\n                result.value = displayValue;\n              }\n\n              result.cellSourceData.value = _value;\n            }\n\n            result.cellSourceData.data = item.data;\n        }\n      }\n    }\n\n    return result;\n  },\n  isHeadersVisible: function () {\n    return this._options.isHeadersVisible;\n  },\n  isTotalCell: function (rowIndex, cellIndex) {\n    var items = this._options.items;\n    var item = items[rowIndex];\n\n    var correctCellIndex = this._correctCellIndex(cellIndex);\n\n    var isSummaryAlignByColumn = item.summaryCells && item.summaryCells[correctCellIndex] && item.summaryCells[correctCellIndex].length > 0 && item.summaryCells[correctCellIndex][0].alignByColumn;\n    return item && \"groupFooter\" === item.rowType || \"totalFooter\" === item.rowType || isSummaryAlignByColumn;\n  },\n  getCellMerging: function (rowIndex, cellIndex) {\n    var columns = this._options.columns;\n    var column = columns[rowIndex] && columns[rowIndex][cellIndex];\n    return column ? {\n      colspan: (column.exportColspan || 1) - 1,\n      rowspan: (column.rowspan || 1) - 1\n    } : {\n      colspan: 0,\n      rowspan: 0\n    };\n  },\n  getFrozenArea: function () {\n    return {\n      x: 0,\n      y: this.getHeaderRowCount()\n    };\n  }\n});\nexport var ExportController = dataGridCore.ViewController.inherit({}).inherit({\n  _getEmptyCell: function () {\n    return {\n      caption: \"\",\n      colspan: 1,\n      rowspan: 1\n    };\n  },\n  _updateColumnWidth: function (column, width) {\n    column.width = width;\n  },\n  _getColumns: function (initialColumnWidthsByColumnIndex) {\n    var result = [];\n    var i;\n    var columns;\n    var columnsController = this._columnsController;\n    var rowCount = columnsController.getRowCount();\n\n    for (i = 0; i <= rowCount; i++) {\n      var currentHeaderRow = [];\n      columns = columnsController.getVisibleColumns(i, true);\n      var columnWidthsByColumnIndex = void 0;\n\n      if (i === rowCount) {\n        if (this._updateLockCount) {\n          columnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;\n        } else {\n          var columnWidths = this._getColumnWidths(this._headersView, this._rowsView);\n\n          if (columnWidths && columnWidths.length) {\n            columnWidthsByColumnIndex = {};\n\n            for (var _i = 0; _i < columns.length; _i++) {\n              columnWidthsByColumnIndex[columns[_i].index] = columnWidths[_i];\n            }\n          }\n        }\n      }\n\n      for (var j = 0; j < columns.length; j++) {\n        var column = extend({}, columns[j], {\n          dataType: \"datetime\" === columns[j].dataType ? \"date\" : columns[j].dataType,\n          gridColumn: columns[j]\n        });\n\n        if (this._needColumnExporting(column)) {\n          var currentColspan = this._calculateExportColspan(column);\n\n          if (isDefined(currentColspan)) {\n            column.exportColspan = currentColspan;\n          }\n\n          if (columnWidthsByColumnIndex) {\n            this._updateColumnWidth(column, columnWidthsByColumnIndex[column.index]);\n          }\n\n          currentHeaderRow.push(column);\n        }\n      }\n\n      result.push(currentHeaderRow);\n    }\n\n    columns = result[rowCount];\n    result = prepareItems(result.slice(0, -1), this._getEmptyCell());\n    result.push(columns);\n    return result;\n  },\n  _calculateExportColspan: function (column) {\n    if (!column.isBand) {\n      return;\n    }\n\n    var childColumns = this._columnsController.getChildrenByBandColumn(column.index, true);\n\n    if (!isDefined(childColumns)) {\n      return;\n    }\n\n    return childColumns.reduce((result, childColumn) => {\n      if (this._needColumnExporting(childColumn)) {\n        return result + (this._calculateExportColspan(childColumn) || 1);\n      } else {\n        return result;\n      }\n    }, 0);\n  },\n  _needColumnExporting: function (column) {\n    return !column.command && (column.allowExporting || void 0 === column.allowExporting);\n  },\n  _getFooterSummaryItems: function (summaryCells, isTotal) {\n    var result = [];\n    var estimatedItemsCount = 1;\n    var i = 0;\n\n    do {\n      var values = [];\n\n      for (var j = 0; j < summaryCells.length; j++) {\n        var summaryCell = summaryCells[j];\n        var itemsLength = summaryCell.length;\n\n        if (estimatedItemsCount < itemsLength) {\n          estimatedItemsCount = itemsLength;\n        }\n\n        values.push(summaryCell[i]);\n      }\n\n      result.push({\n        values: values,\n        rowType: isTotal ? \"totalFooter\" : \"groupFooter\"\n      });\n    } while (i++ < estimatedItemsCount - 1);\n\n    return result;\n  },\n  _hasSummaryGroupFooters: function () {\n    var groupItems = this.option(\"summary.groupItems\");\n\n    if (isDefined(groupItems)) {\n      for (var i = 0; i < groupItems.length; i++) {\n        if (groupItems[i].showInGroupFooter) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  },\n  _getItemsWithSummaryGroupFooters: function (sourceItems) {\n    var result = [];\n    var beforeGroupFooterItems = [];\n    var groupFooterItems = [];\n\n    for (var i = 0; i < sourceItems.length; i++) {\n      var item = sourceItems[i];\n\n      if (\"groupFooter\" === item.rowType) {\n        groupFooterItems = this._getFooterSummaryItems(item.summaryCells);\n        result = result.concat(beforeGroupFooterItems, groupFooterItems);\n        beforeGroupFooterItems = [];\n      } else {\n        beforeGroupFooterItems.push(item);\n      }\n    }\n\n    return result.length ? result : beforeGroupFooterItems;\n  },\n  _updateGroupValuesWithSummaryByColumn: function (sourceItems) {\n    var summaryValues = [];\n\n    for (var i = 0; i < sourceItems.length; i++) {\n      var item = sourceItems[i];\n      var summaryCells = item.summaryCells;\n\n      if (\"group\" === item.rowType && summaryCells && summaryCells.length > 1) {\n        var groupColumnCount = item.values.length;\n\n        for (var j = 1; j < summaryCells.length; j++) {\n          for (var k = 0; k < summaryCells[j].length; k++) {\n            var summaryItem = summaryCells[j][k];\n\n            if (summaryItem && summaryItem.alignByColumn) {\n              if (!Array.isArray(summaryValues[j - groupColumnCount])) {\n                summaryValues[j - groupColumnCount] = [];\n              }\n\n              summaryValues[j - groupColumnCount].push(summaryItem);\n            }\n          }\n        }\n\n        if (summaryValues.length > 0) {\n          item.values.push(...summaryValues);\n          summaryValues = [];\n        }\n      }\n    }\n  },\n  _processUnExportedItems: function (items) {\n    var columns = this._columnsController.getVisibleColumns(null, true);\n\n    var groupColumns = this._columnsController.getGroupColumns();\n\n    var values;\n    var summaryCells;\n\n    for (var i = 0; i < items.length; i++) {\n      var item = items[i];\n      var isDetailExpandColumn = false;\n      values = [];\n      summaryCells = [];\n\n      for (var j = 0; j < columns.length; j++) {\n        var column = columns[j];\n        isDetailExpandColumn = isDetailExpandColumn || \"detailExpand\" === column.type;\n\n        if (this._needColumnExporting(column)) {\n          if (item.values) {\n            if (\"group\" === item.rowType && !values.length) {\n              values.push(item.key[item.groupIndex]);\n            } else {\n              values.push(item.values[j]);\n            }\n          }\n\n          if (item.summaryCells) {\n            if (\"group\" === item.rowType && !summaryCells.length) {\n              var index = j - groupColumns.length + item.groupIndex;\n              summaryCells.push(item.summaryCells[isDetailExpandColumn ? index : index + 1]);\n            } else {\n              summaryCells.push(item.summaryCells[j]);\n            }\n          }\n        }\n      }\n\n      if (values.length) {\n        item.values = values;\n      }\n\n      if (summaryCells.length) {\n        item.summaryCells = summaryCells;\n      }\n    }\n  },\n  _getAllItems: function (data) {\n    var that = this;\n    var d = new Deferred();\n    var dataController = this.getController(\"data\");\n    var footerItems = dataController.footerItems();\n    var totalItem = footerItems.length && footerItems[0];\n    var summaryTotalItems = that.option(\"summary.totalItems\");\n    var summaryCells;\n    when(data).done(function (data) {\n      dataController.loadAll(data).done(function (sourceItems, totalAggregates) {\n        that._updateGroupValuesWithSummaryByColumn(sourceItems);\n\n        if (that._hasSummaryGroupFooters()) {\n          sourceItems = that._getItemsWithSummaryGroupFooters(sourceItems);\n        }\n\n        summaryCells = totalItem && totalItem.summaryCells;\n\n        if (isDefined(totalAggregates) && summaryTotalItems) {\n          summaryCells = that._getSummaryCells(summaryTotalItems, totalAggregates);\n        }\n\n        var summaryItems = totalItem && that._getFooterSummaryItems(summaryCells, true);\n\n        if (summaryItems) {\n          sourceItems = sourceItems.concat(summaryItems);\n        }\n\n        that._processUnExportedItems(sourceItems);\n\n        d.resolve(sourceItems);\n      }).fail(d.reject);\n    }).fail(d.reject);\n    return d;\n  },\n  _getSummaryCells: function (summaryTotalItems, totalAggregates) {\n    var dataController = this.getController(\"data\");\n    var columnsController = dataController._columnsController;\n    return dataController._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(null, true), function (summaryItem, column) {\n      return dataController._isDataColumn(column) ? column.index : -1;\n    });\n  },\n  _getSelectedItems: function () {\n    var selectionController = this.getController(\"selection\");\n    var selectedRowData = selectionController.getSelectedRowsData();\n    return this._getAllItems(selectedRowData);\n  },\n  _getColumnWidths: function (headersView, rowsView) {\n    return headersView && headersView.isVisible() ? headersView.getColumnWidths() : rowsView.getColumnWidths();\n  },\n  init: function () {\n    this._columnsController = this.getController(\"columns\");\n    this._rowsView = this.getView(\"rowsView\");\n    this._headersView = this.getView(\"columnHeadersView\");\n    this.createAction(\"onExporting\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    this.createAction(\"onExported\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n    this.createAction(\"onFileSaving\", {\n      excludeValidators: [\"disabled\", \"readOnly\"]\n    });\n  },\n  callbackNames: function () {\n    return [\"selectionOnlyChanged\"];\n  },\n  getDataProvider: function (selectedRowsOnly) {\n    var columnWidths = this._getColumnWidths(this._headersView, this._rowsView);\n\n    var initialColumnWidthsByColumnIndex;\n\n    if (columnWidths && columnWidths.length) {\n      initialColumnWidthsByColumnIndex = {};\n\n      var columnsLastRowVisibleColumns = this._columnsController.getVisibleColumns(this._columnsController.getRowCount(), true);\n\n      for (var i = 0; i < columnsLastRowVisibleColumns.length; i++) {\n        initialColumnWidthsByColumnIndex[columnsLastRowVisibleColumns[i].index] = columnWidths[i];\n      }\n    }\n\n    return new DataProvider(this, initialColumnWidthsByColumnIndex, selectedRowsOnly);\n  },\n  exportToExcel: function (selectedRowsOnly) {\n    this._selectionOnly = selectedRowsOnly;\n    clientExport(this.component.getDataProvider(), {\n      fileName: this.option(\"export.fileName\"),\n      proxyUrl: this.option(\"export.proxyUrl\"),\n      format: \"xlsx\",\n      selectedRowsOnly: !!selectedRowsOnly,\n      autoFilterEnabled: !!this.option(\"export.excelFilterEnabled\"),\n      rtlEnabled: this.option(\"rtlEnabled\"),\n      ignoreErrors: this.option(\"export.ignoreExcelErrors\"),\n      exportingAction: this.getAction(\"onExporting\"),\n      exportedAction: this.getAction(\"onExported\"),\n      fileSavingAction: this.getAction(\"onFileSaving\")\n    }, excel.getData);\n  },\n  exportTo: function (selectedRowsOnly, format) {\n    this._selectionOnly = selectedRowsOnly;\n    var onExporting = this.getAction(\"onExporting\");\n    var eventArgs = {\n      selectedRowsOnly: !!selectedRowsOnly,\n      format: format,\n      fileName: this.option(\"export.fileName\"),\n      cancel: false\n    };\n    isFunction(onExporting) && onExporting(eventArgs);\n  },\n  publicMethods: function () {\n    return [\"getDataProvider\", \"exportToExcel\"];\n  },\n  selectionOnly: function (value) {\n    if (isDefined(value)) {\n      this._isSelectedRows = value;\n      this.selectionOnlyChanged.fire();\n    } else {\n      return this._isSelectedRows;\n    }\n  }\n});\ndataGridCore.registerModule(\"export\", {\n  defaultOptions: function () {\n    return {\n      export: {\n        enabled: false,\n        fileName: \"DataGrid\",\n        excelFilterEnabled: false,\n        formats: [\"xlsx\"],\n        excelWrapTextEnabled: void 0,\n        proxyUrl: void 0,\n        allowExportSelectedData: false,\n        ignoreExcelErrors: true,\n        texts: {\n          exportTo: messageLocalization.format(\"dxDataGrid-exportTo\"),\n          exportAll: messageLocalization.format(\"dxDataGrid-exportAll\"),\n          exportSelectedRows: messageLocalization.format(\"dxDataGrid-exportSelectedRows\")\n        }\n      }\n    };\n  },\n  controllers: {\n    export: ExportController\n  },\n  extenders: {\n    controllers: {\n      editing: {\n        callbackNames: function () {\n          var callbackList = this.callBase();\n          return isDefined(callbackList) ? callbackList.push(\"editingChanged\") : [\"editingChanged\"];\n        },\n        _updateEditButtons: function () {\n          this.callBase();\n          this.editingChanged.fire(this.hasChanges());\n        }\n      }\n    },\n    views: {\n      headerPanel: {\n        _getToolbarItems: function () {\n          var items = this.callBase();\n\n          var exportButton = this._getExportToolbarButton();\n\n          if (exportButton) {\n            items.push(exportButton);\n\n            this._correctItemsPosition(items);\n          }\n\n          return items;\n        },\n        _getExportToolbarButton: function () {\n          var items = this._getExportToolbarItems();\n\n          if (0 === items.length) {\n            return null;\n          }\n\n          var toolbarButtonOptions = {\n            name: DATAGRID_EXPORT_TOOLBAR_BUTTON_NAME,\n            location: \"after\",\n            locateInMenu: \"auto\",\n            sortIndex: 30,\n            options: {\n              items: items\n            }\n          };\n\n          if (1 === items.length) {\n            var widgetOptions = _extends({}, items[0], {\n              hint: items[0].text,\n              elementAttr: {\n                class: DATAGRID_EXPORT_BUTTON_CLASS\n              }\n            });\n\n            toolbarButtonOptions.widget = \"dxButton\";\n            toolbarButtonOptions.showText = \"inMenu\";\n            toolbarButtonOptions.options = widgetOptions;\n          } else {\n            var _widgetOptions = {\n              icon: DATAGRID_EXPORT_ICON,\n              displayExpr: \"text\",\n              items: items,\n              hint: this.option(\"export.texts.exportTo\"),\n              elementAttr: {\n                class: DATAGRID_EXPORT_BUTTON_CLASS\n              },\n              dropDownOptions: {\n                wrapperAttr: {\n                  class: DATAGRID_EXPORT_MENU_CLASS\n                },\n                width: \"auto\"\n              }\n            };\n            toolbarButtonOptions.options = _widgetOptions;\n            toolbarButtonOptions.widget = \"dxDropDownButton\";\n\n            toolbarButtonOptions.menuItemTemplate = (_data, _index, container) => {\n              this._createComponent($(container), List, {\n                items: items\n              });\n            };\n          }\n\n          return toolbarButtonOptions;\n        },\n        _getExportToolbarItems: function () {\n          var _this$option;\n\n          var exportOptions = this.option(\"export\");\n          var texts = this.option(\"export.texts\");\n          var formats = null !== (_this$option = this.option(\"export.formats\")) && void 0 !== _this$option ? _this$option : [];\n\n          if (!exportOptions.enabled) {\n            return [];\n          }\n\n          var items = [];\n          formats.forEach(formatType => {\n            var exportMethod = \"exportTo\";\n            var formatName = formatType.toUpperCase();\n            var exportAllIcon = DATAGRID_EXPORT_ICON;\n            var exportSelectedIcon = DATAGRID_EXPORT_SELECTED_ICON;\n\n            if (\"xlsx\" === formatType) {\n              exportMethod = \"exportToExcel\";\n              formatName = \"Excel\";\n              exportAllIcon = DATAGRID_EXPORT_EXCEL_ICON;\n            }\n\n            if (\"pdf\" === formatType) {\n              exportAllIcon = DATAGRID_PDF_EXPORT_ICON;\n            }\n\n            items.push({\n              text: format(texts.exportAll, formatName),\n              icon: exportAllIcon,\n              onClick: () => {\n                this._exportController[exportMethod](false, formatType);\n              }\n            });\n\n            if (exportOptions.allowExportSelectedData) {\n              items.push({\n                text: format(texts.exportSelectedRows, formatName),\n                icon: exportSelectedIcon,\n                onClick: () => {\n                  this._exportController[exportMethod](true, formatType);\n                }\n              });\n            }\n          });\n          return items;\n        },\n        _correctItemsPosition: function (items) {\n          items.sort(function (itemA, itemB) {\n            return itemA.sortIndex - itemB.sortIndex;\n          });\n        },\n        _isExportButtonVisible: function () {\n          return this.option(\"export.enabled\");\n        },\n        optionChanged: function (args) {\n          this.callBase(args);\n\n          if (\"export\" === args.name) {\n            args.handled = true;\n\n            this._invalidate();\n          }\n        },\n        init: function () {\n          var that = this;\n          this.callBase();\n          this._exportController = this.getController(\"export\");\n          this._editingController = this.getController(\"editing\");\n\n          this._editingController.editingChanged.add(function (hasChanges) {\n            that.setToolbarItemDisabled(\"exportButton\", hasChanges);\n          });\n        },\n        isVisible: function () {\n          return this.callBase() || this._isExportButtonVisible();\n        }\n      }\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/data_grid/ui.data_grid.export.js"],"names":["_extends","$","Class","isDefined","isFunction","extend","getDefaultAlignment","dataGridCore","prepareItems","export","clientExport","excel","format","messageLocalization","List","when","Deferred","DATAGRID_EXPORT_MENU_CLASS","DATAGRID_EXPORT_BUTTON_CLASS","DATAGRID_EXPORT_TOOLBAR_BUTTON_NAME","DATAGRID_EXPORT_ICON","DATAGRID_EXPORT_EXCEL_ICON","DATAGRID_EXPORT_SELECTED_ICON","DATAGRID_PDF_EXPORT_ICON","DataProvider","inherit","ctor","exportController","initialColumnWidthsByColumnIndex","selectedRowsOnly","_exportController","_initialColumnWidthsByColumnIndex","_selectedRowsOnly","_getGroupValue","item","key","data","rowType","groupIndex","summaryCells","groupColumn","_options","groupColumns","value","getDisplayValue","deserializeValue","result","caption","formatValue","length","getGroupRowSummaryText","summaryTexts","_correctCellIndex","cellIndex","_initOptions","_columnsController","getGroupColumns","excelWrapTextEnabled","option","columns","_getColumns","items","_selectionOnly","_getSelectedItems","_getAllItems","getVisibleIndex","bind","isHeadersVisible","customizeExportData","rtlEnabled","wrapTextEnabled","customizeExcelCell","hasCustomizeExcelCell","e","cellSourceData","gridCell","component","getHeaderStyles","bold","alignment","wrapText","getGroupRowStyle","getColumnStyles","columnStyles","getColumns","forEach","column","push","dataType","getStyles","_getTotalCellStyleId","_this$getColumns$cell","map","style","indexOf","getStyleId","rowIndex","getHeaderRowCount","isTotalCell","isGroupRow","getColumnsByAllRows","getColumnsWidths","c","width","getRowsCount","getGroupLevel","getCellType","isFinite","values","customizeText","lookup","ready","that","options","done","fail","_convertFromGridGroupSummaryItems","gridGroupSummaryItems","name","getCellData","isExcelJS","correctedCellIndex","columnsRow","gridColumn","itemValues","totalSummaryItemName","getSummaryText","groupSummaryItems","summaryItems","Array","isArray","i","_value","displayValue","getCustomizeTextByDataType","correctCellIndex","isSummaryAlignByColumn","alignByColumn","getCellMerging","colspan","exportColspan","rowspan","getFrozenArea","x","y","ExportController","ViewController","_getEmptyCell","_updateColumnWidth","columnsController","rowCount","getRowCount","currentHeaderRow","getVisibleColumns","columnWidthsByColumnIndex","_updateLockCount","columnWidths","_getColumnWidths","_headersView","_rowsView","_i","index","j","_needColumnExporting","currentColspan","_calculateExportColspan","slice","isBand","childColumns","getChildrenByBandColumn","reduce","childColumn","command","allowExporting","_getFooterSummaryItems","isTotal","estimatedItemsCount","summaryCell","itemsLength","_hasSummaryGroupFooters","groupItems","showInGroupFooter","_getItemsWithSummaryGroupFooters","sourceItems","beforeGroupFooterItems","groupFooterItems","concat","_updateGroupValuesWithSummaryByColumn","summaryValues","groupColumnCount","k","summaryItem","_processUnExportedItems","isDetailExpandColumn","type","d","dataController","getController","footerItems","totalItem","summaryTotalItems","loadAll","totalAggregates","_getSummaryCells","resolve","reject","_calculateSummaryCells","_isDataColumn","selectionController","selectedRowData","getSelectedRowsData","headersView","rowsView","isVisible","getColumnWidths","init","getView","createAction","excludeValidators","callbackNames","getDataProvider","columnsLastRowVisibleColumns","exportToExcel","fileName","proxyUrl","autoFilterEnabled","ignoreErrors","exportingAction","getAction","exportedAction","fileSavingAction","getData","exportTo","onExporting","eventArgs","cancel","publicMethods","selectionOnly","_isSelectedRows","selectionOnlyChanged","fire","registerModule","defaultOptions","enabled","excelFilterEnabled","formats","allowExportSelectedData","ignoreExcelErrors","texts","exportAll","exportSelectedRows","controllers","extenders","editing","callbackList","callBase","_updateEditButtons","editingChanged","hasChanges","views","headerPanel","_getToolbarItems","exportButton","_getExportToolbarButton","_correctItemsPosition","_getExportToolbarItems","toolbarButtonOptions","location","locateInMenu","sortIndex","widgetOptions","hint","text","elementAttr","class","widget","showText","_widgetOptions","icon","displayExpr","dropDownOptions","wrapperAttr","menuItemTemplate","_data","_index","container","_createComponent","_this$option","exportOptions","formatType","exportMethod","formatName","toUpperCase","exportAllIcon","exportSelectedIcon","onClick","sort","itemA","itemB","_isExportButtonVisible","optionChanged","args","handled","_invalidate","_editingController","add","setToolbarItemDisabled"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/data_grid/ui.data_grid.export.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport $ from \"../../core/renderer\";\r\nimport Class from \"../../core/class\";\r\nimport {\r\n    isDefined,\r\n    isFunction\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    getDefaultAlignment\r\n} from \"../../core/utils/position\";\r\nimport dataGridCore from \"./ui.data_grid.core\";\r\nimport {\r\n    prepareItems\r\n} from \"../grid_core/ui.grid_core.export\";\r\nimport {\r\n    export as clientExport,\r\n    excel\r\n} from \"../../exporter\";\r\nimport {\r\n    format\r\n} from \"../../core/utils/string\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport \"../button\";\r\nimport \"../drop_down_button\";\r\nimport List from \"../list_light\";\r\nimport {\r\n    when,\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nvar DATAGRID_EXPORT_MENU_CLASS = \"dx-datagrid-export-menu\";\r\nvar DATAGRID_EXPORT_BUTTON_CLASS = \"dx-datagrid-export-button\";\r\nvar DATAGRID_EXPORT_TOOLBAR_BUTTON_NAME = \"exportButton\";\r\nvar DATAGRID_EXPORT_ICON = \"export\";\r\nvar DATAGRID_EXPORT_EXCEL_ICON = \"xlsxfile\";\r\nvar DATAGRID_EXPORT_SELECTED_ICON = \"exportselected\";\r\nvar DATAGRID_PDF_EXPORT_ICON = \"pdffile\";\r\nexport var DataProvider = Class.inherit({\r\n    ctor: function(exportController, initialColumnWidthsByColumnIndex, selectedRowsOnly) {\r\n        this._exportController = exportController;\r\n        this._initialColumnWidthsByColumnIndex = initialColumnWidthsByColumnIndex;\r\n        this._selectedRowsOnly = selectedRowsOnly\r\n    },\r\n    _getGroupValue: function(item) {\r\n        var {\r\n            key: key,\r\n            data: data,\r\n            rowType: rowType,\r\n            groupIndex: groupIndex,\r\n            summaryCells: summaryCells\r\n        } = item;\r\n        var groupColumn = this._options.groupColumns[groupIndex];\r\n        var value = dataGridCore.getDisplayValue(groupColumn, groupColumn.deserializeValue ? groupColumn.deserializeValue(key[groupIndex]) : key[groupIndex], data, rowType);\r\n        var result = groupColumn.caption + \": \" + dataGridCore.formatValue(value, groupColumn);\r\n        if (summaryCells && summaryCells[0] && summaryCells[0].length) {\r\n            result += \" \" + dataGridCore.getGroupRowSummaryText(summaryCells[0], this._options.summaryTexts)\r\n        }\r\n        return result\r\n    },\r\n    _correctCellIndex: function(cellIndex) {\r\n        return cellIndex\r\n    },\r\n    _initOptions: function() {\r\n        var exportController = this._exportController;\r\n        var groupColumns = exportController._columnsController.getGroupColumns();\r\n        var excelWrapTextEnabled = exportController.option(\"export.excelWrapTextEnabled\");\r\n        this._options = {\r\n            columns: exportController._getColumns(this._initialColumnWidthsByColumnIndex),\r\n            groupColumns: groupColumns,\r\n            items: this._selectedRowsOnly || exportController._selectionOnly ? exportController._getSelectedItems() : exportController._getAllItems(),\r\n            getVisibleIndex: exportController._columnsController.getVisibleIndex.bind(exportController._columnsController),\r\n            isHeadersVisible: exportController.option(\"showColumnHeaders\"),\r\n            summaryTexts: exportController.option(\"summary.texts\"),\r\n            customizeExportData: exportController.option(\"customizeExportData\"),\r\n            rtlEnabled: exportController.option(\"rtlEnabled\"),\r\n            wrapTextEnabled: isDefined(excelWrapTextEnabled) ? excelWrapTextEnabled : !!exportController.option(\"wordWrapEnabled\"),\r\n            customizeExcelCell: exportController.option(\"export.customizeExcelCell\")\r\n        }\r\n    },\r\n    hasCustomizeExcelCell: function() {\r\n        return isDefined(this._options.customizeExcelCell)\r\n    },\r\n    customizeExcelCell: function(e, cellSourceData) {\r\n        if (this._options.customizeExcelCell) {\r\n            e.gridCell = cellSourceData;\r\n            if (isDefined(this._exportController) && isDefined(this._exportController.component)) {\r\n                e.component = this._exportController.component\r\n            }\r\n            this._options.customizeExcelCell(e)\r\n        }\r\n    },\r\n    getHeaderStyles: () => [{\r\n        bold: true,\r\n        alignment: \"center\",\r\n        wrapText: true\r\n    }, {\r\n        bold: true,\r\n        alignment: \"left\",\r\n        wrapText: true\r\n    }, {\r\n        bold: true,\r\n        alignment: \"right\",\r\n        wrapText: true\r\n    }],\r\n    getGroupRowStyle() {\r\n        return {\r\n            bold: true,\r\n            wrapText: false,\r\n            alignment: getDefaultAlignment(this._options.rtlEnabled)\r\n        }\r\n    },\r\n    getColumnStyles() {\r\n        var wrapTextEnabled = this._options.wrapTextEnabled;\r\n        var columnStyles = [];\r\n        this.getColumns().forEach(column => {\r\n            columnStyles.push({\r\n                alignment: column.alignment || \"left\",\r\n                format: column.format,\r\n                wrapText: wrapTextEnabled,\r\n                dataType: column.dataType\r\n            })\r\n        });\r\n        return columnStyles\r\n    },\r\n    getStyles: function() {\r\n        return [...this.getHeaderStyles(), ...this.getColumnStyles(), this.getGroupRowStyle()]\r\n    },\r\n    _getTotalCellStyleId: function(cellIndex) {\r\n        var _this$getColumns$cell;\r\n        var alignment = (null === (_this$getColumns$cell = this.getColumns()[cellIndex]) || void 0 === _this$getColumns$cell ? void 0 : _this$getColumns$cell.alignment) || \"right\";\r\n        return this.getHeaderStyles().map(style => style.alignment).indexOf(alignment)\r\n    },\r\n    getStyleId: function(rowIndex, cellIndex) {\r\n        if (rowIndex < this.getHeaderRowCount()) {\r\n            return 0\r\n        } else if (this.isTotalCell(rowIndex - this.getHeaderRowCount(), cellIndex)) {\r\n            return this._getTotalCellStyleId(cellIndex)\r\n        } else if (this.isGroupRow(rowIndex - this.getHeaderRowCount())) {\r\n            return this.getHeaderStyles().length + this.getColumns().length\r\n        } else {\r\n            return cellIndex + this.getHeaderStyles().length\r\n        }\r\n    },\r\n    getColumns: function(getColumnsByAllRows) {\r\n        var {\r\n            columns: columns\r\n        } = this._options;\r\n        return getColumnsByAllRows ? columns : columns[columns.length - 1]\r\n    },\r\n    getColumnsWidths: function() {\r\n        var columns = this.getColumns();\r\n        return isDefined(columns) ? columns.map(c => c.width) : void 0\r\n    },\r\n    getRowsCount: function() {\r\n        return this._options.items.length + this.getHeaderRowCount()\r\n    },\r\n    getHeaderRowCount: function() {\r\n        if (this.isHeadersVisible()) {\r\n            return this._options.columns.length - 1\r\n        }\r\n        return 0\r\n    },\r\n    isGroupRow: function(rowIndex) {\r\n        return rowIndex < this._options.items.length && \"group\" === this._options.items[rowIndex].rowType\r\n    },\r\n    getGroupLevel: function(rowIndex) {\r\n        var item = this._options.items[rowIndex - this.getHeaderRowCount()];\r\n        var groupIndex = item && item.groupIndex;\r\n        if (item && \"totalFooter\" === item.rowType) {\r\n            return 0\r\n        }\r\n        return isDefined(groupIndex) ? groupIndex : this._options.groupColumns.length\r\n    },\r\n    getCellType: function(rowIndex, cellIndex) {\r\n        var columns = this.getColumns();\r\n        if (rowIndex < this.getHeaderRowCount()) {\r\n            return \"string\"\r\n        } else {\r\n            rowIndex -= this.getHeaderRowCount()\r\n        }\r\n        if (cellIndex < columns.length) {\r\n            var item = this._options.items.length && this._options.items[rowIndex];\r\n            var column = columns[cellIndex];\r\n            if (item && \"data\" === item.rowType) {\r\n                if (isFinite(item.values[this._correctCellIndex(cellIndex)]) && !isDefined(column.customizeText)) {\r\n                    return isDefined(column.lookup) ? column.lookup.dataType : column.dataType\r\n                }\r\n            }\r\n            return \"string\"\r\n        }\r\n    },\r\n    ready: function() {\r\n        var that = this;\r\n        that._initOptions();\r\n        var options = that._options;\r\n        return when(options.items).done((function(items) {\r\n            options.customizeExportData && options.customizeExportData(that.getColumns(that.getHeaderRowCount() > 1), items);\r\n            options.items = items\r\n        })).fail((function() {\r\n            options.items = []\r\n        }))\r\n    },\r\n    _convertFromGridGroupSummaryItems: function(gridGroupSummaryItems) {\r\n        if (isDefined(gridGroupSummaryItems) && gridGroupSummaryItems.length > 0) {\r\n            return gridGroupSummaryItems.map((function(item) {\r\n                return {\r\n                    value: item.value,\r\n                    name: item.name\r\n                }\r\n            }))\r\n        }\r\n    },\r\n    getCellData: function(rowIndex, cellIndex, isExcelJS) {\r\n        var value;\r\n        var column;\r\n        var result = {\r\n            cellSourceData: {},\r\n            value: value\r\n        };\r\n        var columns = this.getColumns();\r\n        var correctedCellIndex = this._correctCellIndex(cellIndex);\r\n        if (rowIndex < this.getHeaderRowCount()) {\r\n            var columnsRow = this.getColumns(true)[rowIndex];\r\n            column = columnsRow[cellIndex];\r\n            result.cellSourceData.rowType = \"header\";\r\n            result.cellSourceData.column = column && column.gridColumn;\r\n            result.value = column && column.caption\r\n        } else {\r\n            rowIndex -= this.getHeaderRowCount();\r\n            var item = this._options.items.length && this._options.items[rowIndex];\r\n            if (item) {\r\n                var itemValues = item.values;\r\n                result.cellSourceData.rowType = item.rowType;\r\n                result.cellSourceData.column = columns[cellIndex] && columns[cellIndex].gridColumn;\r\n                switch (item.rowType) {\r\n                    case \"groupFooter\":\r\n                    case \"totalFooter\":\r\n                        if (correctedCellIndex < itemValues.length) {\r\n                            value = itemValues[correctedCellIndex];\r\n                            if (isDefined(value)) {\r\n                                result.cellSourceData.value = value.value;\r\n                                result.cellSourceData.totalSummaryItemName = value.name;\r\n                                result.value = dataGridCore.getSummaryText(value, this._options.summaryTexts)\r\n                            } else {\r\n                                result.cellSourceData.value = void 0\r\n                            }\r\n                        }\r\n                        break;\r\n                    case \"group\":\r\n                        result.cellSourceData.groupIndex = item.groupIndex;\r\n                        if (cellIndex < 1) {\r\n                            result.cellSourceData.column = this._options.groupColumns[item.groupIndex];\r\n                            result.cellSourceData.value = item.key[item.groupIndex];\r\n                            result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(item.summaryCells[0]);\r\n                            result.value = this._getGroupValue(item)\r\n                        } else {\r\n                            var summaryItems = item.values[correctedCellIndex];\r\n                            if (Array.isArray(summaryItems)) {\r\n                                result.cellSourceData.groupSummaryItems = this._convertFromGridGroupSummaryItems(summaryItems);\r\n                                value = \"\";\r\n                                for (var i = 0; i < summaryItems.length; i++) {\r\n                                    value += (i > 0 ? isExcelJS ? \"\\n\" : \" \\n \" : \"\") + dataGridCore.getSummaryText(summaryItems[i], this._options.summaryTexts)\r\n                                }\r\n                                result.value = value\r\n                            } else {\r\n                                result.cellSourceData.value = void 0\r\n                            }\r\n                        }\r\n                        break;\r\n                    default:\r\n                        column = columns[cellIndex];\r\n                        if (column) {\r\n                            var _value = itemValues[correctedCellIndex];\r\n                            var displayValue = dataGridCore.getDisplayValue(column, _value, item.data, item.rowType);\r\n                            if (!isFinite(displayValue) || isDefined(column.customizeText)) {\r\n                                if (isExcelJS && isDefined(column.customizeText) && column.customizeText === this._exportController._columnsController.getCustomizeTextByDataType(\"boolean\")) {\r\n                                    result.value = displayValue\r\n                                } else {\r\n                                    result.value = dataGridCore.formatValue(displayValue, column)\r\n                                }\r\n                            } else {\r\n                                result.value = displayValue\r\n                            }\r\n                            result.cellSourceData.value = _value\r\n                        }\r\n                        result.cellSourceData.data = item.data\r\n                }\r\n            }\r\n        }\r\n        return result\r\n    },\r\n    isHeadersVisible: function() {\r\n        return this._options.isHeadersVisible\r\n    },\r\n    isTotalCell: function(rowIndex, cellIndex) {\r\n        var items = this._options.items;\r\n        var item = items[rowIndex];\r\n        var correctCellIndex = this._correctCellIndex(cellIndex);\r\n        var isSummaryAlignByColumn = item.summaryCells && item.summaryCells[correctCellIndex] && item.summaryCells[correctCellIndex].length > 0 && item.summaryCells[correctCellIndex][0].alignByColumn;\r\n        return item && \"groupFooter\" === item.rowType || \"totalFooter\" === item.rowType || isSummaryAlignByColumn\r\n    },\r\n    getCellMerging: function(rowIndex, cellIndex) {\r\n        var columns = this._options.columns;\r\n        var column = columns[rowIndex] && columns[rowIndex][cellIndex];\r\n        return column ? {\r\n            colspan: (column.exportColspan || 1) - 1,\r\n            rowspan: (column.rowspan || 1) - 1\r\n        } : {\r\n            colspan: 0,\r\n            rowspan: 0\r\n        }\r\n    },\r\n    getFrozenArea: function() {\r\n        return {\r\n            x: 0,\r\n            y: this.getHeaderRowCount()\r\n        }\r\n    }\r\n});\r\nexport var ExportController = dataGridCore.ViewController.inherit({}).inherit({\r\n    _getEmptyCell: function() {\r\n        return {\r\n            caption: \"\",\r\n            colspan: 1,\r\n            rowspan: 1\r\n        }\r\n    },\r\n    _updateColumnWidth: function(column, width) {\r\n        column.width = width\r\n    },\r\n    _getColumns: function(initialColumnWidthsByColumnIndex) {\r\n        var result = [];\r\n        var i;\r\n        var columns;\r\n        var columnsController = this._columnsController;\r\n        var rowCount = columnsController.getRowCount();\r\n        for (i = 0; i <= rowCount; i++) {\r\n            var currentHeaderRow = [];\r\n            columns = columnsController.getVisibleColumns(i, true);\r\n            var columnWidthsByColumnIndex = void 0;\r\n            if (i === rowCount) {\r\n                if (this._updateLockCount) {\r\n                    columnWidthsByColumnIndex = initialColumnWidthsByColumnIndex\r\n                } else {\r\n                    var columnWidths = this._getColumnWidths(this._headersView, this._rowsView);\r\n                    if (columnWidths && columnWidths.length) {\r\n                        columnWidthsByColumnIndex = {};\r\n                        for (var _i = 0; _i < columns.length; _i++) {\r\n                            columnWidthsByColumnIndex[columns[_i].index] = columnWidths[_i]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for (var j = 0; j < columns.length; j++) {\r\n                var column = extend({}, columns[j], {\r\n                    dataType: \"datetime\" === columns[j].dataType ? \"date\" : columns[j].dataType,\r\n                    gridColumn: columns[j]\r\n                });\r\n                if (this._needColumnExporting(column)) {\r\n                    var currentColspan = this._calculateExportColspan(column);\r\n                    if (isDefined(currentColspan)) {\r\n                        column.exportColspan = currentColspan\r\n                    }\r\n                    if (columnWidthsByColumnIndex) {\r\n                        this._updateColumnWidth(column, columnWidthsByColumnIndex[column.index])\r\n                    }\r\n                    currentHeaderRow.push(column)\r\n                }\r\n            }\r\n            result.push(currentHeaderRow)\r\n        }\r\n        columns = result[rowCount];\r\n        result = prepareItems(result.slice(0, -1), this._getEmptyCell());\r\n        result.push(columns);\r\n        return result\r\n    },\r\n    _calculateExportColspan: function(column) {\r\n        if (!column.isBand) {\r\n            return\r\n        }\r\n        var childColumns = this._columnsController.getChildrenByBandColumn(column.index, true);\r\n        if (!isDefined(childColumns)) {\r\n            return\r\n        }\r\n        return childColumns.reduce((result, childColumn) => {\r\n            if (this._needColumnExporting(childColumn)) {\r\n                return result + (this._calculateExportColspan(childColumn) || 1)\r\n            } else {\r\n                return result\r\n            }\r\n        }, 0)\r\n    },\r\n    _needColumnExporting: function(column) {\r\n        return !column.command && (column.allowExporting || void 0 === column.allowExporting)\r\n    },\r\n    _getFooterSummaryItems: function(summaryCells, isTotal) {\r\n        var result = [];\r\n        var estimatedItemsCount = 1;\r\n        var i = 0;\r\n        do {\r\n            var values = [];\r\n            for (var j = 0; j < summaryCells.length; j++) {\r\n                var summaryCell = summaryCells[j];\r\n                var itemsLength = summaryCell.length;\r\n                if (estimatedItemsCount < itemsLength) {\r\n                    estimatedItemsCount = itemsLength\r\n                }\r\n                values.push(summaryCell[i])\r\n            }\r\n            result.push({\r\n                values: values,\r\n                rowType: isTotal ? \"totalFooter\" : \"groupFooter\"\r\n            })\r\n        } while (i++ < estimatedItemsCount - 1);\r\n        return result\r\n    },\r\n    _hasSummaryGroupFooters: function() {\r\n        var groupItems = this.option(\"summary.groupItems\");\r\n        if (isDefined(groupItems)) {\r\n            for (var i = 0; i < groupItems.length; i++) {\r\n                if (groupItems[i].showInGroupFooter) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    },\r\n    _getItemsWithSummaryGroupFooters: function(sourceItems) {\r\n        var result = [];\r\n        var beforeGroupFooterItems = [];\r\n        var groupFooterItems = [];\r\n        for (var i = 0; i < sourceItems.length; i++) {\r\n            var item = sourceItems[i];\r\n            if (\"groupFooter\" === item.rowType) {\r\n                groupFooterItems = this._getFooterSummaryItems(item.summaryCells);\r\n                result = result.concat(beforeGroupFooterItems, groupFooterItems);\r\n                beforeGroupFooterItems = []\r\n            } else {\r\n                beforeGroupFooterItems.push(item)\r\n            }\r\n        }\r\n        return result.length ? result : beforeGroupFooterItems\r\n    },\r\n    _updateGroupValuesWithSummaryByColumn: function(sourceItems) {\r\n        var summaryValues = [];\r\n        for (var i = 0; i < sourceItems.length; i++) {\r\n            var item = sourceItems[i];\r\n            var summaryCells = item.summaryCells;\r\n            if (\"group\" === item.rowType && summaryCells && summaryCells.length > 1) {\r\n                var groupColumnCount = item.values.length;\r\n                for (var j = 1; j < summaryCells.length; j++) {\r\n                    for (var k = 0; k < summaryCells[j].length; k++) {\r\n                        var summaryItem = summaryCells[j][k];\r\n                        if (summaryItem && summaryItem.alignByColumn) {\r\n                            if (!Array.isArray(summaryValues[j - groupColumnCount])) {\r\n                                summaryValues[j - groupColumnCount] = []\r\n                            }\r\n                            summaryValues[j - groupColumnCount].push(summaryItem)\r\n                        }\r\n                    }\r\n                }\r\n                if (summaryValues.length > 0) {\r\n                    item.values.push(...summaryValues);\r\n                    summaryValues = []\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _processUnExportedItems: function(items) {\r\n        var columns = this._columnsController.getVisibleColumns(null, true);\r\n        var groupColumns = this._columnsController.getGroupColumns();\r\n        var values;\r\n        var summaryCells;\r\n        for (var i = 0; i < items.length; i++) {\r\n            var item = items[i];\r\n            var isDetailExpandColumn = false;\r\n            values = [];\r\n            summaryCells = [];\r\n            for (var j = 0; j < columns.length; j++) {\r\n                var column = columns[j];\r\n                isDetailExpandColumn = isDetailExpandColumn || \"detailExpand\" === column.type;\r\n                if (this._needColumnExporting(column)) {\r\n                    if (item.values) {\r\n                        if (\"group\" === item.rowType && !values.length) {\r\n                            values.push(item.key[item.groupIndex])\r\n                        } else {\r\n                            values.push(item.values[j])\r\n                        }\r\n                    }\r\n                    if (item.summaryCells) {\r\n                        if (\"group\" === item.rowType && !summaryCells.length) {\r\n                            var index = j - groupColumns.length + item.groupIndex;\r\n                            summaryCells.push(item.summaryCells[isDetailExpandColumn ? index : index + 1])\r\n                        } else {\r\n                            summaryCells.push(item.summaryCells[j])\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (values.length) {\r\n                item.values = values\r\n            }\r\n            if (summaryCells.length) {\r\n                item.summaryCells = summaryCells\r\n            }\r\n        }\r\n    },\r\n    _getAllItems: function(data) {\r\n        var that = this;\r\n        var d = new Deferred;\r\n        var dataController = this.getController(\"data\");\r\n        var footerItems = dataController.footerItems();\r\n        var totalItem = footerItems.length && footerItems[0];\r\n        var summaryTotalItems = that.option(\"summary.totalItems\");\r\n        var summaryCells;\r\n        when(data).done((function(data) {\r\n            dataController.loadAll(data).done((function(sourceItems, totalAggregates) {\r\n                that._updateGroupValuesWithSummaryByColumn(sourceItems);\r\n                if (that._hasSummaryGroupFooters()) {\r\n                    sourceItems = that._getItemsWithSummaryGroupFooters(sourceItems)\r\n                }\r\n                summaryCells = totalItem && totalItem.summaryCells;\r\n                if (isDefined(totalAggregates) && summaryTotalItems) {\r\n                    summaryCells = that._getSummaryCells(summaryTotalItems, totalAggregates)\r\n                }\r\n                var summaryItems = totalItem && that._getFooterSummaryItems(summaryCells, true);\r\n                if (summaryItems) {\r\n                    sourceItems = sourceItems.concat(summaryItems)\r\n                }\r\n                that._processUnExportedItems(sourceItems);\r\n                d.resolve(sourceItems)\r\n            })).fail(d.reject)\r\n        })).fail(d.reject);\r\n        return d\r\n    },\r\n    _getSummaryCells: function(summaryTotalItems, totalAggregates) {\r\n        var dataController = this.getController(\"data\");\r\n        var columnsController = dataController._columnsController;\r\n        return dataController._calculateSummaryCells(summaryTotalItems, totalAggregates, columnsController.getVisibleColumns(null, true), (function(summaryItem, column) {\r\n            return dataController._isDataColumn(column) ? column.index : -1\r\n        }))\r\n    },\r\n    _getSelectedItems: function() {\r\n        var selectionController = this.getController(\"selection\");\r\n        var selectedRowData = selectionController.getSelectedRowsData();\r\n        return this._getAllItems(selectedRowData)\r\n    },\r\n    _getColumnWidths: function(headersView, rowsView) {\r\n        return headersView && headersView.isVisible() ? headersView.getColumnWidths() : rowsView.getColumnWidths()\r\n    },\r\n    init: function() {\r\n        this._columnsController = this.getController(\"columns\");\r\n        this._rowsView = this.getView(\"rowsView\");\r\n        this._headersView = this.getView(\"columnHeadersView\");\r\n        this.createAction(\"onExporting\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        });\r\n        this.createAction(\"onExported\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        });\r\n        this.createAction(\"onFileSaving\", {\r\n            excludeValidators: [\"disabled\", \"readOnly\"]\r\n        })\r\n    },\r\n    callbackNames: function() {\r\n        return [\"selectionOnlyChanged\"]\r\n    },\r\n    getDataProvider: function(selectedRowsOnly) {\r\n        var columnWidths = this._getColumnWidths(this._headersView, this._rowsView);\r\n        var initialColumnWidthsByColumnIndex;\r\n        if (columnWidths && columnWidths.length) {\r\n            initialColumnWidthsByColumnIndex = {};\r\n            var columnsLastRowVisibleColumns = this._columnsController.getVisibleColumns(this._columnsController.getRowCount(), true);\r\n            for (var i = 0; i < columnsLastRowVisibleColumns.length; i++) {\r\n                initialColumnWidthsByColumnIndex[columnsLastRowVisibleColumns[i].index] = columnWidths[i]\r\n            }\r\n        }\r\n        return new DataProvider(this, initialColumnWidthsByColumnIndex, selectedRowsOnly)\r\n    },\r\n    exportToExcel: function(selectedRowsOnly) {\r\n        this._selectionOnly = selectedRowsOnly;\r\n        clientExport(this.component.getDataProvider(), {\r\n            fileName: this.option(\"export.fileName\"),\r\n            proxyUrl: this.option(\"export.proxyUrl\"),\r\n            format: \"xlsx\",\r\n            selectedRowsOnly: !!selectedRowsOnly,\r\n            autoFilterEnabled: !!this.option(\"export.excelFilterEnabled\"),\r\n            rtlEnabled: this.option(\"rtlEnabled\"),\r\n            ignoreErrors: this.option(\"export.ignoreExcelErrors\"),\r\n            exportingAction: this.getAction(\"onExporting\"),\r\n            exportedAction: this.getAction(\"onExported\"),\r\n            fileSavingAction: this.getAction(\"onFileSaving\")\r\n        }, excel.getData)\r\n    },\r\n    exportTo: function(selectedRowsOnly, format) {\r\n        this._selectionOnly = selectedRowsOnly;\r\n        var onExporting = this.getAction(\"onExporting\");\r\n        var eventArgs = {\r\n            selectedRowsOnly: !!selectedRowsOnly,\r\n            format: format,\r\n            fileName: this.option(\"export.fileName\"),\r\n            cancel: false\r\n        };\r\n        isFunction(onExporting) && onExporting(eventArgs)\r\n    },\r\n    publicMethods: function() {\r\n        return [\"getDataProvider\", \"exportToExcel\"]\r\n    },\r\n    selectionOnly: function(value) {\r\n        if (isDefined(value)) {\r\n            this._isSelectedRows = value;\r\n            this.selectionOnlyChanged.fire()\r\n        } else {\r\n            return this._isSelectedRows\r\n        }\r\n    }\r\n});\r\ndataGridCore.registerModule(\"export\", {\r\n    defaultOptions: function() {\r\n        return {\r\n            export: {\r\n                enabled: false,\r\n                fileName: \"DataGrid\",\r\n                excelFilterEnabled: false,\r\n                formats: [\"xlsx\"],\r\n                excelWrapTextEnabled: void 0,\r\n                proxyUrl: void 0,\r\n                allowExportSelectedData: false,\r\n                ignoreExcelErrors: true,\r\n                texts: {\r\n                    exportTo: messageLocalization.format(\"dxDataGrid-exportTo\"),\r\n                    exportAll: messageLocalization.format(\"dxDataGrid-exportAll\"),\r\n                    exportSelectedRows: messageLocalization.format(\"dxDataGrid-exportSelectedRows\")\r\n                }\r\n            }\r\n        }\r\n    },\r\n    controllers: {\r\n        export: ExportController\r\n    },\r\n    extenders: {\r\n        controllers: {\r\n            editing: {\r\n                callbackNames: function() {\r\n                    var callbackList = this.callBase();\r\n                    return isDefined(callbackList) ? callbackList.push(\"editingChanged\") : [\"editingChanged\"]\r\n                },\r\n                _updateEditButtons: function() {\r\n                    this.callBase();\r\n                    this.editingChanged.fire(this.hasChanges())\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            headerPanel: {\r\n                _getToolbarItems: function() {\r\n                    var items = this.callBase();\r\n                    var exportButton = this._getExportToolbarButton();\r\n                    if (exportButton) {\r\n                        items.push(exportButton);\r\n                        this._correctItemsPosition(items)\r\n                    }\r\n                    return items\r\n                },\r\n                _getExportToolbarButton: function() {\r\n                    var items = this._getExportToolbarItems();\r\n                    if (0 === items.length) {\r\n                        return null\r\n                    }\r\n                    var toolbarButtonOptions = {\r\n                        name: DATAGRID_EXPORT_TOOLBAR_BUTTON_NAME,\r\n                        location: \"after\",\r\n                        locateInMenu: \"auto\",\r\n                        sortIndex: 30,\r\n                        options: {\r\n                            items: items\r\n                        }\r\n                    };\r\n                    if (1 === items.length) {\r\n                        var widgetOptions = _extends({}, items[0], {\r\n                            hint: items[0].text,\r\n                            elementAttr: {\r\n                                class: DATAGRID_EXPORT_BUTTON_CLASS\r\n                            }\r\n                        });\r\n                        toolbarButtonOptions.widget = \"dxButton\";\r\n                        toolbarButtonOptions.showText = \"inMenu\";\r\n                        toolbarButtonOptions.options = widgetOptions\r\n                    } else {\r\n                        var _widgetOptions = {\r\n                            icon: DATAGRID_EXPORT_ICON,\r\n                            displayExpr: \"text\",\r\n                            items: items,\r\n                            hint: this.option(\"export.texts.exportTo\"),\r\n                            elementAttr: {\r\n                                class: DATAGRID_EXPORT_BUTTON_CLASS\r\n                            },\r\n                            dropDownOptions: {\r\n                                wrapperAttr: {\r\n                                    class: DATAGRID_EXPORT_MENU_CLASS\r\n                                },\r\n                                width: \"auto\"\r\n                            }\r\n                        };\r\n                        toolbarButtonOptions.options = _widgetOptions;\r\n                        toolbarButtonOptions.widget = \"dxDropDownButton\";\r\n                        toolbarButtonOptions.menuItemTemplate = (_data, _index, container) => {\r\n                            this._createComponent($(container), List, {\r\n                                items: items\r\n                            })\r\n                        }\r\n                    }\r\n                    return toolbarButtonOptions\r\n                },\r\n                _getExportToolbarItems: function() {\r\n                    var _this$option;\r\n                    var exportOptions = this.option(\"export\");\r\n                    var texts = this.option(\"export.texts\");\r\n                    var formats = null !== (_this$option = this.option(\"export.formats\")) && void 0 !== _this$option ? _this$option : [];\r\n                    if (!exportOptions.enabled) {\r\n                        return []\r\n                    }\r\n                    var items = [];\r\n                    formats.forEach(formatType => {\r\n                        var exportMethod = \"exportTo\";\r\n                        var formatName = formatType.toUpperCase();\r\n                        var exportAllIcon = DATAGRID_EXPORT_ICON;\r\n                        var exportSelectedIcon = DATAGRID_EXPORT_SELECTED_ICON;\r\n                        if (\"xlsx\" === formatType) {\r\n                            exportMethod = \"exportToExcel\";\r\n                            formatName = \"Excel\";\r\n                            exportAllIcon = DATAGRID_EXPORT_EXCEL_ICON\r\n                        }\r\n                        if (\"pdf\" === formatType) {\r\n                            exportAllIcon = DATAGRID_PDF_EXPORT_ICON\r\n                        }\r\n                        items.push({\r\n                            text: format(texts.exportAll, formatName),\r\n                            icon: exportAllIcon,\r\n                            onClick: () => {\r\n                                this._exportController[exportMethod](false, formatType)\r\n                            }\r\n                        });\r\n                        if (exportOptions.allowExportSelectedData) {\r\n                            items.push({\r\n                                text: format(texts.exportSelectedRows, formatName),\r\n                                icon: exportSelectedIcon,\r\n                                onClick: () => {\r\n                                    this._exportController[exportMethod](true, formatType)\r\n                                }\r\n                            })\r\n                        }\r\n                    });\r\n                    return items\r\n                },\r\n                _correctItemsPosition: function(items) {\r\n                    items.sort((function(itemA, itemB) {\r\n                        return itemA.sortIndex - itemB.sortIndex\r\n                    }))\r\n                },\r\n                _isExportButtonVisible: function() {\r\n                    return this.option(\"export.enabled\")\r\n                },\r\n                optionChanged: function(args) {\r\n                    this.callBase(args);\r\n                    if (\"export\" === args.name) {\r\n                        args.handled = true;\r\n                        this._invalidate()\r\n                    }\r\n                },\r\n                init: function() {\r\n                    var that = this;\r\n                    this.callBase();\r\n                    this._exportController = this.getController(\"export\");\r\n                    this._editingController = this.getController(\"editing\");\r\n                    this._editingController.editingChanged.add((function(hasChanges) {\r\n                        that.setToolbarItemDisabled(\"exportButton\", hasChanges)\r\n                    }))\r\n                },\r\n                isVisible: function() {\r\n                    return this.callBase() || this._isExportButtonVisible()\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n"]},"metadata":{},"sourceType":"module"}