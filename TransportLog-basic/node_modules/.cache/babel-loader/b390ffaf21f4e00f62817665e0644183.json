{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.indicator.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setWidth } from \"../../../core/utils/size\";\nimport $ from \"../../../core/renderer\";\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space\";\nimport registerComponent from \"../../../core/component_registrator\";\nimport dateUtils from \"../../../core/utils/date\";\nimport { extend } from \"../../../core/utils/extend\";\nimport { getBoundingRect } from \"../../../core/utils/position\";\nimport { hasWindow } from \"../../../core/utils/window\";\nimport { HEADER_CURRENT_TIME_CELL_CLASS } from \"../classes\";\nimport { getToday } from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\nimport timezoneUtils from \"../utils.timeZone\";\nvar toMs = dateUtils.dateToMilliseconds;\nvar SCHEDULER_DATE_TIME_INDICATOR_CLASS = \"dx-scheduler-date-time-indicator\";\nvar TIME_PANEL_CURRENT_TIME_CELL_CLASS = \"dx-scheduler-time-panel-current-time-cell\";\n\nclass SchedulerWorkSpaceIndicator extends SchedulerWorkSpace {\n  _getToday() {\n    return getToday(this.option(\"indicatorTime\"), this.timeZoneCalculator);\n  }\n\n  isIndicationOnView() {\n    if (this.option(\"showCurrentTimeIndicator\")) {\n      var today = this._getToday();\n\n      var endViewDate = dateUtils.trimTime(this.getEndViewDate());\n      return dateUtils.dateInRange(today, this.getStartViewDate(), new Date(endViewDate.getTime() + toMs(\"day\")));\n    }\n\n    return false;\n  }\n\n  isIndicationAvailable() {\n    if (!hasWindow()) {\n      return false;\n    }\n\n    var today = this._getToday();\n\n    return today >= dateUtils.trimTime(new Date(this.getStartViewDate()));\n  }\n\n  isIndicatorVisible() {\n    var today = this._getToday();\n\n    var endViewDate = new Date(this.getEndViewDate().getTime() + toMs(\"minute\") - 1);\n    var firstViewDate = new Date(this.getStartViewDate());\n    firstViewDate.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\n    endViewDate.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\n    return dateUtils.dateInRange(today, firstViewDate, endViewDate);\n  }\n\n  _renderDateTimeIndication() {\n    if (this.isIndicationAvailable()) {\n      if (this.option(\"shadeUntilCurrentTime\")) {\n        this._shader.render();\n      }\n\n      if (this.isIndicationOnView() && this.isIndicatorVisible()) {\n        var groupCount = this._getGroupCount() || 1;\n\n        var $container = this._dateTableScrollable.$content();\n\n        var height = this.getIndicationHeight();\n\n        var rtlOffset = this._getRtlOffset(this.getCellWidth());\n\n        this._renderIndicator(height, rtlOffset, $container, groupCount);\n\n        this._setCurrentTimeCells();\n      }\n    }\n  }\n\n  _renderIndicator(height, rtlOffset, $container, groupCount) {\n    var groupedByDate = this.isGroupedByDate();\n    var repeatCount = groupedByDate ? 1 : groupCount;\n\n    for (var i = 0; i < repeatCount; i++) {\n      var $indicator = this._createIndicator($container);\n\n      setWidth($indicator, groupedByDate ? this.getCellWidth() * groupCount : this.getCellWidth());\n\n      this._groupedStrategy.shiftIndicator($indicator, height, rtlOffset, i);\n    }\n  }\n\n  _createIndicator($container) {\n    var $indicator = $(\"<div>\").addClass(SCHEDULER_DATE_TIME_INDICATOR_CLASS);\n    $container.append($indicator);\n    return $indicator;\n  }\n\n  _getRtlOffset(width) {\n    return this.option(\"rtlEnabled\") ? getBoundingRect(this._dateTableScrollable.$content().get(0)).width - this.getTimePanelWidth() - width : 0;\n  }\n\n  _setIndicationUpdateInterval() {\n    if (!this.option(\"showCurrentTimeIndicator\") || 0 === this.option(\"indicatorUpdateInterval\")) {\n      return;\n    }\n\n    this._clearIndicatorUpdateInterval();\n\n    this._indicatorInterval = setInterval(function () {\n      this._refreshDateTimeIndication();\n    }.bind(this), this.option(\"indicatorUpdateInterval\"));\n  }\n\n  _clearIndicatorUpdateInterval() {\n    if (this._indicatorInterval) {\n      clearInterval(this._indicatorInterval);\n      delete this._indicatorInterval;\n    }\n  }\n\n  _isVerticalShader() {\n    return true;\n  }\n\n  getIndicationWidth(groupIndex) {\n    var maxWidth = this.getCellWidth() * this._getCellCount();\n\n    var difference = this._getIndicatorDuration();\n\n    if (difference > this._getCellCount()) {\n      difference = this._getCellCount();\n    }\n\n    var width = difference * this.getRoundedCellWidth(groupIndex, groupIndex * this._getCellCount(), difference);\n    return maxWidth < width ? maxWidth : width;\n  }\n\n  getIndicatorOffset(groupIndex) {\n    var difference = this._getIndicatorDuration() - 1;\n    var offset = difference * this.getRoundedCellWidth(groupIndex, groupIndex * this._getCellCount(), difference);\n    return offset;\n  }\n\n  _getIndicatorDuration() {\n    var today = this._getToday();\n\n    var firstViewDate = new Date(this.getStartViewDate());\n    var timeDiff = today.getTime() - firstViewDate.getTime();\n\n    if (\"workWeek\" === this.option(\"type\")) {\n      timeDiff -= this._getWeekendsCount(Math.round(timeDiff / toMs(\"day\"))) * toMs(\"day\");\n    }\n\n    return Math.ceil((timeDiff + 1) / toMs(\"day\"));\n  }\n\n  getIndicationHeight() {\n    var today = timezoneUtils.getDateWithoutTimezoneChange(this._getToday());\n    var cellHeight = this.getCellHeight();\n    var date = new Date(this.getStartViewDate());\n\n    if (this.isIndicationOnView()) {\n      date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\n    }\n\n    var duration = today.getTime() - date.getTime();\n    var cellCount = duration / this.getCellDuration();\n    return cellCount * cellHeight;\n  }\n\n  _dispose() {\n    this._clearIndicatorUpdateInterval();\n\n    super._dispose.apply(this, arguments);\n  }\n\n  _refreshDateTimeIndication() {\n    var _this$_shader;\n\n    this._cleanDateTimeIndicator();\n\n    this._cleanCurrentTimeCells();\n\n    null === (_this$_shader = this._shader) || void 0 === _this$_shader ? void 0 : _this$_shader.clean();\n\n    this._renderDateTimeIndication();\n  }\n\n  _setCurrentTimeCells() {\n    var timePanelCells = this._getTimePanelCells();\n\n    var currentTimeCellIndices = this._getCurrentTimePanelCellIndices();\n\n    currentTimeCellIndices.forEach(timePanelCellIndex => {\n      timePanelCells.eq(timePanelCellIndex).addClass(TIME_PANEL_CURRENT_TIME_CELL_CLASS);\n    });\n  }\n\n  _isCurrentTimeHeaderCell(headerIndex) {\n    if (this.isIndicationOnView()) {\n      var completeDateHeaderMap = this.viewDataProvider.completeDateHeaderMap;\n      var date = completeDateHeaderMap[completeDateHeaderMap.length - 1][headerIndex].startDate;\n      return dateUtils.sameDate(date, this._getToday());\n    }\n\n    return false;\n  }\n\n  _getHeaderPanelCellClass(i) {\n    var cellClass = super._getHeaderPanelCellClass(i);\n\n    if (this._isCurrentTimeHeaderCell(i)) {\n      return cellClass + \" \" + HEADER_CURRENT_TIME_CELL_CLASS;\n    }\n\n    return cellClass;\n  }\n\n  _cleanView() {\n    super._cleanView();\n\n    this._cleanDateTimeIndicator();\n  }\n\n  _dimensionChanged() {\n    super._dimensionChanged();\n\n    this._refreshDateTimeIndication();\n  }\n\n  _cleanDateTimeIndicator() {\n    this.$element().find(\".\" + SCHEDULER_DATE_TIME_INDICATOR_CLASS).remove();\n  }\n\n  _cleanCurrentTimeCells() {\n    this.$element().find(\".\".concat(TIME_PANEL_CURRENT_TIME_CELL_CLASS)).removeClass(TIME_PANEL_CURRENT_TIME_CELL_CLASS);\n  }\n\n  _cleanWorkSpace() {\n    super._cleanWorkSpace();\n\n    this._renderDateTimeIndication();\n\n    this._setIndicationUpdateInterval();\n  }\n\n  _optionChanged(args) {\n    switch (args.name) {\n      case \"showCurrentTimeIndicator\":\n      case \"indicatorTime\":\n        this._cleanWorkSpace();\n\n        break;\n\n      case \"indicatorUpdateInterval\":\n        this._setIndicationUpdateInterval();\n\n        break;\n\n      case \"showAllDayPanel\":\n      case \"allDayExpanded\":\n      case \"crossScrollingEnabled\":\n        super._optionChanged(args);\n\n        this._refreshDateTimeIndication();\n\n        break;\n\n      case \"shadeUntilCurrentTime\":\n        this._refreshDateTimeIndication();\n\n        break;\n\n      default:\n        super._optionChanged(args);\n\n    }\n  }\n\n  _getDefaultOptions() {\n    return extend(super._getDefaultOptions(), {\n      showCurrentTimeIndicator: true,\n      indicatorTime: new Date(),\n      indicatorUpdateInterval: 5 * toMs(\"minute\"),\n      shadeUntilCurrentTime: true\n    });\n  }\n\n  _getCurrentTimePanelCellIndices() {\n    var rowCountPerGroup = this._getTimePanelRowCount();\n\n    var today = this._getToday();\n\n    var index = this.getCellIndexByDate(today);\n\n    var {\n      rowIndex: currentTimeRowIndex\n    } = this._getCellCoordinatesByIndex(index);\n\n    if (void 0 === currentTimeRowIndex) {\n      return [];\n    }\n\n    var cellIndices;\n\n    if (0 === currentTimeRowIndex) {\n      cellIndices = [currentTimeRowIndex];\n    } else {\n      cellIndices = currentTimeRowIndex % 2 === 0 ? [currentTimeRowIndex - 1, currentTimeRowIndex] : [currentTimeRowIndex, currentTimeRowIndex + 1];\n    }\n\n    var verticalGroupCount = this._isVerticalGroupedWorkSpace() ? this._getGroupCount() : 1;\n    return [...new Array(verticalGroupCount)].reduce((currentIndices, _, groupIndex) => [...currentIndices, ...cellIndices.map(cellIndex => rowCountPerGroup * groupIndex + cellIndex)], []);\n  }\n\n}\n\nregisterComponent(\"dxSchedulerWorkSpace\", SchedulerWorkSpaceIndicator);\nexport default SchedulerWorkSpaceIndicator;","map":{"version":3,"sources":["C:/Users/Zoran/source/repos/TransportApp/TransportLog-basic/node_modules/devextreme/esm/ui/scheduler/workspaces/ui.scheduler.work_space.indicator.js"],"names":["setWidth","$","SchedulerWorkSpace","registerComponent","dateUtils","extend","getBoundingRect","hasWindow","HEADER_CURRENT_TIME_CELL_CLASS","getToday","timezoneUtils","toMs","dateToMilliseconds","SCHEDULER_DATE_TIME_INDICATOR_CLASS","TIME_PANEL_CURRENT_TIME_CELL_CLASS","SchedulerWorkSpaceIndicator","_getToday","option","timeZoneCalculator","isIndicationOnView","today","endViewDate","trimTime","getEndViewDate","dateInRange","getStartViewDate","Date","getTime","isIndicationAvailable","isIndicatorVisible","firstViewDate","setFullYear","getFullYear","getMonth","getDate","_renderDateTimeIndication","_shader","render","groupCount","_getGroupCount","$container","_dateTableScrollable","$content","height","getIndicationHeight","rtlOffset","_getRtlOffset","getCellWidth","_renderIndicator","_setCurrentTimeCells","groupedByDate","isGroupedByDate","repeatCount","i","$indicator","_createIndicator","_groupedStrategy","shiftIndicator","addClass","append","width","get","getTimePanelWidth","_setIndicationUpdateInterval","_clearIndicatorUpdateInterval","_indicatorInterval","setInterval","_refreshDateTimeIndication","bind","clearInterval","_isVerticalShader","getIndicationWidth","groupIndex","maxWidth","_getCellCount","difference","_getIndicatorDuration","getRoundedCellWidth","getIndicatorOffset","offset","timeDiff","_getWeekendsCount","Math","round","ceil","getDateWithoutTimezoneChange","cellHeight","getCellHeight","date","duration","cellCount","getCellDuration","_dispose","apply","arguments","_this$_shader","_cleanDateTimeIndicator","_cleanCurrentTimeCells","clean","timePanelCells","_getTimePanelCells","currentTimeCellIndices","_getCurrentTimePanelCellIndices","forEach","timePanelCellIndex","eq","_isCurrentTimeHeaderCell","headerIndex","completeDateHeaderMap","viewDataProvider","length","startDate","sameDate","_getHeaderPanelCellClass","cellClass","_cleanView","_dimensionChanged","$element","find","remove","concat","removeClass","_cleanWorkSpace","_optionChanged","args","name","_getDefaultOptions","showCurrentTimeIndicator","indicatorTime","indicatorUpdateInterval","shadeUntilCurrentTime","rowCountPerGroup","_getTimePanelRowCount","index","getCellIndexByDate","rowIndex","currentTimeRowIndex","_getCellCoordinatesByIndex","cellIndices","verticalGroupCount","_isVerticalGroupedWorkSpace","Array","reduce","currentIndices","_","map","cellIndex"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/scheduler/workspaces/ui.scheduler.work_space.indicator.js)\r\n * Version: 22.1.6\r\n * Build date: Tue Oct 18 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    setWidth\r\n} from \"../../../core/utils/size\";\r\nimport $ from \"../../../core/renderer\";\r\nimport SchedulerWorkSpace from \"./ui.scheduler.work_space\";\r\nimport registerComponent from \"../../../core/component_registrator\";\r\nimport dateUtils from \"../../../core/utils/date\";\r\nimport {\r\n    extend\r\n} from \"../../../core/utils/extend\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../../core/utils/position\";\r\nimport {\r\n    hasWindow\r\n} from \"../../../core/utils/window\";\r\nimport {\r\n    HEADER_CURRENT_TIME_CELL_CLASS\r\n} from \"../classes\";\r\nimport {\r\n    getToday\r\n} from \"../../../renovation/ui/scheduler/view_model/to_test/views/utils/base\";\r\nimport timezoneUtils from \"../utils.timeZone\";\r\nvar toMs = dateUtils.dateToMilliseconds;\r\nvar SCHEDULER_DATE_TIME_INDICATOR_CLASS = \"dx-scheduler-date-time-indicator\";\r\nvar TIME_PANEL_CURRENT_TIME_CELL_CLASS = \"dx-scheduler-time-panel-current-time-cell\";\r\nclass SchedulerWorkSpaceIndicator extends SchedulerWorkSpace {\r\n    _getToday() {\r\n        return getToday(this.option(\"indicatorTime\"), this.timeZoneCalculator)\r\n    }\r\n    isIndicationOnView() {\r\n        if (this.option(\"showCurrentTimeIndicator\")) {\r\n            var today = this._getToday();\r\n            var endViewDate = dateUtils.trimTime(this.getEndViewDate());\r\n            return dateUtils.dateInRange(today, this.getStartViewDate(), new Date(endViewDate.getTime() + toMs(\"day\")))\r\n        }\r\n        return false\r\n    }\r\n    isIndicationAvailable() {\r\n        if (!hasWindow()) {\r\n            return false\r\n        }\r\n        var today = this._getToday();\r\n        return today >= dateUtils.trimTime(new Date(this.getStartViewDate()))\r\n    }\r\n    isIndicatorVisible() {\r\n        var today = this._getToday();\r\n        var endViewDate = new Date(this.getEndViewDate().getTime() + toMs(\"minute\") - 1);\r\n        var firstViewDate = new Date(this.getStartViewDate());\r\n        firstViewDate.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\r\n        endViewDate.setFullYear(today.getFullYear(), today.getMonth(), today.getDate());\r\n        return dateUtils.dateInRange(today, firstViewDate, endViewDate)\r\n    }\r\n    _renderDateTimeIndication() {\r\n        if (this.isIndicationAvailable()) {\r\n            if (this.option(\"shadeUntilCurrentTime\")) {\r\n                this._shader.render()\r\n            }\r\n            if (this.isIndicationOnView() && this.isIndicatorVisible()) {\r\n                var groupCount = this._getGroupCount() || 1;\r\n                var $container = this._dateTableScrollable.$content();\r\n                var height = this.getIndicationHeight();\r\n                var rtlOffset = this._getRtlOffset(this.getCellWidth());\r\n                this._renderIndicator(height, rtlOffset, $container, groupCount);\r\n                this._setCurrentTimeCells()\r\n            }\r\n        }\r\n    }\r\n    _renderIndicator(height, rtlOffset, $container, groupCount) {\r\n        var groupedByDate = this.isGroupedByDate();\r\n        var repeatCount = groupedByDate ? 1 : groupCount;\r\n        for (var i = 0; i < repeatCount; i++) {\r\n            var $indicator = this._createIndicator($container);\r\n            setWidth($indicator, groupedByDate ? this.getCellWidth() * groupCount : this.getCellWidth());\r\n            this._groupedStrategy.shiftIndicator($indicator, height, rtlOffset, i)\r\n        }\r\n    }\r\n    _createIndicator($container) {\r\n        var $indicator = $(\"<div>\").addClass(SCHEDULER_DATE_TIME_INDICATOR_CLASS);\r\n        $container.append($indicator);\r\n        return $indicator\r\n    }\r\n    _getRtlOffset(width) {\r\n        return this.option(\"rtlEnabled\") ? getBoundingRect(this._dateTableScrollable.$content().get(0)).width - this.getTimePanelWidth() - width : 0\r\n    }\r\n    _setIndicationUpdateInterval() {\r\n        if (!this.option(\"showCurrentTimeIndicator\") || 0 === this.option(\"indicatorUpdateInterval\")) {\r\n            return\r\n        }\r\n        this._clearIndicatorUpdateInterval();\r\n        this._indicatorInterval = setInterval(function() {\r\n            this._refreshDateTimeIndication()\r\n        }.bind(this), this.option(\"indicatorUpdateInterval\"))\r\n    }\r\n    _clearIndicatorUpdateInterval() {\r\n        if (this._indicatorInterval) {\r\n            clearInterval(this._indicatorInterval);\r\n            delete this._indicatorInterval\r\n        }\r\n    }\r\n    _isVerticalShader() {\r\n        return true\r\n    }\r\n    getIndicationWidth(groupIndex) {\r\n        var maxWidth = this.getCellWidth() * this._getCellCount();\r\n        var difference = this._getIndicatorDuration();\r\n        if (difference > this._getCellCount()) {\r\n            difference = this._getCellCount()\r\n        }\r\n        var width = difference * this.getRoundedCellWidth(groupIndex, groupIndex * this._getCellCount(), difference);\r\n        return maxWidth < width ? maxWidth : width\r\n    }\r\n    getIndicatorOffset(groupIndex) {\r\n        var difference = this._getIndicatorDuration() - 1;\r\n        var offset = difference * this.getRoundedCellWidth(groupIndex, groupIndex * this._getCellCount(), difference);\r\n        return offset\r\n    }\r\n    _getIndicatorDuration() {\r\n        var today = this._getToday();\r\n        var firstViewDate = new Date(this.getStartViewDate());\r\n        var timeDiff = today.getTime() - firstViewDate.getTime();\r\n        if (\"workWeek\" === this.option(\"type\")) {\r\n            timeDiff -= this._getWeekendsCount(Math.round(timeDiff / toMs(\"day\"))) * toMs(\"day\")\r\n        }\r\n        return Math.ceil((timeDiff + 1) / toMs(\"day\"))\r\n    }\r\n    getIndicationHeight() {\r\n        var today = timezoneUtils.getDateWithoutTimezoneChange(this._getToday());\r\n        var cellHeight = this.getCellHeight();\r\n        var date = new Date(this.getStartViewDate());\r\n        if (this.isIndicationOnView()) {\r\n            date.setFullYear(today.getFullYear(), today.getMonth(), today.getDate())\r\n        }\r\n        var duration = today.getTime() - date.getTime();\r\n        var cellCount = duration / this.getCellDuration();\r\n        return cellCount * cellHeight\r\n    }\r\n    _dispose() {\r\n        this._clearIndicatorUpdateInterval();\r\n        super._dispose.apply(this, arguments)\r\n    }\r\n    _refreshDateTimeIndication() {\r\n        var _this$_shader;\r\n        this._cleanDateTimeIndicator();\r\n        this._cleanCurrentTimeCells();\r\n        null === (_this$_shader = this._shader) || void 0 === _this$_shader ? void 0 : _this$_shader.clean();\r\n        this._renderDateTimeIndication()\r\n    }\r\n    _setCurrentTimeCells() {\r\n        var timePanelCells = this._getTimePanelCells();\r\n        var currentTimeCellIndices = this._getCurrentTimePanelCellIndices();\r\n        currentTimeCellIndices.forEach(timePanelCellIndex => {\r\n            timePanelCells.eq(timePanelCellIndex).addClass(TIME_PANEL_CURRENT_TIME_CELL_CLASS)\r\n        })\r\n    }\r\n    _isCurrentTimeHeaderCell(headerIndex) {\r\n        if (this.isIndicationOnView()) {\r\n            var completeDateHeaderMap = this.viewDataProvider.completeDateHeaderMap;\r\n            var date = completeDateHeaderMap[completeDateHeaderMap.length - 1][headerIndex].startDate;\r\n            return dateUtils.sameDate(date, this._getToday())\r\n        }\r\n        return false\r\n    }\r\n    _getHeaderPanelCellClass(i) {\r\n        var cellClass = super._getHeaderPanelCellClass(i);\r\n        if (this._isCurrentTimeHeaderCell(i)) {\r\n            return cellClass + \" \" + HEADER_CURRENT_TIME_CELL_CLASS\r\n        }\r\n        return cellClass\r\n    }\r\n    _cleanView() {\r\n        super._cleanView();\r\n        this._cleanDateTimeIndicator()\r\n    }\r\n    _dimensionChanged() {\r\n        super._dimensionChanged();\r\n        this._refreshDateTimeIndication()\r\n    }\r\n    _cleanDateTimeIndicator() {\r\n        this.$element().find(\".\" + SCHEDULER_DATE_TIME_INDICATOR_CLASS).remove()\r\n    }\r\n    _cleanCurrentTimeCells() {\r\n        this.$element().find(\".\".concat(TIME_PANEL_CURRENT_TIME_CELL_CLASS)).removeClass(TIME_PANEL_CURRENT_TIME_CELL_CLASS)\r\n    }\r\n    _cleanWorkSpace() {\r\n        super._cleanWorkSpace();\r\n        this._renderDateTimeIndication();\r\n        this._setIndicationUpdateInterval()\r\n    }\r\n    _optionChanged(args) {\r\n        switch (args.name) {\r\n            case \"showCurrentTimeIndicator\":\r\n            case \"indicatorTime\":\r\n                this._cleanWorkSpace();\r\n                break;\r\n            case \"indicatorUpdateInterval\":\r\n                this._setIndicationUpdateInterval();\r\n                break;\r\n            case \"showAllDayPanel\":\r\n            case \"allDayExpanded\":\r\n            case \"crossScrollingEnabled\":\r\n                super._optionChanged(args);\r\n                this._refreshDateTimeIndication();\r\n                break;\r\n            case \"shadeUntilCurrentTime\":\r\n                this._refreshDateTimeIndication();\r\n                break;\r\n            default:\r\n                super._optionChanged(args)\r\n        }\r\n    }\r\n    _getDefaultOptions() {\r\n        return extend(super._getDefaultOptions(), {\r\n            showCurrentTimeIndicator: true,\r\n            indicatorTime: new Date,\r\n            indicatorUpdateInterval: 5 * toMs(\"minute\"),\r\n            shadeUntilCurrentTime: true\r\n        })\r\n    }\r\n    _getCurrentTimePanelCellIndices() {\r\n        var rowCountPerGroup = this._getTimePanelRowCount();\r\n        var today = this._getToday();\r\n        var index = this.getCellIndexByDate(today);\r\n        var {\r\n            rowIndex: currentTimeRowIndex\r\n        } = this._getCellCoordinatesByIndex(index);\r\n        if (void 0 === currentTimeRowIndex) {\r\n            return []\r\n        }\r\n        var cellIndices;\r\n        if (0 === currentTimeRowIndex) {\r\n            cellIndices = [currentTimeRowIndex]\r\n        } else {\r\n            cellIndices = currentTimeRowIndex % 2 === 0 ? [currentTimeRowIndex - 1, currentTimeRowIndex] : [currentTimeRowIndex, currentTimeRowIndex + 1]\r\n        }\r\n        var verticalGroupCount = this._isVerticalGroupedWorkSpace() ? this._getGroupCount() : 1;\r\n        return [...new Array(verticalGroupCount)].reduce((currentIndices, _, groupIndex) => [...currentIndices, ...cellIndices.map(cellIndex => rowCountPerGroup * groupIndex + cellIndex)], [])\r\n    }\r\n}\r\nregisterComponent(\"dxSchedulerWorkSpace\", SchedulerWorkSpaceIndicator);\r\nexport default SchedulerWorkSpaceIndicator;\r\n"]},"metadata":{},"sourceType":"module"}