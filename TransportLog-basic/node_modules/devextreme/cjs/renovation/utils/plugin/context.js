/**
 * DevExtreme (cjs/renovation/utils/plugin/context.js)
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
exports.PluginsContext = exports.Plugins = exports.PluginSelector = exports.PluginGetter = exports.PluginEntity = void 0;
exports.createGetter = createGetter;
exports.createPlaceholder = createPlaceholder;
exports.createSelector = createSelector;
exports.createValue = createValue;
var _inferno = require("@devextreme/runtime/inferno");

function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass)
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(o, p) {
        o.__proto__ = p;
        return o
    };
    return _setPrototypeOf(o, p)
}
var nextEntityId = 1;
var PluginEntity = function() {
    function PluginEntity() {
        this.id = nextEntityId;
        nextEntityId += 1
    }
    var _proto = PluginEntity.prototype;
    _proto.getValue = function(value, _plugins) {
        return value
    };
    return PluginEntity
}();
exports.PluginEntity = PluginEntity;
var PluginGetter = function(_PluginEntity) {
    _inheritsLoose(PluginGetter, _PluginEntity);

    function PluginGetter(defaultValue) {
        var _this;
        _this = _PluginEntity.call(this) || this;
        _this.defaultValue = defaultValue;
        return _this
    }
    var _proto2 = PluginGetter.prototype;
    _proto2.getValue = function(value, plugins) {
        var _this2 = this;
        if (!value) {
            return this.defaultValue
        }
        return value.reduce((function(base, item) {
            if (plugins && item.deps) {
                var hasValues = item.deps.every((function(entity) {
                    return plugins.hasValue(entity)
                }));
                if (!hasValues) {
                    return base
                }
                var args = item.deps.map((function(entity) {
                    if (entity.id === _this2.id) {
                        return base
                    }
                    return plugins.getValue(entity)
                }));
                return item.func.apply(null, args)
            }
            return item.func(base)
        }), this.defaultValue)
    };
    return PluginGetter
}(PluginEntity);
exports.PluginGetter = PluginGetter;
var PluginSelector = function(_PluginEntity2) {
    _inheritsLoose(PluginSelector, _PluginEntity2);

    function PluginSelector(deps, func) {
        var _this3;
        _this3 = _PluginEntity2.call(this) || this;
        _this3.deps = deps;
        _this3.func = func;
        return _this3
    }
    return PluginSelector
}(PluginEntity);
exports.PluginSelector = PluginSelector;

function createValue() {
    return new PluginEntity
}

function createSelector(deps, func) {
    return new PluginSelector(deps, func)
}

function createGetter(defaultValue) {
    return new PluginGetter(defaultValue)
}

function createPlaceholder() {
    return new PluginEntity
}

function createUnsubscribeFunction(childSubscriptionsList, subscription) {
    return function() {
        childSubscriptionsList.forEach((function(childSubscriptions) {
            var index = childSubscriptions.indexOf(subscription);
            if (index >= 0) {
                childSubscriptions.splice(index, 1)
            }
        }))
    }
}
var Plugins = function() {
    function Plugins() {
        this.items = {};
        this.subscriptions = {};
        this.subscribedSelectors = {}
    }
    var _proto3 = Plugins.prototype;
    _proto3.set = function(entity, value) {
        var force = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : false;
        if (entity.id in this.items && this.items[entity.id] === value && !force) {
            return
        }
        this.items[entity.id] = value;
        this.fireSubscriptions(entity)
    };
    _proto3.fireSubscriptions = function(entity) {
        var value = this.items[entity.id];
        var subscriptions = this.subscriptions[entity.id];
        if (subscriptions) {
            var callbackValue = entity.getValue(value, this);
            subscriptions.forEach((function(handler) {
                handler(callbackValue)
            }))
        }
    };
    _proto3.extend = function(entity, order, func, deps) {
        var _this4 = this;
        var value = this.items[entity.id] || [];
        var insertIndex = value.filter((function(item) {
            return item.order < order
        })).length;
        var item = {
            order: order,
            func: func,
            deps: deps
        };
        var unsubscribe = deps ? this.subscribeToGetterItemDeps(entity, deps) : void 0;
        value.splice(insertIndex, 0, item);
        this.set(entity, value, true);
        return function() {
            var index = value.indexOf(item);
            if (index >= 0) {
                value.splice(index, 1);
                null === unsubscribe || void 0 === unsubscribe ? void 0 : unsubscribe();
                _this4.set(entity, value, true)
            }
        }
    };
    _proto3.extendPlaceholder = function(entity, order, component) {
        var _this5 = this;
        var deps = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : [];
        var value = this.items[entity.id] || [];
        var insertIndex = value.filter((function(item) {
            return item.order < order
        })).length;
        var item = {
            order: order,
            component: component,
            deps: deps
        };
        value.splice(insertIndex, 0, item);
        this.set(entity, value, true);
        return function() {
            var index = value.indexOf(item);
            if (index >= 0) {
                value.splice(index, 1);
                _this5.set(entity, value, true)
            }
        }
    };
    _proto3.getValue = function(entity) {
        this.update(entity);
        var value = this.items[entity.id];
        return entity.getValue(value, this)
    };
    _proto3.hasValue = function(entity) {
        if (entity instanceof PluginGetter) {
            return true
        }
        return entity.id in this.items
    };
    _proto3.updateSelectorValue = function(entity) {
        var _this6 = this;
        var childValues = entity.deps.map((function(childEntity) {
            return _this6.getValue(childEntity)
        }));
        var newValue = entity.func.apply(null, childValues);
        this.set(entity, newValue)
    };
    _proto3.subscribeToSelectorDeps = function(entity) {
        var _this7 = this;
        if (!this.subscribedSelectors[entity.id]) {
            this.subscribedSelectors[entity.id] = true;
            entity.deps.forEach((function(childEntity) {
                var childSubscriptions = _this7.getSubscriptions(childEntity);
                childSubscriptions.push((function() {
                    _this7.update(entity, true)
                }))
            }))
        }
    };
    _proto3.subscribeToGetterItemDeps = function(getter, deps) {
        var _this8 = this;
        var fireEntitySubscriptions = function() {
            return _this8.fireSubscriptions(getter)
        };
        var childSubscriptionsList = deps.filter((function(childEntity) {
            return childEntity.id !== getter.id
        })).map((function(childEntity) {
            return _this8.getSubscriptions(childEntity)
        }));
        childSubscriptionsList.forEach((function(childSubscriptions) {
            childSubscriptions.push(fireEntitySubscriptions)
        }));
        return createUnsubscribeFunction(childSubscriptionsList, fireEntitySubscriptions)
    };
    _proto3.updateSelector = function(entity) {
        var _this9 = this;
        entity.deps.forEach((function(child) {
            _this9.update(child)
        }));
        this.subscribeToSelectorDeps(entity);
        if (entity.deps.every((function(childEntity) {
                return _this9.hasValue(childEntity)
            }))) {
            this.updateSelectorValue(entity)
        }
    };
    _proto3.update = function(entity) {
        var force = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : false;
        if (entity instanceof PluginSelector) {
            if (!this.hasValue(entity) || force) {
                this.updateSelector(entity)
            }
        }
    };
    _proto3.getSubscriptions = function(entity) {
        var subscriptions = this.subscriptions[entity.id] || [];
        this.subscriptions[entity.id] = subscriptions;
        return subscriptions
    };
    _proto3.watch = function(entity, callback) {
        this.update(entity);
        if (this.hasValue(entity)) {
            var value = this.items[entity.id];
            var callbackValue = entity.getValue(value, this);
            callback(callbackValue)
        }
        var subscriptions = this.getSubscriptions(entity);
        subscriptions.push(callback);
        return function() {
            var index = subscriptions.indexOf(callback);
            if (index >= 0) {
                subscriptions.splice(index, 1)
            }
        }
    };
    _proto3.callAction = function(entity) {
        var value = this.getValue(entity);
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key]
        }
        return null === value || void 0 === value ? void 0 : value.apply(void 0, args)
    };
    return Plugins
}();
exports.Plugins = Plugins;
var PluginsContext = (0, _inferno.createContext)(null);
exports.PluginsContext = PluginsContext;
