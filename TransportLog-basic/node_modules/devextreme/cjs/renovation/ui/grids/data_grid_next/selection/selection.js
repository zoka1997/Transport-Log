/**
 * DevExtreme (cjs/renovation/ui/grids/data_grid_next/selection/selection.js)
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
exports.viewFunction = exports.DataGridNextSelectionProps = exports.DataGridNextSelection = void 0;
var _inferno = require("inferno");
var _inferno2 = require("@devextreme/runtime/inferno");
var _context = require("../../../../utils/plugin/context");
var _classes = _interopRequireDefault(require("../classes"));
var _value_setter = require("../../../../utils/plugin/value_setter");
var _template_setter = require("../../../../utils/plugin/template_setter");
var _getter_extender = require("../../../../utils/plugin/getter_extender");
var _select_checkbox = require("./select_checkbox");
var _select_all_checkbox = require("./select_all_checkbox");
var _plugins = require("../plugins");
var _row_base = require("../widgets/row_base");
var _table_content = require("../views/table_content");
var _plugins2 = require("./plugins");
var _excluded = ["allowSelectAll", "defaultSelectedRowKeys", "mode", "selectAllMode", "selectedRowKeys", "selectedRowKeysChange"];

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    }
}

function _objectWithoutProperties(source, excluded) {
    if (null == source) {
        return {}
    }
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) {
                continue
            }
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) {
                continue
            }
            target[key] = source[key]
        }
    }
    return target
}

function _objectWithoutPropertiesLoose(source, excluded) {
    if (null == source) {
        return {}
    }
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) {
            continue
        }
        target[key] = source[key]
    }
    return target
}

function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key]
                }
            }
        }
        return target
    };
    return _extends.apply(this, arguments)
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) {
            descriptor.writable = true
        }
        Object.defineProperty(target, descriptor.key, descriptor)
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) {
        _defineProperties(Constructor.prototype, protoProps)
    }
    if (staticProps) {
        _defineProperties(Constructor, staticProps)
    }
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor
}

function _assertThisInitialized(self) {
    if (void 0 === self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self
}

function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass)
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(o, p) {
        o.__proto__ = p;
        return o
    };
    return _setPrototypeOf(o, p)
}
var viewFunction = function(viewModel) {
    return (0, _inferno.createFragment)([(0, _inferno.createComponentVNode)(2, _value_setter.ValueSetter, {
        type: _plugins2.SelectedRowKeys,
        value: viewModel.props.selectedRowKeys
    }), (0, _inferno.createComponentVNode)(2, _value_setter.ValueSetter, {
        type: _plugins2.SetSelectedRowKeys,
        value: viewModel.setSelectedRowKeys
    }), (0, _inferno.createComponentVNode)(2, _value_setter.ValueSetter, {
        type: _plugins2.SelectAllModeValue,
        value: viewModel.props.selectAllMode
    }), (0, _inferno.createComponentVNode)(2, _value_setter.ValueSetter, {
        type: _plugins2.SelectionModeValue,
        value: viewModel.props.mode
    }), (0, _inferno.createComponentVNode)(2, _value_setter.ValueSetter, {
        type: _plugins2.AllowSelectAllValue,
        value: viewModel.props.allowSelectAll
    }), (0, _inferno.createComponentVNode)(2, _template_setter.TemplateSetter, {
        type: _plugins2.SelectionCheckboxTemplate,
        template: function(_ref) {
            var data = _ref.data;
            return (0, _inferno.createComponentVNode)(2, _select_checkbox.SelectionCheckbox, {
                data: data
            })
        }
    }), (0, _inferno.createComponentVNode)(2, _template_setter.TemplateSetter, {
        type: _plugins2.SelectAllCheckboxTemplate,
        template: _select_all_checkbox.SelectAllCheckbox
    }), (0, _inferno.createComponentVNode)(2, _getter_extender.GetterExtender, {
        type: _plugins.VisibleColumns,
        order: 2,
        value: _plugins2.AddSelectionColumnToVisibleColumns
    }), (0, _inferno.createComponentVNode)(2, _getter_extender.GetterExtender, {
        type: _row_base.RowPropertiesGetter,
        order: 1,
        value: _plugins2.AddSelectionToRowProperties
    }), (0, _inferno.createComponentVNode)(2, _getter_extender.GetterExtender, {
        type: _row_base.RowClassesGetter,
        order: 1,
        value: _plugins2.AddSelectionToRowClasses
    })], 4)
};
exports.viewFunction = viewFunction;
var DataGridNextSelectionProps = {
    mode: "single",
    allowSelectAll: true,
    selectAllMode: "allPages",
    defaultSelectedRowKeys: Object.freeze([]),
    selectedRowKeysChange: function() {}
};
exports.DataGridNextSelectionProps = DataGridNextSelectionProps;
var DataGridNextSelection = function(_InfernoComponent) {
    _inheritsLoose(DataGridNextSelection, _InfernoComponent);

    function DataGridNextSelection(props) {
        var _this;
        _this = _InfernoComponent.call(this, props) || this;
        _this.state = {
            selectedRowKeys: void 0 !== _this.props.selectedRowKeys ? _this.props.selectedRowKeys : _this.props.defaultSelectedRowKeys
        };
        _this.setRowClickEvent = _this.setRowClickEvent.bind(_assertThisInitialized(_this));
        _this.selectAll = _this.selectAll.bind(_assertThisInitialized(_this));
        _this.clearSelection = _this.clearSelection.bind(_assertThisInitialized(_this));
        _this.setSelectedRowKeys = _this.setSelectedRowKeys.bind(_assertThisInitialized(_this));
        return _this
    }
    var _proto = DataGridNextSelection.prototype;
    _proto.createEffects = function() {
        return [new _inferno2.InfernoEffect(this.setRowClickEvent, [this.plugins])]
    };
    _proto.updateEffects = function() {
        var _this$_effects$;
        null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.plugins])
    };
    _proto.setRowClickEvent = function() {
        var _this2 = this;
        this.plugins.set(_table_content.RowClick, (function(row, event) {
            var isSelectCheckBox = Boolean(event.target.closest(".".concat(_classes.default.selectCheckbox)));
            if (!isSelectCheckBox) {
                _this2.plugins.callAction(_plugins2.ToggleSelected, row.data)
            }
        }))
    };
    _proto.setSelectedRowKeys = function(keys) {
        var __newValue;
        this.setState((function(__state_argument) {
            __newValue = keys;
            return {
                selectedRowKeys: __newValue
            }
        }));
        this.props.selectedRowKeysChange(__newValue)
    };
    _proto.selectAll = function() {
        this.plugins.callAction(_plugins2.SelectAll)
    };
    _proto.clearSelection = function() {
        this.plugins.callAction(_plugins2.ClearSelection)
    };
    _proto.render = function() {
        var props = this.props;
        return viewFunction({
            props: _extends({}, props, {
                selectedRowKeys: void 0 !== this.props.selectedRowKeys ? this.props.selectedRowKeys : this.state.selectedRowKeys
            }),
            plugins: this.plugins,
            setSelectedRowKeys: this.setSelectedRowKeys,
            restAttributes: this.restAttributes
        })
    };
    _createClass(DataGridNextSelection, [{
        key: "plugins",
        get: function() {
            if ("PluginsContext" in this.context) {
                return this.context.PluginsContext
            }
            return _context.PluginsContext
        }
    }, {
        key: "restAttributes",
        get: function() {
            var _this$props$selectedR = _extends({}, this.props, {
                    selectedRowKeys: void 0 !== this.props.selectedRowKeys ? this.props.selectedRowKeys : this.state.selectedRowKeys
                }),
                restProps = (_this$props$selectedR.allowSelectAll, _this$props$selectedR.defaultSelectedRowKeys, _this$props$selectedR.mode, _this$props$selectedR.selectAllMode, _this$props$selectedR.selectedRowKeys, _this$props$selectedR.selectedRowKeysChange, _objectWithoutProperties(_this$props$selectedR, _excluded));
            return restProps
        }
    }]);
    return DataGridNextSelection
}(_inferno2.InfernoComponent);
exports.DataGridNextSelection = DataGridNextSelection;
DataGridNextSelection.defaultProps = DataGridNextSelectionProps;
