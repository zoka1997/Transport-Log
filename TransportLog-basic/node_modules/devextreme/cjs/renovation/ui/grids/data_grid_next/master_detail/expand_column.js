/**
 * DevExtreme (cjs/renovation/ui/grids/data_grid_next/master_detail/expand_column.js)
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
exports.viewFunction = exports.ExpandColumnProps = exports.ExpandColumn = void 0;
var _inferno = require("inferno");
var _inferno2 = require("@devextreme/runtime/inferno");
var _context = require("../../../../utils/plugin/context");
var _plugins = require("./plugins");
var _events_engine = _interopRequireDefault(require("../../../../../events/core/events_engine"));
var _click = require("../../../../../events/click");
var _plugins2 = require("../plugins");
var _utils = require("../utils");
var _classes = _interopRequireDefault(require("../classes"));
var _excluded = ["data"];

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    }
}

function _objectWithoutProperties(source, excluded) {
    if (null == source) {
        return {}
    }
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) {
                continue
            }
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) {
                continue
            }
            target[key] = source[key]
        }
    }
    return target
}

function _objectWithoutPropertiesLoose(source, excluded) {
    if (null == source) {
        return {}
    }
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) {
            continue
        }
        target[key] = source[key]
    }
    return target
}

function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key]
                }
            }
        }
        return target
    };
    return _extends.apply(this, arguments)
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) {
            descriptor.writable = true
        }
        Object.defineProperty(target, descriptor.key, descriptor)
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) {
        _defineProperties(Constructor.prototype, protoProps)
    }
    if (staticProps) {
        _defineProperties(Constructor, staticProps)
    }
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor
}

function _assertThisInitialized(self) {
    if (void 0 === self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self
}

function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass)
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(o, p) {
        o.__proto__ = p;
        return o
    };
    return _setPrototypeOf(o, p)
}
var getKey = (0, _utils.createGetKey)("Master-Detail");
var viewFunction = function(viewModel) {
    return (0, _inferno.createVNode)(1, "td", "".concat(_classes.default.commandExpand, " ").concat(_classes.default.groupSpace, " ").concat(_classes.default.expand), (0, _inferno.createVNode)(1, "div", viewModel.isExpanded ? _classes.default.groupOpened : _classes.default.groupClosed), 2, null, null, viewModel.cellRef)
};
exports.viewFunction = viewFunction;
var ExpandColumnProps = {};
exports.ExpandColumnProps = ExpandColumnProps;
var ExpandColumn = function(_InfernoComponent) {
    _inheritsLoose(ExpandColumn, _InfernoComponent);

    function ExpandColumn(props) {
        var _this;
        _this = _InfernoComponent.call(this, props) || this;
        _this.cellRef = (0, _inferno.createRef)();
        _this.state = {
            keyExpr: void 0,
            isExpanded: false
        };
        _this.watchKeyExpr = _this.watchKeyExpr.bind(_assertThisInitialized(_this));
        _this.updateIsExpanded = _this.updateIsExpanded.bind(_assertThisInitialized(_this));
        _this.subscribeToRowClick = _this.subscribeToRowClick.bind(_assertThisInitialized(_this));
        _this.onExpandColumnClick = _this.onExpandColumnClick.bind(_assertThisInitialized(_this));
        _this.toggleExpanded = _this.toggleExpanded.bind(_assertThisInitialized(_this));
        return _this
    }
    var _proto = ExpandColumn.prototype;
    _proto.createEffects = function() {
        return [new _inferno2.InfernoEffect(this.watchKeyExpr, [this.plugins]), new _inferno2.InfernoEffect(this.updateIsExpanded, [this.plugins, this.props.data, this.state.keyExpr]), new _inferno2.InfernoEffect(this.subscribeToRowClick, [this.plugins, this.state.isExpanded, this.props.data, this.state.keyExpr])]
    };
    _proto.updateEffects = function() {
        var _this$_effects$, _this$_effects$2, _this$_effects$3;
        null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.plugins]);
        null === (_this$_effects$2 = this._effects[1]) || void 0 === _this$_effects$2 ? void 0 : _this$_effects$2.update([this.plugins, this.props.data, this.state.keyExpr]);
        null === (_this$_effects$3 = this._effects[2]) || void 0 === _this$_effects$3 ? void 0 : _this$_effects$3.update([this.plugins, this.state.isExpanded, this.props.data, this.state.keyExpr])
    };
    _proto.watchKeyExpr = function() {
        var _this2 = this;
        return this.plugins.watch(_plugins2.KeyExprPlugin, (function(keyExpr) {
            _this2.setState((function(__state_argument) {
                return {
                    keyExpr: keyExpr
                }
            }))
        }))
    };
    _proto.updateIsExpanded = function() {
        var _this3 = this;
        return this.plugins.watch(_plugins.IsExpanded, (function(isExpanded) {
            _this3.setState((function(__state_argument) {
                return {
                    isExpanded: isExpanded(getKey(_this3.props.data, _this3.state.keyExpr))
                }
            }))
        }))
    };
    _proto.subscribeToRowClick = function() {
        var _this4 = this;
        _events_engine.default.on(this.cellRef.current, _click.name, this.onExpandColumnClick);
        return function() {
            return _events_engine.default.off(_this4.cellRef.current, _click.name, _this4.onExpandColumnClick)
        }
    };
    _proto.onExpandColumnClick = function(e) {
        var target = e.target;
        if (target.closest(".dx-datagrid-expand")) {
            this.toggleExpanded(getKey(this.props.data, this.state.keyExpr))
        }
    };
    _proto.toggleExpanded = function(key) {
        this.plugins.callAction(_plugins.SetExpanded, key, !this.state.isExpanded)
    };
    _proto.render = function() {
        var props = this.props;
        return viewFunction({
            props: _extends({}, props),
            keyExpr: this.state.keyExpr,
            isExpanded: this.state.isExpanded,
            cellRef: this.cellRef,
            plugins: this.plugins,
            onExpandColumnClick: this.onExpandColumnClick,
            toggleExpanded: this.toggleExpanded,
            restAttributes: this.restAttributes
        })
    };
    _createClass(ExpandColumn, [{
        key: "plugins",
        get: function() {
            if ("PluginsContext" in this.context) {
                return this.context.PluginsContext
            }
            return _context.PluginsContext
        }
    }, {
        key: "restAttributes",
        get: function() {
            var _this$props = this.props,
                restProps = (_this$props.data, _objectWithoutProperties(_this$props, _excluded));
            return restProps
        }
    }]);
    return ExpandColumn
}(_inferno2.InfernoComponent);
exports.ExpandColumn = ExpandColumn;
ExpandColumn.defaultProps = ExpandColumnProps;
