/**
 * DevExtreme (cjs/renovation/ui/grids/data_grid_next/pager/pager.js)
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
exports.viewFunction = exports.DataGridNextPagerProps = exports.DataGridNextPager = void 0;
var _inferno = require("inferno");
var _inferno2 = require("@devextreme/runtime/inferno");
var _placeholder_extender = require("../../../../utils/plugin/placeholder_extender");
var _message = _interopRequireDefault(require("../../../../../localization/message"));
var _content = require("../../../pager/content");
var _plugins = require("../paging/plugins");
var _plugins2 = require("../plugins");
var _footer = require("../views/footer");
var _context = require("../../../../utils/plugin/context");
var _classes = _interopRequireDefault(require("../classes"));
var _excluded = ["allowedPageSizes", "displayMode", "infoText", "showInfo", "showNavigationButtons", "showPageSizeSelector", "visible"];

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    }
}

function _objectWithoutProperties(source, excluded) {
    if (null == source) {
        return {}
    }
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) {
                continue
            }
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) {
                continue
            }
            target[key] = source[key]
        }
    }
    return target
}

function _objectWithoutPropertiesLoose(source, excluded) {
    if (null == source) {
        return {}
    }
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) {
            continue
        }
        target[key] = source[key]
    }
    return target
}

function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key]
                }
            }
        }
        return target
    };
    return _extends.apply(this, arguments)
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) {
            descriptor.writable = true
        }
        Object.defineProperty(target, descriptor.key, descriptor)
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) {
        _defineProperties(Constructor.prototype, protoProps)
    }
    if (staticProps) {
        _defineProperties(Constructor, staticProps)
    }
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor
}

function _assertThisInitialized(self) {
    if (void 0 === self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self
}

function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass)
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(o, p) {
        o.__proto__ = p;
        return o
    };
    return _setPrototypeOf(o, p)
}
var viewFunction = function(_ref) {
    var allowedPageSizes = _ref.allowedPageSizes,
        onPageIndexChange = _ref.onPageIndexChange,
        onPageSizeChange = _ref.onPageSizeChange,
        _ref$props = _ref.props,
        displayMode = _ref$props.displayMode,
        infoText = _ref$props.infoText,
        showInfo = _ref$props.showInfo,
        showNavigationButtons = _ref$props.showNavigationButtons,
        showPageSizeSelector = _ref$props.showPageSizeSelector,
        visible = _ref$props.visible;
    return (0, _inferno.createComponentVNode)(2, _placeholder_extender.PlaceholderExtender, {
        type: _footer.FooterPlaceholder,
        order: 1,
        deps: [_plugins.PageIndex, _plugins.PageSize, _plugins2.TotalCount, _plugins.PageCount],
        template: function(_ref2) {
            var deps = _ref2.deps;
            return (0, _inferno.createComponentVNode)(2, _content.PagerContent, {
                className: _classes.default.pager,
                pageSizes: allowedPageSizes,
                displayMode: displayMode,
                infoText: infoText,
                showInfo: showInfo,
                showNavigationButtons: showNavigationButtons,
                showPageSizes: showPageSizeSelector,
                pageCount: deps[3],
                visible: visible,
                totalCount: deps[2],
                pageIndex: deps[0],
                pageIndexChange: onPageIndexChange,
                pageSize: "all" === deps[1] ? 0 : deps[1],
                pageSizeChange: onPageSizeChange
            })
        }
    })
};
exports.viewFunction = viewFunction;
var DataGridNextPagerProps = Object.defineProperties({
    allowedPageSizes: "auto",
    displayMode: "adaptive",
    showInfo: false,
    showNavigationButtons: false,
    showPageSizeSelector: false,
    visible: true
}, {
    infoText: {
        get: function() {
            return _message.default.format("dxPager-infoText")
        },
        configurable: true,
        enumerable: true
    }
});
exports.DataGridNextPagerProps = DataGridNextPagerProps;
var DataGridNextPager = function(_InfernoComponent) {
    _inheritsLoose(DataGridNextPager, _InfernoComponent);

    function DataGridNextPager(props) {
        var _this;
        _this = _InfernoComponent.call(this, props) || this;
        _this.__getterCache = {};
        _this.state = {
            pageSize: "all"
        };
        _this.updatePageSize = _this.updatePageSize.bind(_assertThisInitialized(_this));
        _this.onPageSizeChange = _this.onPageSizeChange.bind(_assertThisInitialized(_this));
        _this.onPageIndexChange = _this.onPageIndexChange.bind(_assertThisInitialized(_this));
        return _this
    }
    var _proto = DataGridNextPager.prototype;
    _proto.createEffects = function() {
        return [new _inferno2.InfernoEffect(this.updatePageSize, [this.plugins])]
    };
    _proto.updateEffects = function() {
        var _this$_effects$;
        null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.plugins])
    };
    _proto.updatePageSize = function() {
        var _this2 = this;
        return this.plugins.watch(_plugins.PageSize, (function(pageSize) {
            _this2.setState((function(__state_argument) {
                return {
                    pageSize: pageSize
                }
            }))
        }))
    };
    _proto.onPageSizeChange = function(pageSize) {
        if (0 === pageSize) {
            this.plugins.callAction(_plugins.SetPageSize, "all")
        } else {
            this.plugins.callAction(_plugins.SetPageSize, pageSize)
        }
    };
    _proto.onPageIndexChange = function(pageIndex) {
        this.plugins.callAction(_plugins.SetPageIndex, pageIndex)
    };
    _proto.componentWillUpdate = function(nextProps, nextState, context) {
        _InfernoComponent.prototype.componentWillUpdate.call(this);
        if (this.state.pageSize !== nextState.pageSize || this.props.allowedPageSizes !== nextProps.allowedPageSizes) {
            this.__getterCache.allowedPageSizes = void 0
        }
    };
    _proto.render = function() {
        var props = this.props;
        return viewFunction({
            props: _extends({}, props),
            pageSize: this.state.pageSize,
            plugins: this.plugins,
            onPageSizeChange: this.onPageSizeChange,
            onPageIndexChange: this.onPageIndexChange,
            allowedPageSizes: this.allowedPageSizes,
            restAttributes: this.restAttributes
        })
    };
    _createClass(DataGridNextPager, [{
        key: "plugins",
        get: function() {
            if ("PluginsContext" in this.context) {
                return this.context.PluginsContext
            }
            return _context.PluginsContext
        }
    }, {
        key: "allowedPageSizes",
        get: function() {
            var _this3 = this;
            if (void 0 !== this.__getterCache.allowedPageSizes) {
                return this.__getterCache.allowedPageSizes
            }
            return this.__getterCache.allowedPageSizes = function() {
                var pageSize = _this3.state.pageSize;
                if ("auto" === _this3.props.allowedPageSizes) {
                    if ("all" === pageSize) {
                        return []
                    }
                    return [Math.floor(pageSize / 2), pageSize, 2 * pageSize]
                }
                return _this3.props.allowedPageSizes
            }()
        }
    }, {
        key: "restAttributes",
        get: function() {
            var _this$props = this.props,
                restProps = (_this$props.allowedPageSizes, _this$props.displayMode, _this$props.infoText, _this$props.showInfo, _this$props.showNavigationButtons, _this$props.showPageSizeSelector, _this$props.visible, _objectWithoutProperties(_this$props, _excluded));
            return restProps
        }
    }]);
    return DataGridNextPager
}(_inferno2.InfernoComponent);
exports.DataGridNextPager = DataGridNextPager;
DataGridNextPager.defaultProps = DataGridNextPagerProps;
