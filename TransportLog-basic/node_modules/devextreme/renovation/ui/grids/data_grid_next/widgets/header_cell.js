/**
 * DevExtreme (renovation/ui/grids/data_grid_next/widgets/header_cell.js)
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
exports.viewFunction = exports.HeaderCellProps = exports.HeaderCell = void 0;
var _inferno = require("inferno");
var _inferno2 = require("@devextreme/runtime/inferno");
var _combine_classes = require("../../../../utils/combine_classes");
var _classes = _interopRequireDefault(require("../classes"));
var _excluded = ["column", "columnIndex", "countColumn", "headerTemplate"];

function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    }
}

function _objectWithoutProperties(source, excluded) {
    if (null == source) {
        return {}
    }
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) {
                continue
            }
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) {
                continue
            }
            target[key] = source[key]
        }
    }
    return target
}

function _objectWithoutPropertiesLoose(source, excluded) {
    if (null == source) {
        return {}
    }
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) {
            continue
        }
        target[key] = source[key]
    }
    return target
}

function _defineProperty(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        })
    } else {
        obj[key] = value
    }
    return obj
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) {
            descriptor.writable = true
        }
        Object.defineProperty(target, descriptor.key, descriptor)
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) {
        _defineProperties(Constructor.prototype, protoProps)
    }
    if (staticProps) {
        _defineProperties(Constructor, staticProps)
    }
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor
}

function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass)
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(o, p) {
        o.__proto__ = p;
        return o
    };
    return _setPrototypeOf(o, p)
}

function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
        for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
                if (Object.prototype.hasOwnProperty.call(source, key)) {
                    target[key] = source[key]
                }
            }
        }
        return target
    };
    return _extends.apply(this, arguments)
}
var viewFunction = function(_ref) {
    var classes = _ref.classes,
        _ref$props = _ref.props,
        column = _ref$props.column,
        columnIndex = _ref$props.columnIndex,
        HeaderTemplate = _ref$props.headerTemplate;
    return (0, _inferno.createVNode)(1, "td", classes, (0, _inferno.createVNode)(1, "div", "".concat(_classes.default.textContent, " ").concat(_classes.default.textContentAlignmentLeft), HeaderTemplate ? HeaderTemplate({}) : column.dataField, 0, {
        role: "presentation"
    }), 2, {
        "aria-selected": "false",
        role: "columnheader",
        id: "dx-col-".concat(columnIndex + 1),
        "aria-label": "ColumnInternal ".concat(column.dataField),
        "aria-sort": "none",
        tabIndex: 0
    })
};
exports.viewFunction = viewFunction;
var HeaderCellProps = {
    column: Object.freeze({}),
    columnIndex: 0,
    countColumn: 0
};
exports.HeaderCellProps = HeaderCellProps;
var getTemplate = function(TemplateProp) {
    return TemplateProp && (TemplateProp.defaultProps ? function(props) {
        return (0, _inferno.normalizeProps)((0, _inferno.createComponentVNode)(2, TemplateProp, _extends({}, props)))
    } : TemplateProp)
};
var HeaderCell = function(_BaseInfernoComponent) {
    _inheritsLoose(HeaderCell, _BaseInfernoComponent);

    function HeaderCell(props) {
        var _this;
        _this = _BaseInfernoComponent.call(this, props) || this;
        _this.state = {};
        return _this
    }
    var _proto = HeaderCell.prototype;
    _proto.render = function() {
        var props = this.props;
        return viewFunction({
            props: _extends({}, props, {
                headerTemplate: getTemplate(props.headerTemplate)
            }),
            classes: this.classes,
            restAttributes: this.restAttributes
        })
    };
    _createClass(HeaderCell, [{
        key: "classes",
        get: function() {
            var _classesMap;
            var _this$props = this.props,
                columnIndex = _this$props.columnIndex,
                countColumn = _this$props.countColumn;
            var classesMap = (_classesMap = {}, _defineProperty(_classesMap, _classes.default.action, true), _defineProperty(_classesMap, _classes.default.cellFocusDisabled, true), _defineProperty(_classesMap, _classes.default.firstChild, 0 === columnIndex), _defineProperty(_classesMap, _classes.default.lastChild, columnIndex === countColumn - 1), _classesMap);
            if (this.props.column.headerCssClass) {
                classesMap[this.props.column.headerCssClass] = true
            }
            return (0, _combine_classes.combineClasses)(classesMap)
        }
    }, {
        key: "restAttributes",
        get: function() {
            var _this$props2 = this.props,
                restProps = (_this$props2.column, _this$props2.columnIndex, _this$props2.countColumn, _this$props2.headerTemplate, _objectWithoutProperties(_this$props2, _excluded));
            return restProps
        }
    }]);
    return HeaderCell
}(_inferno2.BaseInfernoComponent);
exports.HeaderCell = HeaderCell;
HeaderCell.defaultProps = HeaderCellProps;
