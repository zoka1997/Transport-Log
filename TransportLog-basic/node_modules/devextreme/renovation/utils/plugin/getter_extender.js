/**
 * DevExtreme (renovation/utils/plugin/getter_extender.js)
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
"use strict";
exports.viewFunction = exports.GetterExtenderProps = exports.GetterExtender = void 0;
var _inferno = require("inferno");
var _inferno2 = require("@devextreme/runtime/inferno");
var _context = require("./context");
var _excluded = ["order", "type", "value"];

function _objectWithoutProperties(source, excluded) {
    if (null == source) {
        return {}
    }
    var target = _objectWithoutPropertiesLoose(source, excluded);
    var key, i;
    if (Object.getOwnPropertySymbols) {
        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
        for (i = 0; i < sourceSymbolKeys.length; i++) {
            key = sourceSymbolKeys[i];
            if (excluded.indexOf(key) >= 0) {
                continue
            }
            if (!Object.prototype.propertyIsEnumerable.call(source, key)) {
                continue
            }
            target[key] = source[key]
        }
    }
    return target
}

function _objectWithoutPropertiesLoose(source, excluded) {
    if (null == source) {
        return {}
    }
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
        key = sourceKeys[i];
        if (excluded.indexOf(key) >= 0) {
            continue
        }
        target[key] = source[key]
    }
    return target
}

function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) {
            descriptor.writable = true
        }
        Object.defineProperty(target, descriptor.key, descriptor)
    }
}

function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) {
        _defineProperties(Constructor.prototype, protoProps)
    }
    if (staticProps) {
        _defineProperties(Constructor, staticProps)
    }
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor
}

function _assertThisInitialized(self) {
    if (void 0 === self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called")
    }
    return self
}

function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass)
}

function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(o, p) {
        o.__proto__ = p;
        return o
    };
    return _setPrototypeOf(o, p)
}
var viewFunction = function() {
    return (0, _inferno.createVNode)(1, "div")
};
exports.viewFunction = viewFunction;
var GetterExtenderProps = {};
exports.GetterExtenderProps = GetterExtenderProps;
var GetterExtender = function(_InfernoComponent) {
    _inheritsLoose(GetterExtender, _InfernoComponent);

    function GetterExtender(props) {
        var _this;
        _this = _InfernoComponent.call(this, props) || this;
        _this.state = {};
        _this.updateExtender = _this.updateExtender.bind(_assertThisInitialized(_this));
        return _this
    }
    var _proto = GetterExtender.prototype;
    _proto.createEffects = function() {
        return [new _inferno2.InfernoEffect(this.updateExtender, [this.props.value, this.plugins, this.props.type, this.props.order])]
    };
    _proto.updateEffects = function() {
        var _this$_effects$;
        null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.props.value, this.plugins, this.props.type, this.props.order])
    };
    _proto.updateExtender = function() {
        var _this2 = this;
        var value = this.props.value;
        if (value instanceof _context.PluginSelector) {
            return this.plugins.extend(this.props.type, this.props.order, value.func, value.deps)
        }
        return this.plugins.extend(this.props.type, this.props.order, (function() {
            return _this2.plugins.getValue(value)
        }), [value])
    };
    _proto.render = function() {
        this.props;
        return viewFunction()
    };
    _createClass(GetterExtender, [{
        key: "plugins",
        get: function() {
            if ("PluginsContext" in this.context) {
                return this.context.PluginsContext
            }
            return _context.PluginsContext
        }
    }, {
        key: "restAttributes",
        get: function() {
            var _this$props = this.props,
                restProps = (_this$props.order, _this$props.type, _this$props.value, _objectWithoutProperties(_this$props, _excluded));
            return restProps
        }
    }]);
    return GetterExtender
}(_inferno2.InfernoComponent);
exports.GetterExtender = GetterExtender;
GetterExtender.defaultProps = GetterExtenderProps;
