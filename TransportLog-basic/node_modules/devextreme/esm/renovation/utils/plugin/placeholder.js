/**
 * DevExtreme (esm/renovation/utils/plugin/placeholder.js)
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["children", "column", "type"];
import {
    createComponentVNode
} from "inferno";
import {
    InfernoEffect,
    InfernoComponent
} from "@devextreme/runtime/inferno";
import {
    PlaceholderItem
} from "./placeholder_item";
import {
    PluginsContext
} from "./context";
export var viewFunction = _ref => {
    var {
        componentDeps: componentDeps,
        componentTypes: componentTypes,
        props: {
            children: children,
            column: column
        }
    } = _ref;
    return createComponentVNode(2, PlaceholderItem, {
        componentTypes: componentTypes,
        componentDeps: componentDeps,
        column: column,
        index: 0,
        children: children
    })
};
export var PlaceholderProps = {};
export class Placeholder extends InfernoComponent {
    constructor(props) {
        super(props);
        this.state = {
            componentTypes: [],
            componentDeps: []
        };
        this.updateComponentTypes = this.updateComponentTypes.bind(this)
    }
    get plugins() {
        if ("PluginsContext" in this.context) {
            return this.context.PluginsContext
        }
        return PluginsContext
    }
    createEffects() {
        return [new InfernoEffect(this.updateComponentTypes, [this.plugins, this.props.type])]
    }
    updateEffects() {
        var _this$_effects$;
        null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.plugins, this.props.type])
    }
    updateComponentTypes() {
        return this.plugins.watch(this.props.type, items => {
            this.setState(__state_argument => ({
                componentTypes: items.map(item => item.component).reverse()
            }));
            this.setState(__state_argument => ({
                componentDeps: items.map(item => item.deps).reverse()
            }))
        })
    }
    get restAttributes() {
        var _this$props = this.props,
            restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);
        return restProps
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: _extends({}, props),
            componentTypes: this.state.componentTypes,
            componentDeps: this.state.componentDeps,
            plugins: this.plugins,
            restAttributes: this.restAttributes
        })
    }
}
Placeholder.defaultProps = PlaceholderProps;
