/**
 * DevExtreme (esm/renovation/ui/grids/data_grid_next/selection/select_checkbox.js)
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["data"];
import {
    createComponentVNode
} from "inferno";
import {
    InfernoEffect,
    InfernoComponent
} from "@devextreme/runtime/inferno";
import {
    PluginsContext
} from "../../../../utils/plugin/context";
import CLASSES from "../classes";
import {
    CheckBox
} from "../../../editors/check_box/check_box";
import {
    IsSelected,
    SetSelected
} from "./plugins";
export var viewFunction = viewModel => createComponentVNode(2, CheckBox, {
    className: "".concat(CLASSES.selectCheckbox, " ").concat(CLASSES.checkboxSize),
    value: viewModel.isSelected,
    valueChange: viewModel.setSelected
});
export var SelectionCheckboxProps = {};
export class SelectionCheckbox extends InfernoComponent {
    constructor(props) {
        super(props);
        this.state = {
            isSelected: false
        };
        this.updateIsSelected = this.updateIsSelected.bind(this);
        this.setSelected = this.setSelected.bind(this)
    }
    get plugins() {
        if ("PluginsContext" in this.context) {
            return this.context.PluginsContext
        }
        return PluginsContext
    }
    createEffects() {
        return [new InfernoEffect(this.updateIsSelected, [this.plugins, this.props.data])]
    }
    updateEffects() {
        var _this$_effects$;
        null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.plugins, this.props.data])
    }
    updateIsSelected() {
        return this.plugins.watch(IsSelected, isSelected => {
            var newSelected = isSelected(this.props.data);
            this.setState(__state_argument => ({
                isSelected: newSelected
            }))
        })
    }
    setSelected(isSelected) {
        this.plugins.callAction(SetSelected, this.props.data, isSelected)
    }
    get restAttributes() {
        var _this$props = this.props,
            restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);
        return restProps
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: _extends({}, props),
            isSelected: this.state.isSelected,
            plugins: this.plugins,
            setSelected: this.setSelected,
            restAttributes: this.restAttributes
        })
    }
}
SelectionCheckbox.defaultProps = SelectionCheckboxProps;
