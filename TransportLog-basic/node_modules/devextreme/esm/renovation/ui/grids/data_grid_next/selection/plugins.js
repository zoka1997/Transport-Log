/**
 * DevExtreme (esm/renovation/ui/grids/data_grid_next/selection/plugins.js)
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import _extends from "@babel/runtime/helpers/esm/extends";
import {
    createSelector,
    createValue
} from "../../../../utils/plugin/context";
import {
    LocalData,
    KeyExprPlugin,
    VisibleColumns,
    LocalVisibleItems
} from "../plugins";
import {
    createGetKey
} from "../utils";
import {
    RowClassesGetter,
    RowPropertiesGetter
} from "../widgets/row_base";
import CLASSES from "../classes";
var getKey = createGetKey("Selection");
export var SelectionModeValue = createValue();
export var AllowSelectAllValue = createValue();
export var SelectAllModeValue = createValue();
export var SelectedRowKeys = createValue();
export var SetSelectedRowKeys = createValue();
export var SelectableItems = createSelector([SelectAllModeValue, LocalData, LocalVisibleItems], (selectAllModeValue, allItems, visibleItems) => "allPages" === selectAllModeValue ? allItems : visibleItems);
export var SelectableCount = createSelector([SelectableItems], selectableItems => selectableItems.length);
export var SelectedCount = createSelector([SelectedRowKeys], selectedRowKeys => selectedRowKeys.length);
export var SetSelected = createSelector([SetSelectedRowKeys, SelectedRowKeys, SelectionModeValue, KeyExprPlugin], (setSelectedRowKeys, selectedRowKeys, selectionMode, keyExpr) => (data, value) => {
    var key = getKey(data, keyExpr);
    if (value) {
        if ("multiple" === selectionMode) {
            setSelectedRowKeys([...selectedRowKeys, key])
        } else {
            setSelectedRowKeys([key])
        }
    } else {
        setSelectedRowKeys(selectedRowKeys.filter(i => i !== key))
    }
});
export var IsSelected = createSelector([SelectedRowKeys, KeyExprPlugin], (selectedRowKeys, keyExpr) => data => selectedRowKeys.includes(getKey(data, keyExpr)));
export var ToggleSelected = createSelector([SetSelected, IsSelected, SelectionModeValue], (setSelected, isSelected, selectionMode) => data => {
    if ("none" !== selectionMode) {
        var selected = isSelected(data);
        setSelected(data, !selected)
    }
});
export var SelectAll = createSelector([SetSelectedRowKeys, SelectableItems, KeyExprPlugin], (setSelectedRowKeys, selectableItems, keyExpr) => () => {
    setSelectedRowKeys(selectableItems.map(item => getKey(item, keyExpr)))
});
export var ClearSelection = createSelector([SetSelectedRowKeys], setSelectedRowKeys => () => setSelectedRowKeys([]));
export var SelectionCheckboxTemplate = createValue();
export var SelectAllCheckboxTemplate = createValue();
export var AddSelectionColumnToVisibleColumns = createSelector([VisibleColumns, SelectionModeValue, AllowSelectAllValue, SelectionCheckboxTemplate, SelectAllCheckboxTemplate], (visibleColumns, selectionMode, allowSelectAll, selectionCheckboxTemplate, selectAllCheckboxTemplate) => {
    if ("none" === selectionMode) {
        return visibleColumns
    }
    var selectColumn = {
        cellTemplate: selectionCheckboxTemplate
    };
    if ("multiple" === selectionMode && allowSelectAll) {
        selectColumn.headerTemplate = selectAllCheckboxTemplate
    }
    return [selectColumn, ...visibleColumns]
});
export var AddSelectionToRowProperties = createSelector([RowPropertiesGetter, IsSelected], (base, isSelected) => row => {
    if ("data" === row.rowType && isSelected(row.data)) {
        return _extends({}, base(row), {
            "aria-selected": true
        })
    }
    return base(row)
});
export var AddSelectionToRowClasses = createSelector([RowClassesGetter, IsSelected], (base, isSelected) => row => {
    if ("data" === row.rowType && isSelected(row.data)) {
        return _extends({}, base(row), {
            [CLASSES.selectedRow]: true
        })
    }
    return base(row)
});
