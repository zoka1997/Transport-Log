/**
 * DevExtreme (esm/renovation/ui/grids/data_grid_next/scrolling/plugins.js)
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import {
    createValue,
    createGetter,
    createSelector
} from "../../../../utils/plugin/context";
import {
    VisibleRows,
    TotalCount,
    DataStateValue
} from "../plugins";
import {
    PageSize
} from "../paging/plugins";
import {
    RowsViewHeightValue
} from "../views/table_content";
import {
    calculateViewportItemIndex,
    getVirtualContentOffset,
    getNormalizedPageSize,
    calculatePageIndexByItemIndex
} from "./utils";
export var ScrollingModeValue = createValue();
export var TopScrollingPositionValue = createValue();
export var ViewportSkipValue = createGetter(0);
export var ViewportTakeValue = createGetter(0);
export var ItemHeightsValue = createValue();
export var RowHeightValue = createValue();
export var TopVirtualRowHeightValue = createGetter(0);
export var BottomVirtualRowHeightValue = createGetter(0);
export var ViewportPageIndex = createGetter(0);
export var ViewportLoadPageCount = createGetter(0);
export var CalculateViewportSkipValue = createSelector([TopScrollingPositionValue, RowHeightValue, ItemHeightsValue, TotalCount], (topScrollingPosition, rowHeight, itemHeights, totalCount) => {
    var topScrollPosition = null !== topScrollingPosition && void 0 !== topScrollingPosition ? topScrollingPosition : 0;
    var topIndex = calculateViewportItemIndex(topScrollPosition, rowHeight, itemHeights);
    var skip = topIndex > totalCount ? totalCount : topIndex;
    return Math.floor(skip)
});
export var CalculateViewportTakeValue = createSelector([ScrollingModeValue, TotalCount, RowsViewHeightValue, TopScrollingPositionValue, ViewportSkipValue, RowHeightValue, ItemHeightsValue], (scrollingMode, totalCount, rowsViewHeight, topScrollingPosition, skip, rowHeight, itemHeights) => {
    var virtualMode = "virtual" === scrollingMode;
    var totalItemsCount = null !== totalCount && void 0 !== totalCount ? totalCount : 0;
    var viewportHeight = null !== rowsViewHeight && void 0 !== rowsViewHeight ? rowsViewHeight : 0;
    var topScrollPosition = null !== topScrollingPosition && void 0 !== topScrollingPosition ? topScrollingPosition : 0;
    var bottomIndex = calculateViewportItemIndex(topScrollPosition + viewportHeight, rowHeight, itemHeights);
    var take = Math.ceil(bottomIndex - skip);
    if (virtualMode) {
        var remainedItems = Math.max(0, totalItemsCount - skip);
        take = Math.min(take, remainedItems)
    }
    return take
});
export var AddLoadIndexToVisibleRows = createSelector([VisibleRows, DataStateValue], (visibleRows, dataState) => {
    var _dataState$dataOffset;
    var loadIndex = (null !== (_dataState$dataOffset = dataState.dataOffset) && void 0 !== _dataState$dataOffset ? _dataState$dataOffset : 0) - 1;
    var newRows = visibleRows.map(row => {
        var r = row;
        if ("data" === r.rowType) {
            loadIndex += 1
        }
        r.loadIndex = loadIndex;
        return r
    });
    return newRows
});
export var CalculateVisibleRowsInViewport = createSelector([VisibleRows, ViewportSkipValue, ViewportTakeValue], (visibleRows, skip, take) => visibleRows.filter(row => {
    var isLoadIndexGreaterStart = void 0 !== row.loadIndex && row.loadIndex >= skip;
    var isLoadIndexLessEnd = void 0 !== row.loadIndex && row.loadIndex < skip + take;
    return isLoadIndexGreaterStart && isLoadIndexLessEnd
}));
export var CalculateTopVirtualRowHeight = createSelector([ViewportSkipValue, RowHeightValue, TotalCount, ItemHeightsValue], (skip, rowHeight, totalCount, itemHeights) => getVirtualContentOffset("top", skip, totalCount, itemHeights, rowHeight));
export var CalculateBottomVirtualRowHeight = createSelector([ViewportSkipValue, TotalCount, RowHeightValue, ItemHeightsValue, VisibleRows], (skip, totalCount, rowHeight, itemHeights, visibleRows) => {
    var rowCount = visibleRows.filter(r => "data" === r.rowType).length;
    return getVirtualContentOffset("bottom", totalCount - skip - rowCount, totalCount, itemHeights, rowHeight)
});
export var CalculateViewportPageIndex = createSelector([ViewportSkipValue, PageSize, TotalCount], (skip, pageSize, totalCount) => {
    var pSize = getNormalizedPageSize(pageSize);
    return calculatePageIndexByItemIndex(skip, pSize, totalCount)
});
export var CalculateViewportLoadPageCount = createSelector([ViewportSkipValue, ViewportTakeValue, PageSize, ViewportPageIndex], (skip, take, pageSize, viewportPageIndex) => {
    var pSize = getNormalizedPageSize(pageSize);
    var pageOffset = viewportPageIndex * pSize;
    var skipForCurrentPage = skip - pageOffset;
    return Math.ceil(pageSize > 0 ? (take + skipForCurrentPage) / pageSize : 0)
});
