/**
 * DevExtreme (esm/renovation/ui/grids/data_grid_next/views/table_content.js)
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
var _excluded = ["columns", "noDataTemplate", "visibleRows"];
import {
    createVNode,
    createFragment,
    createComponentVNode,
    normalizeProps
} from "inferno";
import {
    Fragment
} from "inferno";
import {
    InfernoEffect,
    InfernoComponent
} from "@devextreme/runtime/inferno";
import resizeObserverSingleton from "../../../../../core/resize_observer";
import {
    ValueSetter
} from "../../../../utils/plugin/value_setter";
import {
    Table
} from "../widgets/table";
import {
    DataRow
} from "../widgets/data_row";
import {
    NoDataText
} from "../widgets/no_data_text";
import {
    createValue,
    PluginsContext,
    createPlaceholder
} from "../../../../utils/plugin/context";
import eventsEngine from "../../../../../events/core/events_engine";
import {
    name as clickEvent
} from "../../../../../events/click";
import CLASSES from "../classes";
import {
    getReactRowKey,
    getElementHeight
} from "../utils";
import {
    combineClasses
} from "../../../../utils/combine_classes";
import {
    Placeholder
} from "../../../../utils/plugin/placeholder";
import {
    Scrollable
} from "../../../scroll_view/scrollable";
import {
    TotalCount
} from "../plugins";
export var TopRowPlaceholder = createPlaceholder();
export var BottomRowPlaceholder = createPlaceholder();
export var RowClick = createValue();
export var RowsViewScroll = createValue();
export var RowsViewHeight = createValue();
export var SetRowsViewScrollPositionAction = createValue();
export var RowsViewHeightValue = createValue();
export var SetRowsViewContentRenderAction = createValue();
export var SetRowsViewOffsetAction = createValue();
export var viewFunction = viewModel => createVNode(1, "div", viewModel.classes, [createComponentVNode(2, Scrollable, {
    onScroll: viewModel.onScrollContent,
    children: createVNode(1, "div", "".concat(CLASSES.content), createComponentVNode(2, Table, {
        children: createFragment([createComponentVNode(2, Placeholder, {
            type: TopRowPlaceholder
        }), viewModel.rows.map(item => createComponentVNode(2, DataRow, {
            row: item,
            rowIndex: item.index,
            columns: viewModel.props.columns
        }, item.reactKey)), createComponentVNode(2, Placeholder, {
            type: BottomRowPlaceholder
        })], 0)
    }), 2, null, null, viewModel.divRef)
}, null, viewModel.scrollableRef), viewModel.isEmpty && createComponentVNode(2, NoDataText, {
    template: viewModel.props.noDataTemplate
}), createComponentVNode(2, ValueSetter, {
    type: SetRowsViewOffsetAction,
    value: viewModel.scrollTo
})], 0, {
    role: "presentation"
}, null, viewModel.rowsViewRef);
export var TableContentProps = {
    visibleRows: Object.freeze([]),
    columns: Object.freeze([])
};
import {
    createRef as infernoCreateRef
} from "inferno";
var getTemplate = TemplateProp => TemplateProp && (TemplateProp.defaultProps ? props => normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props))) : TemplateProp);
export class TableContent extends InfernoComponent {
    constructor(props) {
        super(props);
        this.state = {};
        this.rowsViewRef = infernoCreateRef();
        this.divRef = infernoCreateRef();
        this.scrollableRef = infernoCreateRef();
        this.__getterCache = {};
        this.subscribeToRowClick = this.subscribeToRowClick.bind(this);
        this.calculateRowsViewHeight = this.calculateRowsViewHeight.bind(this);
        this.rowsViewContentReady = this.rowsViewContentReady.bind(this);
        this.onRowClick = this.onRowClick.bind(this);
        this.onScrollContent = this.onScrollContent.bind(this);
        this.scrollTo = this.scrollTo.bind(this);
        this.onResize = this.onResize.bind(this)
    }
    get plugins() {
        if ("PluginsContext" in this.context) {
            return this.context.PluginsContext
        }
        return PluginsContext
    }
    createEffects() {
        return [new InfernoEffect(this.subscribeToRowClick, [this.plugins, this.props.visibleRows]), new InfernoEffect(this.calculateRowsViewHeight, [this.plugins]), new InfernoEffect(this.rowsViewContentReady, [this.props, this.plugins, this.props.visibleRows, this.props.columns, this.props.noDataTemplate])]
    }
    updateEffects() {
        var _this$_effects$, _this$_effects$2, _this$_effects$3;
        null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.plugins, this.props.visibleRows]);
        null === (_this$_effects$2 = this._effects[1]) || void 0 === _this$_effects$2 ? void 0 : _this$_effects$2.update([this.plugins]);
        null === (_this$_effects$3 = this._effects[2]) || void 0 === _this$_effects$3 ? void 0 : _this$_effects$3.update([this.props, this.plugins, this.props.visibleRows, this.props.columns, this.props.noDataTemplate])
    }
    subscribeToRowClick() {
        var onRowClick = this.onRowClick.bind(this);
        eventsEngine.on(this.divRef.current, clickEvent, ".".concat(CLASSES.row), onRowClick);
        return () => eventsEngine.off(this.divRef.current, clickEvent, onRowClick)
    }
    calculateRowsViewHeight() {
        this.onResize(this.rowsViewRef.current);
        resizeObserverSingleton.observe(this.rowsViewRef.current, _ref => {
            var {
                target: target
            } = _ref;
            this.onResize(target)
        });
        return () => {
            resizeObserverSingleton.unobserve(this.rowsViewRef.current)
        }
    }
    rowsViewContentReady() {
        var element = this.divRef.current;
        element && this.plugins.callAction(SetRowsViewContentRenderAction, element)
    }
    onRowClick(e) {
        var allRows = this.divRef.current.getElementsByClassName(CLASSES.row);
        var index = Array.from(allRows).indexOf(e.currentTarget);
        if (index >= 0) {
            this.plugins.callAction(RowClick, this.props.visibleRows[index], e)
        }
    }
    get classes() {
        return combineClasses({
            [CLASSES.rowsView]: true,
            [CLASSES.noWrap]: true,
            [CLASSES.afterHeaders]: true,
            [CLASSES.empty]: this.isEmpty
        })
    }
    get rows() {
        if (void 0 !== this.__getterCache.rows) {
            return this.__getterCache.rows
        }
        return this.__getterCache.rows = (() => this.props.visibleRows.map((row, index) => _extends({}, row, {
            index: index,
            reactKey: getReactRowKey(row, index)
        })))()
    }
    get isEmpty() {
        return 0 === this.plugins.getValue(TotalCount)
    }
    onScrollContent(e) {
        this.plugins.callAction(SetRowsViewScrollPositionAction, e.scrollOffset)
    }
    scrollTo(e) {
        var _this$scrollableRef$c;
        null === (_this$scrollableRef$c = this.scrollableRef.current) || void 0 === _this$scrollableRef$c ? void 0 : _this$scrollableRef$c.scrollTo(e)
    }
    onResize(target) {
        this.plugins.set(RowsViewHeightValue, getElementHeight(target))
    }
    get restAttributes() {
        var _this$props = this.props,
            restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);
        return restProps
    }
    componentWillUpdate(nextProps, nextState, context) {
        super.componentWillUpdate();
        if (this.props.visibleRows !== nextProps.visibleRows) {
            this.__getterCache.rows = void 0
        }
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: _extends({}, props, {
                noDataTemplate: getTemplate(props.noDataTemplate)
            }),
            rowsViewRef: this.rowsViewRef,
            divRef: this.divRef,
            scrollableRef: this.scrollableRef,
            plugins: this.plugins,
            onRowClick: this.onRowClick,
            classes: this.classes,
            rows: this.rows,
            isEmpty: this.isEmpty,
            onScrollContent: this.onScrollContent,
            scrollTo: this.scrollTo,
            onResize: this.onResize,
            restAttributes: this.restAttributes
        })
    }
}
TableContent.defaultProps = TableContentProps;
