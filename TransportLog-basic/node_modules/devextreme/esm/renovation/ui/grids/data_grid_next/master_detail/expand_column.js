/**
 * DevExtreme (esm/renovation/ui/grids/data_grid_next/master_detail/expand_column.js)
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["data"];
import {
    createVNode
} from "inferno";
import {
    InfernoEffect,
    InfernoComponent
} from "@devextreme/runtime/inferno";
import {
    PluginsContext
} from "../../../../utils/plugin/context";
import {
    IsExpanded,
    SetExpanded
} from "./plugins";
import eventsEngine from "../../../../../events/core/events_engine";
import {
    name as clickEvent
} from "../../../../../events/click";
import {
    KeyExprPlugin
} from "../plugins";
import {
    createGetKey
} from "../utils";
import CLASSES from "../classes";
var getKey = createGetKey("Master-Detail");
export var viewFunction = viewModel => createVNode(1, "td", "".concat(CLASSES.commandExpand, " ").concat(CLASSES.groupSpace, " ").concat(CLASSES.expand), createVNode(1, "div", viewModel.isExpanded ? CLASSES.groupOpened : CLASSES.groupClosed), 2, null, null, viewModel.cellRef);
export var ExpandColumnProps = {};
import {
    createRef as infernoCreateRef
} from "inferno";
export class ExpandColumn extends InfernoComponent {
    constructor(props) {
        super(props);
        this.cellRef = infernoCreateRef();
        this.state = {
            keyExpr: void 0,
            isExpanded: false
        };
        this.watchKeyExpr = this.watchKeyExpr.bind(this);
        this.updateIsExpanded = this.updateIsExpanded.bind(this);
        this.subscribeToRowClick = this.subscribeToRowClick.bind(this);
        this.onExpandColumnClick = this.onExpandColumnClick.bind(this);
        this.toggleExpanded = this.toggleExpanded.bind(this)
    }
    get plugins() {
        if ("PluginsContext" in this.context) {
            return this.context.PluginsContext
        }
        return PluginsContext
    }
    createEffects() {
        return [new InfernoEffect(this.watchKeyExpr, [this.plugins]), new InfernoEffect(this.updateIsExpanded, [this.plugins, this.props.data, this.state.keyExpr]), new InfernoEffect(this.subscribeToRowClick, [this.plugins, this.state.isExpanded, this.props.data, this.state.keyExpr])]
    }
    updateEffects() {
        var _this$_effects$, _this$_effects$2, _this$_effects$3;
        null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.plugins]);
        null === (_this$_effects$2 = this._effects[1]) || void 0 === _this$_effects$2 ? void 0 : _this$_effects$2.update([this.plugins, this.props.data, this.state.keyExpr]);
        null === (_this$_effects$3 = this._effects[2]) || void 0 === _this$_effects$3 ? void 0 : _this$_effects$3.update([this.plugins, this.state.isExpanded, this.props.data, this.state.keyExpr])
    }
    watchKeyExpr() {
        return this.plugins.watch(KeyExprPlugin, keyExpr => {
            this.setState(__state_argument => ({
                keyExpr: keyExpr
            }))
        })
    }
    updateIsExpanded() {
        return this.plugins.watch(IsExpanded, isExpanded => {
            this.setState(__state_argument => ({
                isExpanded: isExpanded(getKey(this.props.data, this.state.keyExpr))
            }))
        })
    }
    subscribeToRowClick() {
        eventsEngine.on(this.cellRef.current, clickEvent, this.onExpandColumnClick);
        return () => eventsEngine.off(this.cellRef.current, clickEvent, this.onExpandColumnClick)
    }
    onExpandColumnClick(e) {
        var target = e.target;
        if (target.closest(".dx-datagrid-expand")) {
            this.toggleExpanded(getKey(this.props.data, this.state.keyExpr))
        }
    }
    toggleExpanded(key) {
        this.plugins.callAction(SetExpanded, key, !this.state.isExpanded)
    }
    get restAttributes() {
        var _this$props = this.props,
            restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);
        return restProps
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: _extends({}, props),
            keyExpr: this.state.keyExpr,
            isExpanded: this.state.isExpanded,
            cellRef: this.cellRef,
            plugins: this.plugins,
            onExpandColumnClick: this.onExpandColumnClick,
            toggleExpanded: this.toggleExpanded,
            restAttributes: this.restAttributes
        })
    }
}
ExpandColumn.defaultProps = ExpandColumnProps;
