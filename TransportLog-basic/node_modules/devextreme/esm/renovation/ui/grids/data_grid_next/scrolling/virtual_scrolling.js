/**
 * DevExtreme (esm/renovation/ui/grids/data_grid_next/scrolling/virtual_scrolling.js)
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["mode"];
import {
    createFragment,
    createComponentVNode
} from "inferno";
import {
    Fragment
} from "inferno";
import {
    InfernoEffect,
    InfernoComponent
} from "@devextreme/runtime/inferno";
import {
    PluginsContext
} from "../../../../utils/plugin/context";
import {
    ValueSetter
} from "../../../../utils/plugin/value_setter";
import {
    GetterExtender
} from "../../../../utils/plugin/getter_extender";
import {
    SetRowsViewScrollPositionAction,
    SetRowsViewContentRenderAction,
    SetRowsViewOffsetAction
} from "../views/table_content";
import {
    VisibleRows,
    TotalCount
} from "../plugins";
import {
    SetPageIndex,
    PageIndex,
    PageSize,
    SetLoadPageCount
} from "../paging/plugins";
import {
    AddLoadIndexToVisibleRows,
    CalculateVisibleRowsInViewport,
    TopScrollingPositionValue,
    RowHeightValue,
    ItemHeightsValue,
    ViewportSkipValue,
    ViewportTakeValue,
    CalculateViewportSkipValue,
    CalculateViewportTakeValue,
    ViewportPageIndex,
    ViewportLoadPageCount,
    CalculateViewportPageIndex,
    CalculateViewportLoadPageCount
} from "./plugins";
import CLASSES from "../classes";
import {
    VirtualContent
} from "./virtual_content";
import {
    getElementHeight
} from "../utils";
import {
    DEFAULT_ROW_HEIGHT,
    calculateRowHeight,
    calculateItemHeights,
    getTopScrollPosition,
    calculateViewportItemIndex,
    getNormalizedPageSize,
    calculatePageIndexByItemIndex
} from "./utils";
export var viewFunction = _ref => {
    var {
        itemHeights: itemHeights,
        onRowsScrollPositionChange: onRowsScrollPositionChange,
        onRowsViewContentRender: onRowsViewContentRender,
        rowHeight: rowHeight,
        topScrollPosition: topScrollPosition
    } = _ref;
    return createFragment([createComponentVNode(2, ValueSetter, {
        type: SetRowsViewScrollPositionAction,
        value: onRowsScrollPositionChange
    }), createComponentVNode(2, ValueSetter, {
        type: SetRowsViewContentRenderAction,
        value: onRowsViewContentRender
    }), createComponentVNode(2, ValueSetter, {
        type: TopScrollingPositionValue,
        value: topScrollPosition
    }), createComponentVNode(2, ValueSetter, {
        type: RowHeightValue,
        value: rowHeight
    }), createComponentVNode(2, ValueSetter, {
        type: ItemHeightsValue,
        value: itemHeights
    }), createComponentVNode(2, GetterExtender, {
        type: ViewportSkipValue,
        order: 0,
        value: CalculateViewportSkipValue
    }), createComponentVNode(2, GetterExtender, {
        type: ViewportTakeValue,
        order: 0,
        value: CalculateViewportTakeValue
    }), createComponentVNode(2, GetterExtender, {
        type: VisibleRows,
        order: 1,
        value: AddLoadIndexToVisibleRows
    }), createComponentVNode(2, GetterExtender, {
        type: VisibleRows,
        order: 2,
        value: CalculateVisibleRowsInViewport
    }), createComponentVNode(2, GetterExtender, {
        type: ViewportPageIndex,
        order: 0,
        value: CalculateViewportPageIndex
    }), createComponentVNode(2, GetterExtender, {
        type: ViewportLoadPageCount,
        order: 0,
        value: CalculateViewportLoadPageCount
    }), createComponentVNode(2, VirtualContent)], 4)
};
export var VirtualScrollingProps = {
    mode: "virtual"
};
export class VirtualScrolling extends InfernoComponent {
    constructor(props) {
        super(props);
        this.visibleItemHeights = {};
        this.viewportPayload = {
            pageIndex: 0,
            topScrollPosition: 0
        };
        this.state = {
            topScrollPosition: 0,
            rowHeight: DEFAULT_ROW_HEIGHT,
            viewportState: "synchronized"
        };
        this.watchViewportPageIndex = this.watchViewportPageIndex.bind(this);
        this.watchViewportLoadPageCount = this.watchViewportLoadPageCount.bind(this);
        this.watchPageIndex = this.watchPageIndex.bind(this);
        this.onRowsScrollPositionChange = this.onRowsScrollPositionChange.bind(this);
        this.onRowsViewContentRender = this.onRowsViewContentRender.bind(this);
        this.updateVisibleItemHeights = this.updateVisibleItemHeights.bind(this);
        this.updateRowHeight = this.updateRowHeight.bind(this);
        this.updateViewportState = this.updateViewportState.bind(this)
    }
    get plugins() {
        if ("PluginsContext" in this.context) {
            return this.context.PluginsContext
        }
        return PluginsContext
    }
    createEffects() {
        return [new InfernoEffect(this.watchViewportPageIndex, [this.plugins]), new InfernoEffect(this.watchViewportLoadPageCount, [this.plugins]), new InfernoEffect(this.watchPageIndex, [this.plugins, this.state.topScrollPosition, this.state.viewportState, this.state.rowHeight])]
    }
    updateEffects() {
        var _this$_effects$, _this$_effects$2, _this$_effects$3;
        null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.plugins]);
        null === (_this$_effects$2 = this._effects[1]) || void 0 === _this$_effects$2 ? void 0 : _this$_effects$2.update([this.plugins]);
        null === (_this$_effects$3 = this._effects[2]) || void 0 === _this$_effects$3 ? void 0 : _this$_effects$3.update([this.plugins, this.state.topScrollPosition, this.state.viewportState, this.state.rowHeight])
    }
    watchViewportPageIndex() {
        return this.plugins.watch(ViewportPageIndex, pageIndex => {
            this.plugins.callAction(SetPageIndex, pageIndex)
        })
    }
    watchViewportLoadPageCount() {
        return this.plugins.watch(ViewportLoadPageCount, loadPageCount => {
            this.plugins.callAction(SetLoadPageCount, loadPageCount)
        })
    }
    watchPageIndex() {
        return this.plugins.watch(PageIndex, pageIndex => {
            this.updateViewportState({
                type: "paging",
                value: pageIndex
            })
        })
    }
    get itemHeights() {
        return this.visibleItemHeights
    }
    onRowsScrollPositionChange(offset) {
        this.updateViewportState({
            type: "scrolling",
            value: offset.top
        })
    }
    onRowsViewContentRender(element) {
        var rowElements = Array.from(element.querySelectorAll("tr.".concat(CLASSES.row, ":not(.").concat(CLASSES.virtualRow, ")")));
        var visibleRowHeights = rowElements.map(el => getElementHeight(el));
        this.updateVisibleItemHeights(visibleRowHeights);
        this.updateRowHeight(visibleRowHeights)
    }
    updateVisibleItemHeights(visibleRowHeights) {
        var _this$plugins$getValu, _this$plugins$getValu2;
        var visibleRows = null !== (_this$plugins$getValu = this.plugins.getValue(VisibleRows)) && void 0 !== _this$plugins$getValu ? _this$plugins$getValu : [];
        var skip = null !== (_this$plugins$getValu2 = this.plugins.getValue(ViewportSkipValue)) && void 0 !== _this$plugins$getValu2 ? _this$plugins$getValu2 : 0;
        var calculatedRowHeights = calculateItemHeights(visibleRows, visibleRowHeights);
        calculatedRowHeights.forEach((height, index) => {
            this.visibleItemHeights[skip + index] = height
        })
    }
    updateRowHeight(visibleRowHeights) {
        var newRowHeight = calculateRowHeight(visibleRowHeights, this.visibleItemHeights);
        this.setState(__state_argument => ({
            rowHeight: newRowHeight
        }))
    }
    updateViewportState(action) {
        var topScrollPositionCurrent = "scrolling" === action.type ? Math.abs(action.value) : 0;
        var pageIndexCurrent = "paging" === action.type ? action.value : 0;
        var pageIndexState = this.plugins.getValue(PageIndex);
        var {
            pageIndex: pageIndexPayload,
            topScrollPosition: topScrollPositionPayload
        } = this.viewportPayload;
        var isEqual_pageIndexPayloadToState = pageIndexState === pageIndexPayload,
            isEqual_pageIndexCurrentToPayload = pageIndexCurrent === pageIndexPayload,
            isEqual_topScrollPayloadToState = topScrollPositionPayload === this.state.topScrollPosition,
            isEqual_topScrollCurrentToPayload = topScrollPositionCurrent === topScrollPositionPayload;
        switch (this.state.viewportState) {
            case "scrolling":
                if (!isEqual_topScrollPayloadToState) {
                    this.setState(__state_argument => ({
                        topScrollPosition: topScrollPositionPayload
                    }));
                    this.setState(__state_argument => ({
                        viewportState: "synchronized"
                    }))
                }
                break;
            case "paging":
                var _this$plugins$getValu3;
                var pageSize = getNormalizedPageSize(null !== (_this$plugins$getValu3 = this.plugins.getValue(PageSize)) && void 0 !== _this$plugins$getValu3 ? _this$plugins$getValu3 : 0);
                if (pageSize > 0) {
                    var _this$plugins$getValu4;
                    var calculatedTopScrollPosition = Math.round(getTopScrollPosition(pageIndexPayload, pageSize, this.visibleItemHeights, this.state.rowHeight));
                    var viewportItemIndex = calculateViewportItemIndex(this.state.topScrollPosition, this.state.rowHeight, this.visibleItemHeights);
                    var totalCount = null !== (_this$plugins$getValu4 = this.plugins.getValue(TotalCount)) && void 0 !== _this$plugins$getValu4 ? _this$plugins$getValu4 : 0;
                    var calculatedPageIndex = calculatePageIndexByItemIndex(viewportItemIndex, pageSize, totalCount);
                    if (isEqual_pageIndexPayloadToState && calculatedPageIndex !== pageIndexPayload || !isEqual_pageIndexPayloadToState) {
                        var offset = {
                            top: calculatedTopScrollPosition
                        };
                        this.plugins.callAction(SetRowsViewOffsetAction, offset)
                    }
                }
                this.setState(__state_argument => ({
                    viewportState: "synchronized"
                }));
                break;
            default:
                if ("scrolling" === action.type) {
                    if (!isEqual_topScrollCurrentToPayload || !isEqual_topScrollPayloadToState) {
                        this.viewportPayload.topScrollPosition = topScrollPositionCurrent;
                        this.setState(__state_argument => ({
                            viewportState: "scrolling"
                        }))
                    }
                } else if (!isEqual_pageIndexPayloadToState || !isEqual_pageIndexCurrentToPayload) {
                    this.viewportPayload.pageIndex = pageIndexCurrent;
                    this.setState(__state_argument => ({
                        viewportState: "paging"
                    }))
                }
        }
    }
    get restAttributes() {
        var _this$props = this.props,
            restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);
        return restProps
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: _extends({}, props),
            topScrollPosition: this.state.topScrollPosition,
            rowHeight: this.state.rowHeight,
            viewportState: this.state.viewportState,
            plugins: this.plugins,
            itemHeights: this.itemHeights,
            onRowsScrollPositionChange: this.onRowsScrollPositionChange,
            onRowsViewContentRender: this.onRowsViewContentRender,
            updateVisibleItemHeights: this.updateVisibleItemHeights,
            updateRowHeight: this.updateRowHeight,
            updateViewportState: this.updateViewportState,
            restAttributes: this.restAttributes
        })
    }
}
VirtualScrolling.defaultProps = VirtualScrollingProps;
