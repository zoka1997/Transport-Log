/**
 * DevExtreme (esm/renovation/ui/grids/data_grid_next/pager/pager.js)
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["allowedPageSizes", "displayMode", "infoText", "showInfo", "showNavigationButtons", "showPageSizeSelector", "visible"];
import {
    createComponentVNode
} from "inferno";
import {
    InfernoEffect,
    InfernoComponent
} from "@devextreme/runtime/inferno";
import {
    PlaceholderExtender
} from "../../../../utils/plugin/placeholder_extender";
import messageLocalization from "../../../../../localization/message";
import {
    PagerContent
} from "../../../pager/content";
import {
    PageIndex,
    PageSize,
    PageCount,
    SetPageIndex,
    SetPageSize
} from "../paging/plugins";
import {
    TotalCount
} from "../plugins";
import {
    FooterPlaceholder
} from "../views/footer";
import {
    PluginsContext
} from "../../../../utils/plugin/context";
import CLASSES from "../classes";
export var viewFunction = _ref => {
    var {
        allowedPageSizes: allowedPageSizes,
        onPageIndexChange: onPageIndexChange,
        onPageSizeChange: onPageSizeChange,
        props: {
            displayMode: displayMode,
            infoText: infoText,
            showInfo: showInfo,
            showNavigationButtons: showNavigationButtons,
            showPageSizeSelector: showPageSizeSelector,
            visible: visible
        }
    } = _ref;
    return createComponentVNode(2, PlaceholderExtender, {
        type: FooterPlaceholder,
        order: 1,
        deps: [PageIndex, PageSize, TotalCount, PageCount],
        template: _ref2 => {
            var {
                deps: deps
            } = _ref2;
            return createComponentVNode(2, PagerContent, {
                className: CLASSES.pager,
                pageSizes: allowedPageSizes,
                displayMode: displayMode,
                infoText: infoText,
                showInfo: showInfo,
                showNavigationButtons: showNavigationButtons,
                showPageSizes: showPageSizeSelector,
                pageCount: deps[3],
                visible: visible,
                totalCount: deps[2],
                pageIndex: deps[0],
                pageIndexChange: onPageIndexChange,
                pageSize: "all" === deps[1] ? 0 : deps[1],
                pageSizeChange: onPageSizeChange
            })
        }
    })
};
export var DataGridNextPagerProps = {
    allowedPageSizes: "auto",
    displayMode: "adaptive",
    get infoText() {
        return messageLocalization.format("dxPager-infoText")
    },
    showInfo: false,
    showNavigationButtons: false,
    showPageSizeSelector: false,
    visible: true
};
export class DataGridNextPager extends InfernoComponent {
    constructor(props) {
        super(props);
        this.__getterCache = {};
        this.state = {
            pageSize: "all"
        };
        this.updatePageSize = this.updatePageSize.bind(this);
        this.onPageSizeChange = this.onPageSizeChange.bind(this);
        this.onPageIndexChange = this.onPageIndexChange.bind(this)
    }
    get plugins() {
        if ("PluginsContext" in this.context) {
            return this.context.PluginsContext
        }
        return PluginsContext
    }
    createEffects() {
        return [new InfernoEffect(this.updatePageSize, [this.plugins])]
    }
    updateEffects() {
        var _this$_effects$;
        null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.plugins])
    }
    updatePageSize() {
        return this.plugins.watch(PageSize, pageSize => {
            this.setState(__state_argument => ({
                pageSize: pageSize
            }))
        })
    }
    onPageSizeChange(pageSize) {
        if (0 === pageSize) {
            this.plugins.callAction(SetPageSize, "all")
        } else {
            this.plugins.callAction(SetPageSize, pageSize)
        }
    }
    onPageIndexChange(pageIndex) {
        this.plugins.callAction(SetPageIndex, pageIndex)
    }
    get allowedPageSizes() {
        if (void 0 !== this.__getterCache.allowedPageSizes) {
            return this.__getterCache.allowedPageSizes
        }
        return this.__getterCache.allowedPageSizes = (() => {
            var pageSize = this.state.pageSize;
            if ("auto" === this.props.allowedPageSizes) {
                if ("all" === pageSize) {
                    return []
                }
                return [Math.floor(pageSize / 2), pageSize, 2 * pageSize]
            }
            return this.props.allowedPageSizes
        })()
    }
    get restAttributes() {
        var _this$props = this.props,
            restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);
        return restProps
    }
    componentWillUpdate(nextProps, nextState, context) {
        super.componentWillUpdate();
        if (this.state.pageSize !== nextState.pageSize || this.props.allowedPageSizes !== nextProps.allowedPageSizes) {
            this.__getterCache.allowedPageSizes = void 0
        }
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: _extends({}, props),
            pageSize: this.state.pageSize,
            plugins: this.plugins,
            onPageSizeChange: this.onPageSizeChange,
            onPageIndexChange: this.onPageIndexChange,
            allowedPageSizes: this.allowedPageSizes,
            restAttributes: this.restAttributes
        })
    }
}
DataGridNextPager.defaultProps = DataGridNextPagerProps;
