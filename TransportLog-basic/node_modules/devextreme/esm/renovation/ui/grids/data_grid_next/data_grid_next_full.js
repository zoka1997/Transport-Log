/**
 * DevExtreme (esm/renovation/ui/grids/data_grid_next/data_grid_next_full.js)
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
var _excluded = ["accessKey", "activeStateEnabled", "cacheEnabled", "children", "className", "columns", "dataSource", "dataState", "dataStateChange", "defaultDataState", "disabled", "focusStateEnabled", "height", "hint", "hoverStateEnabled", "keyExpr", "masterDetail", "noDataTemplate", "onClick", "onDataErrorOccurred", "onKeyDown", "pager", "paging", "remoteOperations", "rtlEnabled", "selection", "tabIndex", "visible", "width"];
import {
    createComponentVNode,
    normalizeProps
} from "inferno";
import {
    InfernoWrapperComponent
} from "@devextreme/runtime/inferno";
import {
    DataGridNext as DataGridNextBase,
    DataGridNextProps as DataGridNextPropsBase
} from "./data_grid_next";
import {
    DataGridNextPaging
} from "./paging/paging";
import {
    DataGridNextPager
} from "./pager/pager";
import {
    DataGridNextSelection
} from "./selection/selection";
import {
    DataGridNextMasterDetail
} from "./master_detail/master_detail";
export var viewFunction = viewModel => {
    var _viewModel$props$pagi, _viewModel$props$pagi2, _viewModel$props$pagi3, _viewModel$props$page, _viewModel$props$page2, _viewModel$props$page3, _viewModel$props$page4, _viewModel$props$page5, _viewModel$props$page6, _viewModel$props$page7, _viewModel$props$sele, _viewModel$props$sele2, _viewModel$props$sele3, _viewModel$props$mast, _viewModel$props$mast2;
    return normalizeProps(createComponentVNode(2, DataGridNextBase, _extends({
        dataSource: viewModel.props.dataSource,
        cacheEnabled: viewModel.props.cacheEnabled,
        remoteOperations: viewModel.props.remoteOperations,
        dataState: viewModel.props.dataState,
        keyExpr: viewModel.props.keyExpr,
        columns: viewModel.props.columns,
        noDataTemplate: viewModel.props.noDataTemplate,
        onDataErrorOccurred: viewModel.props.onDataErrorOccurred,
        activeStateEnabled: viewModel.props.activeStateEnabled,
        className: viewModel.props.className,
        disabled: viewModel.props.disabled,
        focusStateEnabled: viewModel.props.focusStateEnabled,
        height: viewModel.props.height,
        hint: viewModel.props.hint,
        hoverStateEnabled: viewModel.props.hoverStateEnabled,
        rtlEnabled: viewModel.props.rtlEnabled,
        tabIndex: viewModel.props.tabIndex,
        visible: viewModel.props.visible,
        width: viewModel.props.width
    }, viewModel.restAttributes, {
        children: [createComponentVNode(2, DataGridNextPaging, {
            enabled: null === (_viewModel$props$pagi = viewModel.props.paging) || void 0 === _viewModel$props$pagi ? void 0 : _viewModel$props$pagi.enabled,
            pageIndex: null === (_viewModel$props$pagi2 = viewModel.props.paging) || void 0 === _viewModel$props$pagi2 ? void 0 : _viewModel$props$pagi2.pageIndex,
            pageSize: null === (_viewModel$props$pagi3 = viewModel.props.paging) || void 0 === _viewModel$props$pagi3 ? void 0 : _viewModel$props$pagi3.pageSize
        }), createComponentVNode(2, DataGridNextPager, {
            visible: null === (_viewModel$props$page = viewModel.props.pager) || void 0 === _viewModel$props$page ? void 0 : _viewModel$props$page.visible,
            showInfo: null === (_viewModel$props$page2 = viewModel.props.pager) || void 0 === _viewModel$props$page2 ? void 0 : _viewModel$props$page2.showInfo,
            showNavigationButtons: null === (_viewModel$props$page3 = viewModel.props.pager) || void 0 === _viewModel$props$page3 ? void 0 : _viewModel$props$page3.showNavigationButtons,
            showPageSizeSelector: null === (_viewModel$props$page4 = viewModel.props.pager) || void 0 === _viewModel$props$page4 ? void 0 : _viewModel$props$page4.showPageSizeSelector,
            allowedPageSizes: null === (_viewModel$props$page5 = viewModel.props.pager) || void 0 === _viewModel$props$page5 ? void 0 : _viewModel$props$page5.allowedPageSizes,
            displayMode: null === (_viewModel$props$page6 = viewModel.props.pager) || void 0 === _viewModel$props$page6 ? void 0 : _viewModel$props$page6.displayMode,
            infoText: null === (_viewModel$props$page7 = viewModel.props.pager) || void 0 === _viewModel$props$page7 ? void 0 : _viewModel$props$page7.infoText
        }), createComponentVNode(2, DataGridNextSelection, {
            mode: viewModel.selectionMode,
            selectedRowKeys: null === (_viewModel$props$sele = viewModel.props.selection) || void 0 === _viewModel$props$sele ? void 0 : _viewModel$props$sele.selectedRowKeys,
            allowSelectAll: null === (_viewModel$props$sele2 = viewModel.props.selection) || void 0 === _viewModel$props$sele2 ? void 0 : _viewModel$props$sele2.allowSelectAll,
            selectAllMode: null === (_viewModel$props$sele3 = viewModel.props.selection) || void 0 === _viewModel$props$sele3 ? void 0 : _viewModel$props$sele3.selectAllMode
        }), createComponentVNode(2, DataGridNextMasterDetail, {
            enabled: viewModel.masterDetailEnabled,
            expandedRowKeys: null === (_viewModel$props$mast = viewModel.props.masterDetail) || void 0 === _viewModel$props$mast ? void 0 : _viewModel$props$mast.expandedRowKeys,
            template: null === (_viewModel$props$mast2 = viewModel.props.masterDetail) || void 0 === _viewModel$props$mast2 ? void 0 : _viewModel$props$mast2.template
        })]
    }), null, viewModel.dataGrid))
};
export var DataGridNextProps = DataGridNextPropsBase;
import {
    convertRulesToOptions
} from "../../../../core/options/utils";
import {
    createReRenderEffect
} from "@devextreme/runtime/inferno";
import {
    createRef as infernoCreateRef
} from "inferno";
var getTemplate = TemplateProp => TemplateProp && (TemplateProp.defaultProps ? props => normalizeProps(createComponentVNode(2, TemplateProp, _extends({}, props))) : TemplateProp);
export class DataGridNext extends InfernoWrapperComponent {
    constructor(props) {
        super(props);
        this.dataGrid = infernoCreateRef();
        this.state = {
            dataState: void 0 !== this.props.dataState ? this.props.dataState : this.props.defaultDataState
        };
        this.refresh = this.refresh.bind(this)
    }
    createEffects() {
        return [createReRenderEffect()]
    }
    get masterDetailEnabled() {
        var _this$props$masterDet, _this$props$masterDet2;
        return null !== (_this$props$masterDet = null === (_this$props$masterDet2 = this.props.masterDetail) || void 0 === _this$props$masterDet2 ? void 0 : _this$props$masterDet2.enabled) && void 0 !== _this$props$masterDet ? _this$props$masterDet : false
    }
    get selectionMode() {
        var _this$props$selection, _this$props$selection2;
        return null !== (_this$props$selection = null === (_this$props$selection2 = this.props.selection) || void 0 === _this$props$selection2 ? void 0 : _this$props$selection2.mode) && void 0 !== _this$props$selection ? _this$props$selection : "none"
    }
    get restAttributes() {
        var _this$props$dataState = _extends({}, this.props, {
                dataState: void 0 !== this.props.dataState ? this.props.dataState : this.state.dataState
            }),
            restProps = _objectWithoutPropertiesLoose(_this$props$dataState, _excluded);
        return restProps
    }
    refresh() {
        return this.dataGrid.current.refresh()
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: _extends({}, props, {
                dataState: void 0 !== this.props.dataState ? this.props.dataState : this.state.dataState,
                noDataTemplate: getTemplate(props.noDataTemplate)
            }),
            dataGrid: this.dataGrid,
            masterDetailEnabled: this.masterDetailEnabled,
            selectionMode: this.selectionMode,
            restAttributes: this.restAttributes
        })
    }
}

function __processTwoWayProps(defaultProps) {
    var twoWayProps = ["dataState"];
    return Object.keys(defaultProps).reduce((props, propName) => {
        var propValue = defaultProps[propName];
        var defaultPropName = twoWayProps.some(p => p === propName) ? "default" + propName.charAt(0).toUpperCase() + propName.slice(1) : propName;
        props[defaultPropName] = propValue;
        return props
    }, {})
}
DataGridNext.defaultProps = DataGridNextProps;
var __defaultOptionRules = [];
export function defaultOptions(rule) {
    __defaultOptionRules.push(rule);
    DataGridNext.defaultProps = Object.create(Object.prototype, _extends(Object.getOwnPropertyDescriptors(DataGridNext.defaultProps), Object.getOwnPropertyDescriptors(__processTwoWayProps(convertRulesToOptions(__defaultOptionRules)))))
}
