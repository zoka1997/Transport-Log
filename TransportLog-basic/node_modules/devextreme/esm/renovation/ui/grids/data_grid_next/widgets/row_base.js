/**
 * DevExtreme (esm/renovation/ui/grids/data_grid_next/widgets/row_base.js)
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/esm/extends";
var _excluded = ["children", "row"];
import {
    createVNode,
    normalizeProps
} from "inferno";
import {
    InfernoEffect,
    InfernoComponent
} from "@devextreme/runtime/inferno";
import {
    combineClasses
} from "../../../../utils/combine_classes";
import {
    createGetter,
    PluginsContext
} from "../../../../utils/plugin/context";
import CLASSES from "../classes";
export var RowPropertiesGetter = createGetter(() => ({}));
export var RowClassesGetter = createGetter(() => ({}));
export var viewFunction = viewModel => normalizeProps(createVNode(1, "tr", viewModel.cssClasses, viewModel.props.children, 0, _extends({
    role: "row",
    "aria-selected": "false"
}, viewModel.additionalParams)));
export var RowBaseProps = {
    row: Object.freeze({
        data: {},
        rowType: "data"
    })
};
export class RowBase extends InfernoComponent {
    constructor(props) {
        super(props);
        this.state = {
            additionalParams: {},
            additionalClasses: {}
        };
        this.watchAdditionalParams = this.watchAdditionalParams.bind(this);
        this.watchAdditionalClasses = this.watchAdditionalClasses.bind(this)
    }
    get plugins() {
        if ("PluginsContext" in this.context) {
            return this.context.PluginsContext
        }
        return PluginsContext
    }
    createEffects() {
        return [new InfernoEffect(this.watchAdditionalParams, [this.plugins, this.props.row]), new InfernoEffect(this.watchAdditionalClasses, [this.plugins, this.props.row])]
    }
    updateEffects() {
        var _this$_effects$, _this$_effects$2;
        null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.plugins, this.props.row]);
        null === (_this$_effects$2 = this._effects[1]) || void 0 === _this$_effects$2 ? void 0 : _this$_effects$2.update([this.plugins, this.props.row])
    }
    watchAdditionalParams() {
        return this.plugins.watch(RowPropertiesGetter, getter => {
            this.setState(__state_argument => ({
                additionalParams: getter(this.props.row)
            }))
        })
    }
    watchAdditionalClasses() {
        return this.plugins.watch(RowClassesGetter, getter => {
            this.setState(__state_argument => ({
                additionalClasses: getter(this.props.row)
            }))
        })
    }
    get cssClasses() {
        return combineClasses(_extends({
            [CLASSES.row]: true,
            [CLASSES.columnLines]: true
        }, this.state.additionalClasses))
    }
    get restAttributes() {
        var _this$props = this.props,
            restProps = _objectWithoutPropertiesLoose(_this$props, _excluded);
        return restProps
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: _extends({}, props),
            additionalParams: this.state.additionalParams,
            additionalClasses: this.state.additionalClasses,
            plugins: this.plugins,
            cssClasses: this.cssClasses,
            restAttributes: this.restAttributes
        })
    }
}
RowBase.defaultProps = RowBaseProps;
