/**
 * DevExtreme (esm/renovation/ui/grids/data_grid_next/selection/selection.js)
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
var _excluded = ["allowSelectAll", "defaultSelectedRowKeys", "mode", "selectAllMode", "selectedRowKeys", "selectedRowKeysChange"];
import {
    createFragment,
    createComponentVNode
} from "inferno";
import {
    Fragment
} from "inferno";
import {
    InfernoEffect,
    InfernoComponent
} from "@devextreme/runtime/inferno";
import {
    PluginsContext
} from "../../../../utils/plugin/context";
import CLASSES from "../classes";
import {
    ValueSetter
} from "../../../../utils/plugin/value_setter";
import {
    TemplateSetter
} from "../../../../utils/plugin/template_setter";
import {
    GetterExtender
} from "../../../../utils/plugin/getter_extender";
import {
    SelectionCheckbox
} from "./select_checkbox";
import {
    SelectAllCheckbox
} from "./select_all_checkbox";
import {
    VisibleColumns
} from "../plugins";
import {
    RowClassesGetter,
    RowPropertiesGetter
} from "../widgets/row_base";
import {
    RowClick
} from "../views/table_content";
import {
    ClearSelection,
    SelectAll,
    SelectedRowKeys,
    SetSelectedRowKeys,
    SelectionModeValue,
    AllowSelectAllValue,
    ToggleSelected,
    SelectAllModeValue,
    SelectionCheckboxTemplate,
    SelectAllCheckboxTemplate,
    AddSelectionColumnToVisibleColumns,
    AddSelectionToRowClasses,
    AddSelectionToRowProperties
} from "./plugins";
export var viewFunction = viewModel => createFragment([createComponentVNode(2, ValueSetter, {
    type: SelectedRowKeys,
    value: viewModel.props.selectedRowKeys
}), createComponentVNode(2, ValueSetter, {
    type: SetSelectedRowKeys,
    value: viewModel.setSelectedRowKeys
}), createComponentVNode(2, ValueSetter, {
    type: SelectAllModeValue,
    value: viewModel.props.selectAllMode
}), createComponentVNode(2, ValueSetter, {
    type: SelectionModeValue,
    value: viewModel.props.mode
}), createComponentVNode(2, ValueSetter, {
    type: AllowSelectAllValue,
    value: viewModel.props.allowSelectAll
}), createComponentVNode(2, TemplateSetter, {
    type: SelectionCheckboxTemplate,
    template: _ref => {
        var {
            data: data
        } = _ref;
        return createComponentVNode(2, SelectionCheckbox, {
            data: data
        })
    }
}), createComponentVNode(2, TemplateSetter, {
    type: SelectAllCheckboxTemplate,
    template: SelectAllCheckbox
}), createComponentVNode(2, GetterExtender, {
    type: VisibleColumns,
    order: 2,
    value: AddSelectionColumnToVisibleColumns
}), createComponentVNode(2, GetterExtender, {
    type: RowPropertiesGetter,
    order: 1,
    value: AddSelectionToRowProperties
}), createComponentVNode(2, GetterExtender, {
    type: RowClassesGetter,
    order: 1,
    value: AddSelectionToRowClasses
})], 4);
export var DataGridNextSelectionProps = {
    mode: "single",
    allowSelectAll: true,
    selectAllMode: "allPages",
    defaultSelectedRowKeys: Object.freeze([]),
    selectedRowKeysChange: () => {}
};
export class DataGridNextSelection extends InfernoComponent {
    constructor(props) {
        super(props);
        this.state = {
            selectedRowKeys: void 0 !== this.props.selectedRowKeys ? this.props.selectedRowKeys : this.props.defaultSelectedRowKeys
        };
        this.setRowClickEvent = this.setRowClickEvent.bind(this);
        this.selectAll = this.selectAll.bind(this);
        this.clearSelection = this.clearSelection.bind(this);
        this.setSelectedRowKeys = this.setSelectedRowKeys.bind(this)
    }
    get plugins() {
        if ("PluginsContext" in this.context) {
            return this.context.PluginsContext
        }
        return PluginsContext
    }
    createEffects() {
        return [new InfernoEffect(this.setRowClickEvent, [this.plugins])]
    }
    updateEffects() {
        var _this$_effects$;
        null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.plugins])
    }
    setRowClickEvent() {
        this.plugins.set(RowClick, (row, event) => {
            var isSelectCheckBox = Boolean(event.target.closest(".".concat(CLASSES.selectCheckbox)));
            if (!isSelectCheckBox) {
                this.plugins.callAction(ToggleSelected, row.data)
            }
        })
    }
    setSelectedRowKeys(keys) {
        var __newValue;
        this.setState(__state_argument => {
            __newValue = keys;
            return {
                selectedRowKeys: __newValue
            }
        });
        this.props.selectedRowKeysChange(__newValue)
    }
    get restAttributes() {
        var _this$props$selectedR = _extends({}, this.props, {
                selectedRowKeys: void 0 !== this.props.selectedRowKeys ? this.props.selectedRowKeys : this.state.selectedRowKeys
            }),
            restProps = _objectWithoutPropertiesLoose(_this$props$selectedR, _excluded);
        return restProps
    }
    selectAll() {
        this.plugins.callAction(SelectAll)
    }
    clearSelection() {
        this.plugins.callAction(ClearSelection)
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: _extends({}, props, {
                selectedRowKeys: void 0 !== this.props.selectedRowKeys ? this.props.selectedRowKeys : this.state.selectedRowKeys
            }),
            plugins: this.plugins,
            setSelectedRowKeys: this.setSelectedRowKeys,
            restAttributes: this.restAttributes
        })
    }
}
DataGridNextSelection.defaultProps = DataGridNextSelectionProps;
