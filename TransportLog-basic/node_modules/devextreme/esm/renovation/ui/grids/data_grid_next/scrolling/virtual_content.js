/**
 * DevExtreme (esm/renovation/ui/grids/data_grid_next/scrolling/virtual_content.js)
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/
 */
import _objectDestructuringEmpty from "@babel/runtime/helpers/esm/objectDestructuringEmpty";
import _extends from "@babel/runtime/helpers/esm/extends";
import {
    createFragment,
    createComponentVNode
} from "inferno";
import {
    Fragment
} from "inferno";
import {
    InfernoEffect,
    InfernoComponent
} from "@devextreme/runtime/inferno";
import {
    PluginsContext
} from "../../../../utils/plugin/context";
import {
    PlaceholderExtender
} from "../../../../utils/plugin/placeholder_extender";
import {
    TopRowPlaceholder,
    BottomRowPlaceholder
} from "../views/table_content";
import {
    TopVirtualRowHeightValue,
    BottomVirtualRowHeightValue,
    CalculateTopVirtualRowHeight,
    CalculateBottomVirtualRowHeight
} from "./plugins";
import {
    VirtualRow
} from "./virtual_row";
import {
    VisibleColumns
} from "../plugins";
import {
    GetterExtender
} from "../../../../utils/plugin/getter_extender";
export var viewFunction = _ref => {
    var {
        bottomHeight: bottomHeight,
        cellClasses: cellClasses,
        topHeight: topHeight
    } = _ref;
    return createFragment([createComponentVNode(2, GetterExtender, {
        type: TopVirtualRowHeightValue,
        order: 0,
        value: CalculateTopVirtualRowHeight
    }), createComponentVNode(2, GetterExtender, {
        type: BottomVirtualRowHeightValue,
        order: 0,
        value: CalculateBottomVirtualRowHeight
    }), topHeight > 0 && createComponentVNode(2, PlaceholderExtender, {
        type: TopRowPlaceholder,
        order: 1,
        template: () => createComponentVNode(2, VirtualRow, {
            height: topHeight,
            cellClasses: cellClasses,
            rowKey: -1
        })
    }), bottomHeight > 0 && createComponentVNode(2, PlaceholderExtender, {
        type: BottomRowPlaceholder,
        order: 1,
        template: () => createComponentVNode(2, VirtualRow, {
            height: bottomHeight,
            cellClasses: cellClasses,
            rowKey: -2
        })
    })], 0)
};
export var VirtualContentProps = {};
export class VirtualContent extends InfernoComponent {
    constructor(props) {
        super(props);
        this.state = {
            topHeight: 0,
            bottomHeight: 0,
            cellClasses: []
        };
        this.watchVisibleColumns = this.watchVisibleColumns.bind(this);
        this.watchTopVirtualRowHeight = this.watchTopVirtualRowHeight.bind(this);
        this.watchBottomVirtualRowHeight = this.watchBottomVirtualRowHeight.bind(this)
    }
    get plugins() {
        if ("PluginsContext" in this.context) {
            return this.context.PluginsContext
        }
        return PluginsContext
    }
    createEffects() {
        return [new InfernoEffect(this.watchVisibleColumns, [this.plugins]), new InfernoEffect(this.watchTopVirtualRowHeight, [this.plugins]), new InfernoEffect(this.watchBottomVirtualRowHeight, [this.plugins])]
    }
    updateEffects() {
        var _this$_effects$, _this$_effects$2, _this$_effects$3;
        null === (_this$_effects$ = this._effects[0]) || void 0 === _this$_effects$ ? void 0 : _this$_effects$.update([this.plugins]);
        null === (_this$_effects$2 = this._effects[1]) || void 0 === _this$_effects$2 ? void 0 : _this$_effects$2.update([this.plugins]);
        null === (_this$_effects$3 = this._effects[2]) || void 0 === _this$_effects$3 ? void 0 : _this$_effects$3.update([this.plugins])
    }
    watchVisibleColumns() {
        return this.plugins.watch(VisibleColumns, visibleColumns => {
            this.setState(__state_argument => ({
                cellClasses: Array(visibleColumns.length).fill("").map((_, index) => {
                    var _visibleColumns$index;
                    return null !== (_visibleColumns$index = visibleColumns[index].headerCssClass) && void 0 !== _visibleColumns$index ? _visibleColumns$index : ""
                })
            }))
        })
    }
    watchTopVirtualRowHeight() {
        return this.plugins.watch(TopVirtualRowHeightValue, height => {
            this.setState(__state_argument => ({
                topHeight: height
            }))
        })
    }
    watchBottomVirtualRowHeight() {
        return this.plugins.watch(BottomVirtualRowHeightValue, height => {
            this.setState(__state_argument => ({
                bottomHeight: height
            }))
        })
    }
    get restAttributes() {
        var _this$props = this.props,
            restProps = _extends({}, (_objectDestructuringEmpty(_this$props), _this$props));
        return restProps
    }
    render() {
        var props = this.props;
        return viewFunction({
            props: _extends({}, props),
            topHeight: this.state.topHeight,
            bottomHeight: this.state.bottomHeight,
            cellClasses: this.state.cellClasses,
            plugins: this.plugins,
            restAttributes: this.restAttributes
        })
    }
}
VirtualContent.defaultProps = VirtualContentProps;
