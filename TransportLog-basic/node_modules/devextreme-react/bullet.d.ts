/*!
 * devextreme-react
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
import dxBullet, { Properties } from "devextreme/viz/bullet";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import NestedOption from "./core/nested-option";
declare type IBulletOptions = React.PropsWithChildren<Properties & IHtmlOptions & {}>;
declare class Bullet extends BaseComponent<React.PropsWithChildren<IBulletOptions>> {
    get instance(): dxBullet;
    protected _WidgetClass: typeof dxBullet;
    protected independentEvents: string[];
    protected _expectedChildren: {
        margin: {
            optionName: string;
            isCollectionItem: boolean;
        };
        size: {
            optionName: string;
            isCollectionItem: boolean;
        };
        tooltip: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IBorderProps = React.PropsWithChildren<{
    color?: any;
    dashStyle?: any;
    opacity?: any;
    visible?: any;
    width?: any;
}>;
declare class Border extends NestedOption<IBorderProps> {
    static OptionName: string;
}
declare type IFontProps = React.PropsWithChildren<{
    color?: any;
    family?: any;
    opacity?: any;
    size?: any;
    weight?: any;
}>;
declare class Font extends NestedOption<IFontProps> {
    static OptionName: string;
}
declare type IFormatProps = React.PropsWithChildren<{
    currency?: any;
    formatter?: any;
    parser?: any;
    precision?: any;
    type?: any;
    useCurrencyAccountingStyle?: any;
}>;
declare class Format extends NestedOption<IFormatProps> {
    static OptionName: string;
}
declare type IMarginProps = React.PropsWithChildren<{
    bottom?: any;
    left?: any;
    right?: any;
    top?: any;
}>;
declare class Margin extends NestedOption<IMarginProps> {
    static OptionName: string;
}
declare type IShadowProps = React.PropsWithChildren<{
    blur?: any;
    color?: any;
    offsetX?: any;
    offsetY?: any;
    opacity?: any;
}>;
declare class Shadow extends NestedOption<IShadowProps> {
    static OptionName: string;
}
declare type ISizeProps = React.PropsWithChildren<{
    height?: any;
    width?: any;
}>;
declare class Size extends NestedOption<ISizeProps> {
    static OptionName: string;
}
declare type ITooltipProps = React.PropsWithChildren<{
    arrowLength?: any;
    border?: object | {
        color?: any;
        dashStyle?: any;
        opacity?: any;
        visible?: any;
        width?: any;
    };
    color?: any;
    container?: any;
    contentTemplate?: any;
    cornerRadius?: any;
    customizeTooltip?: any;
    enabled?: any;
    font?: any;
    format?: any;
    interactive?: any;
    opacity?: any;
    paddingLeftRight?: any;
    paddingTopBottom?: any;
    shadow?: object | {
        blur?: any;
        color?: any;
        offsetX?: any;
        offsetY?: any;
        opacity?: any;
    };
    zIndex?: any;
    contentRender?: (...params: any) => React.ReactNode;
    contentComponent?: React.ComponentType<any>;
    contentKeyFn?: (data: any) => string;
}>;
declare class Tooltip extends NestedOption<ITooltipProps> {
    static OptionName: string;
    static ExpectedChildren: {
        border: {
            optionName: string;
            isCollectionItem: boolean;
        };
        font: {
            optionName: string;
            isCollectionItem: boolean;
        };
        format: {
            optionName: string;
            isCollectionItem: boolean;
        };
        shadow: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
export default Bullet;
export { Bullet, IBulletOptions, Border, IBorderProps, Font, IFontProps, Format, IFormatProps, Margin, IMarginProps, Shadow, IShadowProps, Size, ISizeProps, Tooltip, ITooltipProps };
