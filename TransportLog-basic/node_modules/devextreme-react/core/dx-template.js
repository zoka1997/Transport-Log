/*!
 * devextreme-react
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createDxTemplate = void 0;
var React = require("react");
var helpers_1 = require("./helpers");
var template_wrapper_1 = require("./template-wrapper");
var component_base_1 = require("./component-base");
var events = require("devextreme/events");
function unwrapElement(element) {
    return element.get ? element.get(0) : element;
}
function createDxTemplate(createContentProvider, templatesStore, keyFn) {
    var renderedTemplates = new helpers_1.DoubleKeyMap();
    return {
        render: function (data) {
            var container = unwrapElement(data.container);
            var key = { key1: data.model, key2: container };
            var prevTemplateId = renderedTemplates.get(key);
            var templateId;
            var onRemoved = function () {
                templatesStore.setDeferredRemove(templateId, true);
                renderedTemplates.delete(key);
            };
            var _subscribeOnContainerRemoval = function () {
                if (container.nodeType === Node.ELEMENT_NODE) {
                    events.one(container, component_base_1.DX_REMOVE_EVENT, onRemoved);
                }
            };
            var _unsubscribeOnContainerRemoval = function () {
                if (container.nodeType === Node.ELEMENT_NODE) {
                    events.off(container, component_base_1.DX_REMOVE_EVENT, onRemoved);
                }
            };
            if (prevTemplateId) {
                templateId = prevTemplateId;
            }
            else {
                templateId = keyFn ? keyFn(data.model) : "__template_" + helpers_1.generateID();
                if (data.model !== undefined) {
                    renderedTemplates.set(key, templateId);
                }
            }
            _subscribeOnContainerRemoval();
            templatesStore.add(templateId, function () {
                var props = {
                    data: data.model,
                    index: data.index,
                };
                var contentProvider = createContentProvider();
                return React.createElement(template_wrapper_1.TemplateWrapper, {
                    content: contentProvider(props),
                    container: container,
                    onRemoved: onRemoved,
                    onDidMount: function () {
                        var _a;
                        _unsubscribeOnContainerRemoval();
                        templatesStore.setDeferredRemove(templateId, false);
                        (_a = data.onRendered) === null || _a === void 0 ? void 0 : _a.call(data);
                    },
                    key: templateId,
                });
            });
            return container;
        },
    };
}
exports.createDxTemplate = createDxTemplate;
