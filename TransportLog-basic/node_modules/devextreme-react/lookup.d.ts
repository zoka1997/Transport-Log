/*!
 * devextreme-react
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
import dxLookup, { Properties } from "devextreme/ui/lookup";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import NestedOption from "./core/nested-option";
declare type ILookupOptions = React.PropsWithChildren<Properties & IHtmlOptions & {
    fieldRender?: (...params: any) => React.ReactNode;
    fieldComponent?: React.ComponentType<any>;
    fieldKeyFn?: (data: any) => string;
    groupRender?: (...params: any) => React.ReactNode;
    groupComponent?: React.ComponentType<any>;
    groupKeyFn?: (data: any) => string;
    itemRender?: (...params: any) => React.ReactNode;
    itemComponent?: React.ComponentType<any>;
    itemKeyFn?: (data: any) => string;
    defaultOpened?: any;
    defaultValue?: any;
    onOpenedChange?: (value: any) => void;
    onValueChange?: (value: any) => void;
}>;
declare class Lookup extends BaseComponent<React.PropsWithChildren<ILookupOptions>> {
    get instance(): dxLookup;
    protected _WidgetClass: typeof dxLookup;
    protected subscribableOptions: string[];
    protected independentEvents: string[];
    protected _defaults: {
        defaultOpened: string;
        defaultValue: string;
    };
    protected _expectedChildren: {
        dropDownOptions: {
            optionName: string;
            isCollectionItem: boolean;
        };
        item: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    protected _templateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare type IAnimationProps = React.PropsWithChildren<{
    hide?: any;
    show?: any;
}>;
declare class Animation extends NestedOption<IAnimationProps> {
    static OptionName: string;
    static ExpectedChildren: {
        hide: {
            optionName: string;
            isCollectionItem: boolean;
        };
        show: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IAtProps = React.PropsWithChildren<{
    x?: any;
    y?: any;
}>;
declare class At extends NestedOption<IAtProps> {
    static OptionName: string;
}
declare type IBoundaryOffsetProps = React.PropsWithChildren<{
    x?: any;
    y?: any;
}>;
declare class BoundaryOffset extends NestedOption<IBoundaryOffsetProps> {
    static OptionName: string;
}
declare type ICollisionProps = React.PropsWithChildren<{
    x?: any;
    y?: any;
}>;
declare class Collision extends NestedOption<ICollisionProps> {
    static OptionName: string;
}
declare type IDropDownOptionsProps = React.PropsWithChildren<{
    accessKey?: any;
    activeStateEnabled?: any;
    animation?: object | {
        hide?: any;
        show?: any;
    };
    bindingOptions?: any;
    closeOnOutsideClick?: any;
    container?: any;
    contentTemplate?: any;
    copyRootClassesToWrapper?: any;
    deferRendering?: any;
    disabled?: any;
    dragAndResizeArea?: any;
    dragEnabled?: any;
    dragOutsideBoundary?: any;
    elementAttr?: any;
    focusStateEnabled?: any;
    fullScreen?: any;
    height?: any;
    hideEvent?: object | string | {
        delay?: any;
        name?: any;
    };
    hideOnOutsideClick?: any;
    hideOnParentScroll?: any;
    hint?: any;
    hoverStateEnabled?: any;
    maxHeight?: any;
    maxWidth?: any;
    minHeight?: any;
    minWidth?: any;
    onContentReady?: any;
    onDisposing?: any;
    onFocusIn?: any;
    onFocusOut?: any;
    onHidden?: any;
    onHiding?: any;
    onInitialized?: any;
    onOptionChanged?: any;
    onResize?: any;
    onResizeEnd?: any;
    onResizeStart?: any;
    onShowing?: any;
    onShown?: any;
    onTitleRendered?: any;
    position?: any;
    resizeEnabled?: any;
    restorePosition?: any;
    rtlEnabled?: any;
    shading?: any;
    shadingColor?: any;
    showCloseButton?: any;
    showEvent?: object | string | {
        delay?: any;
        name?: any;
    };
    showTitle?: any;
    tabIndex?: any;
    target?: any;
    title?: any;
    titleTemplate?: any;
    toolbarItems?: {
        disabled?: any;
        html?: any;
        location?: any;
        options?: any;
        template?: any;
        text?: any;
        toolbar?: any;
        visible?: any;
        widget?: any;
    }[];
    visible?: any;
    width?: any;
    wrapperAttr?: any;
    defaultHeight?: any;
    onHeightChange?: (value: any) => void;
    defaultPosition?: any;
    onPositionChange?: (value: any) => void;
    defaultVisible?: any;
    onVisibleChange?: (value: any) => void;
    defaultWidth?: any;
    onWidthChange?: (value: any) => void;
    contentRender?: (...params: any) => React.ReactNode;
    contentComponent?: React.ComponentType<any>;
    contentKeyFn?: (data: any) => string;
    titleRender?: (...params: any) => React.ReactNode;
    titleComponent?: React.ComponentType<any>;
    titleKeyFn?: (data: any) => string;
}>;
declare class DropDownOptions extends NestedOption<IDropDownOptionsProps> {
    static OptionName: string;
    static DefaultsProps: {
        defaultHeight: string;
        defaultPosition: string;
        defaultVisible: string;
        defaultWidth: string;
    };
    static ExpectedChildren: {
        animation: {
            optionName: string;
            isCollectionItem: boolean;
        };
        hideEvent: {
            optionName: string;
            isCollectionItem: boolean;
        };
        position: {
            optionName: string;
            isCollectionItem: boolean;
        };
        showEvent: {
            optionName: string;
            isCollectionItem: boolean;
        };
        toolbarItem: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare type IFromProps = React.PropsWithChildren<{
    left?: any;
    opacity?: any;
    position?: any;
    scale?: any;
    top?: any;
}>;
declare class From extends NestedOption<IFromProps> {
    static OptionName: string;
    static ExpectedChildren: {
        position: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IHideProps = React.PropsWithChildren<{
    complete?: any;
    delay?: any;
    direction?: any;
    duration?: any;
    easing?: any;
    from?: any;
    staggerDelay?: any;
    start?: any;
    to?: any;
    type?: any;
}>;
declare class Hide extends NestedOption<IHideProps> {
    static OptionName: string;
    static ExpectedChildren: {
        from: {
            optionName: string;
            isCollectionItem: boolean;
        };
        to: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IHideEventProps = React.PropsWithChildren<{
    delay?: any;
    name?: any;
}>;
declare class HideEvent extends NestedOption<IHideEventProps> {
    static OptionName: string;
}
declare type IItemProps = React.PropsWithChildren<{
    disabled?: any;
    html?: any;
    template?: any;
    text?: any;
    visible?: any;
    render?: (...params: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}>;
declare class Item extends NestedOption<IItemProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
declare type IMyProps = React.PropsWithChildren<{
    x?: any;
    y?: any;
}>;
declare class My extends NestedOption<IMyProps> {
    static OptionName: string;
}
declare type IOffsetProps = React.PropsWithChildren<{
    x?: any;
    y?: any;
}>;
declare class Offset extends NestedOption<IOffsetProps> {
    static OptionName: string;
}
declare type IPositionProps = React.PropsWithChildren<{
    at?: object | string | {
        x?: any;
        y?: any;
    };
    boundary?: any;
    boundaryOffset?: object | string | {
        x?: any;
        y?: any;
    };
    collision?: object | string | {
        x?: any;
        y?: any;
    };
    my?: object | string | {
        x?: any;
        y?: any;
    };
    of?: any;
    offset?: object | string | {
        x?: any;
        y?: any;
    };
}>;
declare class Position extends NestedOption<IPositionProps> {
    static OptionName: string;
}
declare type IShowProps = React.PropsWithChildren<{
    complete?: any;
    delay?: any;
    direction?: any;
    duration?: any;
    easing?: any;
    from?: any;
    staggerDelay?: any;
    start?: any;
    to?: any;
    type?: any;
}>;
declare class Show extends NestedOption<IShowProps> {
    static OptionName: string;
}
declare type IShowEventProps = React.PropsWithChildren<{
    delay?: any;
    name?: any;
}>;
declare class ShowEvent extends NestedOption<IShowEventProps> {
    static OptionName: string;
}
declare type IToProps = React.PropsWithChildren<{
    left?: any;
    opacity?: any;
    position?: any;
    scale?: any;
    top?: any;
}>;
declare class To extends NestedOption<IToProps> {
    static OptionName: string;
}
declare type IToolbarItemProps = React.PropsWithChildren<{
    disabled?: any;
    html?: any;
    location?: any;
    options?: any;
    template?: any;
    text?: any;
    toolbar?: any;
    visible?: any;
    widget?: any;
    render?: (...params: any) => React.ReactNode;
    component?: React.ComponentType<any>;
    keyFn?: (data: any) => string;
}>;
declare class ToolbarItem extends NestedOption<IToolbarItemProps> {
    static OptionName: string;
    static IsCollectionItem: boolean;
    static TemplateProps: {
        tmplOption: string;
        render: string;
        component: string;
        keyFn: string;
    }[];
}
export default Lookup;
export { Lookup, ILookupOptions, Animation, IAnimationProps, At, IAtProps, BoundaryOffset, IBoundaryOffsetProps, Collision, ICollisionProps, DropDownOptions, IDropDownOptionsProps, From, IFromProps, Hide, IHideProps, HideEvent, IHideEventProps, Item, IItemProps, My, IMyProps, Offset, IOffsetProps, Position, IPositionProps, Show, IShowProps, ShowEvent, IShowEventProps, To, IToProps, ToolbarItem, IToolbarItemProps };
