/*!
 * devextreme-react
 * Version: 22.1.6
 * Build date: Tue Oct 18 2022
 *
 * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-react
 */

/// <reference types="react" />
import dxLoadPanel, { Properties } from "devextreme/ui/load_panel";
import { Component as BaseComponent, IHtmlOptions } from "./core/component";
import NestedOption from "./core/nested-option";
declare type ILoadPanelOptions = React.PropsWithChildren<Properties & IHtmlOptions & {
    defaultPosition?: any;
    defaultVisible?: any;
    onPositionChange?: (value: any) => void;
    onVisibleChange?: (value: any) => void;
}>;
declare class LoadPanel extends BaseComponent<React.PropsWithChildren<ILoadPanelOptions>> {
    get instance(): dxLoadPanel;
    protected _WidgetClass: typeof dxLoadPanel;
    protected isPortalComponent: boolean;
    protected subscribableOptions: string[];
    protected independentEvents: string[];
    protected _defaults: {
        defaultPosition: string;
        defaultVisible: string;
    };
    protected _expectedChildren: {
        animation: {
            optionName: string;
            isCollectionItem: boolean;
        };
        position: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IAnimationProps = React.PropsWithChildren<{
    hide?: any;
    show?: any;
}>;
declare class Animation extends NestedOption<IAnimationProps> {
    static OptionName: string;
    static ExpectedChildren: {
        hide: {
            optionName: string;
            isCollectionItem: boolean;
        };
        show: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IAtProps = React.PropsWithChildren<{
    x?: any;
    y?: any;
}>;
declare class At extends NestedOption<IAtProps> {
    static OptionName: string;
}
declare type IBoundaryOffsetProps = React.PropsWithChildren<{
    x?: any;
    y?: any;
}>;
declare class BoundaryOffset extends NestedOption<IBoundaryOffsetProps> {
    static OptionName: string;
}
declare type ICollisionProps = React.PropsWithChildren<{
    x?: any;
    y?: any;
}>;
declare class Collision extends NestedOption<ICollisionProps> {
    static OptionName: string;
}
declare type IFromProps = React.PropsWithChildren<{
    left?: any;
    opacity?: any;
    position?: any;
    scale?: any;
    top?: any;
}>;
declare class From extends NestedOption<IFromProps> {
    static OptionName: string;
    static ExpectedChildren: {
        position: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IHideProps = React.PropsWithChildren<{
    complete?: any;
    delay?: any;
    direction?: any;
    duration?: any;
    easing?: any;
    from?: any;
    staggerDelay?: any;
    start?: any;
    to?: any;
    type?: any;
}>;
declare class Hide extends NestedOption<IHideProps> {
    static OptionName: string;
    static ExpectedChildren: {
        from: {
            optionName: string;
            isCollectionItem: boolean;
        };
        to: {
            optionName: string;
            isCollectionItem: boolean;
        };
    };
}
declare type IMyProps = React.PropsWithChildren<{
    x?: any;
    y?: any;
}>;
declare class My extends NestedOption<IMyProps> {
    static OptionName: string;
}
declare type IOffsetProps = React.PropsWithChildren<{
    x?: any;
    y?: any;
}>;
declare class Offset extends NestedOption<IOffsetProps> {
    static OptionName: string;
}
declare type IPositionProps = React.PropsWithChildren<{
    at?: object | string | {
        x?: any;
        y?: any;
    };
    boundary?: any;
    boundaryOffset?: object | string | {
        x?: any;
        y?: any;
    };
    collision?: object | string | {
        x?: any;
        y?: any;
    };
    my?: object | string | {
        x?: any;
        y?: any;
    };
    of?: any;
    offset?: object | string | {
        x?: any;
        y?: any;
    };
}>;
declare class Position extends NestedOption<IPositionProps> {
    static OptionName: string;
}
declare type IShowProps = React.PropsWithChildren<{
    complete?: any;
    delay?: any;
    direction?: any;
    duration?: any;
    easing?: any;
    from?: any;
    staggerDelay?: any;
    start?: any;
    to?: any;
    type?: any;
}>;
declare class Show extends NestedOption<IShowProps> {
    static OptionName: string;
}
declare type IToProps = React.PropsWithChildren<{
    left?: any;
    opacity?: any;
    position?: any;
    scale?: any;
    top?: any;
}>;
declare class To extends NestedOption<IToProps> {
    static OptionName: string;
}
export default LoadPanel;
export { LoadPanel, ILoadPanelOptions, Animation, IAnimationProps, At, IAtProps, BoundaryOffset, IBoundaryOffsetProps, Collision, ICollisionProps, From, IFromProps, Hide, IHideProps, My, IMyProps, Offset, IOffsetProps, Position, IPositionProps, Show, IShowProps, To, IToProps };
